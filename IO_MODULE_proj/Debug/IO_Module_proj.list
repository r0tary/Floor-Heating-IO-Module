
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f73c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fae4  0800fae4  0001fae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800faf0  0800faf0  0001faf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800faf4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024ac  20000080  0800fb68  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000252c  0800fb68  0002252c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003093b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006021  00000000  00000000  00050a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c30  00000000  00000000  00056a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000222e  00000000  00000000  00059680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028e42  00000000  00000000  0005b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002fa1c  00000000  00000000  000846f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101e21  00000000  00000000  000b410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bedc  00000000  00000000  001b5f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001c1e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f864 	.word	0x0800f864

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	0800f864 	.word	0x0800f864

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <ADC_Temp_Thread_Start>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ADC_Temp_Thread_Start+0x24>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <ADC_Temp_Thread_Start+0x28>)
 8000c22:	f009 f831 	bl	8009c88 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <ADC_Temp_Thread_Start+0x2c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <ADC_Temp_Thread_Start+0x30>)
 8000c2e:	f009 f8d8 	bl	8009de2 <osEventFlagsNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ADC_Temp_Thread_Start+0x34>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800f970 	.word	0x0800f970
 8000c40:	08001291 	.word	0x08001291
 8000c44:	20000758 	.word	0x20000758
 8000c48:	0800f994 	.word	0x0800f994
 8000c4c:	2000075c 	.word	0x2000075c

08000c50 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c60:	f023 0218 	bic.w	r2, r3, #24
 8000c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fe72 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f872 	bl	8000dd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cec:	f000 f8e6 	bl	8000ebc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 fa50 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf4:	f000 fa2c 	bl	8001150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cf8:	f000 f9b6 	bl	8001068 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000cfc:	f000 fa00 	bl	8001100 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d00:	f000 f90e 	bl	8000f20 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d04:	f000 f970 	bl	8000fe8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <main+0xc8>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <main+0xc8>)
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <main+0xcc>)
 8000d12:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <main+0xc8>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <main+0xc8>)
 8000d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d20:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <main+0xc8>)
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <main+0xd0>)
 8000d28:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <main+0xc8>)
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <main+0xc8>)
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <main+0xd4>)
 8000d34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <main+0xc8>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <main+0xd8>)
 8000d3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <main+0xc8>)
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <main+0xdc>)
 8000d44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <main+0xc8>)
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <main+0xe0>)
 8000d4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <main+0xc8>)
 8000d52:	220a      	movs	r2, #10
 8000d54:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <main+0xc8>)
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0xc8>)
 8000d62:	220a      	movs	r2, #10
 8000d64:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <main+0xc8>)
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <main+0xc8>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <main+0xc8>)
 8000d7a:	f00c ff57 	bl	800dc2c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <main+0xc8>)
 8000d80:	f00c fff6 	bl	800dd70 <ModbusStart>

  //Initialize the SSD1306 OLED
  ssd1306_Init();
 8000d84:	f00e fc4c 	bl	800f620 <ssd1306_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d88:	f008 ff34 	bl	8009bf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <main+0xe4>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <main+0xe8>)
 8000d92:	f008 ff79 	bl	8009c88 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <main+0xec>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000d9c:	f7ff ff3c 	bl	8000c18 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000da0:	f008 ff4c 	bl	8009c3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0xc4>
 8000da6:	bf00      	nop
 8000da8:	20000600 	.word	0x20000600
 8000dac:	200001b4 	.word	0x200001b4
 8000db0:	48000800 	.word	0x48000800
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000001c 	.word	0x2000001c
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000058 	.word	0x20000058
 8000dc4:	0800f94c 	.word	0x0800f94c
 8000dc8:	08001359 	.word	0x08001359
 8000dcc:	200005fc 	.word	0x200005fc

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09a      	sub	sp, #104	; 0x68
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2248      	movs	r2, #72	; 0x48
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00e fd06 	bl	800f7f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e04:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f023 0303 	bic.w	r3, r3, #3
 8000e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1a:	f003 fe87 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff16 	bl	8000c50 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000e40:	2327      	movs	r3, #39	; 0x27
 8000e42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f9fd 	bl	800526c <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e78:	f000 fa88 	bl	800138c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e7c:	236f      	movs	r3, #111	; 0x6f
 8000e7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e80:	2302      	movs	r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fd59 	bl	8005954 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ea8:	f000 fa70 	bl	800138c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000eac:	f005 fb46 	bl	800653c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eb0:	bf00      	nop
 8000eb2:	3768      	adds	r7, #104	; 0x68
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58000400 	.word	0x58000400

08000ebc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2250      	movs	r2, #80	; 0x50
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00e fc91 	bl	800f7f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000ece:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000ed2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ee4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ee8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000eea:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000eee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ef0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 f9a2 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000f12:	f000 fa3b 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f16:	bf00      	nop
 8000f18:	3750      	adds	r7, #80	; 0x50
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <MX_ADC1_Init+0xc0>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f98:	f000 ffbe 	bl	8001f18 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000fa2:	f000 f9f3 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0xc4>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000fc4:	f001 fbae 	bl	8002724 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fce:	f000 f9dd 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	50040000 	.word	0x50040000
 8000fe4:	14f00020 	.word	0x14f00020

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C1_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C1_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C1_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C1_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C1_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_I2C1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_I2C1_Init+0x74>)
 8001024:	f002 ffd4 	bl	8003fd0 <HAL_I2C_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800102e:	f000 f9ad 	bl	800138c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C1_Init+0x74>)
 8001036:	f003 fbdf 	bl	80047f8 <HAL_I2CEx_ConfigAnalogFilter>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001040:	f000 f9a4 	bl	800138c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_I2C1_Init+0x74>)
 8001048:	f003 fc21 	bl	800488e <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001052:	f000 f99b 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000160 	.word	0x20000160
 8001060:	40005400 	.word	0x40005400
 8001064:	00300f38 	.word	0x00300f38

08001068 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_USART1_UART_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010b2:	f005 fdd5 	bl	8006c60 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 f966 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010c4:	f008 fbf7 	bl	80098b6 <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f000 f95d 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010d6:	f008 fc2c 	bl	8009932 <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f000 f954 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010e6:	f008 fbad 	bl	8009844 <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f94c 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001b4 	.word	0x200001b4
 80010fc:	40013800 	.word	0x40013800

08001100 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <MX_USB_PCD_Init+0x4c>)
 8001108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800110c:	2208      	movs	r2, #8
 800110e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001112:	2202      	movs	r2, #2
 8001114:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001118:	2202      	movs	r2, #2
 800111a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001136:	f003 fbf6 	bl	8004926 <HAL_PCD_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001140:	f000 f924 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000308 	.word	0x20000308
 800114c:	40006800 	.word	0x40006800

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff fd91 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fd8e 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2105      	movs	r1, #5
 8001164:	200b      	movs	r0, #11
 8001166:	f002 fa45 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116a:	200b      	movs	r0, #11
 800116c:	f002 fa5c 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2105      	movs	r1, #5
 8001174:	200c      	movs	r0, #12
 8001176:	f002 fa3d 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800117a:	200c      	movs	r0, #12
 800117c:	f002 fa54 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2105      	movs	r1, #5
 8001184:	200d      	movs	r0, #13
 8001186:	f002 fa35 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800118a:	200d      	movs	r0, #13
 800118c:	f002 fa4c 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2004      	movs	r0, #4
 80011aa:	f7ff fd80 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff fd7d 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fd7a 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	2008      	movs	r0, #8
 80011bc:	f7ff fd77 	bl	8000cae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4827      	ldr	r0, [pc, #156]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011c6:	f002 feeb 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2102      	movs	r1, #2
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f002 fee5 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2103      	movs	r1, #3
 80011da:	4823      	ldr	r0, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011dc:	f002 fee0 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 80011e0:	2308      	movs	r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011f6:	f002 fd63 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f002 fd55 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001216:	2310      	movs	r3, #16
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001228:	f002 fd4a 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001242:	f002 fd3d 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001246:	2303      	movs	r3, #3
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_GPIO_Init+0xd8>)
 8001258:	f002 fd32 	bl	8003cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000800 	.word	0x48000800
 8001268:	48000400 	.word	0x48000400
 800126c:	48000c00 	.word	0x48000c00

08001270 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	osEventFlagsSet(tempFlagsHandle,0x01);
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_ADC_ConvCpltCallback+0x1c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f008 fdee 	bl	8009e60 <osEventFlagsSet>

}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000075c 	.word	0x2000075c

08001290 <CalculateTemp_Thread>:

void CalculateTemp_Thread(void *argument){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001298:	217f      	movs	r1, #127	; 0x7f
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <CalculateTemp_Thread+0xb0>)
 800129c:	f002 f85e 	bl	800335c <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	4928      	ldr	r1, [pc, #160]	; (8001344 <CalculateTemp_Thread+0xb4>)
 80012a4:	4826      	ldr	r0, [pc, #152]	; (8001340 <CalculateTemp_Thread+0xb0>)
 80012a6:	f000 ff83 	bl	80021b0 <HAL_ADC_Start_DMA>
		osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <CalculateTemp_Thread+0xb8>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	2201      	movs	r2, #1
 80012b4:	2101      	movs	r1, #1
 80012b6:	f008 fe17 	bl	8009ee8 <osEventFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <CalculateTemp_Thread+0xb4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8af 	bl	8000424 <__aeabi_i2d>
 80012c6:	a318      	add	r3, pc, #96	; (adr r3, 8001328 <CalculateTemp_Thread+0x98>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f914 	bl	80004f8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	491d      	ldr	r1, [pc, #116]	; (800134c <CalculateTemp_Thread+0xbc>)
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <CalculateTemp_Thread+0xbc>)
 80012dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e0:	a313      	add	r3, pc, #76	; (adr r3, 8001330 <CalculateTemp_Thread+0xa0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff4f 	bl	8000188 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <CalculateTemp_Thread+0xc0>)
 80012f8:	f7ff f8fe 	bl	80004f8 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	a30c      	add	r3, pc, #48	; (adr r3, 8001338 <CalculateTemp_Thread+0xa8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff fa1f 	bl	800074c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <CalculateTemp_Thread+0xc4>)
 8001314:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <CalculateTemp_Thread+0xb0>)
 800131a:	f000 ffcd 	bl	80022b8 <HAL_ADC_Stop_DMA>
		osDelay(2);
 800131e:	2002      	movs	r0, #2
 8001320:	f008 fd44 	bl	8009dac <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8001324:	e7bc      	b.n	80012a0 <CalculateTemp_Thread+0x10>
 8001326:	bf00      	nop
 8001328:	f9353597 	.word	0xf9353597
 800132c:	3f47fffb 	.word	0x3f47fffb
 8001330:	083126e9 	.word	0x083126e9
 8001334:	3fda1cac 	.word	0x3fda1cac
 8001338:	851eb852 	.word	0x851eb852
 800133c:	400051eb 	.word	0x400051eb
 8001340:	2000009c 	.word	0x2000009c
 8001344:	20000760 	.word	0x20000760
 8001348:	2000075c 	.word	0x2000075c
 800134c:	20000768 	.word	0x20000768
 8001350:	40590000 	.word	0x40590000
 8001354:	20000770 	.word	0x20000770

08001358 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f008 fd23 	bl	8009dac <osDelay>
 8001366:	e7fb      	b.n	8001360 <StartDefaultTask+0x8>

08001368 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800137a:	f000 fb47 	bl	8001a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40014400 	.word	0x40014400

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>

08001396 <LL_AHB2_GRP1_EnableClock>:
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	210f      	movs	r1, #15
 8001434:	f06f 0001 	mvn.w	r0, #1
 8001438:	f002 f8dc 	bl	80035f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_ADC_MspInit+0xb8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d146      	bne.n	80014f0 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001462:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001466:	f7ff ff96 	bl	8001396 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff93 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 fc1b 	bl	8003cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_ADC_MspInit+0xc0>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001492:	2205      	movs	r2, #5
 8001494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014ba:	2220      	movs	r2, #32
 80014bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c6:	f002 f8bd 	bl	8003644 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80014d0:	f7ff ff5c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	2012      	movs	r0, #18
 80014e6:	f002 f885 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ea:	2012      	movs	r0, #18
 80014ec:	f002 f89c 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	50040000 	.word	0x50040000
 80014fc:	20000100 	.word	0x20000100
 8001500:	40020030 	.word	0x40020030

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09c      	sub	sp, #112	; 0x70
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2250      	movs	r2, #80	; 0x50
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00e f963 	bl	800f7f0 <memset>
  if(hi2c->Instance==I2C1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d126      	bne.n	8001582 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001534:	2304      	movs	r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001538:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fe84 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f7ff ff1d 	bl	800138c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff ff1f 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156a:	2304      	movs	r3, #4
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001572:	4619      	mov	r1, r3
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0x8c>)
 8001576:	f002 fba3 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800157e:	f7ff ff23 	bl	80013c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3770      	adds	r7, #112	; 0x70
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	48000400 	.word	0x48000400

08001594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b09c      	sub	sp, #112	; 0x70
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2250      	movs	r2, #80	; 0x50
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00e f91b 	bl	800f7f0 <memset>
  if(huart->Instance==USART1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_UART_MspInit+0x138>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d17f      	bne.n	80016c4 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fe3d 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015dc:	f7ff fed6 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e4:	f7ff ff09 	bl	80013fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fed4 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015fe:	2307      	movs	r3, #7
 8001600:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001606:	4619      	mov	r1, r3
 8001608:	4831      	ldr	r0, [pc, #196]	; (80016d0 <HAL_UART_MspInit+0x13c>)
 800160a:	f002 fb59 	bl	8003cc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x144>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001616:	220e      	movs	r2, #14
 8001618:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001646:	f001 fffd 	bl	8003644 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001650:	f7ff fe9c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_UART_MspInit+0x14c>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_UART_MspInit+0x148>)
 800166a:	220f      	movs	r2, #15
 800166c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001670:	2210      	movs	r2, #16
 8001672:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x148>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_UART_MspInit+0x148>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001698:	4810      	ldr	r0, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x148>)
 800169a:	f001 ffd3 	bl	8003644 <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80016a4:	f7ff fe72 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	2024      	movs	r0, #36	; 0x24
 80016ba:	f001 ff9b 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016be:	2024      	movs	r0, #36	; 0x24
 80016c0:	f001 ffb2 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	3770      	adds	r7, #112	; 0x70
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013800 	.word	0x40013800
 80016d0:	48000400 	.word	0x48000400
 80016d4:	20000248 	.word	0x20000248
 80016d8:	40020008 	.word	0x40020008
 80016dc:	200002a8 	.word	0x200002a8
 80016e0:	4002001c 	.word	0x4002001c

080016e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_PCD_MspInit+0x5c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d118      	bne.n	8001738 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe45 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800170c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800171e:	230a      	movs	r3, #10
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f002 fac8 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001730:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001734:	f7ff fe48 	bl	80013c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40006800 	.word	0x40006800

08001744 <LL_APB2_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2019      	movs	r0, #25
 800178e:	f001 ff31 	bl	80035f4 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001792:	2019      	movs	r0, #25
 8001794:	f001 ff48 	bl	8003628 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800179c:	f7ff ffd2 	bl	8001744 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fabe 	bl	8005d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b0:	f004 faa6 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80017b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_InitTick+0x8c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0x90>)
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_InitTick+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_InitTick+0x90>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_InitTick+0x90>)
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_InitTick+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <HAL_InitTick+0x90>)
 80017e6:	f004 ffc0 	bl	800676a <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_InitTick+0x90>)
 80017f2:	f005 f81b 	bl	800682c <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000778 	.word	0x20000778
 800180c:	40014400 	.word	0x40014400

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 f8e0 	bl	8003a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000248 	.word	0x20000248

08001850 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Channel2_IRQHandler+0x10>)
 8001856:	f002 f8d6 	bl	8003a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002a8 	.word	0x200002a8

08001864 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Channel3_IRQHandler+0x10>)
 800186a:	f002 f8cc 	bl	8003a06 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000100 	.word	0x20000100

08001878 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <ADC1_IRQHandler+0x10>)
 800187e:	f000 fd7c 	bl	800237a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000009c 	.word	0x2000009c

0800188c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001892:	f005 f819 	bl	80068c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000778 	.word	0x20000778

080018a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART1_IRQHandler+0x10>)
 80018a6:	f005 fcef 	bl	8007288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001b4 	.word	0x200001b4

080018b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SystemInit+0x98>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <SystemInit+0x98>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018e0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <SystemInit+0x9c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f023 0305 	bic.w	r3, r3, #5
 8001902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <SystemInit+0xa0>)
 8001920:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <SystemInit+0xa0>)
 8001928:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	faf6fefb 	.word	0xfaf6fefb
 8001954:	22041000 	.word	0x22041000

08001958 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001958:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195c:	3304      	adds	r3, #4

0800195e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001960:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001962:	d3f9      	bcc.n	8001958 <CopyDataInit>
  bx lr
 8001964:	4770      	bx	lr

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001966:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001968:	3004      	adds	r0, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800196a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>
  bx lr
 800196e:	4770      	bx	lr

08001970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001974:	f7ff ff9e 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <LoopForever+0x6>)
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <LoopForever+0xa>)
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <LoopForever+0xe>)
 800197e:	2300      	movs	r3, #0
 8001980:	f7ff ffed 	bl	800195e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <LoopForever+0x12>)
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <LoopForever+0x16>)
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <LoopForever+0x1a>)
 800198a:	2300      	movs	r3, #0
 800198c:	f7ff ffe7 	bl	800195e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0x1e>)
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <LoopForever+0x22>)
 8001994:	2300      	movs	r3, #0
 8001996:	f7ff ffe8 	bl	800196a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199a:	f00d ff31 	bl	800f800 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800199e:	f7ff f99f 	bl	8000ce0 <main>

080019a2 <LoopForever>:

LoopForever:
  b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   r0, =_estack
 80019a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019a8:	20000008 	.word	0x20000008
 80019ac:	2000007c 	.word	0x2000007c
 80019b0:	0800faf4 	.word	0x0800faf4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019b4:	20030000 	.word	0x20030000
 80019b8:	20030000 	.word	0x20030000
 80019bc:	0800fb68 	.word	0x0800fb68
  INIT_BSS _sbss, _ebss
 80019c0:	20000080 	.word	0x20000080
 80019c4:	2000252c 	.word	0x2000252c

080019c8 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <AES1_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_Init+0x3c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_Init+0x3c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f001 fdfb 	bl	80035de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e8:	200f      	movs	r0, #15
 80019ea:	f7ff fec5 	bl	8001778 <HAL_InitTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	e001      	b.n	80019fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fa:	f7ff fd17 	bl	800142c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58004000 	.word	0x58004000

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000074 	.word	0x20000074
 8001a30:	200007c4 	.word	0x200007c4

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200007c4 	.word	0x200007c4

08001a4c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTickPrio+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000070 	.word	0x20000070

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffe2 	bl	8001a34 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffd2 	bl	8001a34 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000074 	.word	0x20000074

08001aac <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_ADC_SetOffset+0x44>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	03fff000 	.word	0x03fff000

08001b5c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bd6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	211f      	movs	r1, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 011f 	and.w	r1, r3, #31
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3314      	adds	r3, #20
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0e5b      	lsrs	r3, r3, #25
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2107      	movs	r1, #7
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0d1b      	lsrs	r3, r3, #20
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0318 	and.w	r3, r3, #24
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf8:	40d9      	lsrs	r1, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	0007ffff 	.word	0x0007ffff

08001d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6093      	str	r3, [r2, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	f043 0202 	orr.w	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_IsEnabled+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_IsEnabled+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_IsDisableOngoing+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_IsDisableOngoing+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ede:	f043 0220 	orr.w	r2, r3, #32
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12e      	b.n	8002194 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fa7b 	bl	8001440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff feef 	bl	8001d40 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed5 	bl	8001d1c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff0a 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff feee 	bl	8001d68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b83      	ldr	r3, [pc, #524]	; (800219c <HAL_ADC_Init+0x284>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a83      	ldr	r2, [pc, #524]	; (80021a0 <HAL_ADC_Init+0x288>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff feec 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff60 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80c7 	bne.w	8002182 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c3 	bne.w	8002182 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fef9 	bl	8001e08 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201c:	4861      	ldr	r0, [pc, #388]	; (80021a4 <HAL_ADC_Init+0x28c>)
 800201e:	f7ff fef3 	bl	8001e08 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4619      	mov	r1, r3
 800202e:	485e      	ldr	r0, [pc, #376]	; (80021a8 <HAL_ADC_Init+0x290>)
 8002030:	f7ff fd3c 	bl	8001aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e5b      	ldrb	r3, [r3, #25]
 8002038:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002044:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800204a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002054:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	3b01      	subs	r3, #1
 800206c:	045b      	lsls	r3, r3, #17
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_ADC_Init+0x294>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fefb 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80020ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff1c 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 80020ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13d      	bne.n	800213e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13a      	bne.n	800213e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	430b      	orrs	r3, r1
 80020f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d118      	bne.n	800212e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211e:	430a      	orrs	r2, r1
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	e007      	b.n	800213e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10c      	bne.n	8002160 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f023 010f 	bic.w	r1, r3, #15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020f 	bic.w	r2, r2, #15
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
 8002180:	e007      	b.n	8002192 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002192:	7ffb      	ldrb	r3, [r7, #31]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000006c 	.word	0x2000006c
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	50040000 	.word	0x50040000
 80021a8:	50040300 	.word	0x50040300
 80021ac:	fff0c007 	.word	0xfff0c007

080021b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe6f 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d167      	bne.n	800229c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x2a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e063      	b.n	80022a2 <HAL_ADC_Start_DMA+0xf2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 ff20 	bl	8003028 <ADC_Enable>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14f      	bne.n	8002292 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f023 0206 	bic.w	r2, r3, #6
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58
 800221e:	e002      	b.n	8002226 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_ADC_Start_DMA+0xfc>)
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_ADC_Start_DMA+0x100>)
 8002234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_Start_DMA+0x104>)
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	221c      	movs	r2, #28
 8002244:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0210 	orr.w	r2, r2, #16
 800225c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3340      	adds	r3, #64	; 0x40
 8002278:	4619      	mov	r1, r3
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f001 fa89 	bl	8003794 <HAL_DMA_Start_IT>
 8002282:	4603      	mov	r3, r0
 8002284:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fde2 	bl	8001e54 <LL_ADC_REG_StartConversion>
 8002290:	e006      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800229c:	2302      	movs	r3, #2
 800229e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	080031db 	.word	0x080031db
 80022b0:	080032b3 	.word	0x080032b3
 80022b4:	080032cf 	.word	0x080032cf

080022b8 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Stop_DMA+0x16>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e051      	b.n	8002372 <HAL_ADC_Stop_DMA+0xba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80022d6:	2103      	movs	r1, #3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fde9 	bl	8002eb0 <ADC_ConversionStop>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13f      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d10f      	bne.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fabd 	bl	800388a <HAL_DMA_Abort>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 feed 	bl	800311c <ADC_Disable>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e002      	b.n	800234e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fee7 	bl	800311c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 f854 	bl	8003470 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x6a>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05d      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d058      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbd2 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03d      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	d035      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d12e      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd2e 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11a      	bne.n	8002484 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020c 	bic.w	r2, r2, #12
 800245c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
 8002482:	e00b      	b.n	800249c <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe fee7 	bl	8001270 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	220c      	movs	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_ADC_IRQHandler+0x144>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d074      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06f      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbb2 	bl	8001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024f4:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fb5f 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002500:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d049      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_IRQHandler+0x1b0>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13c      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d135      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12e      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcd1 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11a      	bne.n	800258c <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002564:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 ff3b 	bl	8003420 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2260      	movs	r2, #96	; 0x60
 80025b0:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d011      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f891 	bl	80026fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ff21 	bl	8003448 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 ff13 	bl	800345c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02b      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d026      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e009      	b.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fae8 	bl	8001c3c <LL_ADC_REG_GetDMATransfer>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10e      	bne.n	800269a <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f83a 	bl	800270e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f043 0208 	orr.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 feab 	bl	8003434 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b6      	sub	sp, #216	; 0xd8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e39f      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x762>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fba6 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8384 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f7ff fa39 	bl	8001be4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb94 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 800277c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbb4 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 800278a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 81a6 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 81a1 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fa65 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00a      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027e6:	f7ff f995 	bl	8001b14 <LL_ADC_SetOffset>
 80027ea:	e17b      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f9b2 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0xf4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9a7 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	e01e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x132>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f99c 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800283a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800283e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e004      	b.n	8002854 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800284a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_ConfigChannel+0x14a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	e018      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800288a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e004      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f96b 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f94f 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_ADC_ConfigChannel+0x1ba>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f944 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	e01e      	b.n	800291c <HAL_ADC_ConfigChannel+0x1f8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f939 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e004      	b.n	800291a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x210>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	e018      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800294c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e004      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800295c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f908 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f8ec 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x280>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f8e1 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	e01e      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2be>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f8d6 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e004      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2d6>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	e016      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2102      	movs	r1, #2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f8a7 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f88b 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x342>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f880 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	e017      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x372>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f875 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x38a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	e011      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3ae>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2103      	movs	r1, #3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f852 	bl	8001b88 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f98d 	bl	8001e08 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81c2 	bne.w	8002e7a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff f8e6 	bl	8001cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_ADC_ConfigChannel+0x624>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8130 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x418>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e019      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x44c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	bf94      	ite	ls
 8002b6a:	2301      	movls	r3, #1
 8002b6c:	2300      	movhi	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d079      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x46c>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	069b      	lsls	r3, r3, #26
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	e015      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x498>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x4b8>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	e017      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4e8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x50e>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	3301      	adds	r3, #1
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	051b      	lsls	r3, r3, #20
 8002c30:	e018      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x540>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c64:	430b      	orrs	r3, r1
 8002c66:	e080      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x560>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c82:	e015      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x58c>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	069b      	lsls	r3, r3, #26
 8002cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x5ac>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	e017      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5dc>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e003      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x608>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	e01d      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x644>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	613b      	str	r3, [r7, #16]
  return result;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e005      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x630>
 8002d48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b1e      	subs	r3, #30
 8002d62:	051b      	lsls	r3, r3, #20
 8002d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d68:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fe ff85 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_ADC_ConfigChannel+0x76c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07c      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d80:	4844      	ldr	r0, [pc, #272]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002d82:	f7fe feb9 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 8002d86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8a:	4843      	ldr	r0, [pc, #268]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002d8c:	f7ff f83c 	bl	8001e08 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d15e      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <HAL_ADC_ConfigChannel+0x778>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d127      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d161      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4834      	ldr	r0, [pc, #208]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002dc2:	f7fe fe86 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_ADC_ConfigChannel+0x77c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_ADC_ConfigChannel+0x780>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dee:	e044      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_ADC_ConfigChannel+0x784>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d113      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d134      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481e      	ldr	r0, [pc, #120]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e1c:	f7fe fe59 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e02b      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_ADC_ConfigChannel+0x788>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d126      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d120      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d11b      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4811      	ldr	r0, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e4e:	f7fe fe40 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e012      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e66:	e008      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	37d8      	adds	r7, #216	; 0xd8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80080000 	.word	0x80080000
 8002e94:	50040300 	.word	0x50040300
 8002e98:	50040000 	.word	0x50040000
 8002e9c:	c7520000 	.word	0xc7520000
 8002ea0:	2000006c 	.word	0x2000006c
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	80000001 	.word	0x80000001

08002eb0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ffec 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f80d 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8098 	beq.w	8003018 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02a      	beq.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e5b      	ldrb	r3, [r3, #25]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d126      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7e1b      	ldrb	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d122      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f0a:	e014      	b.n	8002f36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4a45      	ldr	r2, [pc, #276]	; (8003024 <ADC_ConversionStop+0x174>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d90d      	bls.n	8002f30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e074      	b.n	800301a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d1e3      	bne.n	8002f0c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d014      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe ffa4 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff61 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff80 	bl	8001e7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d014      	beq.n	8002fac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ffb3 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe ff49 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ff8f 	bl	8001eca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d005      	beq.n	8002fbe <ADC_ConversionStop+0x10e>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d105      	bne.n	8002fc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fb8:	230c      	movs	r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
        break;
 8002fbc:	e005      	b.n	8002fca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	617b      	str	r3, [r7, #20]
        break;
 8002fc2:	e002      	b.n	8002fca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002fca:	f7fe fd33 	bl	8001a34 <HAL_GetTick>
 8002fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fd0:	e01b      	b.n	800300a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fd2:	f7fe fd2f 	bl	8001a34 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d914      	bls.n	800300a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1dc      	bne.n	8002fd2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	a33fffff 	.word	0xa33fffff

08003028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fee5 	bl	8001e08 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d15e      	bne.n	8003102 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <ADC_Enable+0xe4>)
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e04a      	b.n	8003104 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fea0 	bl	8001db8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003078:	4825      	ldr	r0, [pc, #148]	; (8003110 <ADC_Enable+0xe8>)
 800307a:	f7fe fd3d 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <ADC_Enable+0xec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <ADC_Enable+0xf0>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fcc4 	bl	8001a34 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ae:	e021      	b.n	80030f4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fea7 	bl	8001e08 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fe77 	bl	8001db8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7fe fcb3 	bl	8001a34 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d90d      	bls.n	80030f4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d1d6      	bne.n	80030b0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	8000003f 	.word	0x8000003f
 8003110:	50040300 	.word	0x50040300
 8003114:	2000006c 	.word	0x2000006c
 8003118:	053e2d63 	.word	0x053e2d63

0800311c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fe80 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 800312e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fe67 	bl	8001e08 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d047      	beq.n	80031d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d144      	bne.n	80031d0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030d 	and.w	r3, r3, #13
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10c      	bne.n	800316e <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fe41 	bl	8001de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2203      	movs	r2, #3
 8003164:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003166:	f7fe fc65 	bl	8001a34 <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800316c:	e029      	b.n	80031c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e023      	b.n	80031d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800318a:	f7fe fc53 	bl	8001a34 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d914      	bls.n	80031c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e007      	b.n	80031d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1dc      	bne.n	800318a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14b      	bne.n	800328c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fcd3 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d032      	beq.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d12b      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11f      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
 8003250:	e018      	b.n	8003284 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7fd fff3 	bl	8001270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800328a:	e00e      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fa38 	bl	800270e <HAL_ADC_ErrorCallback>
}
 800329e:	e004      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fa10 	bl	80026e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fa0a 	bl	800270e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <LL_ADC_StartCalibration>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_IsCalibrationOnGoing>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003348:	d101      	bne.n	800334e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e04d      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fecb 	bl	800311c <ADC_Disable>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d136      	bne.n	80033fe <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003398:	f023 0302 	bic.w	r3, r3, #2
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffa9 	bl	8003302 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033b0:	e014      	b.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_ADCEx_Calibration_Start+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d90d      	bls.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f023 0312 	bic.w	r3, r3, #18
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01b      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffa7 	bl	8003334 <LL_ADC_IsCalibrationOnGoing>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e2      	bne.n	80033b2 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f023 0303 	bic.w	r3, r3, #3
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
 80033fc:	e005      	b.n	800340a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	00026aaa 	.word	0x00026aaa

08003420 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ff4c 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003602:	f7ff ff63 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003606:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f7ff ffb3 	bl	8003578 <NVIC_EncodePriority>
 8003612:	4602      	mov	r2, r0
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff82 	bl	8003524 <__NVIC_SetPriority>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff56 	bl	80034e8 <__NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e08e      	b.n	8003774 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_DMA_Init+0x138>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_DMA_Init+0x13c>)
 800366a:	4413      	add	r3, r2
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x144>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_DMA_Init+0x148>)
 800368a:	4413      	add	r3, r2
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_DMA_Init+0x140>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_DMA_Init+0x14c>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa80 	bl	8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003700:	d102      	bne.n	8003708 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003714:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_DMA_Init+0x106>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d80c      	bhi.n	800374a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa9f 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	e008      	b.n	800375c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020407 	.word	0x40020407
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000
 800378c:	bffdfbf8 	.word	0xbffdfbf8
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e066      	b.n	8003882 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d155      	bne.n	8003874 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9c5 	bl	8003b7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e04f      	b.n	800393c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d008      	beq.n	80038ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e040      	b.n	800393c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 021c 	and.w	r2, r3, #28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003928:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e047      	b.n	80039fc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    }
  }
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 031c 	and.w	r3, r3, #28
 8003a26:	2204      	movs	r2, #4
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d026      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d021      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 021c 	and.w	r2, r3, #28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2104      	movs	r1, #4
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d071      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a7e:	e06c      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 031c 	and.w	r3, r3, #28
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d029      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020a 	bic.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 021c 	and.w	r2, r3, #28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af0:	e033      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 031c 	and.w	r3, r3, #28
 8003afa:	2208      	movs	r2, #8
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d025      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020e 	bic.w	r2, r2, #14
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 021c 	and.w	r2, r3, #28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
}
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f003 021c 	and.w	r2, r3, #28
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d108      	bne.n	8003bdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bda:	e007      	b.n	8003bec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d80a      	bhi.n	8003c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c20:	e007      	b.n	8003c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3b08      	subs	r3, #8
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40020407 	.word	0x40020407
 8003c68:	4002081c 	.word	0x4002081c
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	1000823f 	.word	0x1000823f
 8003cbc:	40020940 	.word	0x40020940

08003cc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cce:	e14c      	b.n	8003f6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 813e 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8098 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d019      	beq.n	8003e94 <HAL_GPIO_Init+0x1d4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_GPIO_Init+0x1d0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00d      	beq.n	8003e8c <HAL_GPIO_Init+0x1cc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <HAL_GPIO_Init+0x1c8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <HAL_GPIO_Init+0x2d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_GPIO_Init+0x1c4>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e008      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e84:	2307      	movs	r3, #7
 8003e86:	e006      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e004      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e94:	2300      	movs	r3, #0
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	f002 0203 	and.w	r2, r2, #3
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	4093      	lsls	r3, r2
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ea6:	4938      	ldr	r1, [pc, #224]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed8:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f aeab 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	48000400 	.word	0x48000400
 8003f90:	48000800 	.word	0x48000800
 8003f94:	48000c00 	.word	0x48000c00
 8003f98:	48001000 	.word	0x48001000
 8003f9c:	58000800 	.word	0x58000800

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fa84 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e006      	b.n	8004058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d108      	bne.n	8004072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e007      	b.n	8004082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	f040 80f9 	bne.w	8004322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_I2C_Mem_Write+0x34>
 8004136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0ed      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Mem_Write+0x4e>
 8004152:	2302      	movs	r3, #2
 8004154:	e0e6      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800415e:	f7fd fc69 	bl	8001a34 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2319      	movs	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f955 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d1      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	; 0x21
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a8:	88f8      	ldrh	r0, [r7, #6]
 80041aa:	893a      	ldrh	r2, [r7, #8]
 80041ac:	8979      	ldrh	r1, [r7, #10]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	4603      	mov	r3, r0
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8b9 	bl	8004330 <I2C_RequestMemoryWrite>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0a9      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2bff      	cmp	r3, #255	; 0xff
 80041d8:	d90e      	bls.n	80041f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	8979      	ldrh	r1, [r7, #10]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 facf 	bl	8004794 <I2C_TransferConfig>
 80041f6:	e00f      	b.n	8004218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	b2da      	uxtb	r2, r3
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	2300      	movs	r3, #0
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fabe 	bl	8004794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f94e 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07b      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d034      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d130      	bne.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8d1 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04d      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2bff      	cmp	r3, #255	; 0xff
 8004290:	d90e      	bls.n	80042b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	b2da      	uxtb	r2, r3
 800429e:	8979      	ldrh	r1, [r7, #10]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fa73 	bl	8004794 <I2C_TransferConfig>
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	8979      	ldrh	r1, [r7, #10]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fa62 	bl	8004794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d19e      	bne.n	8004218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f934 	bl	800454c <I2C_WaitOnSTOPFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01a      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2220      	movs	r2, #32
 80042f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_I2C_Mem_Write+0x224>)
 8004302:	400b      	ands	r3, r1
 8004304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	fe00e800 	.word	0xfe00e800

08004330 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <I2C_RequestMemoryWrite+0xa4>)
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa1b 	bl	8004794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8ab 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02c      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004378:	893b      	ldrh	r3, [r7, #8]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
 8004382:	e015      	b.n	80043b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004384:	893b      	ldrh	r3, [r7, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	b29b      	uxth	r3, r3
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f891 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e012      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f830 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	80002000 	.word	0x80002000

080043d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d007      	beq.n	8004414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	619a      	str	r2, [r3, #24]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	e031      	b.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d02d      	beq.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd fafb 	bl	8001a34 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d122      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	d113      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00f      	b.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d0be      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ca:	e033      	b.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f87f 	bl	80045d4 <I2C_IsErrorOccurred>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e031      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d025      	beq.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fd faa4 	bl	8001a34 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11a      	bne.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d013      	beq.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e007      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d1c4      	bne.n	80044cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004558:	e02f      	b.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f838 	bl	80045d4 <I2C_IsErrorOccurred>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e02d      	b.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fd fa61 	bl	8001a34 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11a      	bne.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	d013      	beq.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e007      	b.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d1c8      	bne.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d068      	beq.n	80046d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004608:	e049      	b.n	800469e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d045      	beq.n	800469e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fd fa0f 	bl	8001a34 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_IsErrorOccurred+0x54>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d121      	bne.n	8004690 <I2C_IsErrorOccurred+0xbc>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	d01d      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d01a      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800466a:	f7fd f9e3 	bl	8001a34 <HAL_GetTick>
 800466e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004670:	e00e      	b.n	8004690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004672:	f7fd f9df 	bl	8001a34 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b19      	cmp	r3, #25
 800467e:	d907      	bls.n	8004690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800468e:	e006      	b.n	800469e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d1e9      	bne.n	8004672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d003      	beq.n	80046b4 <I2C_IsErrorOccurred+0xe0>
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0aa      	beq.n	800460a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2220      	movs	r2, #32
 80046c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fe45 	bl	80043d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <I2C_IsErrorOccurred+0x1bc>)
 800475a:	400b      	ands	r3, r1
 800475c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004786:	4618      	mov	r0, r3
 8004788:	3728      	adds	r7, #40	; 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	4613      	mov	r3, r2
 80047a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ac:	7a7b      	ldrb	r3, [r7, #9]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	4313      	orrs	r3, r2
 80047be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	0d5b      	lsrs	r3, r3, #21
 80047ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <I2C_TransferConfig+0x60>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	43db      	mvns	r3, r3
 80047d8:	ea02 0103 	and.w	r1, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	03ff63ff 	.word	0x03ff63ff

080047f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d138      	bne.n	8004880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e032      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800484a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d139      	bne.n	8004918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e033      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	; 0x24
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004928:	b08b      	sub	sp, #44	; 0x2c
 800492a:	af06      	add	r7, sp, #24
 800492c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0cb      	b.n	8004ad0 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fc fec9 	bl	80016e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f005 f8c8 	bl	8009af4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e040      	b.n	80049ec <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	440b      	add	r3, r1
 800497a:	3301      	adds	r3, #1
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	3303      	adds	r3, #3
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	333c      	adds	r3, #60	; 0x3c
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3340      	adds	r3, #64	; 0x40
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	3301      	adds	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3b9      	bcc.n	800496a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e044      	b.n	8004a86 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	440b      	add	r3, r1
 8004a36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3301      	adds	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3b5      	bcc.n	80049fc <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	687e      	ldr	r6, [r7, #4]
 8004a98:	466d      	mov	r5, sp
 8004a9a:	f106 0410 	add.w	r4, r6, #16
 8004a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	1d33      	adds	r3, r6, #4
 8004aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aaa:	6838      	ldr	r0, [r7, #0]
 8004aac:	f005 f83d 	bl	8009b2a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f805 	bl	8004ad8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58000400 	.word	0x58000400

08004b4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58000400 	.word	0x58000400

08004b68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d101      	bne.n	8004b80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_HSE_Enable>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_HSE_Disable>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_HSE_IsReady>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bda:	d101      	bne.n	8004be0 <LL_RCC_HSE_IsReady+0x18>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <LL_RCC_HSE_IsReady+0x1a>
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_RCC_HSI_Enable>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_HSI_Disable>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_HSI_IsReady>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d101      	bne.n	8004c40 <LL_RCC_HSI_IsReady+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_RCC_HSI_IsReady+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_HSI48_Enable>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_HSI48_Disable>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_HSI48_IsReady>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d101      	bne.n	8004cd2 <LL_RCC_HSI48_IsReady+0x18>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_RCC_HSI48_IsReady+0x1a>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_LSE_Enable>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_LSE_Disable>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_LSE_EnableBypass>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_LSE_DisableBypass>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d101      	bne.n	8004d7e <LL_RCC_LSE_IsReady+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_RCC_LSE_IsReady+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d101      	bne.n	8004de6 <LL_RCC_LSI1_IsReady+0x18>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <LL_RCC_LSI1_IsReady+0x1a>
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d101      	bne.n	8004e4e <LL_RCC_LSI2_IsReady+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_RCC_LSI2_IsReady+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d101      	bne.n	8004eda <LL_RCC_MSI_IsReady+0x16>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <LL_RCC_MSI_IsReady+0x18>
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2bb0      	cmp	r3, #176	; 0xb0
 8004f24:	d901      	bls.n	8004f2a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004f26:	23b0      	movs	r3, #176	; 0xb0
 8004f28:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004f2a:	687b      	ldr	r3, [r7, #4]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 0203 	bic.w	r2, r3, #3
 8004f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005006:	f023 020f 	bic.w	r2, r3, #15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800505e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005140:	d101      	bne.n	8005146 <LL_RCC_PLL_IsReady+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_RCC_PLL_IsReady+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d101      	bne.n	80051cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d101      	bne.n	8005218 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005236:	d101      	bne.n	800523c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800525a:	d101      	bne.n	8005260 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b08d      	sub	sp, #52	; 0x34
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e363      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808d 	beq.w	80053a6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528c:	f7ff fe7d 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005290:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005292:	f7ff ff83 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005296:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x3e>
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d147      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d144      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e347      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80052ba:	f7ff fe28 	bl	8004f0e <LL_RCC_MSI_GetRange>
 80052be:	4603      	mov	r3, r0
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d914      	bls.n	80052ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd61 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e336      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe02 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fe26 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 80052ec:	e013      	b.n	8005316 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fdf7 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fe1b 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fd42 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e317      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005316:	f000 fcc9 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 800531a:	4603      	mov	r3, r0
 800531c:	4aa4      	ldr	r2, [pc, #656]	; (80055b0 <HAL_RCC_OscConfig+0x344>)
 800531e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005320:	4ba4      	ldr	r3, [pc, #656]	; (80055b4 <HAL_RCC_OscConfig+0x348>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fa27 	bl	8001778 <HAL_InitTick>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d039      	beq.n	80053a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e308      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800533c:	f7ff fda4 	bl	8004e88 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005340:	f7fc fb78 	bl	8001a34 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005348:	f7fc fb74 	bl	8001a34 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e2f5      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800535a:	f7ff fdb3 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fdbc 	bl	8004ee6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fde0 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800537a:	f7ff fd94 	bl	8004ea6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537e:	f7fc fb59 	bl	8001a34 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005386:	f7fc fb55 	bl	8001a34 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e2d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005398:	f7ff fd94 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <HAL_RCC_OscConfig+0x11a>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053a4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b2:	f7ff fdea 	bl	8004f8a <LL_RCC_GetSysClkSource>
 80053b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	f7ff fef0 	bl	800519c <LL_RCC_PLL_GetMainSource>
 80053bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x164>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d105      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d134      	bne.n	8005442 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2b4      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d102      	bne.n	80053ec <HAL_RCC_OscConfig+0x180>
 80053e6:	f7ff fbd1 	bl	8004b8c <LL_RCC_HSE_Enable>
 80053ea:	e001      	b.n	80053f0 <HAL_RCC_OscConfig+0x184>
 80053ec:	f7ff fbdd 	bl	8004baa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc fb1c 	bl	8001a34 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fc fb18 	bl	8001a34 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e299      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005412:	f7ff fbd9 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f1      	beq.n	8005400 <HAL_RCC_OscConfig+0x194>
 800541c:	e011      	b.n	8005442 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fc fb09 	bl	8001a34 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005426:	f7fc fb05 	bl	8001a34 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b64      	cmp	r3, #100	; 0x64
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e286      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005438:	f7ff fbc6 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544e:	f7ff fd9c 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005452:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	f7ff fea2 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005458:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d005      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d10e      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d10b      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e266      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fbe5 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005482:	e031      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	f7ff fbae 	bl	8004bec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc fad0 	bl	8001a34 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fc facc 	bl	8001a34 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e24d      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80054aa:	f7ff fbbd 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f1      	beq.n	8005498 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fbc7 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c0:	f7ff fba3 	bl	8004c0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fc fab6 	bl	8001a34 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fc fab2 	bl	8001a34 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e233      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80054de:	f7ff fba3 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f1      	bne.n	80054cc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a3 	beq.w	8005648 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d076      	beq.n	80055f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d046      	beq.n	80055a4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005516:	f7ff fc5a 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d113      	bne.n	8005548 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005520:	f7ff fc33 	bl	8004d8a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005524:	f7fc fa86 	bl	8001a34 <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800552c:	f7fc fa82 	bl	8001a34 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e203      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800553e:	f7ff fc46 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f1      	beq.n	800552c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005548:	f7ff fc53 	bl	8004df2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc fa72 	bl	8001a34 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005554:	f7fc fa6e 	bl	8001a34 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1ef      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005566:	f7ff fc66 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f1      	beq.n	8005554 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fc70 	bl	8004e5a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800557a:	f7ff fc17 	bl	8004dac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fa59 	bl	8001a34 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005586:	f7fc fa55 	bl	8001a34 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005598:	f7ff fc19 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x31a>
 80055a2:	e051      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80055a4:	f7ff fbf1 	bl	8004d8a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fa44 	bl	8001a34 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ae:	e00c      	b.n	80055ca <HAL_RCC_OscConfig+0x35e>
 80055b0:	2000006c 	.word	0x2000006c
 80055b4:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055b8:	f7fc fa3c 	bl	8001a34 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1bd      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ca:	f7ff fc00 	bl	8004dce <LL_RCC_LSI1_IsReady>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f1      	beq.n	80055b8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80055d4:	f7ff fc1e 	bl	8004e14 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055da:	f7fc fa2b 	bl	8001a34 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1ac      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055ec:	f7ff fc23 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f1      	bne.n	80055da <HAL_RCC_OscConfig+0x36e>
 80055f6:	e027      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80055f8:	f7ff fc0c 	bl	8004e14 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fc fa1a 	bl	8001a34 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005604:	f7fc fa16 	bl	8001a34 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e197      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005616:	f7ff fc0e 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f1      	bne.n	8005604 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005620:	f7ff fbc4 	bl	8004dac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fc fa06 	bl	8001a34 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800562c:	f7fc fa02 	bl	8001a34 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e183      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800563e:	f7ff fbc6 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f1      	bne.n	800562c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d05b      	beq.n	800570c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005654:	4ba7      	ldr	r3, [pc, #668]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005660:	f7ff fa64 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005664:	f7fc f9e6 	bl	8001a34 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc f9e2 	bl	8001a34 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e163      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b9d      	ldr	r3, [pc, #628]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_RCC_OscConfig+0x42c>
 8005692:	f7ff fb24 	bl	8004cde <LL_RCC_LSE_Enable>
 8005696:	e00c      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d104      	bne.n	80056aa <HAL_RCC_OscConfig+0x43e>
 80056a0:	f7ff fb3f 	bl	8004d22 <LL_RCC_LSE_EnableBypass>
 80056a4:	f7ff fb1b 	bl	8004cde <LL_RCC_LSE_Enable>
 80056a8:	e003      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 80056aa:	f7ff fb29 	bl	8004d00 <LL_RCC_LSE_Disable>
 80056ae:	f7ff fb49 	bl	8004d44 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fc f9bb 	bl	8001a34 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fc f9b7 	bl	8001a34 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e136      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80056d8:	f7ff fb45 	bl	8004d66 <LL_RCC_LSE_IsReady>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <HAL_RCC_OscConfig+0x456>
 80056e2:	e013      	b.n	800570c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fc f9a6 	bl	8001a34 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fc f9a2 	bl	8001a34 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e121      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005702:	f7ff fb30 	bl	8004d66 <LL_RCC_LSE_IsReady>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ef      	bne.n	80056ec <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02c      	beq.n	8005772 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d014      	beq.n	800574a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005720:	f7ff faa9 	bl	8004c76 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc f986 	bl	8001a34 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572c:	f7fc f982 	bl	8001a34 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e103      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800573e:	f7ff fabc 	bl	8004cba <LL_RCC_HSI48_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f1      	beq.n	800572c <HAL_RCC_OscConfig+0x4c0>
 8005748:	e013      	b.n	8005772 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800574a:	f7ff faa5 	bl	8004c98 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fc f971 	bl	8001a34 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fc f96d 	bl	8001a34 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0ee      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005768:	f7ff faa7 	bl	8004cba <LL_RCC_HSI48_IsReady>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f1      	bne.n	8005756 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80e4 	beq.w	8005944 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800577c:	f7ff fc05 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005780:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	2b02      	cmp	r3, #2
 8005790:	f040 80b4 	bne.w	80058fc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	429a      	cmp	r2, r3
 80057a0:	d123      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d11c      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d114      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10d      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d05d      	beq.n	80058a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d058      	beq.n	80058a2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0a1      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005802:	f7ff fc85 	bl	8005110 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005806:	f7fc f915 	bl	8001a34 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fc f911 	bl	8001a34 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e092      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ef      	bne.n	800580e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <HAL_RCC_OscConfig+0x68c>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005846:	0212      	lsls	r2, r2, #8
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800585a:	430a      	orrs	r2, r1
 800585c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005860:	4313      	orrs	r3, r2
 8005862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005864:	f7ff fc45 	bl	80050f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005878:	f7fc f8dc 	bl	8001a34 <HAL_GetTick>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc f8d8 	bl	8001a34 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e059      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a0:	e050      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e04f      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d147      	bne.n	8005944 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058b4:	f7ff fc1d 	bl	80050f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058c8:	f7fc f8b4 	bl	8001a34 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc f8b0 	bl	8001a34 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e031      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCC_OscConfig+0x664>
 80058f0:	e028      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
 80058f2:	bf00      	nop
 80058f4:	58000400 	.word	0x58000400
 80058f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d01e      	beq.n	8005940 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	f7ff fc05 	bl	8005110 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fc f895 	bl	8001a34 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fc f891 	bl	8001a34 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e012      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x6e4>)
 800593a:	4013      	ands	r3, r2
 800593c:	60cb      	str	r3, [r1, #12]
 800593e:	e001      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3734      	adds	r7, #52	; 0x34
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	eefefffc 	.word	0xeefefffc

08005954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e12d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b98      	ldr	r3, [pc, #608]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d91b      	bls.n	80059ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b95      	ldr	r3, [pc, #596]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4993      	ldr	r1, [pc, #588]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc f855 	bl	8001a34 <HAL_GetTick>
 800598a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800598e:	f7fc f851 	bl	8001a34 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e111      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff faef 	bl	8004fa2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c4:	f7fc f836 	bl	8001a34 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059cc:	f7fc f832 	bl	8001a34 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e0f2      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059de:	f7ff fbe9 	bl	80051b4 <LL_RCC_IsActiveFlag_HPRE>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f1      	beq.n	80059cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d016      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fae6 	bl	8004fca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fe:	f7fc f819 	bl	8001a34 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a06:	f7fc f815 	bl	8001a34 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0d5      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a18:	f7ff fbde 	bl	80051d8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f1      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fadf 	bl	8004ff6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a38:	f7fb fffc 	bl	8001a34 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a40:	f7fb fff8 	bl	8001a34 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0b8      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a52:	f7ff fbd4 	bl	80051fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f1      	beq.n	8005a40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fad9 	bl	8005024 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a72:	f7fb ffdf 	bl	8001a34 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a7a:	f7fb ffdb 	bl	8001a34 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e09b      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a8c:	f7ff fbca 	bl	8005224 <LL_RCC_IsActiveFlag_PPRE1>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff facf 	bl	800504c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aae:	f7fb ffc1 	bl	8001a34 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ab6:	f7fb ffbd 	bl	8001a34 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e07d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ac8:	f7ff fbbe 	bl	8005248 <LL_RCC_IsActiveFlag_PPRE2>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f1      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d043      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ae6:	f7ff f86f 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11e      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005afc:	f7ff fb17 	bl	800512e <LL_RCC_PLL_IsReady>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e05c      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b12:	f7ff f9d7 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e051      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b20:	f7ff f882 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e04a      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fa15 	bl	8004f62 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fb ff7c 	bl	8001a34 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fb ff78 	bl	8001a34 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e036      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	f7ff fa18 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1ec      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d21b      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 0207 	bic.w	r2, r3, #7
 8005b7c:	4913      	ldr	r1, [pc, #76]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fb ff56 	bl	8001a34 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b8c:	f7fb ff52 	bl	8001a34 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e012      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1ef      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005bac:	f000 f87e 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <HAL_RCC_ClockConfig+0x27c>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005bb6:	f7fb ff49 	bl	8001a4c <HAL_GetTickPrio>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fb fddb 	bl	8001778 <HAL_InitTick>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	58004000 	.word	0x58004000
 8005bd0:	2000006c 	.word	0x2000006c

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bda:	f7ff f9d6 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005bde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005be6:	f7ff f992 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005bea:	4603      	mov	r3, r0
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e04b      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d102      	bne.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c02:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e045      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c0e:	f7fe ffab 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e03a      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e037      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c24:	f7ff faba 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005c28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x64>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005c36:	e00d      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c3a:	60bb      	str	r3, [r7, #8]
        break;
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c3e:	f7fe ff93 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c4a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005c4c:	e00d      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c50:	60bb      	str	r3, [r7, #8]
        break;
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c54:	f7ff f95b 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c66:	60bb      	str	r3, [r7, #8]
        break;
 8005c68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005c6a:	f7ff fa72 	bl	8005152 <LL_RCC_PLL_GetN>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	fb03 f402 	mul.w	r4, r3, r2
 8005c76:	f7ff fa85 	bl	8005184 <LL_RCC_PLL_GetDivider>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	3301      	adds	r3, #1
 8005c80:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c84:	f7ff fa72 	bl	800516c <LL_RCC_PLL_GetR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	0f5b      	lsrs	r3, r3, #29
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c92:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800fa04 	.word	0x0800fa04
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	01e84800 	.word	0x01e84800

08005cac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b598      	push	{r3, r4, r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005cb0:	f7ff ff90 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f7ff f9dd 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd98      	pop	{r3, r4, r7, pc}
 8005cd0:	0800f9a4 	.word	0x0800f9a4

08005cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd4:	b598      	push	{r3, r4, r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cd8:	f7ff ffe8 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	f7ff f9f0 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd98      	pop	{r3, r4, r7, pc}
 8005cfc:	0800f9e4 	.word	0x0800f9e4

08005d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d00:	b598      	push	{r3, r4, r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d04:	f7ff ffd2 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	f7ff f9e6 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	0adb      	lsrs	r3, r3, #11
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd98      	pop	{r3, r4, r7, pc}
 8005d28:	0800f9e4 	.word	0x0800f9e4

08005d2c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	226f      	movs	r2, #111	; 0x6f
 8005d3a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005d3c:	f7ff f925 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005d46:	f7ff f995 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005d50:	f7ff f9b7 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005d5a:	f7ff f9be 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005d64:	f7ff f992 	bl	800508c <LL_C2_RCC_GetAHBPrescaler>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005d6e:	f7ff f99a 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <HAL_RCC_GetClockConfig+0x60>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0207 	and.w	r2, r3, #7
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	58004000 	.word	0x58004000

08005d90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8005d9c:	d903      	bls.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e007      	b.n	8005db6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005db6:	f7ff f976 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0c9c      	lsrs	r4, r3, #18
 8005dda:	f7fe feb7 	bl	8004b4c <HAL_PWREx_GetVoltageRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f80c 	bl	8005e00 <RCC_SetFlashLatency>
 8005de8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	0800fa04 	.word	0x0800fa04
 8005df8:	0800f9a4 	.word	0x0800f9a4
 8005dfc:	431bde83 	.word	0x431bde83

08005e00 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b093      	sub	sp, #76	; 0x4c
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <RCC_SetFlashLatency+0xe8>)
 8005e0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <RCC_SetFlashLatency+0xec>)
 8005e18:	f107 031c 	add.w	r3, r7, #28
 8005e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <RCC_SetFlashLatency+0xf0>)
 8005e24:	f107 040c 	add.w	r4, r7, #12
 8005e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d11a      	bne.n	8005e70 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	e013      	b.n	8005e68 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3348      	adds	r3, #72	; 0x48
 8005e46:	443b      	add	r3, r7
 8005e48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d807      	bhi.n	8005e62 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3348      	adds	r3, #72	; 0x48
 8005e58:	443b      	add	r3, r7
 8005e5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e60:	e020      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3301      	adds	r3, #1
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d9e8      	bls.n	8005e40 <RCC_SetFlashLatency+0x40>
 8005e6e:	e019      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	e013      	b.n	8005e9e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3348      	adds	r3, #72	; 0x48
 8005e7c:	443b      	add	r3, r7
 8005e7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d807      	bhi.n	8005e98 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	3348      	adds	r3, #72	; 0x48
 8005e8e:	443b      	add	r3, r7
 8005e90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e96:	e005      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d9e8      	bls.n	8005e76 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fb fdbe 	bl	8001a34 <HAL_GetTick>
 8005eb8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005eba:	e008      	b.n	8005ece <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ebc:	f7fb fdba 	bl	8001a34 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e007      	b.n	8005ede <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1ef      	bne.n	8005ebc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	374c      	adds	r7, #76	; 0x4c
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	0800f8a8 	.word	0x0800f8a8
 8005eec:	0800f8b8 	.word	0x0800f8b8
 8005ef0:	0800f8c4 	.word	0x0800f8c4
 8005ef4:	58004000 	.word	0x58004000

08005ef8 <LL_RCC_LSE_IsEnabled>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <LL_RCC_LSE_IsEnabled+0x18>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <LL_RCC_LSE_IsEnabled+0x1a>
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_LSE_IsReady>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d101      	bne.n	8005f34 <LL_RCC_LSE_IsReady+0x18>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_RCC_LSE_IsReady+0x1a>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_SetRFWKPClockSource>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_RCC_SetSMPSClockSource>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetSMPSPrescaler>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_SetUSARTClockSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_SetLPUARTClockSource>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_SetI2CClockSource>:
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800603a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800604a:	43db      	mvns	r3, r3
 800604c:	401a      	ands	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_SetLPTIMClockSource>:
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	43db      	mvns	r3, r3
 8006084:	401a      	ands	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_SetSAIClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_SetRNGClockSource>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_SetCLK48ClockSource>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_SetUSBClockSource>:
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffe3 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <LL_RCC_SetADCClockSource>:
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_SetRTCClockSource>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800617a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_RCC_GetRTCClockSource>:
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_ForceBackupDomainReset>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_PLLSAI1_Enable>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_PLLSAI1_Disable>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_PLLSAI1_IsReady>:
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623e:	d101      	bne.n	8006244 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006274:	d021      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800627a:	d81b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800627c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006280:	d01d      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006286:	d815      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800628c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006290:	d110      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80062a2:	e00d      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f94d 	bl	8006548 <RCCEx_PLLSAI1_ConfigNP>
 80062ae:	4603      	mov	r3, r0
 80062b0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062b2:	e005      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	77fb      	strb	r3, [r7, #31]
        break;
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fee8 	bl	80060a0 <LL_RCC_SetSAIClockSource>
 80062d0:	e001      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d046      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80062e2:	f7ff ff56 	bl	8006192 <LL_RCC_GetRTCClockSource>
 80062e6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d03c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062f2:	f7fe fc1b 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff30 	bl	8006166 <LL_RCC_SetRTCClockSource>
 8006306:	e02e      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006312:	f7ff ff4b 	bl	80061ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006316:	f7ff ff5a 	bl	80061ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006332:	f7ff fde1 	bl	8005ef8 <LL_RCC_LSE_IsEnabled>
 8006336:	4603      	mov	r3, r0
 8006338:	2b01      	cmp	r3, #1
 800633a:	d114      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800633c:	f7fb fb7a 	bl	8001a34 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006342:	e00b      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fb fb76 	bl	8001a34 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d902      	bls.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	77fb      	strb	r3, [r7, #31]
              break;
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800635c:	f7ff fdde 	bl	8005f1c <LL_RCC_LSE_IsReady>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d1ee      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	77bb      	strb	r3, [r7, #30]
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fe2a 	bl	8005fda <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fe35 	bl	8006006 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fe5d 	bl	800606c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fe52 	bl	800606c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fe2a 	bl	8006032 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fe1f 	bl	8006032 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe8d 	bl	8006124 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006422:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f8e3 	bl	80065fe <RCCEx_PLLSAI1_ConfigNQ>
 8006438:	4603      	mov	r3, r0
 800643a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800643c:	7ffb      	ldrb	r3, [r7, #31]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006442:	7ffb      	ldrb	r3, [r7, #31]
 8006444:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d008      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fe2a 	bl	80060cc <LL_RCC_SetRNGClockSource>
 8006478:	e00a      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff fe21 	bl	80060cc <LL_RCC_SetRNGClockSource>
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fe34 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d022      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fe3d 	bl	800613a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c8:	d107      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e2:	d10b      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f8e3 	bl	80066b4 <RCCEx_PLLSAI1_ConfigNR>
 80064ee:	4603      	mov	r3, r0
 80064f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fd26 	bl	8005f5e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd45 	bl	8005fb2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fd2c 	bl	8005f8a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006532:	7fbb      	ldrb	r3, [r7, #30]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006540:	f7ff fcfe 	bl	8005f40 <LL_RCC_MSI_EnablePLLMode>
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}

08006548 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006554:	f7ff fe5b 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006558:	f7fb fa6c 	bl	8001a34 <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655e:	e009      	b.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006560:	f7fb fa68 	bl	8001a34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
      break;
 8006572:	e004      	b.n	800657e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006574:	f7ff fe5a 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d137      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ae:	4313      	orrs	r3, r2
 80065b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065b2:	f7ff fe1d 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b6:	f7fb fa3d 	bl	8001a34 <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065bc:	e009      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065be:	f7fb fa39 	bl	8001a34 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
        break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065d2:	f7ff fe2b 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d1f0      	bne.n	80065be <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800660a:	f7ff fe00 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660e:	f7fb fa11 	bl	8001a34 <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006614:	e009      	b.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fb fa0d 	bl	8001a34 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d902      	bls.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e004      	b.n	8006634 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800662a:	f7ff fdff 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d137      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006668:	f7ff fdc2 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666c:	f7fb f9e2 	bl	8001a34 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fb f9de 	bl	8001a34 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e004      	b.n	8006692 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006688:	f7ff fdd0 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d1f0      	bne.n	8006674 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066c0:	f7ff fda5 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066c4:	f7fb f9b6 	bl	8001a34 <HAL_GetTick>
 80066c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ca:	e009      	b.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066cc:	f7fb f9b2 	bl	8001a34 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
      break;
 80066de:	e004      	b.n	80066ea <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066e0:	f7ff fda4 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d137      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006704:	4313      	orrs	r3, r2
 8006706:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671a:	4313      	orrs	r3, r2
 800671c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800671e:	f7ff fd67 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fb f987 	bl	8001a34 <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006728:	e009      	b.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672a:	f7fb f983 	bl	8001a34 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d902      	bls.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
        break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800673e:	f7ff fd75 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d1f0      	bne.n	800672a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800674e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e049      	b.n	8006810 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f841 	bl	8006818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f000 f9b7 	bl	8006b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d001      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e036      	b.n	80068b2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <HAL_TIM_Base_Start_IT+0x94>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x44>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d115      	bne.n	800689c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_TIM_Base_Start_IT+0x98>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d015      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d011      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	e008      	b.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e4 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8d6 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8e7 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0204 	mvn.w	r2, #4
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8be 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8b0 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8c1 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0208 	mvn.w	r2, #8
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f898 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f88a 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f89b 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0210 	mvn.w	r2, #16
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f872 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f864 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f875 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fc9a 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8d0 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8c8 	bl	8006c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f834 	bl	8006b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0220 	mvn.w	r2, #32
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f890 	bl	8006be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0x20>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d108      	bne.n	8006b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_GetUSARTClockSource>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4013      	ands	r3, r2
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_GetLPUARTClockSource>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4013      	ands	r3, r2
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e042      	b.n	8006cf8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fa fc85 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	; 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f914 	bl	8007ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fee9 	bl	8007a88 <UART_SetConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e01b      	b.n	8006cf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f993 	bl	800801c <UART_CheckIdleState>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b091      	sub	sp, #68	; 0x44
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d178      	bne.n	8006e0a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Transmit_IT+0x24>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e071      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2221      	movs	r2, #33	; 0x21
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5c:	d12a      	bne.n	8006db4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d107      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a29      	ldr	r2, [pc, #164]	; (8006e18 <HAL_UART_Transmit_IT+0x118>)
 8006d74:	679a      	str	r2, [r3, #120]	; 0x78
 8006d76:	e002      	b.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <HAL_UART_Transmit_IT+0x11c>)
 8006d7c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9e:	637a      	str	r2, [r7, #52]	; 0x34
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
 8006db2:	e028      	b.n	8006e06 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d107      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <HAL_UART_Transmit_IT+0x120>)
 8006dca:	679a      	str	r2, [r3, #120]	; 0x78
 8006dcc:	e002      	b.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <HAL_UART_Transmit_IT+0x124>)
 8006dd2:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e6      	bne.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e000      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006e0a:	2302      	movs	r3, #2
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3744      	adds	r7, #68	; 0x44
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	08008c8f 	.word	0x08008c8f
 8006e1c:	08008baf 	.word	0x08008baf
 8006e20:	08008aed 	.word	0x08008aed
 8006e24:	08008a35 	.word	0x08008a35

08006e28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d137      	bne.n	8006eb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Receive_IT+0x24>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e030      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <HAL_UART_Receive_IT+0x94>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	69f9      	ldr	r1, [r7, #28]
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e6      	bne.n	8006e6e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f9ca 	bl	8008240 <UART_Start_Receive_IT>
 8006eac:	4603      	mov	r3, r0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3728      	adds	r7, #40	; 0x28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40008000 	.word	0x40008000

08006ec0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d167      	bne.n	8006fa8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Transmit_DMA+0x24>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e060      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2221      	movs	r2, #33	; 0x21
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_UART_Transmit_DMA+0xf4>)
 8006f1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f22:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <HAL_UART_Transmit_DMA+0xf8>)
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <HAL_UART_Transmit_DMA+0xfc>)
 8006f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f32:	2200      	movs	r2, #0
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3328      	adds	r3, #40	; 0x28
 8006f46:	461a      	mov	r2, r3
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	f7fc fc23 	bl	8003794 <HAL_DMA_Start_IT>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2210      	movs	r2, #16
 8006f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e020      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	623a      	str	r2, [r7, #32]
 8006f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e5      	bne.n	8006f70 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800871f 	.word	0x0800871f
 8006fb8:	080087b9 	.word	0x080087b9
 8006fbc:	0800893f 	.word	0x0800893f

08006fc0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d139      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b21      	cmp	r3, #33	; 0x21
 8006fea:	d136      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800700c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702c:	4618      	mov	r0, r3
 800702e:	f7fc fc2c 	bl	800388a <HAL_DMA_Abort>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fd91 	bl	8003b64 <HAL_DMA_GetError>
 8007042:	4603      	mov	r3, r0
 8007044:	2b20      	cmp	r3, #32
 8007046:	d105      	bne.n	8007054 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2210      	movs	r2, #16
 800704c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e047      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fabb 	bl	80085d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d13c      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2b22      	cmp	r3, #34	; 0x22
 800706c:	d139      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60bb      	str	r3, [r7, #8]
   return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	61ba      	str	r2, [r7, #24]
 8007090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	613b      	str	r3, [r7, #16]
   return(result);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fc fbe9 	bl	800388a <HAL_DMA_Abort>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fc fd4d 	bl	8003b64 <HAL_DMA_GetError>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d105      	bne.n	80070dc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2210      	movs	r2, #16
 80070d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e003      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fab8 	bl	8008652 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3740      	adds	r7, #64	; 0x40
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b09a      	sub	sp, #104	; 0x68
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007108:	667b      	str	r3, [r7, #100]	; 0x64
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	657b      	str	r3, [r7, #84]	; 0x54
 8007114:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	663b      	str	r3, [r7, #96]	; 0x60
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800714a:	643a      	str	r2, [r7, #64]	; 0x40
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d118      	bne.n	8007198 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	61fb      	str	r3, [r7, #28]
   return(result);
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007186:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d154      	bne.n	8007250 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c6:	61ba      	str	r2, [r7, #24]
 80071c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ea:	4a26      	ldr	r2, [pc, #152]	; (8007284 <HAL_UART_AbortReceive_IT+0x198>)
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fc fba7 	bl	8003948 <HAL_DMA_Abort_IT>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03c      	beq.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	e032      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	220f      	movs	r2, #15
 8007228:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0208 	orr.w	r2, r2, #8
 8007238:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb55 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
 800724e:	e014      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	220f      	movs	r2, #15
 8007264:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb3f 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3768      	adds	r7, #104	; 0x68
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	080089eb 	.word	0x080089eb

08007288 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b0ba      	sub	sp, #232	; 0xe8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072b6:	4013      	ands	r3, r2
 80072b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11b      	bne.n	80072fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 82e3 	beq.w	80078b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
      }
      return;
 80072fa:	e2dd      	b.n	80078b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8123 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007306:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007312:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007316:	4b8b      	ldr	r3, [pc, #556]	; (8007544 <HAL_UART_IRQHandler+0x2bc>)
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8116 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d011      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f043 0201 	orr.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d011      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2202      	movs	r2, #2
 800736e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2204      	movs	r2, #4
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073cc:	4b5c      	ldr	r3, [pc, #368]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 80073ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2208      	movs	r2, #8
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d012      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800740c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8249 	beq.w	80078bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800747a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747e:	2b00      	cmp	r3, #0
 8007480:	d054      	beq.n	800752c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f8e5 	bl	8008652 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d146      	bne.n	8007524 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1d9      	bne.n	8007496 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_UART_IRQHandler+0x2c0>)
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fc fa23 	bl	8003948 <HAL_DMA_Abort_IT>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751a:	e00f      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f007 ff61 	bl	800f3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	e00b      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f007 ff5d 	bl	800f3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752a:	e007      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f007 ff59 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800753a:	e1bf      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	bf00      	nop
    return;
 800753e:	e1bd      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
 8007540:	10000001 	.word	0x10000001
 8007544:	04000120 	.word	0x04000120
 8007548:	080089bf 	.word	0x080089bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 8153 	bne.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 814c 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8145 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	f040 80bb 	bne.w	8007700 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 818f 	beq.w	80078c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ac:	429a      	cmp	r2, r3
 80075ae:	f080 8187 	bcs.w	80078c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 8087 	bne.w	80076de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1da      	bne.n	80075d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800762a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800763e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e1      	bne.n	800761a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800767a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800767c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076be:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e4      	bne.n	800769c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc f8d6 	bl	800388a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f007 fecd 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076fe:	e0df      	b.n	80078c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80cc 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	623b      	str	r3, [r7, #32]
   return(result);
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800778a:	633a      	str	r2, [r7, #48]	; 0x30
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e1      	bne.n	8007762 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f007 fe4f 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077fa:	e063      	b.n	80078c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00e      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d008      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800781c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fff2 	bl	8009808 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007824:	e051      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d014      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784e:	2b00      	cmp	r3, #0
 8007850:	d03a      	beq.n	80078c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
    }
    return;
 800785a:	e035      	b.n	80078c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa7f 	bl	8008d78 <UART_EndTransmit_IT>
    return;
 800787a:	e026      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 ffcb 	bl	8009830 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789a:	e016      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_UART_IRQHandler+0x642>
 80078a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da0c      	bge.n	80078ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 ffb3 	bl	800981c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b6:	e008      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078b8:	bf00      	nop
 80078ba:	e006      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078bc:	bf00      	nop
 80078be:	e004      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078c8:	bf00      	nop
  }
}
 80078ca:	37e8      	adds	r7, #232	; 0xe8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800790c:	b480      	push	{r7}
 800790e:	b08f      	sub	sp, #60	; 0x3c
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800791e:	2302      	movs	r3, #2
 8007920:	e042      	b.n	80079a8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2224      	movs	r2, #36	; 0x24
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f023 030c 	bic.w	r3, r3, #12
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007952:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f043 0308 	orr.w	r3, r3, #8
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	373c      	adds	r7, #60	; 0x3c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b08f      	sub	sp, #60	; 0x3c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_HalfDuplex_EnableReceiver+0x16>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e042      	b.n	8007a50 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2224      	movs	r2, #36	; 0x24
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f023 030c 	bic.w	r3, r3, #12
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 0304 	orr.w	r3, r3, #4
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	373c      	adds	r7, #60	; 0x3c
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a72:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baf      	ldr	r3, [pc, #700]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4aa4      	ldr	r2, [pc, #656]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a95      	ldr	r2, [pc, #596]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	2003      	movs	r0, #3
 8007b2e:	f7ff f877 	bl	8006c20 <LL_RCC_GetUSARTClockSource>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d81b      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e042      	b.n	8007bde <UART_SetConfig+0x156>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e03e      	b.n	8007bde <UART_SetConfig+0x156>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e03a      	b.n	8007bde <UART_SetConfig+0x156>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e036      	b.n	8007bde <UART_SetConfig+0x156>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e032      	b.n	8007bde <UART_SetConfig+0x156>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7e      	ldr	r2, [pc, #504]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d12a      	bne.n	8007bd8 <UART_SetConfig+0x150>
 8007b82:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b86:	f7ff f85b 	bl	8006c40 <LL_RCC_GetLPUARTClockSource>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b90:	d01a      	beq.n	8007bc8 <UART_SetConfig+0x140>
 8007b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b96:	d81b      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9c:	d00c      	beq.n	8007bb8 <UART_SetConfig+0x130>
 8007b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba2:	d815      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <UART_SetConfig+0x128>
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bac:	d008      	beq.n	8007bc0 <UART_SetConfig+0x138>
 8007bae:	e00f      	b.n	8007bd0 <UART_SetConfig+0x148>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e012      	b.n	8007bde <UART_SetConfig+0x156>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e00a      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e006      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e002      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a65      	ldr	r2, [pc, #404]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	f040 8097 	bne.w	8007d18 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d823      	bhi.n	8007c3a <UART_SetConfig+0x1b2>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x170>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c2b 	.word	0x08007c2b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c3b 	.word	0x08007c3b
 8007c14:	08007c3b 	.word	0x08007c3b
 8007c18:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fe f85a 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8007c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c22:	e010      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b56      	ldr	r3, [pc, #344]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c28:	e00d      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fd ffd3 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c30:	e009      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 812b 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d305      	bcc.n	8007c7e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d903      	bls.n	8007c86 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c84:	e10e      	b.n	8007ea4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	60fa      	str	r2, [r7, #12]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	4a3c      	ldr	r2, [pc, #240]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ca8:	f7f8 fe38 	bl	800091c <__aeabi_uldivmod>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	020b      	lsls	r3, r1, #8
 8007cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cc2:	0202      	lsls	r2, r0, #8
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	6849      	ldr	r1, [r1, #4]
 8007cc8:	0849      	lsrs	r1, r1, #1
 8007cca:	2000      	movs	r0, #0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	4605      	mov	r5, r0
 8007cd0:	eb12 0804 	adds.w	r8, r2, r4
 8007cd4:	eb43 0905 	adc.w	r9, r3, r5
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	469a      	mov	sl, r3
 8007ce0:	4693      	mov	fp, r2
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fe17 	bl	800091c <__aeabi_uldivmod>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d308      	bcc.n	8007d10 <UART_SetConfig+0x288>
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d04:	d204      	bcs.n	8007d10 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e0c9      	b.n	8007ea4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d16:	e0c5      	b.n	8007ea4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d20:	d16d      	bne.n	8007dfe <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b07      	cmp	r3, #7
 8007d2a:	d82d      	bhi.n	8007d88 <UART_SetConfig+0x300>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x2ac>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d55 	.word	0x08007d55
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d63 	.word	0x08007d63
 8007d44:	08007d89 	.word	0x08007d89
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd ffd4 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5a:	e01b      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d60:	e018      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fd ff37 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d68:	e014      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d70:	e010      	b.n	8007d94 <UART_SetConfig+0x30c>
 8007d72:	bf00      	nop
 8007d74:	cfff69f3 	.word	0xcfff69f3
 8007d78:	40008000 	.word	0x40008000
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	0800fa44 	.word	0x0800fa44
      default:
        pclk = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8084 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	4a4b      	ldr	r2, [pc, #300]	; (8007ed0 <UART_SetConfig+0x448>)
 8007da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dae:	005a      	lsls	r2, r3, #1
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	441a      	add	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	2b0f      	cmp	r3, #15
 8007dc6:	d916      	bls.n	8007df6 <UART_SetConfig+0x36e>
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dce:	d212      	bcs.n	8007df6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f023 030f 	bic.w	r3, r3, #15
 8007dd8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	8bfa      	ldrh	r2, [r7, #30]
 8007df2:	60da      	str	r2, [r3, #12]
 8007df4:	e056      	b.n	8007ea4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dfc:	e052      	b.n	8007ea4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d822      	bhi.n	8007e4e <UART_SetConfig+0x3c6>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x388>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e4f 	.word	0x08007e4f
 8007e1c:	08007e3f 	.word	0x08007e3f
 8007e20:	08007e4f 	.word	0x08007e4f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e4f 	.word	0x08007e4f
 8007e2c:	08007e47 	.word	0x08007e47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e30:	f7fd ff66 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e36:	e010      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e38:	4b26      	ldr	r3, [pc, #152]	; (8007ed4 <UART_SetConfig+0x44c>)
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e3c:	e00d      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3e:	f7fd fec9 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e44:	e009      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e4c:	e005      	b.n	8007e5a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e58:	bf00      	nop
    }

    if (pclk != 0U)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d021      	beq.n	8007ea4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <UART_SetConfig+0x448>)
 8007e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	441a      	add	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d909      	bls.n	8007e9e <UART_SetConfig+0x416>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e90:	d205      	bcs.n	8007e9e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e002      	b.n	8007ea4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3730      	adds	r7, #48	; 0x30
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800fa44 	.word	0x0800fa44
 8007ed4:	00f42400 	.word	0x00f42400

08007ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01a      	beq.n	8007fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd6:	d10a      	bne.n	8007fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b098      	sub	sp, #96	; 0x60
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800802c:	f7f9 fd02 	bl	8001a34 <HAL_GetTick>
 8008030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d12f      	bne.n	80080a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008048:	2200      	movs	r2, #0
 800804a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f88e 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d022      	beq.n	80080a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	653b      	str	r3, [r7, #80]	; 0x50
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
 800807a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800807e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e063      	b.n	8008168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d149      	bne.n	8008142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b6:	2200      	movs	r2, #0
 80080b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f857 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d03c      	beq.n	8008142 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	623b      	str	r3, [r7, #32]
   return(result);
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
 80080e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	60fb      	str	r3, [r7, #12]
   return(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	64bb      	str	r3, [r7, #72]	; 0x48
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811a:	61fa      	str	r2, [r7, #28]
 800811c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	617b      	str	r3, [r7, #20]
   return(result);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e5      	bne.n	80080fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e012      	b.n	8008168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3758      	adds	r7, #88	; 0x58
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008180:	e049      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d045      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7f9 fc53 	bl	8001a34 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e048      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa42 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa28 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a6      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008240:	b480      	push	{r7}
 8008242:	b0a3      	sub	sp, #140	; 0x8c
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008272:	d10e      	bne.n	8008292 <UART_Start_Receive_IT+0x52>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <UART_Start_Receive_IT+0x48>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008286:	e02d      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22ff      	movs	r2, #255	; 0xff
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008290:	e028      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <UART_Start_Receive_IT+0x76>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <UART_Start_Receive_IT+0x6c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082aa:	e01b      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	227f      	movs	r2, #127	; 0x7f
 80082b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082b4:	e016      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082be:	d10d      	bne.n	80082dc <UART_Start_Receive_IT+0x9c>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <UART_Start_Receive_IT+0x92>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	227f      	movs	r2, #127	; 0x7f
 80082cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082d0:	e008      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	223f      	movs	r2, #63	; 0x3f
 80082d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082da:	e003      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2222      	movs	r2, #34	; 0x22
 80082f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008318:	673a      	str	r2, [r7, #112]	; 0x70
 800831a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800831e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e3      	bne.n	80082f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d14f      	bne.n	80083d6 <UART_Start_Receive_IT+0x196>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	429a      	cmp	r2, r3
 8008340:	d349      	bcc.n	80083d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d107      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a47      	ldr	r2, [pc, #284]	; (8008474 <UART_Start_Receive_IT+0x234>)
 8008358:	675a      	str	r2, [r3, #116]	; 0x74
 800835a:	e002      	b.n	8008362 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a46      	ldr	r2, [pc, #280]	; (8008478 <UART_Start_Receive_IT+0x238>)
 8008360:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01a      	beq.n	80083a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800838c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800838e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008392:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e4      	bne.n	800836a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <UART_Start_Receive_IT+0x160>
 80083d4:	e046      	b.n	8008464 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d107      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <UART_Start_Receive_IT+0x23c>)
 80083ec:	675a      	str	r2, [r3, #116]	; 0x74
 80083ee:	e002      	b.n	80083f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a23      	ldr	r2, [pc, #140]	; (8008480 <UART_Start_Receive_IT+0x240>)
 80083f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d019      	beq.n	8008432 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008412:	677b      	str	r3, [r7, #116]	; 0x74
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
 800841e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e6      	bne.n	80083fe <UART_Start_Receive_IT+0x1be>
 8008430:	e018      	b.n	8008464 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	67bb      	str	r3, [r7, #120]	; 0x78
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008450:	623b      	str	r3, [r7, #32]
 8008452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	61bb      	str	r3, [r7, #24]
   return(result);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	378c      	adds	r7, #140	; 0x8c
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	080094a1 	.word	0x080094a1
 8008478:	08009141 	.word	0x08009141
 800847c:	08008f89 	.word	0x08008f89
 8008480:	08008dd1 	.word	0x08008dd1

08008484 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b096      	sub	sp, #88	; 0x58
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2222      	movs	r2, #34	; 0x22
 80084ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02d      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c0:	4a40      	ldr	r2, [pc, #256]	; (80085c4 <UART_Start_Receive_DMA+0x140>)
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ca:	4a3f      	ldr	r2, [pc, #252]	; (80085c8 <UART_Start_Receive_DMA+0x144>)
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d4:	4a3d      	ldr	r2, [pc, #244]	; (80085cc <UART_Start_Receive_DMA+0x148>)
 80084d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3324      	adds	r3, #36	; 0x24
 80084ee:	4619      	mov	r1, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	461a      	mov	r2, r3
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	f7fb f94c 	bl	8003794 <HAL_DMA_Start_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2210      	movs	r2, #16
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e051      	b.n	80085ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	653b      	str	r3, [r7, #80]	; 0x50
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008570:	637a      	str	r2, [r7, #52]	; 0x34
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085a4:	623a      	str	r2, [r7, #32]
 80085a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3758      	adds	r7, #88	; 0x58
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	080087d5 	.word	0x080087d5
 80085c8:	08008901 	.word	0x08008901
 80085cc:	0800893f 	.word	0x0800893f

080085d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b08f      	sub	sp, #60	; 0x3c
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	60bb      	str	r3, [r7, #8]
   return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008620:	633b      	str	r3, [r7, #48]	; 0x30
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862a:	61ba      	str	r2, [r7, #24]
 800862c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6979      	ldr	r1, [r7, #20]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	613b      	str	r3, [r7, #16]
   return(result);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008646:	bf00      	nop
 8008648:	373c      	adds	r7, #60	; 0x3c
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008652:	b480      	push	{r7}
 8008654:	b095      	sub	sp, #84	; 0x54
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
 800867a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800867e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	61fb      	str	r3, [r7, #28]
   return(result);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e3      	bne.n	800868c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d118      	bne.n	80086fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6979      	ldr	r1, [r7, #20]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	613b      	str	r3, [r7, #16]
   return(result);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b090      	sub	sp, #64	; 0x40
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d137      	bne.n	80087aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	2200      	movs	r2, #0
 800873e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	623b      	str	r3, [r7, #32]
   return(result);
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60fb      	str	r3, [r7, #12]
   return(result);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69b9      	ldr	r1, [r7, #24]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	617b      	str	r3, [r7, #20]
   return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087a8:	e002      	b.n	80087b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80087aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087ac:	f006 fd72 	bl	800f294 <HAL_UART_TxCpltCallback>
}
 80087b0:	bf00      	nop
 80087b2:	3740      	adds	r7, #64	; 0x40
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff f882 	bl	80078d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b09c      	sub	sp, #112	; 0x70
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d171      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80087f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880c:	66bb      	str	r3, [r7, #104]	; 0x68
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008816:	65bb      	str	r3, [r7, #88]	; 0x58
 8008818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800881c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	667b      	str	r3, [r7, #100]	; 0x64
 8008842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800884a:	647a      	str	r2, [r7, #68]	; 0x44
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	623b      	str	r3, [r7, #32]
   return(result);
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008874:	663b      	str	r3, [r7, #96]	; 0x60
 8008876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800887e:	633a      	str	r2, [r7, #48]	; 0x30
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d118      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0310 	bic.w	r3, r3, #16
 80088b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	617b      	str	r3, [r7, #20]
   return(result);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e8:	4619      	mov	r1, r3
 80088ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088ec:	f006 fdd4 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088f0:	e002      	b.n	80088f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088f4:	f006 fd0c 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 80088f8:	bf00      	nop
 80088fa:	3770      	adds	r7, #112	; 0x70
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d109      	bne.n	8008930 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f006 fdb5 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800892e:	e002      	b.n	8008936 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7fe ffd7 	bl	80078e4 <HAL_UART_RxHalfCpltCallback>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d109      	bne.n	800897e <UART_DMAError+0x40>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b21      	cmp	r3, #33	; 0x21
 800896e:	d106      	bne.n	800897e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fe29 	bl	80085d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d109      	bne.n	80089a0 <UART_DMAError+0x62>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b22      	cmp	r3, #34	; 0x22
 8008990:	d106      	bne.n	80089a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff fe59 	bl	8008652 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a6:	f043 0210 	orr.w	r2, r3, #16
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f006 fd17 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f006 fd01 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	220f      	movs	r2, #15
 8008a06:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7fe ff66 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b08f      	sub	sp, #60	; 0x3c
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	2b21      	cmp	r3, #33	; 0x21
 8008a44:	d14c      	bne.n	8008ae0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d132      	bne.n	8008ab8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008ab6:	e013      	b.n	8008ae0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ae0:	bf00      	nop
 8008ae2:	373c      	adds	r7, #60	; 0x3c
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b091      	sub	sp, #68	; 0x44
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	2b21      	cmp	r3, #33	; 0x21
 8008afc:	d151      	bne.n	8008ba2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d132      	bne.n	8008b70 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	623b      	str	r3, [r7, #32]
   return(result);
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
 8008b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	617b      	str	r3, [r7, #20]
   return(result);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e6      	bne.n	8008b3c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008b6e:	e018      	b.n	8008ba2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8a:	1c9a      	adds	r2, r3, #2
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ba2:	bf00      	nop
 8008ba4:	3744      	adds	r7, #68	; 0x44
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b091      	sub	sp, #68	; 0x44
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbc:	2b21      	cmp	r3, #33	; 0x21
 8008bbe:	d160      	bne.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bc8:	e057      	b.n	8008c7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d133      	bne.n	8008c3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	623b      	str	r3, [r7, #32]
   return(result);
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	617b      	str	r3, [r7, #20]
   return(result);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008c3c:	e021      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c76:	3b01      	subs	r3, #1
 8008c78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1a4      	bne.n	8008bca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008c80:	e7ff      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008c82:	bf00      	nop
 8008c84:	3744      	adds	r7, #68	; 0x44
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b091      	sub	sp, #68	; 0x44
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d165      	bne.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ca8:	e05c      	b.n	8008d64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d133      	bne.n	8008d1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e5      	bne.n	8008cb6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d1c:	e026      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d60:	3b01      	subs	r3, #1
 8008d62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d19f      	bne.n	8008caa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008d6a:	e7ff      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8008d6c:	bf00      	nop
 8008d6e:	3744      	adds	r7, #68	; 0x44
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f006 fa67 	bl	800f294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b09c      	sub	sp, #112	; 0x70
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de8:	2b22      	cmp	r3, #34	; 0x22
 8008dea:	f040 80be 	bne.w	8008f6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008df8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008dfc:	b2d9      	uxtb	r1, r3
 8008dfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e08:	400a      	ands	r2, r1
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 80a1 	bne.w	8008f7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	667b      	str	r3, [r7, #100]	; 0x64
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <UART_RxISR_8BIT+0x1b4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d01f      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d018      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ede:	663b      	str	r3, [r7, #96]	; 0x60
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d12e      	bne.n	8008f62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0310 	bic.w	r3, r3, #16
 8008f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69b9      	ldr	r1, [r7, #24]
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	617b      	str	r3, [r7, #20]
   return(result);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d103      	bne.n	8008f52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f006 fa9c 	bl	800f498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f60:	e00b      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f006 f9d4 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 8008f68:	e007      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699a      	ldr	r2, [r3, #24]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	619a      	str	r2, [r3, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	3770      	adds	r7, #112	; 0x70
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40008000 	.word	0x40008000

08008f88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b09c      	sub	sp, #112	; 0x70
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa0:	2b22      	cmp	r3, #34	; 0x22
 8008fa2:	f040 80be 	bne.w	8009122 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008fba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 80a1 	bne.w	8009132 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009004:	667b      	str	r3, [r7, #100]	; 0x64
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900e:	657b      	str	r3, [r7, #84]	; 0x54
 8009010:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e6      	bne.n	8008ff0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	663b      	str	r3, [r7, #96]	; 0x60
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009042:	643a      	str	r2, [r7, #64]	; 0x40
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a33      	ldr	r2, [pc, #204]	; (800913c <UART_RxISR_16BIT+0x1b4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d01f      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d12e      	bne.n	800911a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0310 	bic.w	r3, r3, #16
 80090d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	613b      	str	r3, [r7, #16]
   return(result);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d103      	bne.n	800910a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2210      	movs	r2, #16
 8009108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f006 f9c0 	bl	800f498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009118:	e00b      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f006 f8f8 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 8009120:	e007      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	619a      	str	r2, [r3, #24]
}
 8009132:	bf00      	nop
 8009134:	3770      	adds	r7, #112	; 0x70
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40008000 	.word	0x40008000

08009140 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b0ac      	sub	sp, #176	; 0xb0
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800914e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 8182 	bne.w	8009480 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009182:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	e125      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009192:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	400a      	ands	r2, r1
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d053      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
 80091e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2201      	movs	r2, #1
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2202      	movs	r2, #2
 8009228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	f043 0204 	orr.w	r2, r3, #4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2204      	movs	r2, #4
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f006 f8b5 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 80a2 	bne.w	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800929e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80092c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e4      	bne.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80092f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e1      	bne.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a5f      	ldr	r2, [pc, #380]	; (8009498 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d021      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01a      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009350:	657b      	str	r3, [r7, #84]	; 0x54
 8009352:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e4      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d130      	bne.n	80093ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009394:	643b      	str	r3, [r7, #64]	; 0x40
 8009396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800939a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e4      	bne.n	8009372 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d103      	bne.n	80093be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2210      	movs	r2, #16
 80093bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f006 f866 	bl	800f498 <HAL_UARTEx_RxEventCallback>
 80093cc:	e002      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f005 ff9e 	bl	800f310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f47f aecf 	bne.w	8009188 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d049      	beq.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009402:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009406:	429a      	cmp	r2, r3
 8009408:	d242      	bcs.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	61fb      	str	r3, [r7, #28]
   return(result);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e3      	bne.n	800940a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a15      	ldr	r2, [pc, #84]	; (800949c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009446:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	60bb      	str	r3, [r7, #8]
   return(result);
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f043 0320 	orr.w	r3, r3, #32
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800946a:	61bb      	str	r3, [r7, #24]
 800946c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6979      	ldr	r1, [r7, #20]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	613b      	str	r3, [r7, #16]
   return(result);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e4      	bne.n	8009448 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800947e:	e007      	b.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699a      	ldr	r2, [r3, #24]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	619a      	str	r2, [r3, #24]
}
 8009490:	bf00      	nop
 8009492:	37b0      	adds	r7, #176	; 0xb0
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40008000 	.word	0x40008000
 800949c:	08008dd1 	.word	0x08008dd1

080094a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b0ae      	sub	sp, #184	; 0xb8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	f040 8186 	bne.w	80097e8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094e6:	e129      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80094fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009502:	4013      	ands	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800950a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009510:	1c9a      	adds	r2, r3, #2
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d053      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800953e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d011      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
 800954a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2201      	movs	r2, #1
 800955c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	f043 0201 	orr.w	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800956e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d011      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800957a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00b      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2202      	movs	r2, #2
 800958c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009594:	f043 0204 	orr.w	r2, r3, #4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800959e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d011      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2204      	movs	r2, #4
 80095bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c4:	f043 0202 	orr.w	r2, r3, #2
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f005 ff03 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 80a4 	bne.w	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800961a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800961e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e2      	bne.n	80095f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800963e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800965c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a5f      	ldr	r2, [pc, #380]	; (8009800 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d021      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01a      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e4      	bne.n	8009696 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d130      	bne.n	8009736 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	f023 0310 	bic.w	r3, r3, #16
 80096ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
 80096fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e4      	bne.n	80096da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b10      	cmp	r3, #16
 800971c:	d103      	bne.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2210      	movs	r2, #16
 8009724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f005 feb2 	bl	800f498 <HAL_UARTEx_RxEventCallback>
 8009734:	e002      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f005 fdea 	bl	800f310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800973c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f aecb 	bne.w	80094e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009758:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800975c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009760:	2b00      	cmp	r3, #0
 8009762:	d049      	beq.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800976a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800976e:	429a      	cmp	r2, r3
 8009770:	d242      	bcs.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	623b      	str	r3, [r7, #32]
   return(result);
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009796:	633a      	str	r2, [r7, #48]	; 0x30
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e3      	bne.n	8009772 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f043 0320 	orr.w	r3, r3, #32
 80097c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	69b9      	ldr	r1, [r7, #24]
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	617b      	str	r3, [r7, #20]
   return(result);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097e6:	e007      	b.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0208 	orr.w	r2, r2, #8
 80097f6:	619a      	str	r2, [r3, #24]
}
 80097f8:	bf00      	nop
 80097fa:	37b8      	adds	r7, #184	; 0xb8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40008000 	.word	0x40008000
 8009804:	08008f89 	.word	0x08008f89

08009808 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_UARTEx_DisableFifoMode+0x16>
 8009856:	2302      	movs	r3, #2
 8009858:	e027      	b.n	80098aa <HAL_UARTEx_DisableFifoMode+0x66>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2224      	movs	r2, #36	; 0x24
 8009866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0201 	bic.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e02d      	b.n	800992a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2224      	movs	r2, #36	; 0x24
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8a4 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009942:	2b01      	cmp	r3, #1
 8009944:	d101      	bne.n	800994a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009946:	2302      	movs	r3, #2
 8009948:	e02d      	b.n	80099a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2224      	movs	r2, #36	; 0x24
 8009956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0201 	bic.w	r2, r2, #1
 8009970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f866 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b08c      	sub	sp, #48	; 0x30
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d142      	bne.n	8009a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e03b      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fe fd4b 	bl	8008484 <UART_Start_Receive_DMA>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80099f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d124      	bne.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d11d      	bne.n	8009a40 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2210      	movs	r2, #16
 8009a0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f043 0310 	orr.w	r3, r3, #16
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	6a39      	ldr	r1, [r7, #32]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e6      	bne.n	8009a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009a3e:	e002      	b.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a4a:	e000      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	; 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d108      	bne.n	8009a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a78:	e031      	b.n	8009ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a7e:	2308      	movs	r3, #8
 8009a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	0e5b      	lsrs	r3, r3, #25
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	0f5b      	lsrs	r3, r3, #29
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	7b3a      	ldrb	r2, [r7, #12]
 8009aa6:	4911      	ldr	r1, [pc, #68]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009aa8:	5c8a      	ldrb	r2, [r1, r2]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aae:	7b3a      	ldrb	r2, [r7, #12]
 8009ab0:	490f      	ldr	r1, [pc, #60]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	7b7a      	ldrb	r2, [r7, #13]
 8009ac4:	4909      	ldr	r1, [pc, #36]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009ac6:	5c8a      	ldrb	r2, [r1, r2]
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009acc:	7b7a      	ldrb	r2, [r7, #13]
 8009ace:	4908      	ldr	r1, [pc, #32]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	0800fa5c 	.word	0x0800fa5c
 8009af0:	0800fa64 	.word	0x0800fa64

08009af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009afc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009b00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	43db      	mvns	r3, r3
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	4013      	ands	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	f107 0014 	add.w	r0, r7, #20
 8009b38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	b004      	add	sp, #16
 8009b6a:	4770      	bx	lr

08009b6c <__NVIC_SetPriority>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db0a      	blt.n	8009b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <__NVIC_SetPriority+0x4c>)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b94:	e00a      	b.n	8009bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4908      	ldr	r1, [pc, #32]	; (8009bbc <__NVIC_SetPriority+0x50>)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	440b      	add	r3, r1
 8009baa:	761a      	strb	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e100 	.word	0xe000e100
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <SysTick_Handler+0x1c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bc8:	f002 fb96 	bl	800c2f8 <xTaskGetSchedulerState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bd2:	f003 fce9 	bl	800d5a8 <xPortSysTickHandler>
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000e010 	.word	0xe000e010

08009be0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009be4:	2100      	movs	r1, #0
 8009be6:	f06f 0004 	mvn.w	r0, #4
 8009bea:	f7ff ffbf 	bl	8009b6c <__NVIC_SetPriority>
#endif
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bfa:	f3ef 8305 	mrs	r3, IPSR
 8009bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8009c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c06:	f06f 0305 	mvn.w	r3, #5
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	e00c      	b.n	8009c28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <osKernelInitialize+0x44>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c16:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <osKernelInitialize+0x44>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	e002      	b.n	8009c28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c28:	687b      	ldr	r3, [r7, #4]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	200007c8 	.word	0x200007c8

08009c3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c42:	f3ef 8305 	mrs	r3, IPSR
 8009c46:	603b      	str	r3, [r7, #0]
  return(result);
 8009c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c4e:	f06f 0305 	mvn.w	r3, #5
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e010      	b.n	8009c78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <osKernelStart+0x48>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d109      	bne.n	8009c72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c5e:	f7ff ffbf 	bl	8009be0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <osKernelStart+0x48>)
 8009c64:	2202      	movs	r2, #2
 8009c66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c68:	f001 fe4e 	bl	800b908 <vTaskStartScheduler>
      stat = osOK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e002      	b.n	8009c78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009c78:	687b      	ldr	r3, [r7, #4]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200007c8 	.word	0x200007c8

08009c88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08e      	sub	sp, #56	; 0x38
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c98:	f3ef 8305 	mrs	r3, IPSR
 8009c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d17e      	bne.n	8009da2 <osThreadNew+0x11a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d07b      	beq.n	8009da2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009caa:	2380      	movs	r3, #128	; 0x80
 8009cac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cae:	2318      	movs	r3, #24
 8009cb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d045      	beq.n	8009d4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <osThreadNew+0x48>
        name = attr->name;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d008      	beq.n	8009cf6 <osThreadNew+0x6e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b38      	cmp	r3, #56	; 0x38
 8009ce8:	d805      	bhi.n	8009cf6 <osThreadNew+0x6e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <osThreadNew+0x72>
        return (NULL);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e054      	b.n	8009da4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <osThreadNew+0xa8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2b5b      	cmp	r3, #91	; 0x5b
 8009d18:	d90a      	bls.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osThreadNew+0xa8>
        mem = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e010      	b.n	8009d52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <osThreadNew+0xca>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <osThreadNew+0xca>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <osThreadNew+0xca>
          mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d110      	bne.n	8009d7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	6a3a      	ldr	r2, [r7, #32]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f001 fbf4 	bl	800b55c <xTaskCreateStatic>
 8009d74:	4603      	mov	r3, r0
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	e013      	b.n	8009da2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d110      	bne.n	8009da2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f001 fc3f 	bl	800b616 <xTaskCreate>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osThreadNew+0x11a>
            hTask = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009da2:	693b      	ldr	r3, [r7, #16]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db4:	f3ef 8305 	mrs	r3, IPSR
 8009db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <osDelay+0x1c>
    stat = osErrorISR;
 8009dc0:	f06f 0305 	mvn.w	r3, #5
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e007      	b.n	8009dd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fd64 	bl	800b8a0 <vTaskDelay>
    }
  }

  return (stat);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b086      	sub	sp, #24
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dee:	f3ef 8305 	mrs	r3, IPSR
 8009df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009df4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d12d      	bne.n	8009e56 <osEventFlagsNew+0x74>
    mem = -1;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d015      	beq.n	8009e32 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d006      	beq.n	8009e1c <osEventFlagsNew+0x3a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	2b1f      	cmp	r3, #31
 8009e14:	d902      	bls.n	8009e1c <osEventFlagsNew+0x3a>
        mem = 1;
 8009e16:	2301      	movs	r3, #1
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	e00c      	b.n	8009e36 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d108      	bne.n	8009e36 <osEventFlagsNew+0x54>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <osEventFlagsNew+0x54>
          mem = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	613b      	str	r3, [r7, #16]
 8009e30:	e001      	b.n	8009e36 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d106      	bne.n	8009e4a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f9e7 	bl	800a214 <xEventGroupCreateStatic>
 8009e46:	6178      	str	r0, [r7, #20]
 8009e48:	e005      	b.n	8009e56 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009e50:	f000 fa17 	bl	800a282 <xEventGroupCreate>
 8009e54:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009e56:	697b      	ldr	r3, [r7, #20]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <osEventFlagsSet+0x1e>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009e7e:	f06f 0303 	mvn.w	r3, #3
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e028      	b.n	8009ed8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e86:	f3ef 8305 	mrs	r3, IPSR
 8009e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01d      	beq.n	8009ece <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f000 fb92 	bl	800a5c8 <xEventGroupSetBitsFromISR>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8009eaa:	f06f 0302 	mvn.w	r3, #2
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e012      	b.n	8009ed8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00d      	beq.n	8009ed8 <osEventFlagsSet+0x78>
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <osEventFlagsSet+0x84>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	e004      	b.n	8009ed8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6938      	ldr	r0, [r7, #16]
 8009ed2:	f000 fabf 	bl	800a454 <xEventGroupSetBits>
 8009ed6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009ed8:	697b      	ldr	r3, [r7, #20]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	e000ed04 	.word	0xe000ed04

08009ee8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	; 0x30
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <osEventFlagsWait+0x22>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009f0a:	f06f 0303 	mvn.w	r3, #3
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e04b      	b.n	8009faa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f12:	f3ef 8305 	mrs	r3, IPSR
 8009f16:	617b      	str	r3, [r7, #20]
  return(result);
 8009f18:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009f1e:	f06f 0305 	mvn.w	r3, #5
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	e041      	b.n	8009faa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	e001      	b.n	8009f3a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	e001      	b.n	8009f4e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	6a3a      	ldr	r2, [r7, #32]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	69b8      	ldr	r0, [r7, #24]
 8009f5a:	f000 f9ad 	bl	800a2b8 <xEventGroupWaitBits>
 8009f5e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d010      	beq.n	8009f8c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d019      	beq.n	8009faa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009f7c:	f06f 0301 	mvn.w	r3, #1
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	e012      	b.n	8009faa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009f84:	f06f 0302 	mvn.w	r3, #2
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	e00e      	b.n	8009faa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4013      	ands	r3, r2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009f9c:	f06f 0301 	mvn.w	r3, #1
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e002      	b.n	8009faa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009fa4:	f06f 0302 	mvn.w	r3, #2
 8009fa8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009faa:	69fb      	ldr	r3, [r7, #28]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3728      	adds	r7, #40	; 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc4:	f3ef 8305 	mrs	r3, IPSR
 8009fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d175      	bne.n	800a0bc <osSemaphoreNew+0x108>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d072      	beq.n	800a0bc <osSemaphoreNew+0x108>
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d86e      	bhi.n	800a0bc <osSemaphoreNew+0x108>
    mem = -1;
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d015      	beq.n	800a016 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d006      	beq.n	800a000 <osSemaphoreNew+0x4c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b4f      	cmp	r3, #79	; 0x4f
 8009ff8:	d902      	bls.n	800a000 <osSemaphoreNew+0x4c>
        mem = 1;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e00c      	b.n	800a01a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d108      	bne.n	800a01a <osSemaphoreNew+0x66>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <osSemaphoreNew+0x66>
          mem = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	e001      	b.n	800a01a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d04c      	beq.n	800a0bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d128      	bne.n	800a07a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10a      	bne.n	800a044 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2203      	movs	r2, #3
 800a034:	9200      	str	r2, [sp, #0]
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	2001      	movs	r0, #1
 800a03c:	f000 fbf4 	bl	800a828 <xQueueGenericCreateStatic>
 800a040:	61f8      	str	r0, [r7, #28]
 800a042:	e005      	b.n	800a050 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a044:	2203      	movs	r2, #3
 800a046:	2100      	movs	r1, #0
 800a048:	2001      	movs	r0, #1
 800a04a:	f000 fc65 	bl	800a918 <xQueueGenericCreate>
 800a04e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d022      	beq.n	800a09c <osSemaphoreNew+0xe8>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01f      	beq.n	800a09c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	69f8      	ldr	r0, [r7, #28]
 800a064:	f000 fd20 	bl	800aaa8 <xQueueGenericSend>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d016      	beq.n	800a09c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a06e:	69f8      	ldr	r0, [r7, #28]
 800a070:	f001 f8a0 	bl	800b1b4 <vQueueDelete>
            hSemaphore = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e010      	b.n	800a09c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d108      	bne.n	800a092 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	461a      	mov	r2, r3
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fca2 	bl	800a9d2 <xQueueCreateCountingSemaphoreStatic>
 800a08e:	61f8      	str	r0, [r7, #28]
 800a090:	e004      	b.n	800a09c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 fcd3 	bl	800aa40 <xQueueCreateCountingSemaphore>
 800a09a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e001      	b.n	800a0b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a0b4:	6979      	ldr	r1, [r7, #20]
 800a0b6:	69f8      	ldr	r0, [r7, #28]
 800a0b8:	f001 f9c8 	bl	800b44c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a0bc:	69fb      	ldr	r3, [r7, #28]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b08a      	sub	sp, #40	; 0x28
 800a0ca:	af02      	add	r7, sp, #8
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0d6:	f3ef 8305 	mrs	r3, IPSR
 800a0da:	613b      	str	r3, [r7, #16]
  return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d15f      	bne.n	800a1a2 <osMessageQueueNew+0xdc>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d05c      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d059      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
    mem = -1;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d029      	beq.n	800a14e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d012      	beq.n	800a128 <osMessageQueueNew+0x62>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b4f      	cmp	r3, #79	; 0x4f
 800a108:	d90e      	bls.n	800a128 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695a      	ldr	r2, [r3, #20]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	fb01 f303 	mul.w	r3, r1, r3
 800a11e:	429a      	cmp	r2, r3
 800a120:	d302      	bcc.n	800a128 <osMessageQueueNew+0x62>
        mem = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	61bb      	str	r3, [r7, #24]
 800a126:	e014      	b.n	800a152 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d110      	bne.n	800a152 <osMessageQueueNew+0x8c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10c      	bne.n	800a152 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d108      	bne.n	800a152 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <osMessageQueueNew+0x8c>
          mem = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	e001      	b.n	800a152 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d10b      	bne.n	800a170 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691a      	ldr	r2, [r3, #16]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2100      	movs	r1, #0
 800a162:	9100      	str	r1, [sp, #0]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fb5e 	bl	800a828 <xQueueGenericCreateStatic>
 800a16c:	61f8      	str	r0, [r7, #28]
 800a16e:	e008      	b.n	800a182 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a176:	2200      	movs	r2, #0
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fbcc 	bl	800a918 <xQueueGenericCreate>
 800a180:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00c      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e001      	b.n	800a19a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	69f8      	ldr	r0, [r7, #28]
 800a19e:	f001 f955 	bl	800b44c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a1a2:	69fb      	ldr	r3, [r7, #28]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4a07      	ldr	r2, [pc, #28]	; (800a1d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	4a06      	ldr	r2, [pc, #24]	; (800a1dc <vApplicationGetIdleTaskMemory+0x30>)
 800a1c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2280      	movs	r2, #128	; 0x80
 800a1c8:	601a      	str	r2, [r3, #0]
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	200007cc 	.word	0x200007cc
 800a1dc:	20000828 	.word	0x20000828

0800a1e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <vApplicationGetTimerTaskMemory+0x2c>)
 800a1f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vApplicationGetTimerTaskMemory+0x30>)
 800a1f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1fe:	601a      	str	r2, [r3, #0]
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000a28 	.word	0x20000a28
 800a210:	20000a84 	.word	0x20000a84

0800a214 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a238:	2320      	movs	r3, #32
 800a23a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d00a      	beq.n	800a258 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f9bf 	bl	800a5f0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2201      	movs	r2, #1
 800a276:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a278:	697b      	ldr	r3, [r7, #20]
	}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a288:	2020      	movs	r0, #32
 800a28a:	f003 fa1d 	bl	800d6c8 <pvPortMalloc>
 800a28e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 f9a5 	bl	800a5f0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a2ac:	687b      	ldr	r3, [r7, #4]
	}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b090      	sub	sp, #64	; 0x40
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xEventGroupWaitBits+0x36>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	623b      	str	r3, [r7, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00a      	beq.n	800a30e <xEventGroupWaitBits+0x56>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61fb      	str	r3, [r7, #28]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <xEventGroupWaitBits+0x72>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61bb      	str	r3, [r7, #24]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a32a:	f001 ffe5 	bl	800c2f8 <xTaskGetSchedulerState>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <xEventGroupWaitBits+0x82>
 800a334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xEventGroupWaitBits+0x86>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xEventGroupWaitBits+0x88>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	617b      	str	r3, [r7, #20]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a35a:	f001 fb3b 	bl	800b9d4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36a:	f000 f90b 	bl	800a584 <prvTestWaitCondition>
 800a36e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00e      	beq.n	800a394 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d028      	beq.n	800a3d6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	43db      	mvns	r3, r3
 800a38c:	401a      	ands	r2, r3
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	e020      	b.n	800a3d6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a3a2:	e018      	b.n	800a3d6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3b0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	1d18      	adds	r0, r3, #4
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	f001 fd0b 	bl	800bde8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a3d6:	f001 fb0b 	bl	800b9f0 <xTaskResumeAll>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d031      	beq.n	800a446 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d107      	bne.n	800a3f8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <xEventGroupWaitBits+0x198>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a3f8:	f002 f8f4 	bl	800c5e4 <uxTaskResetEventItemValue>
 800a3fc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a408:	f003 f83c 	bl	800d484 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a418:	f000 f8b4 	bl	800a584 <prvTestWaitCondition>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d006      	beq.n	800a436 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	43db      	mvns	r3, r3
 800a430:	401a      	ands	r2, r3
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a436:	2301      	movs	r3, #1
 800a438:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a43a:	f003 f853 	bl	800d4e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3740      	adds	r7, #64	; 0x40
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a45e:	2300      	movs	r3, #0
 800a460:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xEventGroupSetBits+0x32>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	613b      	str	r3, [r7, #16]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <xEventGroupSetBits+0x52>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a4b2:	f001 fa8f 	bl	800b9d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a4c8:	e03c      	b.n	800a544 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a4e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d108      	bne.n	800a506 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a504:	e008      	b.n	800a518 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	4013      	ands	r3, r2
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	d101      	bne.n	800a518 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a538:	4619      	mov	r1, r3
 800a53a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a53c:	f001 fd20 	bl	800bf80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d1be      	bne.n	800a4ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	43db      	mvns	r3, r3
 800a554:	401a      	ands	r2, r3
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a55a:	f001 fa49 	bl	800b9f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	681b      	ldr	r3, [r3, #0]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3738      	adds	r7, #56	; 0x38
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff ff6c 	bl	800a454 <xEventGroupSetBits>
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d107      	bne.n	800a5aa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00a      	beq.n	800a5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e007      	b.n	800a5ba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d101      	bne.n	800a5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a5ba:	697b      	ldr	r3, [r7, #20]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4804      	ldr	r0, [pc, #16]	; (800a5ec <xEventGroupSetBitsFromISR+0x24>)
 800a5dc:	f002 fe08 	bl	800d1f0 <xTimerPendFunctionCallFromISR>
 800a5e0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800a5e2:	697b      	ldr	r3, [r7, #20]
	}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	0800a56b 	.word	0x0800a56b

0800a5f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f103 0208 	add.w	r2, r3, #8
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f04f 32ff 	mov.w	r2, #4294967295
 800a608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f103 0208 	add.w	r2, r3, #8
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f103 0208 	add.w	r2, r3, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d103      	bne.n	800a6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e00c      	b.n	800a6cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	e002      	b.n	800a6c0 <vListInsert+0x2e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d2f6      	bcs.n	800a6ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6892      	ldr	r2, [r2, #8]
 800a71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6852      	ldr	r2, [r2, #4]
 800a724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d103      	bne.n	800a738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1e5a      	subs	r2, r3, #1
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <xQueueGenericReset+0x2a>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60bb      	str	r3, [r7, #8]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a782:	f002 fe7f 	bl	800d484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	68f9      	ldr	r1, [r7, #12]
 800a7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	441a      	add	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	22ff      	movs	r2, #255	; 0xff
 800a7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	22ff      	movs	r2, #255	; 0xff
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d114      	bne.n	800a802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01a      	beq.n	800a816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fb67 	bl	800beb8 <xTaskRemoveFromEventList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d012      	beq.n	800a816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <xQueueGenericReset+0xcc>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e009      	b.n	800a816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3310      	adds	r3, #16
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fef2 	bl	800a5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3324      	adds	r3, #36	; 0x24
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff feed 	bl	800a5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a816:	f002 fe65 	bl	800d4e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a81a:	2301      	movs	r3, #1
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <xQueueGenericCreateStatic+0x52>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <xQueueGenericCreateStatic+0x56>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericCreateStatic+0x58>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <xQueueGenericCreateStatic+0x7e>
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <xQueueGenericCreateStatic+0x82>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <xQueueGenericCreateStatic+0x84>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	61fb      	str	r3, [r7, #28]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8c6:	2350      	movs	r3, #80	; 0x50
 800a8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b50      	cmp	r3, #80	; 0x50
 800a8ce:	d00a      	beq.n	800a8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	61bb      	str	r3, [r7, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f83f 	bl	800a98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a910:	4618      	mov	r0, r3
 800a912:	3730      	adds	r7, #48	; 0x30
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	613b      	str	r3, [r7, #16]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	3350      	adds	r3, #80	; 0x50
 800a950:	4618      	mov	r0, r3
 800a952:	f002 feb9 	bl	800d6c8 <pvPortMalloc>
 800a956:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d011      	beq.n	800a982 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3350      	adds	r3, #80	; 0x50
 800a966:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a970:	79fa      	ldrb	r2, [r7, #7]
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	4613      	mov	r3, r2
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f805 	bl	800a98c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a982:	69bb      	ldr	r3, [r7, #24]
	}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d103      	bne.n	800a9a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	e002      	b.n	800a9ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	69b8      	ldr	r0, [r7, #24]
 800a9be:	f7ff fecb 	bl	800a758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b08a      	sub	sp, #40	; 0x28
 800a9d6:	af02      	add	r7, sp, #8
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10a      	bne.n	800a9fa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	61bb      	str	r3, [r7, #24]
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d90a      	bls.n	800aa18 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	617b      	str	r3, [r7, #20]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa18:	2302      	movs	r3, #2
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff ff00 	bl	800a828 <xQueueGenericCreateStatic>
 800aa28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa36:	69fb      	ldr	r3, [r7, #28]
	}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	613b      	str	r3, [r7, #16]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d90a      	bls.n	800aa84 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	60fb      	str	r3, [r7, #12]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa84:	2202      	movs	r2, #2
 800aa86:	2100      	movs	r1, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff ff45 	bl	800a918 <xQueueGenericCreate>
 800aa8e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aa9c:	697b      	ldr	r3, [r7, #20]
	}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08e      	sub	sp, #56	; 0x38
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aab6:	2300      	movs	r3, #0
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueGenericSend+0x32>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <xQueueGenericSend+0x40>
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <xQueueGenericSend+0x44>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <xQueueGenericSend+0x46>
 800aaec:	2300      	movs	r3, #0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <xQueueGenericSend+0x60>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d103      	bne.n	800ab16 <xQueueGenericSend+0x6e>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <xQueueGenericSend+0x72>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueGenericSend+0x74>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab36:	f001 fbdf 	bl	800c2f8 <xTaskGetSchedulerState>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <xQueueGenericSend+0x9e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <xQueueGenericSend+0xa2>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <xQueueGenericSend+0xa4>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	61fb      	str	r3, [r7, #28]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab66:	f002 fc8d 	bl	800d484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <xQueueGenericSend+0xd4>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d129      	bne.n	800abd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab82:	f000 fb52 	bl	800b22a <prvCopyDataToQueue>
 800ab86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d010      	beq.n	800abb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 f98f 	bl	800beb8 <xTaskRemoveFromEventList>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d013      	beq.n	800abc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aba0:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	e00a      	b.n	800abc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abb8:	4b39      	ldr	r3, [pc, #228]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abc8:	f002 fc8c 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800abcc:	2301      	movs	r3, #1
 800abce:	e063      	b.n	800ac98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abd6:	f002 fc85 	bl	800d4e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	e05c      	b.n	800ac98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abe4:	f107 0314 	add.w	r3, r7, #20
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 fa2b 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abf2:	f002 fc77 	bl	800d4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abf6:	f000 feed 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abfa:	f002 fc43 	bl	800d484 <vPortEnterCritical>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d103      	bne.n	800ac14 <xQueueGenericSend+0x16c>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac1a:	b25b      	sxtb	r3, r3
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d103      	bne.n	800ac2a <xQueueGenericSend+0x182>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac2a:	f002 fc5b 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac2e:	1d3a      	adds	r2, r7, #4
 800ac30:	f107 0314 	add.w	r3, r7, #20
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 fa1a 	bl	800c070 <xTaskCheckForTimeOut>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d124      	bne.n	800ac8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac44:	f000 fbe9 	bl	800b41a <prvIsQueueFull>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d018      	beq.n	800ac80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	3310      	adds	r3, #16
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f8a2 	bl	800bda0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	f000 fb74 	bl	800b34a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac62:	f000 fec5 	bl	800b9f0 <xTaskResumeAll>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f47f af7c 	bne.w	800ab66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	e772      	b.n	800ab66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac82:	f000 fb62 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac86:	f000 feb3 	bl	800b9f0 <xTaskResumeAll>
 800ac8a:	e76c      	b.n	800ab66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 fb5c 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac92:	f000 fead 	bl	800b9f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3738      	adds	r7, #56	; 0x38
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b090      	sub	sp, #64	; 0x40
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <xQueueGenericSendFromISR+0x3c>
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <xQueueGenericSendFromISR+0x40>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e000      	b.n	800ace6 <xQueueGenericSendFromISR+0x42>
 800ace4:	2300      	movs	r3, #0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10a      	bne.n	800ad00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d103      	bne.n	800ad0e <xQueueGenericSendFromISR+0x6a>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d101      	bne.n	800ad12 <xQueueGenericSendFromISR+0x6e>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e000      	b.n	800ad14 <xQueueGenericSendFromISR+0x70>
 800ad12:	2300      	movs	r3, #0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	623b      	str	r3, [r7, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad2e:	f002 fc8b 	bl	800d648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad32:	f3ef 8211 	mrs	r2, BASEPRI
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	61fa      	str	r2, [r7, #28]
 800ad48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d302      	bcc.n	800ad60 <xQueueGenericSendFromISR+0xbc>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d12f      	bne.n	800adc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad76:	f000 fa58 	bl	800b22a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d112      	bne.n	800adaa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d016      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	3324      	adds	r3, #36	; 0x24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 f891 	bl	800beb8 <xTaskRemoveFromEventList>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00e      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	e007      	b.n	800adba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adae:	3301      	adds	r3, #1
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	b25a      	sxtb	r2, r3
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adba:	2301      	movs	r3, #1
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adbe:	e001      	b.n	800adc4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800add2:	4618      	mov	r0, r3
 800add4:	3740      	adds	r7, #64	; 0x40
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08c      	sub	sp, #48	; 0x30
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ade8:	2300      	movs	r3, #0
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <xQueueReceive+0x30>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	623b      	str	r3, [r7, #32]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <xQueueReceive+0x3e>
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <xQueueReceive+0x42>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <xQueueReceive+0x44>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xQueueReceive+0x5e>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	61fb      	str	r3, [r7, #28]
}
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae3a:	f001 fa5d 	bl	800c2f8 <xTaskGetSchedulerState>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <xQueueReceive+0x6e>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <xQueueReceive+0x72>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <xQueueReceive+0x74>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xQueueReceive+0x8e>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	61bb      	str	r3, [r7, #24]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae6a:	f002 fb0b 	bl	800d484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01f      	beq.n	800aeba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae7e:	f000 fa3e 	bl	800b2fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	1e5a      	subs	r2, r3, #1
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	3310      	adds	r3, #16
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 f80e 	bl	800beb8 <xTaskRemoveFromEventList>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aea2:	4b3d      	ldr	r3, [pc, #244]	; (800af98 <xQueueReceive+0x1bc>)
 800aea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aeb2:	f002 fb17 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e069      	b.n	800af8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aec0:	f002 fb10 	bl	800d4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e062      	b.n	800af8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aece:	f107 0310 	add.w	r3, r7, #16
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 f8b6 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aedc:	f002 fb02 	bl	800d4e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aee0:	f000 fd78 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aee4:	f002 face 	bl	800d484 <vPortEnterCritical>
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeee:	b25b      	sxtb	r3, r3
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d103      	bne.n	800aefe <xQueueReceive+0x122>
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af04:	b25b      	sxtb	r3, r3
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d103      	bne.n	800af14 <xQueueReceive+0x138>
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af14:	f002 fae6 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af18:	1d3a      	adds	r2, r7, #4
 800af1a:	f107 0310 	add.w	r3, r7, #16
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f001 f8a5 	bl	800c070 <xTaskCheckForTimeOut>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d123      	bne.n	800af74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f000 fa5e 	bl	800b3ee <prvIsQueueEmpty>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d017      	beq.n	800af68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	3324      	adds	r3, #36	; 0x24
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f000 ff2d 	bl	800bda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af48:	f000 f9ff 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af4c:	f000 fd50 	bl	800b9f0 <xTaskResumeAll>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d189      	bne.n	800ae6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af56:	4b10      	ldr	r3, [pc, #64]	; (800af98 <xQueueReceive+0x1bc>)
 800af58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	e780      	b.n	800ae6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6a:	f000 f9ee 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af6e:	f000 fd3f 	bl	800b9f0 <xTaskResumeAll>
 800af72:	e77a      	b.n	800ae6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af76:	f000 f9e8 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af7a:	f000 fd39 	bl	800b9f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af80:	f000 fa35 	bl	800b3ee <prvIsQueueEmpty>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	f43f af6f 	beq.w	800ae6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3730      	adds	r7, #48	; 0x30
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08e      	sub	sp, #56	; 0x38
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800afa6:	2300      	movs	r3, #0
 800afa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	623b      	str	r3, [r7, #32]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	61fb      	str	r3, [r7, #28]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afec:	f001 f984 	bl	800c2f8 <xTaskGetSchedulerState>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <xQueueSemaphoreTake+0x60>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <xQueueSemaphoreTake+0x64>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <xQueueSemaphoreTake+0x66>
 800b000:	2300      	movs	r3, #0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10a      	bne.n	800b01c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	61bb      	str	r3, [r7, #24]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b01c:	f002 fa32 	bl	800d484 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d024      	beq.n	800b076 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	1e5a      	subs	r2, r3, #1
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b03c:	f001 faea 	bl	800c614 <pvTaskIncrementMutexHeldCount>
 800b040:	4602      	mov	r2, r0
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00f      	beq.n	800b06e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	3310      	adds	r3, #16
 800b052:	4618      	mov	r0, r3
 800b054:	f000 ff30 	bl	800beb8 <xTaskRemoveFromEventList>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b05e:	4b54      	ldr	r3, [pc, #336]	; (800b1b0 <xQueueSemaphoreTake+0x214>)
 800b060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b06e:	f002 fa39 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800b072:	2301      	movs	r3, #1
 800b074:	e097      	b.n	800b1a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d111      	bne.n	800b0a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	617b      	str	r3, [r7, #20]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b098:	f002 fa24 	bl	800d4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e082      	b.n	800b1a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 ffca 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0b4:	f002 fa16 	bl	800d4e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0b8:	f000 fc8c 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0bc:	f002 f9e2 	bl	800d484 <vPortEnterCritical>
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0c6:	b25b      	sxtb	r3, r3
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0cc:	d103      	bne.n	800b0d6 <xQueueSemaphoreTake+0x13a>
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0dc:	b25b      	sxtb	r3, r3
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d103      	bne.n	800b0ec <xQueueSemaphoreTake+0x150>
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0ec:	f002 f9fa 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0f0:	463a      	mov	r2, r7
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 ffb9 	bl	800c070 <xTaskCheckForTimeOut>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d132      	bne.n	800b16a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b106:	f000 f972 	bl	800b3ee <prvIsQueueEmpty>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d026      	beq.n	800b15e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d109      	bne.n	800b12c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b118:	f002 f9b4 	bl	800d484 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	4618      	mov	r0, r3
 800b122:	f001 f907 	bl	800c334 <xTaskPriorityInherit>
 800b126:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b128:	f002 f9dc 	bl	800d4e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fe33 	bl	800bda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13c:	f000 f905 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b140:	f000 fc56 	bl	800b9f0 <xTaskResumeAll>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f af68 	bne.w	800b01c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b14c:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <xQueueSemaphoreTake+0x214>)
 800b14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	e75e      	b.n	800b01c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b160:	f000 f8f3 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b164:	f000 fc44 	bl	800b9f0 <xTaskResumeAll>
 800b168:	e758      	b.n	800b01c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b16c:	f000 f8ed 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b170:	f000 fc3e 	bl	800b9f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b176:	f000 f93a 	bl	800b3ee <prvIsQueueEmpty>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f43f af4d 	beq.w	800b01c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00d      	beq.n	800b1a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b188:	f002 f97c 	bl	800d484 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b18c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b18e:	f000 f834 	bl	800b1fa <prvGetDisinheritPriorityAfterTimeout>
 800b192:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f9a0 	bl	800c4e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b1a0:	f002 f9a0 	bl	800d4e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3738      	adds	r7, #56	; 0x38
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <vQueueDelete+0x28>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60bb      	str	r3, [r7, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 f95f 	bl	800b4a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f002 fb37 	bl	800d860 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e001      	b.n	800b21c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b21c:	68fb      	ldr	r3, [r7, #12]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10d      	bne.n	800b264 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d14d      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f8d5 	bl	800c404 <xTaskPriorityDisinherit>
 800b25a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	609a      	str	r2, [r3, #8]
 800b262:	e043      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6858      	ldr	r0, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	461a      	mov	r2, r3
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	f004 fae7 	bl	800f848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d32b      	bcc.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	e026      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	68d8      	ldr	r0, [r3, #12]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	f004 facd 	bl	800f848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	425b      	negs	r3, r3
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d207      	bcs.n	800b2da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	425b      	negs	r3, r3
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d105      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d018      	beq.n	800b342 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	441a      	add	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	429a      	cmp	r2, r3
 800b328:	d303      	bcc.n	800b332 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68d9      	ldr	r1, [r3, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	461a      	mov	r2, r3
 800b33c:	6838      	ldr	r0, [r7, #0]
 800b33e:	f004 fa83 	bl	800f848 <memcpy>
	}
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b352:	f002 f897 	bl	800d484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b35e:	e011      	b.n	800b384 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d012      	beq.n	800b38e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3324      	adds	r3, #36	; 0x24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fda3 	bl	800beb8 <xTaskRemoveFromEventList>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b378:	f000 fedc 	bl	800c134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	3b01      	subs	r3, #1
 800b380:	b2db      	uxtb	r3, r3
 800b382:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	dce9      	bgt.n	800b360 <prvUnlockQueue+0x16>
 800b38c:	e000      	b.n	800b390 <prvUnlockQueue+0x46>
					break;
 800b38e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	22ff      	movs	r2, #255	; 0xff
 800b394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b398:	f002 f8a4 	bl	800d4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b39c:	f002 f872 	bl	800d484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3a8:	e011      	b.n	800b3ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fd7e 	bl	800beb8 <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3c2:	f000 feb7 	bl	800c134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dce9      	bgt.n	800b3aa <prvUnlockQueue+0x60>
 800b3d6:	e000      	b.n	800b3da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	; 0xff
 800b3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3e2:	f002 f87f 	bl	800d4e4 <vPortExitCritical>
}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3f6:	f002 f845 	bl	800d484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e001      	b.n	800b40c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b40c:	f002 f86a 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800b410:	68fb      	ldr	r3, [r7, #12]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b422:	f002 f82f 	bl	800d484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d102      	bne.n	800b438 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b432:	2301      	movs	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	e001      	b.n	800b43c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b438:	2300      	movs	r3, #0
 800b43a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b43c:	f002 f852 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e014      	b.n	800b486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b45c:	4a0f      	ldr	r2, [pc, #60]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b468:	490c      	ldr	r1, [pc, #48]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b472:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	4413      	add	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b47e:	e006      	b.n	800b48e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	d9e7      	bls.n	800b45c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000e84 	.word	0x20000e84

0800b4a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e016      	b.n	800b4dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d10b      	bne.n	800b4d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b4be:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
				break;
 800b4d4:	e006      	b.n	800b4e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	d9e5      	bls.n	800b4ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000e84 	.word	0x20000e84

0800b4f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b504:	f001 ffbe 	bl	800d484 <vPortEnterCritical>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d103      	bne.n	800b51e <vQueueWaitForMessageRestricted+0x2a>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b524:	b25b      	sxtb	r3, r3
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d103      	bne.n	800b534 <vQueueWaitForMessageRestricted+0x40>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b534:	f001 ffd6 	bl	800d4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3324      	adds	r3, #36	; 0x24
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fc89 	bl	800be60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b54e:	6978      	ldr	r0, [r7, #20]
 800b550:	f7ff fefb 	bl	800b34a <prvUnlockQueue>
	}
 800b554:	bf00      	nop
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	; 0x38
 800b560:	af04      	add	r7, sp, #16
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	623b      	str	r3, [r7, #32]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	61fb      	str	r3, [r7, #28]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5a2:	235c      	movs	r3, #92	; 0x5c
 800b5a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5aa:	d00a      	beq.n	800b5c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61bb      	str	r3, [r7, #24]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d01e      	beq.n	800b608 <xTaskCreateStatic+0xac>
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01b      	beq.n	800b608 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	2202      	movs	r2, #2
 800b5de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 f850 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b602:	f000 f8dd 	bl	800b7c0 <prvAddNewTaskToReadyList>
 800b606:	e001      	b.n	800b60c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b60c:	697b      	ldr	r3, [r7, #20]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b616:	b580      	push	{r7, lr}
 800b618:	b08c      	sub	sp, #48	; 0x30
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	4613      	mov	r3, r2
 800b624:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b626:	88fb      	ldrh	r3, [r7, #6]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 f84c 	bl	800d6c8 <pvPortMalloc>
 800b630:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b638:	205c      	movs	r0, #92	; 0x5c
 800b63a:	f002 f845 	bl	800d6c8 <pvPortMalloc>
 800b63e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	631a      	str	r2, [r3, #48]	; 0x30
 800b64c:	e005      	b.n	800b65a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b64e:	6978      	ldr	r0, [r7, #20]
 800b650:	f002 f906 	bl	800d860 <vPortFree>
 800b654:	e001      	b.n	800b65a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d017      	beq.n	800b690 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	9302      	str	r3, [sp, #8]
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 f80e 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b684:	69f8      	ldr	r0, [r7, #28]
 800b686:	f000 f89b 	bl	800b7c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b68a:	2301      	movs	r3, #1
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	e002      	b.n	800b696 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b690:	f04f 33ff 	mov.w	r3, #4294967295
 800b694:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b696:	69bb      	ldr	r3, [r7, #24]
	}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	21a5      	movs	r1, #165	; 0xa5
 800b6ba:	f004 f899 	bl	800f7f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	617b      	str	r3, [r7, #20]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d01f      	beq.n	800b73e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e012      	b.n	800b72a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	7819      	ldrb	r1, [r3, #0]
 800b70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	3334      	adds	r3, #52	; 0x34
 800b714:	460a      	mov	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	3301      	adds	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d9e9      	bls.n	800b704 <prvInitialiseNewTask+0x64>
 800b730:	e000      	b.n	800b734 <prvInitialiseNewTask+0x94>
			{
				break;
 800b732:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b73c:	e003      	b.n	800b746 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2b37      	cmp	r3, #55	; 0x37
 800b74a:	d901      	bls.n	800b750 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b74c:	2337      	movs	r3, #55	; 0x37
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe ff62 	bl	800a630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3318      	adds	r3, #24
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe ff5d 	bl	800a630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	68f9      	ldr	r1, [r7, #12]
 800b79e:	69b8      	ldr	r0, [r7, #24]
 800b7a0:	f001 fd46 	bl	800d230 <pxPortInitialiseStack>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7c8:	f001 fe5c 	bl	800d484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	4a2c      	ldr	r2, [pc, #176]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7d6:	4b2c      	ldr	r3, [pc, #176]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7de:	4a2a      	ldr	r2, [pc, #168]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d110      	bne.n	800b80e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7ec:	f000 fcc6 	bl	800c17c <prvInitialiseTaskLists>
 800b7f0:	e00d      	b.n	800b80e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7f2:	4b26      	ldr	r3, [pc, #152]	; (800b88c <prvAddNewTaskToReadyList+0xcc>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7fa:	4b23      	ldr	r3, [pc, #140]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	429a      	cmp	r2, r3
 800b806:	d802      	bhi.n	800b80e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b808:	4a1f      	ldr	r2, [pc, #124]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b80e:	4b20      	ldr	r3, [pc, #128]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	4a1e      	ldr	r2, [pc, #120]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b816:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b818:	4b1d      	ldr	r3, [pc, #116]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <prvAddNewTaskToReadyList+0xd4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d903      	bls.n	800b834 <prvAddNewTaskToReadyList+0x74>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	4a18      	ldr	r2, [pc, #96]	; (800b894 <prvAddNewTaskToReadyList+0xd4>)
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4a15      	ldr	r2, [pc, #84]	; (800b898 <prvAddNewTaskToReadyList+0xd8>)
 800b842:	441a      	add	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fe fefd 	bl	800a64a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b850:	f001 fe48 	bl	800d4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b854:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <prvAddNewTaskToReadyList+0xcc>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00e      	beq.n	800b87a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	429a      	cmp	r2, r3
 800b868:	d207      	bcs.n	800b87a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b86a:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <prvAddNewTaskToReadyList+0xdc>)
 800b86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20001398 	.word	0x20001398
 800b888:	20000ec4 	.word	0x20000ec4
 800b88c:	200013a4 	.word	0x200013a4
 800b890:	200013b4 	.word	0x200013b4
 800b894:	200013a0 	.word	0x200013a0
 800b898:	20000ec8 	.word	0x20000ec8
 800b89c:	e000ed04 	.word	0xe000ed04

0800b8a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d017      	beq.n	800b8e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <vTaskDelay+0x60>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <vTaskDelay+0x30>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60bb      	str	r3, [r7, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8d0:	f000 f880 	bl	800b9d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 f88c 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8dc:	f000 f888 	bl	800b9f0 <xTaskResumeAll>
 800b8e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d107      	bne.n	800b8f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8e8:	4b06      	ldr	r3, [pc, #24]	; (800b904 <vTaskDelay+0x64>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	200013c0 	.word	0x200013c0
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	; 0x28
 800b90c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b916:	463a      	mov	r2, r7
 800b918:	1d39      	adds	r1, r7, #4
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fc44 	bl	800a1ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	9202      	str	r2, [sp, #8]
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	2300      	movs	r3, #0
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	460a      	mov	r2, r1
 800b936:	4921      	ldr	r1, [pc, #132]	; (800b9bc <vTaskStartScheduler+0xb4>)
 800b938:	4821      	ldr	r0, [pc, #132]	; (800b9c0 <vTaskStartScheduler+0xb8>)
 800b93a:	f7ff fe0f 	bl	800b55c <xTaskCreateStatic>
 800b93e:	4603      	mov	r3, r0
 800b940:	4a20      	ldr	r2, [pc, #128]	; (800b9c4 <vTaskStartScheduler+0xbc>)
 800b942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b944:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <vTaskStartScheduler+0xbc>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b94c:	2301      	movs	r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e001      	b.n	800b956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d102      	bne.n	800b962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b95c:	f001 f89e 	bl	800ca9c <xTimerCreateTimerTask>
 800b960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d116      	bne.n	800b996 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	613b      	str	r3, [r7, #16]
}
 800b97a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b97c:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <vTaskStartScheduler+0xc0>)
 800b97e:	f04f 32ff 	mov.w	r2, #4294967295
 800b982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <vTaskStartScheduler+0xc4>)
 800b986:	2201      	movs	r2, #1
 800b988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b98a:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <vTaskStartScheduler+0xc8>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b990:	f001 fcd6 	bl	800d340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b994:	e00e      	b.n	800b9b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d10a      	bne.n	800b9b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <vTaskStartScheduler+0xaa>
}
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0800f8d4 	.word	0x0800f8d4
 800b9c0:	0800c14d 	.word	0x0800c14d
 800b9c4:	200013bc 	.word	0x200013bc
 800b9c8:	200013b8 	.word	0x200013b8
 800b9cc:	200013a4 	.word	0x200013a4
 800b9d0:	2000139c 	.word	0x2000139c

0800b9d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9d8:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <vTaskSuspendAll+0x18>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	4a03      	ldr	r2, [pc, #12]	; (800b9ec <vTaskSuspendAll+0x18>)
 800b9e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9e2:	bf00      	nop
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	200013c0 	.word	0x200013c0

0800b9f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9fe:	4b42      	ldr	r3, [pc, #264]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xTaskResumeAll+0x2c>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	603b      	str	r3, [r7, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba1c:	f001 fd32 	bl	800d484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba20:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4a38      	ldr	r2, [pc, #224]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba2a:	4b37      	ldr	r3, [pc, #220]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d162      	bne.n	800baf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba32:	4b36      	ldr	r3, [pc, #216]	; (800bb0c <xTaskResumeAll+0x11c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d05e      	beq.n	800baf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba3a:	e02f      	b.n	800ba9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba3c:	4b34      	ldr	r3, [pc, #208]	; (800bb10 <xTaskResumeAll+0x120>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3318      	adds	r3, #24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fe5b 	bl	800a704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fe56 	bl	800a704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5c:	4b2d      	ldr	r3, [pc, #180]	; (800bb14 <xTaskResumeAll+0x124>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d903      	bls.n	800ba6c <xTaskResumeAll+0x7c>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	4a2a      	ldr	r2, [pc, #168]	; (800bb14 <xTaskResumeAll+0x124>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4a27      	ldr	r2, [pc, #156]	; (800bb18 <xTaskResumeAll+0x128>)
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fe fde1 	bl	800a64a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <xTaskResumeAll+0x12c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d302      	bcc.n	800ba9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba96:	4b22      	ldr	r3, [pc, #136]	; (800bb20 <xTaskResumeAll+0x130>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba9c:	4b1c      	ldr	r3, [pc, #112]	; (800bb10 <xTaskResumeAll+0x120>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1cb      	bne.n	800ba3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baaa:	f000 fc05 	bl	800c2b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <xTaskResumeAll+0x134>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d010      	beq.n	800badc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baba:	f000 f859 	bl	800bb70 <xTaskIncrementTick>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bac4:	4b16      	ldr	r3, [pc, #88]	; (800bb20 <xTaskResumeAll+0x130>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3b01      	subs	r3, #1
 800bace:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f1      	bne.n	800baba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bad6:	4b13      	ldr	r3, [pc, #76]	; (800bb24 <xTaskResumeAll+0x134>)
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800badc:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <xTaskResumeAll+0x130>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bae4:	2301      	movs	r3, #1
 800bae6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTaskResumeAll+0x138>)
 800baea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baf8:	f001 fcf4 	bl	800d4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800bafc:	68bb      	ldr	r3, [r7, #8]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	200013c0 	.word	0x200013c0
 800bb0c:	20001398 	.word	0x20001398
 800bb10:	20001358 	.word	0x20001358
 800bb14:	200013a0 	.word	0x200013a0
 800bb18:	20000ec8 	.word	0x20000ec8
 800bb1c:	20000ec4 	.word	0x20000ec4
 800bb20:	200013ac 	.word	0x200013ac
 800bb24:	200013a8 	.word	0x200013a8
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <xTaskGetTickCount+0x1c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb38:	687b      	ldr	r3, [r7, #4]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	2000139c 	.word	0x2000139c

0800bb4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb52:	f001 fd79 	bl	800d648 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <xTaskGetTickCountFromISR+0x20>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb60:	683b      	ldr	r3, [r7, #0]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2000139c 	.word	0x2000139c

0800bb70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	; (800bcb8 <xTaskIncrementTick+0x148>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f040 808f 	bne.w	800bca2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb84:	4b4d      	ldr	r3, [pc, #308]	; (800bcbc <xTaskIncrementTick+0x14c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb8c:	4a4b      	ldr	r2, [pc, #300]	; (800bcbc <xTaskIncrementTick+0x14c>)
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d120      	bne.n	800bbda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb98:	4b49      	ldr	r3, [pc, #292]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	603b      	str	r3, [r7, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <xTaskIncrementTick+0x46>
 800bbb8:	4b41      	ldr	r3, [pc, #260]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	4b41      	ldr	r3, [pc, #260]	; (800bcc4 <xTaskIncrementTick+0x154>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a3f      	ldr	r2, [pc, #252]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	4a3f      	ldr	r2, [pc, #252]	; (800bcc4 <xTaskIncrementTick+0x154>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	4b3e      	ldr	r3, [pc, #248]	; (800bcc8 <xTaskIncrementTick+0x158>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a3d      	ldr	r2, [pc, #244]	; (800bcc8 <xTaskIncrementTick+0x158>)
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	f000 fb6f 	bl	800c2b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbda:	4b3c      	ldr	r3, [pc, #240]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d349      	bcc.n	800bc78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe4:	4b36      	ldr	r3, [pc, #216]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d104      	bne.n	800bbf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbee:	4b37      	ldr	r3, [pc, #220]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf4:	601a      	str	r2, [r3, #0]
					break;
 800bbf6:	e03f      	b.n	800bc78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbf8:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d203      	bcs.n	800bc18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc10:	4a2e      	ldr	r2, [pc, #184]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc16:	e02f      	b.n	800bc78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fe fd71 	bl	800a704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	3318      	adds	r3, #24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fd68 	bl	800a704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc38:	4b25      	ldr	r3, [pc, #148]	; (800bcd0 <xTaskIncrementTick+0x160>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d903      	bls.n	800bc48 <xTaskIncrementTick+0xd8>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	4a22      	ldr	r2, [pc, #136]	; (800bcd0 <xTaskIncrementTick+0x160>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4a1f      	ldr	r2, [pc, #124]	; (800bcd4 <xTaskIncrementTick+0x164>)
 800bc56:	441a      	add	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fe fcf3 	bl	800a64a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc68:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <xTaskIncrementTick+0x168>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3b8      	bcc.n	800bbe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc72:	2301      	movs	r3, #1
 800bc74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc76:	e7b5      	b.n	800bbe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <xTaskIncrementTick+0x168>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7e:	4915      	ldr	r1, [pc, #84]	; (800bcd4 <xTaskIncrementTick+0x164>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d901      	bls.n	800bc94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc90:	2301      	movs	r3, #1
 800bc92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc94:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <xTaskIncrementTick+0x16c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e004      	b.n	800bcac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <xTaskIncrementTick+0x170>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	4a0d      	ldr	r2, [pc, #52]	; (800bce0 <xTaskIncrementTick+0x170>)
 800bcaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcac:	697b      	ldr	r3, [r7, #20]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200013c0 	.word	0x200013c0
 800bcbc:	2000139c 	.word	0x2000139c
 800bcc0:	20001350 	.word	0x20001350
 800bcc4:	20001354 	.word	0x20001354
 800bcc8:	200013b0 	.word	0x200013b0
 800bccc:	200013b8 	.word	0x200013b8
 800bcd0:	200013a0 	.word	0x200013a0
 800bcd4:	20000ec8 	.word	0x20000ec8
 800bcd8:	20000ec4 	.word	0x20000ec4
 800bcdc:	200013ac 	.word	0x200013ac
 800bce0:	200013a8 	.word	0x200013a8

0800bce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcea:	4b28      	ldr	r3, [pc, #160]	; (800bd8c <vTaskSwitchContext+0xa8>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcf2:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <vTaskSwitchContext+0xac>)
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcf8:	e041      	b.n	800bd7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bcfa:	4b25      	ldr	r3, [pc, #148]	; (800bd90 <vTaskSwitchContext+0xac>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <vTaskSwitchContext+0xb0>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	e010      	b.n	800bd2a <vTaskSwitchContext+0x46>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vTaskSwitchContext+0x3e>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	491b      	ldr	r1, [pc, #108]	; (800bd98 <vTaskSwitchContext+0xb4>)
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0e4      	beq.n	800bd08 <vTaskSwitchContext+0x24>
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <vTaskSwitchContext+0xb4>)
 800bd4a:	4413      	add	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	605a      	str	r2, [r3, #4]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d104      	bne.n	800bd6e <vTaskSwitchContext+0x8a>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <vTaskSwitchContext+0xb8>)
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <vTaskSwitchContext+0xb0>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6013      	str	r3, [r2, #0]
}
 800bd7e:	bf00      	nop
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	200013c0 	.word	0x200013c0
 800bd90:	200013ac 	.word	0x200013ac
 800bd94:	200013a0 	.word	0x200013a0
 800bd98:	20000ec8 	.word	0x20000ec8
 800bd9c:	20000ec4 	.word	0x20000ec4

0800bda0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	60fb      	str	r3, [r7, #12]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdc6:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <vTaskPlaceOnEventList+0x44>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3318      	adds	r3, #24
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7fe fc5f 	bl	800a692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	6838      	ldr	r0, [r7, #0]
 800bdd8:	f000 fe0c 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000ec4 	.word	0x20000ec4

0800bde8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	617b      	str	r3, [r7, #20]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800be10:	4b11      	ldr	r3, [pc, #68]	; (800be58 <vTaskPlaceOnUnorderedEventList+0x70>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	613b      	str	r3, [r7, #16]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <vTaskPlaceOnUnorderedEventList+0x74>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800be38:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be3a:	4b08      	ldr	r3, [pc, #32]	; (800be5c <vTaskPlaceOnUnorderedEventList+0x74>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3318      	adds	r3, #24
 800be40:	4619      	mov	r1, r3
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7fe fc01 	bl	800a64a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be48:	2101      	movs	r1, #1
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fdd2 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
}
 800be50:	bf00      	nop
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	200013c0 	.word	0x200013c0
 800be5c:	20000ec4 	.word	0x20000ec4

0800be60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	617b      	str	r3, [r7, #20]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3318      	adds	r3, #24
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7fe fbda 	bl	800a64a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bea0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	68b8      	ldr	r0, [r7, #8]
 800bea6:	f000 fda5 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
	}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000ec4 	.word	0x20000ec4

0800beb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	60fb      	str	r3, [r7, #12]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3318      	adds	r3, #24
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fe fc0b 	bl	800a704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beee:	4b1e      	ldr	r3, [pc, #120]	; (800bf68 <xTaskRemoveFromEventList+0xb0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d11d      	bne.n	800bf32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	3304      	adds	r3, #4
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe fc02 	bl	800a704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4b19      	ldr	r3, [pc, #100]	; (800bf6c <xTaskRemoveFromEventList+0xb4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d903      	bls.n	800bf14 <xTaskRemoveFromEventList+0x5c>
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	4a16      	ldr	r2, [pc, #88]	; (800bf6c <xTaskRemoveFromEventList+0xb4>)
 800bf12:	6013      	str	r3, [r2, #0]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4a13      	ldr	r2, [pc, #76]	; (800bf70 <xTaskRemoveFromEventList+0xb8>)
 800bf22:	441a      	add	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fe fb8d 	bl	800a64a <vListInsertEnd>
 800bf30:	e005      	b.n	800bf3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	3318      	adds	r3, #24
 800bf36:	4619      	mov	r1, r3
 800bf38:	480e      	ldr	r0, [pc, #56]	; (800bf74 <xTaskRemoveFromEventList+0xbc>)
 800bf3a:	f7fe fb86 	bl	800a64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <xTaskRemoveFromEventList+0xc0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d905      	bls.n	800bf58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <xTaskRemoveFromEventList+0xc4>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	e001      	b.n	800bf5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf5c:	697b      	ldr	r3, [r7, #20]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200013c0 	.word	0x200013c0
 800bf6c:	200013a0 	.word	0x200013a0
 800bf70:	20000ec8 	.word	0x20000ec8
 800bf74:	20001358 	.word	0x20001358
 800bf78:	20000ec4 	.word	0x20000ec4
 800bf7c:	200013ac 	.word	0x200013ac

0800bf80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800bf8a:	4b29      	ldr	r3, [pc, #164]	; (800c030 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	613b      	str	r3, [r7, #16]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60fb      	str	r3, [r7, #12]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7fe fb95 	bl	800a704 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fb90 	bl	800a704 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4b12      	ldr	r3, [pc, #72]	; (800c034 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d903      	bls.n	800bff8 <vTaskRemoveFromUnorderedEventList+0x78>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	4a0f      	ldr	r2, [pc, #60]	; (800c034 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	4613      	mov	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4a0c      	ldr	r2, [pc, #48]	; (800c038 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c006:	441a      	add	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f7fe fb1b 	bl	800a64a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	4b08      	ldr	r3, [pc, #32]	; (800c03c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	429a      	cmp	r2, r3
 800c020:	d902      	bls.n	800c028 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c022:	4b07      	ldr	r3, [pc, #28]	; (800c040 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c024:	2201      	movs	r2, #1
 800c026:	601a      	str	r2, [r3, #0]
	}
}
 800c028:	bf00      	nop
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	200013c0 	.word	0x200013c0
 800c034:	200013a0 	.word	0x200013a0
 800c038:	20000ec8 	.word	0x20000ec8
 800c03c:	20000ec4 	.word	0x20000ec4
 800c040:	200013ac 	.word	0x200013ac

0800c044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <vTaskInternalSetTimeOutState+0x24>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <vTaskInternalSetTimeOutState+0x28>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	605a      	str	r2, [r3, #4]
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	200013b0 	.word	0x200013b0
 800c06c:	2000139c 	.word	0x2000139c

0800c070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10a      	bne.n	800c096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	613b      	str	r3, [r7, #16]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60fb      	str	r3, [r7, #12]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0b2:	f001 f9e7 	bl	800d484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	; (800c12c <xTaskCheckForTimeOut+0xbc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d102      	bne.n	800c0d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]
 800c0d4:	e023      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b15      	ldr	r3, [pc, #84]	; (800c130 <xTaskCheckForTimeOut+0xc0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d007      	beq.n	800c0f2 <xTaskCheckForTimeOut+0x82>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d302      	bcc.n	800c0f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	e015      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d20b      	bcs.n	800c114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ff9b 	bl	800c044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	e004      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c11e:	f001 f9e1 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	2000139c 	.word	0x2000139c
 800c130:	200013b0 	.word	0x200013b0

0800c134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c134:	b480      	push	{r7}
 800c136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c138:	4b03      	ldr	r3, [pc, #12]	; (800c148 <vTaskMissedYield+0x14>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	200013ac 	.word	0x200013ac

0800c14c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c154:	f000 f852 	bl	800c1fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c158:	4b06      	ldr	r3, [pc, #24]	; (800c174 <prvIdleTask+0x28>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d9f9      	bls.n	800c154 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <prvIdleTask+0x2c>)
 800c162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c170:	e7f0      	b.n	800c154 <prvIdleTask+0x8>
 800c172:	bf00      	nop
 800c174:	20000ec8 	.word	0x20000ec8
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00c      	b.n	800c1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a12      	ldr	r2, [pc, #72]	; (800c1dc <prvInitialiseTaskLists+0x60>)
 800c194:	4413      	add	r3, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fa2a 	bl	800a5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	607b      	str	r3, [r7, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b37      	cmp	r3, #55	; 0x37
 800c1a6:	d9ef      	bls.n	800c188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1a8:	480d      	ldr	r0, [pc, #52]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1aa:	f7fe fa21 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1ae:	480d      	ldr	r0, [pc, #52]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1b0:	f7fe fa1e 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1b4:	480c      	ldr	r0, [pc, #48]	; (800c1e8 <prvInitialiseTaskLists+0x6c>)
 800c1b6:	f7fe fa1b 	bl	800a5f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1ba:	480c      	ldr	r0, [pc, #48]	; (800c1ec <prvInitialiseTaskLists+0x70>)
 800c1bc:	f7fe fa18 	bl	800a5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1c0:	480b      	ldr	r0, [pc, #44]	; (800c1f0 <prvInitialiseTaskLists+0x74>)
 800c1c2:	f7fe fa15 	bl	800a5f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <prvInitialiseTaskLists+0x78>)
 800c1c8:	4a05      	ldr	r2, [pc, #20]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <prvInitialiseTaskLists+0x7c>)
 800c1ce:	4a05      	ldr	r2, [pc, #20]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000ec8 	.word	0x20000ec8
 800c1e0:	20001328 	.word	0x20001328
 800c1e4:	2000133c 	.word	0x2000133c
 800c1e8:	20001358 	.word	0x20001358
 800c1ec:	2000136c 	.word	0x2000136c
 800c1f0:	20001384 	.word	0x20001384
 800c1f4:	20001350 	.word	0x20001350
 800c1f8:	20001354 	.word	0x20001354

0800c1fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c202:	e019      	b.n	800c238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c204:	f001 f93e 	bl	800d484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c208:	4b10      	ldr	r3, [pc, #64]	; (800c24c <prvCheckTasksWaitingTermination+0x50>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe fa75 	bl	800a704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c21a:	4b0d      	ldr	r3, [pc, #52]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3b01      	subs	r3, #1
 800c220:	4a0b      	ldr	r2, [pc, #44]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	4a0a      	ldr	r2, [pc, #40]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c22e:	f001 f959 	bl	800d4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f810 	bl	800c258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e1      	bne.n	800c204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	2000136c 	.word	0x2000136c
 800c250:	20001398 	.word	0x20001398
 800c254:	20001380 	.word	0x20001380

0800c258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c266:	2b00      	cmp	r3, #0
 800c268:	d108      	bne.n	800c27c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 faf6 	bl	800d860 <vPortFree>
				vPortFree( pxTCB );
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f001 faf3 	bl	800d860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c27a:	e018      	b.n	800c2ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c282:	2b01      	cmp	r3, #1
 800c284:	d103      	bne.n	800c28e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 faea 	bl	800d860 <vPortFree>
	}
 800c28c:	e00f      	b.n	800c2ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c294:	2b02      	cmp	r3, #2
 800c296:	d00a      	beq.n	800c2ae <prvDeleteTCB+0x56>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	60fb      	str	r3, [r7, #12]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <prvDeleteTCB+0x54>
	}
 800c2ae:	bf00      	nop
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <prvResetNextTaskUnblockTime+0x38>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2c8:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2d0:	e008      	b.n	800c2e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d2:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <prvResetNextTaskUnblockTime+0x38>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4a04      	ldr	r2, [pc, #16]	; (800c2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	20001350 	.word	0x20001350
 800c2f4:	200013b8 	.word	0x200013b8

0800c2f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	; (800c32c <xTaskGetSchedulerState+0x34>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c306:	2301      	movs	r3, #1
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	e008      	b.n	800c31e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c30c:	4b08      	ldr	r3, [pc, #32]	; (800c330 <xTaskGetSchedulerState+0x38>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c314:	2302      	movs	r3, #2
 800c316:	607b      	str	r3, [r7, #4]
 800c318:	e001      	b.n	800c31e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c31a:	2300      	movs	r3, #0
 800c31c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c31e:	687b      	ldr	r3, [r7, #4]
	}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	200013a4 	.word	0x200013a4
 800c330:	200013c0 	.word	0x200013c0

0800c334 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d051      	beq.n	800c3ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	4b2a      	ldr	r3, [pc, #168]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	429a      	cmp	r2, r3
 800c356:	d241      	bcs.n	800c3dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	db06      	blt.n	800c36e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6959      	ldr	r1, [r3, #20]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <xTaskPriorityInherit+0xc8>)
 800c380:	4413      	add	r3, r2
 800c382:	4299      	cmp	r1, r3
 800c384:	d122      	bne.n	800c3cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	3304      	adds	r3, #4
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe f9ba 	bl	800a704 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c390:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39e:	4b18      	ldr	r3, [pc, #96]	; (800c400 <xTaskPriorityInherit+0xcc>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d903      	bls.n	800c3ae <xTaskPriorityInherit+0x7a>
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	4a15      	ldr	r2, [pc, #84]	; (800c400 <xTaskPriorityInherit+0xcc>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <xTaskPriorityInherit+0xc8>)
 800c3bc:	441a      	add	r2, r3
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f7fe f940 	bl	800a64a <vListInsertEnd>
 800c3ca:	e004      	b.n	800c3d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e008      	b.n	800c3ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d201      	bcs.n	800c3ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000ec4 	.word	0x20000ec4
 800c3fc:	20000ec8 	.word	0x20000ec8
 800c400:	200013a0 	.word	0x200013a0

0800c404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d056      	beq.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c41a:	4b2e      	ldr	r3, [pc, #184]	; (800c4d4 <xTaskPriorityDisinherit+0xd0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00a      	beq.n	800c43a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60bb      	str	r3, [r7, #8]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d02c      	beq.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c472:	2b00      	cmp	r3, #0
 800c474:	d128      	bne.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	3304      	adds	r3, #4
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe f942 	bl	800a704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	4b0f      	ldr	r3, [pc, #60]	; (800c4d8 <xTaskPriorityDisinherit+0xd4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d903      	bls.n	800c4a8 <xTaskPriorityDisinherit+0xa4>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	; (800c4d8 <xTaskPriorityDisinherit+0xd4>)
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4a09      	ldr	r2, [pc, #36]	; (800c4dc <xTaskPriorityDisinherit+0xd8>)
 800c4b6:	441a      	add	r2, r3
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7fe f8c3 	bl	800a64a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4c8:	697b      	ldr	r3, [r7, #20]
	}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000ec4 	.word	0x20000ec4
 800c4d8:	200013a0 	.word	0x200013a0
 800c4dc:	20000ec8 	.word	0x20000ec8

0800c4e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d06a      	beq.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d902      	bls.n	800c526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	61fb      	str	r3, [r7, #28]
 800c524:	e002      	b.n	800c52c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c52a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d04b      	beq.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d146      	bne.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c540:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	429a      	cmp	r2, r3
 800c548:	d10a      	bne.n	800c560 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	60bb      	str	r3, [r7, #8]
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	69fa      	ldr	r2, [r7, #28]
 800c56a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	db04      	blt.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	6959      	ldr	r1, [r3, #20]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4a13      	ldr	r2, [pc, #76]	; (800c5dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c58e:	4413      	add	r3, r2
 800c590:	4299      	cmp	r1, r3
 800c592:	d11c      	bne.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe f8b3 	bl	800a704 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d903      	bls.n	800c5b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ae:	4a0c      	ldr	r2, [pc, #48]	; (800c5e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4a07      	ldr	r2, [pc, #28]	; (800c5dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c5c0:	441a      	add	r2, r3
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7fe f83e 	bl	800a64a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5ce:	bf00      	nop
 800c5d0:	3720      	adds	r7, #32
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000ec4 	.word	0x20000ec4
 800c5dc:	20000ec8 	.word	0x20000ec8
 800c5e0:	200013a0 	.word	0x200013a0

0800c5e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f2:	4b07      	ldr	r3, [pc, #28]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c600:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c602:	687b      	ldr	r3, [r7, #4]
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20000ec4 	.word	0x20000ec4

0800c614 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c626:	3201      	adds	r2, #1
 800c628:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c62a:	4b03      	ldr	r3, [pc, #12]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c62c:	681b      	ldr	r3, [r3, #0]
	}
 800c62e:	4618      	mov	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	20000ec4 	.word	0x20000ec4

0800c63c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c646:	f000 ff1d 	bl	800d484 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c64a:	4b1e      	ldr	r3, [pc, #120]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c650:	2b00      	cmp	r3, #0
 800c652:	d113      	bne.n	800c67c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c654:	4b1b      	ldr	r3, [pc, #108]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c664:	2101      	movs	r1, #1
 800c666:	6838      	ldr	r0, [r7, #0]
 800c668:	f000 f9c4 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c66c:	4b16      	ldr	r3, [pc, #88]	; (800c6c8 <ulTaskNotifyTake+0x8c>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c67c:	f000 ff32 	bl	800d4e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c680:	f000 ff00 	bl	800d484 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c684:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00c      	beq.n	800c6ac <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2200      	movs	r2, #0
 800c69e:	655a      	str	r2, [r3, #84]	; 0x54
 800c6a0:	e004      	b.n	800c6ac <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	3a01      	subs	r2, #1
 800c6aa:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c6b6:	f000 ff15 	bl	800d4e4 <vPortExitCritical>

		return ulReturn;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
	}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20000ec4 	.word	0x20000ec4
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <xTaskGenericNotify+0x30>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	61bb      	str	r3, [r7, #24]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c700:	f000 fec0 	bl	800d484 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c718:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	2202      	movs	r2, #2
 800c71e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	2b04      	cmp	r3, #4
 800c726:	d828      	bhi.n	800c77a <xTaskGenericNotify+0xae>
 800c728:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <xTaskGenericNotify+0x64>)
 800c72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72e:	bf00      	nop
 800c730:	0800c79b 	.word	0x0800c79b
 800c734:	0800c745 	.word	0x0800c745
 800c738:	0800c753 	.word	0x0800c753
 800c73c:	0800c75f 	.word	0x0800c75f
 800c740:	0800c767 	.word	0x0800c767
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	431a      	orrs	r2, r3
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c750:	e026      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c75c:	e020      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c764:	e01c      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c766:	7ffb      	ldrb	r3, [r7, #31]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d003      	beq.n	800c774 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c772:	e015      	b.n	800c7a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c774:	2300      	movs	r3, #0
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c778:	e012      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c782:	d00c      	beq.n	800c79e <xTaskGenericNotify+0xd2>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	617b      	str	r3, [r7, #20]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <xTaskGenericNotify+0xcc>
					break;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

					break;
 800c79e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c7a0:	7ffb      	ldrb	r3, [r7, #31]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d13a      	bne.n	800c81c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd ffaa 	bl	800a704 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <xTaskGenericNotify+0x160>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d903      	bls.n	800c7c4 <xTaskGenericNotify+0xf8>
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	4a1a      	ldr	r2, [pc, #104]	; (800c82c <xTaskGenericNotify+0x160>)
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4a17      	ldr	r2, [pc, #92]	; (800c830 <xTaskGenericNotify+0x164>)
 800c7d2:	441a      	add	r2, r3
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fd ff35 	bl	800a64a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <xTaskGenericNotify+0x132>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	613b      	str	r3, [r7, #16]
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <xTaskGenericNotify+0x168>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d907      	bls.n	800c81c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <xTaskGenericNotify+0x16c>)
 800c80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c81c:	f000 fe62 	bl	800d4e4 <vPortExitCritical>

		return xReturn;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c822:	4618      	mov	r0, r3
 800c824:	3728      	adds	r7, #40	; 0x28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200013a0 	.word	0x200013a0
 800c830:	20000ec8 	.word	0x20000ec8
 800c834:	20000ec4 	.word	0x20000ec4
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08e      	sub	sp, #56	; 0x38
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c84c:	2301      	movs	r3, #1
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c86c:	f000 feec 	bl	800d648 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c874:	f3ef 8211 	mrs	r2, BASEPRI
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	623a      	str	r2, [r7, #32]
 800c88a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c88c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	d828      	bhi.n	800c908 <xTaskGenericNotifyFromISR+0xcc>
 800c8b6:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <xTaskGenericNotifyFromISR+0x80>)
 800c8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8bc:	0800c929 	.word	0x0800c929
 800c8c0:	0800c8d1 	.word	0x0800c8d1
 800c8c4:	0800c8df 	.word	0x0800c8df
 800c8c8:	0800c8eb 	.word	0x0800c8eb
 800c8cc:	0800c8f3 	.word	0x0800c8f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8dc:	e027      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8e8:	e021      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8f0:	e01d      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c8f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d003      	beq.n	800c902 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c900:	e015      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c902:	2300      	movs	r3, #0
 800c904:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c906:	e012      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d00c      	beq.n	800c92c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	61bb      	str	r3, [r7, #24]
}
 800c924:	bf00      	nop
 800c926:	e7fe      	b.n	800c926 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c928:	bf00      	nop
 800c92a:	e000      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c92c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c92e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c932:	2b01      	cmp	r3, #1
 800c934:	d146      	bne.n	800c9c4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	617b      	str	r3, [r7, #20]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c954:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <xTaskGenericNotifyFromISR+0x1a0>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11d      	bne.n	800c998 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	3304      	adds	r3, #4
 800c960:	4618      	mov	r0, r3
 800c962:	f7fd fecf 	bl	800a704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96a:	4b1d      	ldr	r3, [pc, #116]	; (800c9e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d903      	bls.n	800c97a <xTaskGenericNotifyFromISR+0x13e>
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	4a1a      	ldr	r2, [pc, #104]	; (800c9e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c978:	6013      	str	r3, [r2, #0]
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <xTaskGenericNotifyFromISR+0x1a8>)
 800c988:	441a      	add	r2, r3
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	3304      	adds	r3, #4
 800c98e:	4619      	mov	r1, r3
 800c990:	4610      	mov	r0, r2
 800c992:	f7fd fe5a 	bl	800a64a <vListInsertEnd>
 800c996:	e005      	b.n	800c9a4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	3318      	adds	r3, #24
 800c99c:	4619      	mov	r1, r3
 800c99e:	4812      	ldr	r0, [pc, #72]	; (800c9e8 <xTaskGenericNotifyFromISR+0x1ac>)
 800c9a0:	f7fd fe53 	bl	800a64a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <xTaskGenericNotifyFromISR+0x1b0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d908      	bls.n	800c9c4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <xTaskGenericNotifyFromISR+0x1b4>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3738      	adds	r7, #56	; 0x38
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200013c0 	.word	0x200013c0
 800c9e0:	200013a0 	.word	0x200013a0
 800c9e4:	20000ec8 	.word	0x20000ec8
 800c9e8:	20001358 	.word	0x20001358
 800c9ec:	20000ec4 	.word	0x20000ec4
 800c9f0:	200013ac 	.word	0x200013ac

0800c9f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9fe:	4b21      	ldr	r3, [pc, #132]	; (800ca84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca04:	4b20      	ldr	r3, [pc, #128]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fd fe7a 	bl	800a704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d10a      	bne.n	800ca2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d007      	beq.n	800ca2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4619      	mov	r1, r3
 800ca26:	4819      	ldr	r0, [pc, #100]	; (800ca8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ca28:	f7fd fe0f 	bl	800a64a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca2c:	e026      	b.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4413      	add	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d209      	bcs.n	800ca5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca46:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f7fd fe1d 	bl	800a692 <vListInsert>
}
 800ca58:	e010      	b.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca5a:	4b0e      	ldr	r3, [pc, #56]	; (800ca94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f7fd fe13 	bl	800a692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d202      	bcs.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca76:	4a08      	ldr	r2, [pc, #32]	; (800ca98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	6013      	str	r3, [r2, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	2000139c 	.word	0x2000139c
 800ca88:	20000ec4 	.word	0x20000ec4
 800ca8c:	20001384 	.word	0x20001384
 800ca90:	20001354 	.word	0x20001354
 800ca94:	20001350 	.word	0x20001350
 800ca98:	200013b8 	.word	0x200013b8

0800ca9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	; 0x28
 800caa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800caa6:	f000 fb63 	bl	800d170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800caaa:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <xTimerCreateTimerTask+0x80>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d021      	beq.n	800caf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800caba:	1d3a      	adds	r2, r7, #4
 800cabc:	f107 0108 	add.w	r1, r7, #8
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fd fb8b 	bl	800a1e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	9202      	str	r2, [sp, #8]
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	2302      	movs	r3, #2
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	2300      	movs	r3, #0
 800cada:	460a      	mov	r2, r1
 800cadc:	4910      	ldr	r1, [pc, #64]	; (800cb20 <xTimerCreateTimerTask+0x84>)
 800cade:	4811      	ldr	r0, [pc, #68]	; (800cb24 <xTimerCreateTimerTask+0x88>)
 800cae0:	f7fe fd3c 	bl	800b55c <xTaskCreateStatic>
 800cae4:	4603      	mov	r3, r0
 800cae6:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <xTimerCreateTimerTask+0x8c>)
 800cae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <xTimerCreateTimerTask+0x8c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800caf2:	2301      	movs	r3, #1
 800caf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	613b      	str	r3, [r7, #16]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb12:	697b      	ldr	r3, [r7, #20]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200013f4 	.word	0x200013f4
 800cb20:	0800f8dc 	.word	0x0800f8dc
 800cb24:	0800cd19 	.word	0x0800cd19
 800cb28:	200013f8 	.word	0x200013f8

0800cb2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b088      	sub	sp, #32
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cb3a:	202c      	movs	r0, #44	; 0x2c
 800cb3c:	f000 fdc4 	bl	800d6c8 <pvPortMalloc>
 800cb40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00d      	beq.n	800cb64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 f805 	bl	800cb6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cb64:	697b      	ldr	r3, [r7, #20]
	}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b086      	sub	sp, #24
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	607a      	str	r2, [r7, #4]
 800cb7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	617b      	str	r3, [r7, #20]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01e      	beq.n	800cbdc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cb9e:	f000 fae7 	bl	800d170 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	6a3a      	ldr	r2, [r7, #32]
 800cbb8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd fd36 	bl	800a630 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d008      	beq.n	800cbdc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd0:	f043 0304 	orr.w	r3, r3, #4
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cbdc:	bf00      	nop
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	; 0x28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	623b      	str	r3, [r7, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc12:	4b1a      	ldr	r3, [pc, #104]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d02a      	beq.n	800cc70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b05      	cmp	r3, #5
 800cc2a:	dc18      	bgt.n	800cc5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc2c:	f7ff fb64 	bl	800c2f8 <xTaskGetSchedulerState>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d109      	bne.n	800cc4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc36:	4b11      	ldr	r3, [pc, #68]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	f107 0110 	add.w	r1, r7, #16
 800cc3e:	2300      	movs	r3, #0
 800cc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc42:	f7fd ff31 	bl	800aaa8 <xQueueGenericSend>
 800cc46:	6278      	str	r0, [r7, #36]	; 0x24
 800cc48:	e012      	b.n	800cc70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f107 0110 	add.w	r1, r7, #16
 800cc52:	2300      	movs	r3, #0
 800cc54:	2200      	movs	r2, #0
 800cc56:	f7fd ff27 	bl	800aaa8 <xQueueGenericSend>
 800cc5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cc5c:	e008      	b.n	800cc70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc5e:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f107 0110 	add.w	r1, r7, #16
 800cc66:	2300      	movs	r3, #0
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	f7fe f81b 	bl	800aca4 <xQueueGenericSendFromISR>
 800cc6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3728      	adds	r7, #40	; 0x28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	200013f4 	.word	0x200013f4

0800cc80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8a:	4b22      	ldr	r3, [pc, #136]	; (800cd14 <prvProcessExpiredTimer+0x94>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	3304      	adds	r3, #4
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fd fd33 	bl	800a704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d022      	beq.n	800ccf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	699a      	ldr	r2, [r3, #24]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	18d1      	adds	r1, r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	6978      	ldr	r0, [r7, #20]
 800ccba:	f000 f8d1 	bl	800ce60 <prvInsertTimerInActiveList>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01f      	beq.n	800cd04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	2100      	movs	r1, #0
 800ccce:	6978      	ldr	r0, [r7, #20]
 800ccd0:	f7ff ff88 	bl	800cbe4 <xTimerGenericCommand>
 800ccd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d113      	bne.n	800cd04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	60fb      	str	r3, [r7, #12]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccf8:	f023 0301 	bic.w	r3, r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	6978      	ldr	r0, [r7, #20]
 800cd0a:	4798      	blx	r3
}
 800cd0c:	bf00      	nop
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	200013ec 	.word	0x200013ec

0800cd18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd20:	f107 0308 	add.w	r3, r7, #8
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f857 	bl	800cdd8 <prvGetNextExpireTime>
 800cd2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 f803 	bl	800cd3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd36:	f000 f8d5 	bl	800cee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd3a:	e7f1      	b.n	800cd20 <prvTimerTask+0x8>

0800cd3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd46:	f7fe fe45 	bl	800b9d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f866 	bl	800ce20 <prvSampleTimeNow>
 800cd54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d130      	bne.n	800cdbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <prvProcessTimerOrBlockTask+0x3c>
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d806      	bhi.n	800cd78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd6a:	f7fe fe41 	bl	800b9f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff ff85 	bl	800cc80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd76:	e024      	b.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d008      	beq.n	800cd90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd7e:	4b13      	ldr	r3, [pc, #76]	; (800cdcc <prvProcessTimerOrBlockTask+0x90>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <prvProcessTimerOrBlockTask+0x50>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e000      	b.n	800cd8e <prvProcessTimerOrBlockTask+0x52>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd90:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <prvProcessTimerOrBlockTask+0x94>)
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f7fe fba9 	bl	800b4f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cda2:	f7fe fe25 	bl	800b9f0 <xTaskResumeAll>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10a      	bne.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <prvProcessTimerOrBlockTask+0x98>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
}
 800cdbc:	e001      	b.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdbe:	f7fe fe17 	bl	800b9f0 <xTaskResumeAll>
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	200013f0 	.word	0x200013f0
 800cdd0:	200013f4 	.word	0x200013f4
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cde0:	4b0e      	ldr	r3, [pc, #56]	; (800ce1c <prvGetNextExpireTime+0x44>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <prvGetNextExpireTime+0x16>
 800cdea:	2201      	movs	r2, #1
 800cdec:	e000      	b.n	800cdf0 <prvGetNextExpireTime+0x18>
 800cdee:	2200      	movs	r2, #0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d105      	bne.n	800ce08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdfc:	4b07      	ldr	r3, [pc, #28]	; (800ce1c <prvGetNextExpireTime+0x44>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e001      	b.n	800ce0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	200013ec 	.word	0x200013ec

0800ce20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce28:	f7fe fe80 	bl	800bb2c <xTaskGetTickCount>
 800ce2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <prvSampleTimeNow+0x3c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d205      	bcs.n	800ce44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce38:	f000 f936 	bl	800d0a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	e002      	b.n	800ce4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce4a:	4a04      	ldr	r2, [pc, #16]	; (800ce5c <prvSampleTimeNow+0x3c>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce50:	68fb      	ldr	r3, [r7, #12]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200013fc 	.word	0x200013fc

0800ce60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d812      	bhi.n	800ceac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	1ad2      	subs	r2, r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d302      	bcc.n	800ce9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce94:	2301      	movs	r3, #1
 800ce96:	617b      	str	r3, [r7, #20]
 800ce98:	e01b      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce9a:	4b10      	ldr	r3, [pc, #64]	; (800cedc <prvInsertTimerInActiveList+0x7c>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3304      	adds	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f7fd fbf4 	bl	800a692 <vListInsert>
 800ceaa:	e012      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d206      	bcs.n	800cec2 <prvInsertTimerInActiveList+0x62>
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d302      	bcc.n	800cec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e007      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <prvInsertTimerInActiveList+0x80>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fd fbe0 	bl	800a692 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ced2:	697b      	ldr	r3, [r7, #20]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	200013f0 	.word	0x200013f0
 800cee0:	200013ec 	.word	0x200013ec

0800cee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08e      	sub	sp, #56	; 0x38
 800cee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceea:	e0ca      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da18      	bge.n	800cf24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cef2:	1d3b      	adds	r3, r7, #4
 800cef4:	3304      	adds	r3, #4
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10a      	bne.n	800cf14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	61fb      	str	r3, [r7, #28]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1a:	6850      	ldr	r0, [r2, #4]
 800cf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1e:	6892      	ldr	r2, [r2, #8]
 800cf20:	4611      	mov	r1, r2
 800cf22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f2c0 80ab 	blt.w	800d082 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d004      	beq.n	800cf42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fd fbe1 	bl	800a704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf42:	463b      	mov	r3, r7
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ff6b 	bl	800ce20 <prvSampleTimeNow>
 800cf4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b09      	cmp	r3, #9
 800cf50:	f200 8096 	bhi.w	800d080 <prvProcessReceivedCommands+0x19c>
 800cf54:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <prvProcessReceivedCommands+0x78>)
 800cf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5a:	bf00      	nop
 800cf5c:	0800cf85 	.word	0x0800cf85
 800cf60:	0800cf85 	.word	0x0800cf85
 800cf64:	0800cf85 	.word	0x0800cf85
 800cf68:	0800cff9 	.word	0x0800cff9
 800cf6c:	0800d00d 	.word	0x0800d00d
 800cf70:	0800d057 	.word	0x0800d057
 800cf74:	0800cf85 	.word	0x0800cf85
 800cf78:	0800cf85 	.word	0x0800cf85
 800cf7c:	0800cff9 	.word	0x0800cff9
 800cf80:	0800d00d 	.word	0x0800d00d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	18d1      	adds	r1, r2, r3
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa4:	f7ff ff5c 	bl	800ce60 <prvInsertTimerInActiveList>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d069      	beq.n	800d082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d05e      	beq.n	800d082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	441a      	add	r2, r3
 800cfcc:	2300      	movs	r3, #0
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd6:	f7ff fe05 	bl	800cbe4 <xTimerGenericCommand>
 800cfda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d14f      	bne.n	800d082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	61bb      	str	r3, [r7, #24]
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cffe:	f023 0301 	bic.w	r3, r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d00a:	e03a      	b.n	800d082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10a      	bne.n	800d042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	617b      	str	r3, [r7, #20]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	699a      	ldr	r2, [r3, #24]
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	18d1      	adds	r1, r2, r3
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d050:	f7ff ff06 	bl	800ce60 <prvInsertTimerInActiveList>
					break;
 800d054:	e015      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d066:	f000 fbfb 	bl	800d860 <vPortFree>
 800d06a:	e00a      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d072:	f023 0301 	bic.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d07e:	e000      	b.n	800d082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d082:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <prvProcessReceivedCommands+0x1c0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	1d39      	adds	r1, r7, #4
 800d088:	2200      	movs	r2, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd fea6 	bl	800addc <xQueueReceive>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	f47f af2a 	bne.w	800ceec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	3730      	adds	r7, #48	; 0x30
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200013f4 	.word	0x200013f4

0800d0a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0ae:	e048      	b.n	800d142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0b0:	4b2d      	ldr	r3, [pc, #180]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ba:	4b2b      	ldr	r3, [pc, #172]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fd fb1b 	bl	800a704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d02e      	beq.n	800d142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d90e      	bls.n	800d114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3304      	adds	r3, #4
 800d10a:	4619      	mov	r1, r3
 800d10c:	4610      	mov	r0, r2
 800d10e:	f7fd fac0 	bl	800a692 <vListInsert>
 800d112:	e016      	b.n	800d142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d114:	2300      	movs	r3, #0
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	2300      	movs	r3, #0
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	2100      	movs	r1, #0
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f7ff fd60 	bl	800cbe4 <xTimerGenericCommand>
 800d124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10a      	bne.n	800d142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	603b      	str	r3, [r7, #0]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1b1      	bne.n	800d0b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d14c:	4b06      	ldr	r3, [pc, #24]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d152:	4b06      	ldr	r3, [pc, #24]	; (800d16c <prvSwitchTimerLists+0xc4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a04      	ldr	r2, [pc, #16]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d15a:	4a04      	ldr	r2, [pc, #16]	; (800d16c <prvSwitchTimerLists+0xc4>)
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	6013      	str	r3, [r2, #0]
}
 800d160:	bf00      	nop
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	200013ec 	.word	0x200013ec
 800d16c:	200013f0 	.word	0x200013f0

0800d170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d176:	f000 f985 	bl	800d484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d120      	bne.n	800d1c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d182:	4814      	ldr	r0, [pc, #80]	; (800d1d4 <prvCheckForValidListAndQueue+0x64>)
 800d184:	f7fd fa34 	bl	800a5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d188:	4813      	ldr	r0, [pc, #76]	; (800d1d8 <prvCheckForValidListAndQueue+0x68>)
 800d18a:	f7fd fa31 	bl	800a5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <prvCheckForValidListAndQueue+0x6c>)
 800d190:	4a10      	ldr	r2, [pc, #64]	; (800d1d4 <prvCheckForValidListAndQueue+0x64>)
 800d192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d194:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <prvCheckForValidListAndQueue+0x70>)
 800d196:	4a10      	ldr	r2, [pc, #64]	; (800d1d8 <prvCheckForValidListAndQueue+0x68>)
 800d198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d19a:	2300      	movs	r3, #0
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4b11      	ldr	r3, [pc, #68]	; (800d1e4 <prvCheckForValidListAndQueue+0x74>)
 800d1a0:	4a11      	ldr	r2, [pc, #68]	; (800d1e8 <prvCheckForValidListAndQueue+0x78>)
 800d1a2:	2110      	movs	r1, #16
 800d1a4:	200a      	movs	r0, #10
 800d1a6:	f7fd fb3f 	bl	800a828 <xQueueGenericCreateStatic>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	4a08      	ldr	r2, [pc, #32]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d005      	beq.n	800d1c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1b8:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	490b      	ldr	r1, [pc, #44]	; (800d1ec <prvCheckForValidListAndQueue+0x7c>)
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe f944 	bl	800b44c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1c4:	f000 f98e 	bl	800d4e4 <vPortExitCritical>
}
 800d1c8:	bf00      	nop
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200013f4 	.word	0x200013f4
 800d1d4:	200013c4 	.word	0x200013c4
 800d1d8:	200013d8 	.word	0x200013d8
 800d1dc:	200013ec 	.word	0x200013ec
 800d1e0:	200013f0 	.word	0x200013f0
 800d1e4:	200014a0 	.word	0x200014a0
 800d1e8:	20001400 	.word	0x20001400
 800d1ec:	0800f8e4 	.word	0x0800f8e4

0800d1f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d1fe:	f06f 0301 	mvn.w	r3, #1
 800d202:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d210:	4b06      	ldr	r3, [pc, #24]	; (800d22c <xTimerPendFunctionCallFromISR+0x3c>)
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	f107 0114 	add.w	r1, r7, #20
 800d218:	2300      	movs	r3, #0
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	f7fd fd42 	bl	800aca4 <xQueueGenericSendFromISR>
 800d220:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d224:	4618      	mov	r0, r3
 800d226:	3728      	adds	r7, #40	; 0x28
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	200013f4 	.word	0x200013f4

0800d230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3b04      	subs	r3, #4
 800d240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3b04      	subs	r3, #4
 800d24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f023 0201 	bic.w	r2, r3, #1
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3b04      	subs	r3, #4
 800d25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d260:	4a0c      	ldr	r2, [pc, #48]	; (800d294 <pxPortInitialiseStack+0x64>)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	3b14      	subs	r3, #20
 800d26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3b04      	subs	r3, #4
 800d276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f06f 0202 	mvn.w	r2, #2
 800d27e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3b20      	subs	r3, #32
 800d284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d286:	68fb      	ldr	r3, [r7, #12]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	0800d299 	.word	0x0800d299

0800d298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2a2:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <prvTaskExitError+0x54>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d00a      	beq.n	800d2c2 <prvTaskExitError+0x2a>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	60fb      	str	r3, [r7, #12]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <prvTaskExitError+0x28>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	60bb      	str	r3, [r7, #8]
}
 800d2d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2d6:	bf00      	nop
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0fc      	beq.n	800d2d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20000078 	.word	0x20000078

0800d2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2f0:	4b07      	ldr	r3, [pc, #28]	; (800d310 <pxCurrentTCBConst2>)
 800d2f2:	6819      	ldr	r1, [r3, #0]
 800d2f4:	6808      	ldr	r0, [r1, #0]
 800d2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fa:	f380 8809 	msr	PSP, r0
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8811 	msr	BASEPRI, r0
 800d30a:	4770      	bx	lr
 800d30c:	f3af 8000 	nop.w

0800d310 <pxCurrentTCBConst2>:
 800d310:	20000ec4 	.word	0x20000ec4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d314:	bf00      	nop
 800d316:	bf00      	nop

0800d318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d318:	4808      	ldr	r0, [pc, #32]	; (800d33c <prvPortStartFirstTask+0x24>)
 800d31a:	6800      	ldr	r0, [r0, #0]
 800d31c:	6800      	ldr	r0, [r0, #0]
 800d31e:	f380 8808 	msr	MSP, r0
 800d322:	f04f 0000 	mov.w	r0, #0
 800d326:	f380 8814 	msr	CONTROL, r0
 800d32a:	b662      	cpsie	i
 800d32c:	b661      	cpsie	f
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	df00      	svc	0
 800d338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d33a:	bf00      	nop
 800d33c:	e000ed08 	.word	0xe000ed08

0800d340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d346:	4b46      	ldr	r3, [pc, #280]	; (800d460 <xPortStartScheduler+0x120>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a46      	ldr	r2, [pc, #280]	; (800d464 <xPortStartScheduler+0x124>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d10a      	bne.n	800d366 <xPortStartScheduler+0x26>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	613b      	str	r3, [r7, #16]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d366:	4b3e      	ldr	r3, [pc, #248]	; (800d460 <xPortStartScheduler+0x120>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a3f      	ldr	r2, [pc, #252]	; (800d468 <xPortStartScheduler+0x128>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d10a      	bne.n	800d386 <xPortStartScheduler+0x46>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	60fb      	str	r3, [r7, #12]
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d386:	4b39      	ldr	r3, [pc, #228]	; (800d46c <xPortStartScheduler+0x12c>)
 800d388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	22ff      	movs	r2, #255	; 0xff
 800d396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	4b31      	ldr	r3, [pc, #196]	; (800d470 <xPortStartScheduler+0x130>)
 800d3ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3ae:	4b31      	ldr	r3, [pc, #196]	; (800d474 <xPortStartScheduler+0x134>)
 800d3b0:	2207      	movs	r2, #7
 800d3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3b4:	e009      	b.n	800d3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d3b6:	4b2f      	ldr	r3, [pc, #188]	; (800d474 <xPortStartScheduler+0x134>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <xPortStartScheduler+0x134>)
 800d3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3ca:	78fb      	ldrb	r3, [r7, #3]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d2:	2b80      	cmp	r3, #128	; 0x80
 800d3d4:	d0ef      	beq.n	800d3b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3d6:	4b27      	ldr	r3, [pc, #156]	; (800d474 <xPortStartScheduler+0x134>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f1c3 0307 	rsb	r3, r3, #7
 800d3de:	2b04      	cmp	r3, #4
 800d3e0:	d00a      	beq.n	800d3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	60bb      	str	r3, [r7, #8]
}
 800d3f4:	bf00      	nop
 800d3f6:	e7fe      	b.n	800d3f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d3f8:	4b1e      	ldr	r3, [pc, #120]	; (800d474 <xPortStartScheduler+0x134>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	021b      	lsls	r3, r3, #8
 800d3fe:	4a1d      	ldr	r2, [pc, #116]	; (800d474 <xPortStartScheduler+0x134>)
 800d400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d402:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <xPortStartScheduler+0x134>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d40a:	4a1a      	ldr	r2, [pc, #104]	; (800d474 <xPortStartScheduler+0x134>)
 800d40c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	b2da      	uxtb	r2, r3
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d416:	4b18      	ldr	r3, [pc, #96]	; (800d478 <xPortStartScheduler+0x138>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a17      	ldr	r2, [pc, #92]	; (800d478 <xPortStartScheduler+0x138>)
 800d41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d422:	4b15      	ldr	r3, [pc, #84]	; (800d478 <xPortStartScheduler+0x138>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a14      	ldr	r2, [pc, #80]	; (800d478 <xPortStartScheduler+0x138>)
 800d428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d42c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d42e:	f000 f8dd 	bl	800d5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d432:	4b12      	ldr	r3, [pc, #72]	; (800d47c <xPortStartScheduler+0x13c>)
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d438:	f000 f8fc 	bl	800d634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d43c:	4b10      	ldr	r3, [pc, #64]	; (800d480 <xPortStartScheduler+0x140>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a0f      	ldr	r2, [pc, #60]	; (800d480 <xPortStartScheduler+0x140>)
 800d442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d448:	f7ff ff66 	bl	800d318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d44c:	f7fe fc4a 	bl	800bce4 <vTaskSwitchContext>
	prvTaskExitError();
 800d450:	f7ff ff22 	bl	800d298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	e000ed00 	.word	0xe000ed00
 800d464:	410fc271 	.word	0x410fc271
 800d468:	410fc270 	.word	0x410fc270
 800d46c:	e000e400 	.word	0xe000e400
 800d470:	200014f0 	.word	0x200014f0
 800d474:	200014f4 	.word	0x200014f4
 800d478:	e000ed20 	.word	0xe000ed20
 800d47c:	20000078 	.word	0x20000078
 800d480:	e000ef34 	.word	0xe000ef34

0800d484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
	__asm volatile
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	607b      	str	r3, [r7, #4]
}
 800d49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d49e:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	4a0d      	ldr	r2, [pc, #52]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4a8:	4b0c      	ldr	r3, [pc, #48]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d10f      	bne.n	800d4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <vPortEnterCritical+0x5c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	603b      	str	r3, [r7, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vPortEnterCritical+0x4a>
	}
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20000078 	.word	0x20000078
 800d4e0:	e000ed04 	.word	0xe000ed04

0800d4e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <vPortExitCritical+0x50>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <vPortExitCritical+0x24>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	607b      	str	r3, [r7, #4]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d508:	4b0a      	ldr	r3, [pc, #40]	; (800d534 <vPortExitCritical+0x50>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	4a09      	ldr	r2, [pc, #36]	; (800d534 <vPortExitCritical+0x50>)
 800d510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d512:	4b08      	ldr	r3, [pc, #32]	; (800d534 <vPortExitCritical+0x50>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d105      	bne.n	800d526 <vPortExitCritical+0x42>
 800d51a:	2300      	movs	r3, #0
 800d51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	f383 8811 	msr	BASEPRI, r3
}
 800d524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	20000078 	.word	0x20000078
	...

0800d540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d540:	f3ef 8009 	mrs	r0, PSP
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	4b15      	ldr	r3, [pc, #84]	; (800d5a0 <pxCurrentTCBConst>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	f01e 0f10 	tst.w	lr, #16
 800d550:	bf08      	it	eq
 800d552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	6010      	str	r0, [r2, #0]
 800d55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d564:	f380 8811 	msr	BASEPRI, r0
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f7fe fbb8 	bl	800bce4 <vTaskSwitchContext>
 800d574:	f04f 0000 	mov.w	r0, #0
 800d578:	f380 8811 	msr	BASEPRI, r0
 800d57c:	bc09      	pop	{r0, r3}
 800d57e:	6819      	ldr	r1, [r3, #0]
 800d580:	6808      	ldr	r0, [r1, #0]
 800d582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d586:	f01e 0f10 	tst.w	lr, #16
 800d58a:	bf08      	it	eq
 800d58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d590:	f380 8809 	msr	PSP, r0
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst>:
 800d5a0:	20000ec4 	.word	0x20000ec4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	607b      	str	r3, [r7, #4]
}
 800d5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5c2:	f7fe fad5 	bl	800bb70 <xTaskIncrementTick>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5cc:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <xPortSysTickHandler+0x40>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	f383 8811 	msr	BASEPRI, r3
}
 800d5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	e000ed04 	.word	0xe000ed04

0800d5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	; (800d620 <vPortSetupTimerInterrupt+0x34>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <vPortSetupTimerInterrupt+0x38>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <vPortSetupTimerInterrupt+0x3c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a0a      	ldr	r2, [pc, #40]	; (800d62c <vPortSetupTimerInterrupt+0x40>)
 800d602:	fba2 2303 	umull	r2, r3, r2, r3
 800d606:	099b      	lsrs	r3, r3, #6
 800d608:	4a09      	ldr	r2, [pc, #36]	; (800d630 <vPortSetupTimerInterrupt+0x44>)
 800d60a:	3b01      	subs	r3, #1
 800d60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d60e:	4b04      	ldr	r3, [pc, #16]	; (800d620 <vPortSetupTimerInterrupt+0x34>)
 800d610:	2207      	movs	r2, #7
 800d612:	601a      	str	r2, [r3, #0]
}
 800d614:	bf00      	nop
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	e000e010 	.word	0xe000e010
 800d624:	e000e018 	.word	0xe000e018
 800d628:	2000006c 	.word	0x2000006c
 800d62c:	10624dd3 	.word	0x10624dd3
 800d630:	e000e014 	.word	0xe000e014

0800d634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d644 <vPortEnableVFP+0x10>
 800d638:	6801      	ldr	r1, [r0, #0]
 800d63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d63e:	6001      	str	r1, [r0, #0]
 800d640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d642:	bf00      	nop
 800d644:	e000ed88 	.word	0xe000ed88

0800d648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d64e:	f3ef 8305 	mrs	r3, IPSR
 800d652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b0f      	cmp	r3, #15
 800d658:	d914      	bls.n	800d684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d65a:	4a17      	ldr	r2, [pc, #92]	; (800d6b8 <vPortValidateInterruptPriority+0x70>)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d664:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <vPortValidateInterruptPriority+0x74>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	7afa      	ldrb	r2, [r7, #11]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d20a      	bcs.n	800d684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	607b      	str	r3, [r7, #4]
}
 800d680:	bf00      	nop
 800d682:	e7fe      	b.n	800d682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d684:	4b0e      	ldr	r3, [pc, #56]	; (800d6c0 <vPortValidateInterruptPriority+0x78>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d68c:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <vPortValidateInterruptPriority+0x7c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	429a      	cmp	r2, r3
 800d692:	d90a      	bls.n	800d6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	603b      	str	r3, [r7, #0]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <vPortValidateInterruptPriority+0x60>
	}
 800d6aa:	bf00      	nop
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	e000e3f0 	.word	0xe000e3f0
 800d6bc:	200014f0 	.word	0x200014f0
 800d6c0:	e000ed0c 	.word	0xe000ed0c
 800d6c4:	200014f4 	.word	0x200014f4

0800d6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	; 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6d4:	f7fe f97e 	bl	800b9d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6d8:	4b5b      	ldr	r3, [pc, #364]	; (800d848 <pvPortMalloc+0x180>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6e0:	f000 f920 	bl	800d924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d6e4:	4b59      	ldr	r3, [pc, #356]	; (800d84c <pvPortMalloc+0x184>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f040 8093 	bne.w	800d818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01d      	beq.n	800d734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6f8:	2208      	movs	r2, #8
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	2b00      	cmp	r3, #0
 800d708:	d014      	beq.n	800d734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <pvPortMalloc+0x6c>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	617b      	str	r3, [r7, #20]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d06e      	beq.n	800d818 <pvPortMalloc+0x150>
 800d73a:	4b45      	ldr	r3, [pc, #276]	; (800d850 <pvPortMalloc+0x188>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d869      	bhi.n	800d818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d744:	4b43      	ldr	r3, [pc, #268]	; (800d854 <pvPortMalloc+0x18c>)
 800d746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d748:	4b42      	ldr	r3, [pc, #264]	; (800d854 <pvPortMalloc+0x18c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d74e:	e004      	b.n	800d75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	429a      	cmp	r2, r3
 800d762:	d903      	bls.n	800d76c <pvPortMalloc+0xa4>
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f1      	bne.n	800d750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d76c:	4b36      	ldr	r3, [pc, #216]	; (800d848 <pvPortMalloc+0x180>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d772:	429a      	cmp	r2, r3
 800d774:	d050      	beq.n	800d818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2208      	movs	r2, #8
 800d77c:	4413      	add	r3, r2
 800d77e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	1ad2      	subs	r2, r2, r3
 800d790:	2308      	movs	r3, #8
 800d792:	005b      	lsls	r3, r3, #1
 800d794:	429a      	cmp	r2, r3
 800d796:	d91f      	bls.n	800d7d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00a      	beq.n	800d7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	613b      	str	r3, [r7, #16]
}
 800d7bc:	bf00      	nop
 800d7be:	e7fe      	b.n	800d7be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7d2:	69b8      	ldr	r0, [r7, #24]
 800d7d4:	f000 f908 	bl	800d9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d7d8:	4b1d      	ldr	r3, [pc, #116]	; (800d850 <pvPortMalloc+0x188>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	4a1b      	ldr	r2, [pc, #108]	; (800d850 <pvPortMalloc+0x188>)
 800d7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	; (800d850 <pvPortMalloc+0x188>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	; (800d858 <pvPortMalloc+0x190>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d203      	bcs.n	800d7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7f2:	4b17      	ldr	r3, [pc, #92]	; (800d850 <pvPortMalloc+0x188>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a18      	ldr	r2, [pc, #96]	; (800d858 <pvPortMalloc+0x190>)
 800d7f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <pvPortMalloc+0x184>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	431a      	orrs	r2, r3
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d80e:	4b13      	ldr	r3, [pc, #76]	; (800d85c <pvPortMalloc+0x194>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	4a11      	ldr	r2, [pc, #68]	; (800d85c <pvPortMalloc+0x194>)
 800d816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d818:	f7fe f8ea 	bl	800b9f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f003 0307 	and.w	r3, r3, #7
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00a      	beq.n	800d83c <pvPortMalloc+0x174>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	60fb      	str	r3, [r7, #12]
}
 800d838:	bf00      	nop
 800d83a:	e7fe      	b.n	800d83a <pvPortMalloc+0x172>
	return pvReturn;
 800d83c:	69fb      	ldr	r3, [r7, #28]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3728      	adds	r7, #40	; 0x28
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20002100 	.word	0x20002100
 800d84c:	20002114 	.word	0x20002114
 800d850:	20002104 	.word	0x20002104
 800d854:	200020f8 	.word	0x200020f8
 800d858:	20002108 	.word	0x20002108
 800d85c:	2000210c 	.word	0x2000210c

0800d860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04d      	beq.n	800d90e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d872:	2308      	movs	r3, #8
 800d874:	425b      	negs	r3, r3
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	4413      	add	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	4b24      	ldr	r3, [pc, #144]	; (800d918 <vPortFree+0xb8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4013      	ands	r3, r2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10a      	bne.n	800d8a4 <vPortFree+0x44>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60fb      	str	r3, [r7, #12]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00a      	beq.n	800d8c2 <vPortFree+0x62>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60bb      	str	r3, [r7, #8]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	4b14      	ldr	r3, [pc, #80]	; (800d918 <vPortFree+0xb8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01e      	beq.n	800d90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d11a      	bne.n	800d90e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <vPortFree+0xb8>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	401a      	ands	r2, r3
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8e8:	f7fe f874 	bl	800b9d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <vPortFree+0xbc>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4a09      	ldr	r2, [pc, #36]	; (800d91c <vPortFree+0xbc>)
 800d8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8fa:	6938      	ldr	r0, [r7, #16]
 800d8fc:	f000 f874 	bl	800d9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d900:	4b07      	ldr	r3, [pc, #28]	; (800d920 <vPortFree+0xc0>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3301      	adds	r3, #1
 800d906:	4a06      	ldr	r2, [pc, #24]	; (800d920 <vPortFree+0xc0>)
 800d908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d90a:	f7fe f871 	bl	800b9f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d90e:	bf00      	nop
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20002114 	.word	0x20002114
 800d91c:	20002104 	.word	0x20002104
 800d920:	20002110 	.word	0x20002110

0800d924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d92a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d930:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <prvHeapInit+0xac>)
 800d932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f003 0307 	and.w	r3, r3, #7
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00c      	beq.n	800d958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3307      	adds	r3, #7
 800d942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f023 0307 	bic.w	r3, r3, #7
 800d94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	4a1f      	ldr	r2, [pc, #124]	; (800d9d0 <prvHeapInit+0xac>)
 800d954:	4413      	add	r3, r2
 800d956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d95c:	4a1d      	ldr	r2, [pc, #116]	; (800d9d4 <prvHeapInit+0xb0>)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d962:	4b1c      	ldr	r3, [pc, #112]	; (800d9d4 <prvHeapInit+0xb0>)
 800d964:	2200      	movs	r2, #0
 800d966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	4413      	add	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d970:	2208      	movs	r2, #8
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	1a9b      	subs	r3, r3, r2
 800d976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 0307 	bic.w	r3, r3, #7
 800d97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	4a15      	ldr	r2, [pc, #84]	; (800d9d8 <prvHeapInit+0xb4>)
 800d984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d986:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <prvHeapInit+0xb4>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2200      	movs	r2, #0
 800d98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d98e:	4b12      	ldr	r3, [pc, #72]	; (800d9d8 <prvHeapInit+0xb4>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <prvHeapInit+0xb4>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <prvHeapInit+0xb8>)
 800d9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	4a09      	ldr	r2, [pc, #36]	; (800d9e0 <prvHeapInit+0xbc>)
 800d9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <prvHeapInit+0xc0>)
 800d9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9c2:	601a      	str	r2, [r3, #0]
}
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	200014f8 	.word	0x200014f8
 800d9d4:	200020f8 	.word	0x200020f8
 800d9d8:	20002100 	.word	0x20002100
 800d9dc:	20002108 	.word	0x20002108
 800d9e0:	20002104 	.word	0x20002104
 800d9e4:	20002114 	.word	0x20002114

0800d9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9f0:	4b28      	ldr	r3, [pc, #160]	; (800da94 <prvInsertBlockIntoFreeList+0xac>)
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e002      	b.n	800d9fc <prvInsertBlockIntoFreeList+0x14>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	429a      	cmp	r2, r3
 800da04:	d8f7      	bhi.n	800d9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	4413      	add	r3, r2
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d108      	bne.n	800da2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	441a      	add	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	441a      	add	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d118      	bne.n	800da70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	4b15      	ldr	r3, [pc, #84]	; (800da98 <prvInsertBlockIntoFreeList+0xb0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d00d      	beq.n	800da66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	441a      	add	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	e008      	b.n	800da78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da66:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <prvInsertBlockIntoFreeList+0xb0>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	e003      	b.n	800da78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d002      	beq.n	800da86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da86:	bf00      	nop
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	200020f8 	.word	0x200020f8
 800da98:	20002100 	.word	0x20002100

0800da9c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daae:	4619      	mov	r1, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	78fa      	ldrb	r2, [r7, #3]
 800dab4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dabc:	3301      	adds	r3, #1
 800dabe:	425a      	negs	r2, r3
 800dac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dac8:	bf58      	it	pl
 800daca:	4253      	negpl	r3, r2
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800dada:	2b80      	cmp	r3, #128	; 0x80
 800dadc:	d113      	bne.n	800db06 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daec:	3301      	adds	r3, #1
 800daee:	425a      	negs	r2, r3
 800daf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800daf8:	bf58      	it	pl
 800dafa:	4253      	negpl	r3, r2
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800db04:	e00b      	b.n	800db1e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db14:	3301      	adds	r3, #1
 800db16:	b2da      	uxtb	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800db1e:	bf00      	nop
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db3a:	461a      	mov	r2, r3
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f805 	bl	800db4e <RingGetNBytes>
 800db44:	4603      	mov	r3, r0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b086      	sub	sp, #24
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	4613      	mov	r3, r2
 800db5a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <RingGetNBytes+0x1e>
 800db66:	79fb      	ldrb	r3, [r7, #7]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <RingGetNBytes+0x22>
 800db6c:	2300      	movs	r3, #0
 800db6e:	e03e      	b.n	800dbee <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b80      	cmp	r3, #128	; 0x80
 800db74:	d901      	bls.n	800db7a <RingGetNBytes+0x2c>
 800db76:	2300      	movs	r3, #0
 800db78:	e039      	b.n	800dbee <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
 800db7e:	e01b      	b.n	800dbb8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db86:	4619      	mov	r1, r3
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	4413      	add	r3, r2
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	5c52      	ldrb	r2, [r2, r1]
 800db92:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db9a:	3301      	adds	r3, #1
 800db9c:	425a      	negs	r2, r3
 800db9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dba6:	bf58      	it	pl
 800dba8:	4253      	negpl	r3, r2
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
 800dbb8:	7dfa      	ldrb	r2, [r7, #23]
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d205      	bcs.n	800dbcc <RingGetNBytes+0x7e>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800dbc6:	7dfa      	ldrb	r2, [r7, #23]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d3d9      	bcc.n	800db80 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f805 	bl	800dbf6 <RingClear>

	return uCounter;
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800dc1e:	bf00      	nop
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
	...

0800dc2c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800dc34:	4b42      	ldr	r3, [pc, #264]	; (800dd40 <ModbusInit+0x114>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d87d      	bhi.n	800dd38 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	33d0      	adds	r3, #208	; 0xd0
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff ffd8 	bl	800dbf6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d109      	bne.n	800dc62 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800dc4e:	4a3d      	ldr	r2, [pc, #244]	; (800dd44 <ModbusInit+0x118>)
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	483d      	ldr	r0, [pc, #244]	; (800dd48 <ModbusInit+0x11c>)
 800dc54:	f7fc f818 	bl	8009c88 <osThreadNew>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800dc60:	e033      	b.n	800dcca <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d12e      	bne.n	800dcc8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800dc6a:	4a38      	ldr	r2, [pc, #224]	; (800dd4c <ModbusInit+0x120>)
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	4838      	ldr	r0, [pc, #224]	; (800dd50 <ModbusInit+0x124>)
 800dc70:	f7fc f80a 	bl	8009c88 <osThreadNew>
 800dc74:	4602      	mov	r2, r0
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800dc82:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800dc8a:	4a32      	ldr	r2, [pc, #200]	; (800dd54 <ModbusInit+0x128>)
 800dc8c:	9200      	str	r2, [sp, #0]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4831      	ldr	r0, [pc, #196]	; (800dd58 <ModbusInit+0x12c>)
 800dc92:	f7fe ff4b 	bl	800cb2c <xTimerCreate>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d100      	bne.n	800dcaa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800dca8:	e7fe      	b.n	800dca8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800dcaa:	4a2c      	ldr	r2, [pc, #176]	; (800dd5c <ModbusInit+0x130>)
 800dcac:	2110      	movs	r1, #16
 800dcae:	2002      	movs	r0, #2
 800dcb0:	f7fc fa09 	bl	800a0c6 <osMessageQueueNew>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800dcc6:	e7fe      	b.n	800dcc6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800dcc8:	e7fe      	b.n	800dcc8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d100      	bne.n	800dcd6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800dcd4:	e7fe      	b.n	800dcd4 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800dcdc:	4a20      	ldr	r2, [pc, #128]	; (800dd60 <ModbusInit+0x134>)
 800dcde:	9200      	str	r2, [sp, #0]
 800dce0:	2200      	movs	r2, #0
 800dce2:	2105      	movs	r1, #5
 800dce4:	481f      	ldr	r0, [pc, #124]	; (800dd64 <ModbusInit+0x138>)
 800dce6:	f7fe ff21 	bl	800cb2c <xTimerCreate>
 800dcea:	4602      	mov	r2, r0
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d100      	bne.n	800dcfe <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800dcfc:	e7fe      	b.n	800dcfc <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800dcfe:	4a1a      	ldr	r2, [pc, #104]	; (800dd68 <ModbusInit+0x13c>)
 800dd00:	2101      	movs	r1, #1
 800dd02:	2001      	movs	r0, #1
 800dd04:	f7fc f956 	bl	8009fb4 <osSemaphoreNew>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d100      	bne.n	800dd1c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800dd1a:	e7fe      	b.n	800dd1a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800dd1c:	4b08      	ldr	r3, [pc, #32]	; (800dd40 <ModbusInit+0x114>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	4619      	mov	r1, r3
 800dd22:	4a12      	ldr	r2, [pc, #72]	; (800dd6c <ModbusInit+0x140>)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <ModbusInit+0x114>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b03      	ldr	r3, [pc, #12]	; (800dd40 <ModbusInit+0x114>)
 800dd34:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800dd36:	e000      	b.n	800dd3a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800dd38:	e7fe      	b.n	800dd38 <ModbusInit+0x10c>
}
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20002120 	.word	0x20002120
 800dd44:	0800fa84 	.word	0x0800fa84
 800dd48:	0800df79 	.word	0x0800df79
 800dd4c:	0800faa8 	.word	0x0800faa8
 800dd50:	0800e455 	.word	0x0800e455
 800dd54:	0800df1d 	.word	0x0800df1d
 800dd58:	0800f930 	.word	0x0800f930
 800dd5c:	0800fa6c 	.word	0x0800fa6c
 800dd60:	0800de99 	.word	0x0800de99
 800dd64:	0800f940 	.word	0x0800f940
 800dd68:	0800facc 	.word	0x0800facc
 800dd6c:	20002118 	.word	0x20002118

0800dd70 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d005      	beq.n	800dd8e <ModbusStart+0x1e>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d000      	beq.n	800dd8e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800dd8c:	e7fe      	b.n	800dd8c <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d004      	beq.n	800dda2 <ModbusStart+0x32>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd9e:	2b04      	cmp	r3, #4
 800dda0:	d15c      	bne.n	800de5c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68d8      	ldr	r0, [r3, #12]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8a1b      	ldrh	r3, [r3, #16]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f7f6 f8f3 	bl	8003fa0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	2b03      	cmp	r3, #3
 800ddc0:	d105      	bne.n	800ddce <ModbusStart+0x5e>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d100      	bne.n	800ddce <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800ddcc:	e7fe      	b.n	800ddcc <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800ddce:	bf00      	nop
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f9 fe41 	bl	8007a5c <HAL_UART_GetState>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b20      	cmp	r3, #32
 800ddde:	d1f7      	bne.n	800ddd0 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dde6:	2b04      	cmp	r3, #4
 800dde8:	d11a      	bne.n	800de20 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6858      	ldr	r0, [r3, #4]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	33d0      	adds	r3, #208	; 0xd0
 800ddf2:	2280      	movs	r2, #128	; 0x80
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f7fb fdda 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d000      	beq.n	800de02 <ModbusStart+0x92>
        	   {
        	         while(1)
 800de00:	e7fe      	b.n	800de00 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f022 0204 	bic.w	r2, r2, #4
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e00b      	b.n	800de38 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6858      	ldr	r0, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	33b8      	adds	r3, #184	; 0xb8
 800de28:	2201      	movs	r2, #1
 800de2a:	4619      	mov	r1, r3
 800de2c:	f7f8 fffc 	bl	8006e28 <HAL_UART_Receive_IT>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d000      	beq.n	800de38 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800de36:	e7fe      	b.n	800de36 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7a1b      	ldrb	r3, [r3, #8]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d004      	beq.n	800de4a <ModbusStart+0xda>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b04      	cmp	r3, #4
 800de46:	d100      	bne.n	800de4a <ModbusStart+0xda>
          {
        	  while(1)
 800de48:	e7fe      	b.n	800de48 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7a1b      	ldrb	r3, [r3, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d104      	bne.n	800de5c <ModbusStart+0xec>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d100      	bne.n	800de5c <ModbusStart+0xec>
          {
             	  while(1)
 800de5a:	e7fe      	b.n	800de5a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af02      	add	r7, sp, #8
 800de9e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e02a      	b.n	800defc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800dea6:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d11e      	bne.n	800def6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800deb8:	4a16      	ldr	r2, [pc, #88]	; (800df14 <vTimerCallbackT35+0x7c>)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d10c      	bne.n	800dee0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800dec6:	4a13      	ldr	r2, [pc, #76]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dece:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800ded2:	2300      	movs	r3, #0
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	2300      	movs	r3, #0
 800ded8:	2200      	movs	r2, #0
 800deda:	2103      	movs	r1, #3
 800dedc:	f7fe fe82 	bl	800cbe4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800dee0:	4a0c      	ldr	r2, [pc, #48]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800deec:	2300      	movs	r3, #0
 800deee:	2203      	movs	r2, #3
 800def0:	2100      	movs	r1, #0
 800def2:	f7fe fbeb 	bl	800c6cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3301      	adds	r3, #1
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <vTimerCallbackT35+0x80>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4293      	cmp	r3, r2
 800df06:	dbce      	blt.n	800dea6 <vTimerCallbackT35+0xe>
		}

	}
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20002118 	.word	0x20002118
 800df18:	20002120 	.word	0x20002120

0800df1c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e017      	b.n	800df5a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800df2a:	4a11      	ldr	r2, [pc, #68]	; (800df70 <vTimerCallbackTimeout+0x54>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d10b      	bne.n	800df54 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800df3c:	4a0c      	ldr	r2, [pc, #48]	; (800df70 <vTimerCallbackTimeout+0x54>)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df44:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800df48:	2300      	movs	r3, #0
 800df4a:	2203      	movs	r2, #3
 800df4c:	f06f 0107 	mvn.w	r1, #7
 800df50:	f7fe fbbc 	bl	800c6cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3301      	adds	r3, #1
 800df58:	60fb      	str	r3, [r7, #12]
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <vTimerCallbackTimeout+0x58>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4293      	cmp	r3, r2
 800df64:	dbe1      	blt.n	800df2a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20002118 	.word	0x20002118
 800df74:	20002120 	.word	0x20002120

0800df78 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800df90:	2b01      	cmp	r3, #1
 800df92:	d004      	beq.n	800df9e <StartTaskModbusSlave+0x26>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800df9a:	2b04      	cmp	r3, #4
 800df9c:	d117      	bne.n	800dfce <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800df9e:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	f7fe fb4a 	bl	800c63c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 fc21 	bl	800e7f0 <getRxBuffer>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f113 0f03 	cmn.w	r3, #3
 800dfb4:	d10b      	bne.n	800dfce <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	22fd      	movs	r2, #253	; 0xfd
 800dfba:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800dfcc:	e0b7      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfd4:	2b06      	cmp	r3, #6
 800dfd6:	d80b      	bhi.n	800dff0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	22fa      	movs	r2, #250	; 0xfa
 800dfdc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800dfee:	e0a6      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	7cda      	ldrb	r2, [r3, #19]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	7a1b      	ldrb	r3, [r3, #8]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	f040 809f 	bne.w	800e13c <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f000 fc40 	bl	800e884 <validateRequest>
 800e004:	4603      	mov	r3, r0
 800e006:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00c      	beq.n	800e028 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	68f9      	ldr	r1, [r7, #12]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 fdda 	bl	800ebcc <buildException>
			sendTxBuffer(modH);
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f000 fdf6 	bl	800ec0a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800e01e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800e026:	e08a      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e034:	f04f 31ff 	mov.w	r1, #4294967295
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fc ffaf 	bl	800af9c <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	7d1b      	ldrb	r3, [r3, #20]
 800e042:	3b01      	subs	r3, #1
 800e044:	2b0f      	cmp	r3, #15
 800e046:	d86f      	bhi.n	800e128 <StartTaskModbusSlave+0x1b0>
 800e048:	a201      	add	r2, pc, #4	; (adr r2, 800e050 <StartTaskModbusSlave+0xd8>)
 800e04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04e:	bf00      	nop
 800e050:	0800e091 	.word	0x0800e091
 800e054:	0800e0a5 	.word	0x0800e0a5
 800e058:	0800e0b9 	.word	0x0800e0b9
 800e05c:	0800e0cd 	.word	0x0800e0cd
 800e060:	0800e0e1 	.word	0x0800e0e1
 800e064:	0800e0f3 	.word	0x0800e0f3
 800e068:	0800e129 	.word	0x0800e129
 800e06c:	0800e129 	.word	0x0800e129
 800e070:	0800e129 	.word	0x0800e129
 800e074:	0800e129 	.word	0x0800e129
 800e078:	0800e129 	.word	0x0800e129
 800e07c:	0800e129 	.word	0x0800e129
 800e080:	0800e129 	.word	0x0800e129
 800e084:	0800e129 	.word	0x0800e129
 800e088:	0800e105 	.word	0x0800e105
 800e08c:	0800e117 	.word	0x0800e117
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800e090:	2101      	movs	r1, #1
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 fe5b 	bl	800ed4e <process_FC1>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0a2:	e042      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800e0a4:	2102      	movs	r1, #2
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 fe51 	bl	800ed4e <process_FC1>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0b6:	e038      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800e0b8:	2103      	movs	r1, #3
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 ff03 	bl	800eec6 <process_FC3>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0ca:	e02e      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800e0cc:	2104      	movs	r1, #4
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 fef9 	bl	800eec6 <process_FC3>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0de:	e024      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 ff68 	bl	800efb6 <process_FC5>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0f0:	e01b      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f000 ffb8 	bl	800f068 <process_FC6>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e102:	e012      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 ffe1 	bl	800f0cc <process_FC15>
 800e10a:	4603      	mov	r3, r0
 800e10c:	461a      	mov	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e114:	e009      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f001 f866 	bl	800f1e8 <process_FC16>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461a      	mov	r2, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e126:	e000      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800e128:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e130:	2300      	movs	r3, #0
 800e132:	2200      	movs	r2, #0
 800e134:	2100      	movs	r1, #0
 800e136:	f7fc fcb7 	bl	800aaa8 <xQueueGenericSend>

	 continue;
 800e13a:	e000      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
    	continue;
 800e13c:	bf00      	nop
  {
 800e13e:	e721      	b.n	800df84 <StartTaskModbusSlave+0xc>

0800e140 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800e140:	b084      	sub	sp, #16
 800e142:	b580      	push	{r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	f107 001c 	add.w	r0, r7, #28
 800e14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e15c:	f04f 31ff 	mov.w	r1, #4294967295
 800e160:	4618      	mov	r0, r3
 800e162:	f7fc ff1b 	bl	800af9c <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7a1b      	ldrb	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <SendQuery+0x32>
 800e16e:	23ff      	movs	r3, #255	; 0xff
 800e170:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <SendQuery+0x40>
 800e17c:	23fe      	movs	r3, #254	; 0xfe
 800e17e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800e180:	7f3b      	ldrb	r3, [r7, #28]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <SendQuery+0x4c>
 800e186:	7f3b      	ldrb	r3, [r7, #28]
 800e188:	2bf7      	cmp	r3, #247	; 0xf7
 800e18a:	d901      	bls.n	800e190 <SendQuery+0x50>
 800e18c:	23f7      	movs	r3, #247	; 0xf7
 800e18e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800e190:	7bbb      	ldrb	r3, [r7, #14]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00e      	beq.n	800e1b4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800e196:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	f7fc fc7d 	bl	800aaa8 <xQueueGenericSend>
		 return error;
 800e1ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1b2:	e147      	b.n	800e444 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800e1b4:	7f7b      	ldrb	r3, [r7, #29]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d008      	beq.n	800e1cc <SendQuery+0x8c>
 800e1ba:	7f7b      	ldrb	r3, [r7, #29]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d005      	beq.n	800e1cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800e1c0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800e1c2:	2b05      	cmp	r3, #5
 800e1c4:	d002      	beq.n	800e1cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800e1c6:	7f7b      	ldrb	r3, [r7, #29]
 800e1c8:	2b0f      	cmp	r3, #15
 800e1ca:	d104      	bne.n	800e1d6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800e1d4:	e00f      	b.n	800e1f6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800e1d6:	7f7b      	ldrb	r3, [r7, #29]
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d008      	beq.n	800e1ee <SendQuery+0xae>
 800e1dc:	7f7b      	ldrb	r3, [r7, #29]
 800e1de:	2b04      	cmp	r3, #4
 800e1e0:	d005      	beq.n	800e1ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800e1e2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800e1e4:	2b06      	cmp	r3, #6
 800e1e6:	d002      	beq.n	800e1ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800e1e8:	7f7b      	ldrb	r3, [r7, #29]
 800e1ea:	2b10      	cmp	r3, #16
 800e1ec:	d103      	bne.n	800e1f6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800e1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800e1f6:	7f3a      	ldrb	r2, [r7, #28]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800e1fc:	7f7a      	ldrb	r2, [r7, #29]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800e202:	8bfb      	ldrh	r3, [r7, #30]
 800e204:	0a1b      	lsrs	r3, r3, #8
 800e206:	b29b      	uxth	r3, r3
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800e20e:	8bfb      	ldrh	r3, [r7, #30]
 800e210:	b2da      	uxtb	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800e216:	7f7b      	ldrb	r3, [r7, #29]
 800e218:	3b01      	subs	r3, #1
 800e21a:	2b0f      	cmp	r3, #15
 800e21c:	f200 80ff 	bhi.w	800e41e <SendQuery+0x2de>
 800e220:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <SendQuery+0xe8>)
 800e222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e226:	bf00      	nop
 800e228:	0800e269 	.word	0x0800e269
 800e22c:	0800e269 	.word	0x0800e269
 800e230:	0800e269 	.word	0x0800e269
 800e234:	0800e269 	.word	0x0800e269
 800e238:	0800e287 	.word	0x0800e287
 800e23c:	0800e2a9 	.word	0x0800e2a9
 800e240:	0800e41f 	.word	0x0800e41f
 800e244:	0800e41f 	.word	0x0800e41f
 800e248:	0800e41f 	.word	0x0800e41f
 800e24c:	0800e41f 	.word	0x0800e41f
 800e250:	0800e41f 	.word	0x0800e41f
 800e254:	0800e41f 	.word	0x0800e41f
 800e258:	0800e41f 	.word	0x0800e41f
 800e25c:	0800e41f 	.word	0x0800e41f
 800e260:	0800e2cb 	.word	0x0800e2cb
 800e264:	0800e389 	.word	0x0800e389
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e268:	8c3b      	ldrh	r3, [r7, #32]
 800e26a:	0a1b      	lsrs	r3, r3, #8
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e274:	8c3b      	ldrh	r3, [r7, #32]
 800e276:	b2da      	uxtb	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2206      	movs	r2, #6
 800e280:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e284:	e0cb      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <SendQuery+0x152>
 800e28e:	22ff      	movs	r2, #255	; 0xff
 800e290:	e000      	b.n	800e294 <SendQuery+0x154>
 800e292:	2200      	movs	r2, #0
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2206      	movs	r2, #6
 800e2a2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e2a6:	e0ba      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e2c8:	e0a9      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800e2ca:	8c3b      	ldrh	r3, [r7, #32]
 800e2cc:	091b      	lsrs	r3, r3, #4
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800e2d2:	7a7b      	ldrb	r3, [r7, #9]
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800e2d8:	8c3b      	ldrh	r3, [r7, #32]
 800e2da:	f003 030f 	and.w	r3, r3, #15
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800e2ea:	7a7b      	ldrb	r3, [r7, #9]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e2f0:	8c3b      	ldrh	r3, [r7, #32]
 800e2f2:	0a1b      	lsrs	r3, r3, #8
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e2fc:	8c3b      	ldrh	r3, [r7, #32]
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7bfa      	ldrb	r2, [r7, #15]
 800e308:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2207      	movs	r2, #7
 800e30e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800e312:	2300      	movs	r3, #0
 800e314:	81bb      	strh	r3, [r7, #12]
 800e316:	e031      	b.n	800e37c <SendQuery+0x23c>
	    {
	        if(i%2)
 800e318:	89bb      	ldrh	r3, [r7, #12]
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	b29b      	uxth	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00f      	beq.n	800e344 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800e324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e326:	89bb      	ldrh	r3, [r7, #12]
 800e328:	085b      	lsrs	r3, r3, #1
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	881a      	ldrh	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e338:	4619      	mov	r1, r3
 800e33a:	b2d2      	uxtb	r2, r2
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	440b      	add	r3, r1
 800e340:	74da      	strb	r2, [r3, #19]
 800e342:	e010      	b.n	800e366 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800e344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e346:	89bb      	ldrh	r3, [r7, #12]
 800e348:	085b      	lsrs	r3, r3, #1
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	4413      	add	r3, r2
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	0a1b      	lsrs	r3, r3, #8
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e35c:	4619      	mov	r1, r3
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	440b      	add	r3, r1
 800e364:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e36c:	3301      	adds	r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800e376:	89bb      	ldrh	r3, [r7, #12]
 800e378:	3301      	adds	r3, #1
 800e37a:	81bb      	strh	r3, [r7, #12]
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	b29b      	uxth	r3, r3
 800e380:	89ba      	ldrh	r2, [r7, #12]
 800e382:	429a      	cmp	r2, r3
 800e384:	d3c8      	bcc.n	800e318 <SendQuery+0x1d8>
	    }
	    break;
 800e386:	e04a      	b.n	800e41e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e388:	8c3b      	ldrh	r3, [r7, #32]
 800e38a:	0a1b      	lsrs	r3, r3, #8
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e394:	8c3b      	ldrh	r3, [r7, #32]
 800e396:	b2da      	uxtb	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800e39c:	8c3b      	ldrh	r3, [r7, #32]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2207      	movs	r2, #7
 800e3ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	817b      	strh	r3, [r7, #10]
 800e3b4:	e02e      	b.n	800e414 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800e3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b8:	897b      	ldrh	r3, [r7, #10]
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	4413      	add	r3, r2
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	0a1b      	lsrs	r3, r3, #8
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	b2d2      	uxtb	r2, r2
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	440b      	add	r3, r1
 800e3d2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800e3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e6:	897b      	ldrh	r3, [r7, #10]
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	4413      	add	r3, r2
 800e3ec:	881a      	ldrh	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	440b      	add	r3, r1
 800e3fc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e404:	3301      	adds	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e40e:	897b      	ldrh	r3, [r7, #10]
 800e410:	3301      	adds	r3, #1
 800e412:	817b      	strh	r3, [r7, #10]
 800e414:	8c3b      	ldrh	r3, [r7, #32]
 800e416:	897a      	ldrh	r2, [r7, #10]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d3cc      	bcc.n	800e3b6 <SendQuery+0x276>
	    }
	    break;
 800e41c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fbf3 	bl	800ec0a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e42a:	2300      	movs	r3, #0
 800e42c:	2200      	movs	r2, #0
 800e42e:	2100      	movs	r1, #0
 800e430:	f7fc fb3a 	bl	800aaa8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	749a      	strb	r2, [r3, #18]
	return 0;
 800e442:	2300      	movs	r3, #0


}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e44e:	b004      	add	sp, #16
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop

0800e454 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08c      	sub	sp, #48	; 0x30
 800e458:	af02      	add	r7, sp, #8
 800e45a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e466:	f107 010c 	add.w	r1, r7, #12
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fc fcb4 	bl	800addc <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	f107 030c 	add.w	r3, r7, #12
 800e47c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e480:	f7ff fe5e 	bl	800e140 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800e484:	f04f 31ff 	mov.w	r1, #4294967295
 800e488:	2001      	movs	r0, #1
 800e48a:	f7fe f8d7 	bl	800c63c <ulTaskNotifyTake>
 800e48e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	2200      	movs	r2, #0
 800e494:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d018      	beq.n	800e4ce <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	22f8      	movs	r2, #248	; 0xf8
 800e4a8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e4ba:	69b8      	ldr	r0, [r7, #24]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	f7fe f900 	bl	800c6cc <xTaskGenericNotify>
    	  continue;
 800e4cc:	e09a      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800e4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4d0:	f000 f98e 	bl	800e7f0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4da:	2b05      	cmp	r3, #5
 800e4dc:	d818      	bhi.n	800e510 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	22fa      	movs	r2, #250	; 0xfa
 800e4ea:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e4fc:	69b8      	ldr	r0, [r7, #24]
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e504:	4619      	mov	r1, r3
 800e506:	2300      	movs	r3, #0
 800e508:	2203      	movs	r2, #3
 800e50a:	f7fe f8df 	bl	800c6cc <xTaskGenericNotify>
		  continue;
 800e50e:	e079      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800e516:	2300      	movs	r3, #0
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	2200      	movs	r2, #0
 800e51e:	2103      	movs	r1, #3
 800e520:	f7fe fb60 	bl	800cbe4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800e524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e526:	f000 f8f5 	bl	800e714 <validateAnswer>
 800e52a:	4603      	mov	r3, r0
 800e52c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800e52e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d010      	beq.n	800e558 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	7ffa      	ldrb	r2, [r7, #31]
 800e542:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e544:	69b8      	ldr	r0, [r7, #24]
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e54c:	4619      	mov	r1, r3
 800e54e:	2300      	movs	r3, #0
 800e550:	2203      	movs	r2, #3
 800e552:	f7fe f8bb 	bl	800c6cc <xTaskGenericNotify>
	     continue;
 800e556:	e055      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	7ffa      	ldrb	r2, [r7, #31]
 800e55c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e564:	f04f 31ff 	mov.w	r1, #4294967295
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fc fd17 	bl	800af9c <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	7d1b      	ldrb	r3, [r3, #20]
 800e572:	3b01      	subs	r3, #1
 800e574:	2b0f      	cmp	r3, #15
 800e576:	d82b      	bhi.n	800e5d0 <StartTaskModbusMaster+0x17c>
 800e578:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <StartTaskModbusMaster+0x12c>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c9 	.word	0x0800e5c9
 800e58c:	0800e5c9 	.word	0x0800e5c9
 800e590:	0800e5d1 	.word	0x0800e5d1
 800e594:	0800e5d1 	.word	0x0800e5d1
 800e598:	0800e5d1 	.word	0x0800e5d1
 800e59c:	0800e5d1 	.word	0x0800e5d1
 800e5a0:	0800e5d1 	.word	0x0800e5d1
 800e5a4:	0800e5d1 	.word	0x0800e5d1
 800e5a8:	0800e5d1 	.word	0x0800e5d1
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e5d1 	.word	0x0800e5d1
 800e5b4:	0800e5d1 	.word	0x0800e5d1
 800e5b8:	0800e5d1 	.word	0x0800e5d1
 800e5bc:	0800e5d1 	.word	0x0800e5d1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800e5c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c2:	f000 f821 	bl	800e608 <get_FC1>
	      break;
 800e5c6:	e004      	b.n	800e5d2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800e5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5ca:	f000 f874 	bl	800e6b6 <get_FC3>
	      break;
 800e5ce:	e000      	b.n	800e5d2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800e5d0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10e      	bne.n	800e602 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f7fc fa5a 	bl	800aaa8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800e5f4:	69b8      	ldr	r0, [r7, #24]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	f06f 010a 	mvn.w	r1, #10
 800e5fe:	f7fe f865 	bl	800c6cc <xTaskGenericNotify>
	  }


	  continue;
 800e602:	bf00      	nop
  {
 800e604:	e72c      	b.n	800e460 <StartTaskModbusMaster+0xc>
 800e606:	bf00      	nop

0800e608 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e610:	2303      	movs	r3, #3
 800e612:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
 800e618:	e043      	b.n	800e6a2 <get_FC1+0x9a>

        if(i%2)
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b00      	cmp	r3, #0
 800e624:	d01c      	beq.n	800e660 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800e626:	7bfa      	ldrb	r2, [r7, #15]
 800e628:	7bbb      	ldrb	r3, [r7, #14]
 800e62a:	4413      	add	r3, r2
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	4413      	add	r3, r2
 800e630:	7cd8      	ldrb	r0, [r3, #19]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e638:	7bfb      	ldrb	r3, [r7, #15]
 800e63a:	085b      	lsrs	r3, r3, #1
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	b2d9      	uxtb	r1, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	085b      	lsrs	r3, r3, #1
 800e650:	b2db      	uxtb	r3, r3
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	18d4      	adds	r4, r2, r3
 800e656:	f000 fa5f 	bl	800eb18 <word>
 800e65a:	4603      	mov	r3, r0
 800e65c:	8023      	strh	r3, [r4, #0]
 800e65e:	e01d      	b.n	800e69c <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	085b      	lsrs	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	4413      	add	r3, r2
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	0a1b      	lsrs	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	b2d8      	uxtb	r0, r3
 800e678:	7bfa      	ldrb	r2, [r7, #15]
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	4413      	add	r3, r2
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	4413      	add	r3, r2
 800e682:	7cd9      	ldrb	r1, [r3, #19]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	18d4      	adds	r4, r2, r3
 800e694:	f000 fa40 	bl	800eb18 <word>
 800e698:	4603      	mov	r3, r0
 800e69a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	73fb      	strb	r3, [r7, #15]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d5b      	ldrb	r3, [r3, #21]
 800e6a6:	7bfa      	ldrb	r2, [r7, #15]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d3b6      	bcc.n	800e61a <get_FC1+0x12>
        }

     }
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd90      	pop	{r4, r7, pc}

0800e6b6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800e6b6:	b590      	push	{r4, r7, lr}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73bb      	strb	r3, [r7, #14]
 800e6c6:	e018      	b.n	800e6fa <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	7cd8      	ldrb	r0, [r3, #19]
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	7cd9      	ldrb	r1, [r3, #19]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	18d4      	adds	r4, r2, r3
 800e6e6:	f000 fa17 	bl	800eb18 <word>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	3302      	adds	r3, #2
 800e6f2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	73bb      	strb	r3, [r7, #14]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d5b      	ldrb	r3, [r3, #21]
 800e6fe:	085b      	lsrs	r3, r3, #1
 800e700:	b2db      	uxtb	r3, r3
 800e702:	7bba      	ldrb	r2, [r7, #14]
 800e704:	429a      	cmp	r2, r3
 800e706:	d3df      	bcc.n	800e6c8 <get_FC3+0x12>
    }
}
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd90      	pop	{r4, r7, pc}
	...

0800e714 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e722:	3b02      	subs	r3, #2
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	4413      	add	r3, r2
 800e728:	7cdb      	ldrb	r3, [r3, #19]
 800e72a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e72c:	b21a      	sxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e734:	3b01      	subs	r3, #1
 800e736:	6879      	ldr	r1, [r7, #4]
 800e738:	440b      	add	r3, r1
 800e73a:	7cdb      	ldrb	r3, [r3, #19]
 800e73c:	b21b      	sxth	r3, r3
 800e73e:	4313      	orrs	r3, r2
 800e740:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e742:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f103 0213 	add.w	r2, r3, #19
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e750:	3b02      	subs	r3, #2
 800e752:	b2db      	uxtb	r3, r3
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	f000 f9f1 	bl	800eb3e <calcCRC>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	89bb      	ldrh	r3, [r7, #12]
 800e762:	4293      	cmp	r3, r2
 800e764:	d009      	beq.n	800e77a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e76c:	3301      	adds	r3, #1
 800e76e:	b29a      	uxth	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e776:	23fc      	movs	r3, #252	; 0xfc
 800e778:	e034      	b.n	800e7e4 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	da09      	bge.n	800e798 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e78a:	3301      	adds	r3, #1
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e794:	23fb      	movs	r3, #251	; 0xfb
 800e796:	e025      	b.n	800e7e4 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e79c:	2300      	movs	r3, #0
 800e79e:	73bb      	strb	r3, [r7, #14]
 800e7a0:	e00c      	b.n	800e7bc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e7a2:	7bbb      	ldrb	r3, [r7, #14]
 800e7a4:	4a11      	ldr	r2, [pc, #68]	; (800e7ec <validateAnswer+0xd8>)
 800e7a6:	5cd2      	ldrb	r2, [r2, r3]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	7d1b      	ldrb	r3, [r3, #20]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d102      	bne.n	800e7b6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	73fb      	strb	r3, [r7, #15]
            break;
 800e7b4:	e005      	b.n	800e7c2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	73bb      	strb	r3, [r7, #14]
 800e7bc:	7bbb      	ldrb	r3, [r7, #14]
 800e7be:	2b07      	cmp	r3, #7
 800e7c0:	d9ef      	bls.n	800e7a2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	f083 0301 	eor.w	r3, r3, #1
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d009      	beq.n	800e7e2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e000      	b.n	800e7e4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	0800fadc 	.word	0x0800fadc

0800e7f0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d104      	bne.n	800e80c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	f7f8 fc70 	bl	80070ec <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e812:	2b00      	cmp	r3, #0
 800e814:	d008      	beq.n	800e828 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	33d0      	adds	r3, #208	; 0xd0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff f9eb 	bl	800dbf6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e820:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e824:	81fb      	strh	r3, [r7, #14]
 800e826:	e019      	b.n	800e85c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3313      	adds	r3, #19
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f7ff f978 	bl	800db2a <RingGetAllBytes>
 800e83a:	4603      	mov	r3, r0
 800e83c:	461a      	mov	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e84a:	3301      	adds	r3, #1
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e85a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e862:	2b01      	cmp	r3, #1
 800e864:	d107      	bne.n	800e876 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6858      	ldr	r0, [r3, #4]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	33b8      	adds	r3, #184	; 0xb8
 800e86e:	2201      	movs	r2, #1
 800e870:	4619      	mov	r1, r3
 800e872:	f7f8 fad9 	bl	8006e28 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e892:	3b02      	subs	r3, #2
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4413      	add	r3, r2
 800e898:	7cdb      	ldrb	r3, [r3, #19]
 800e89a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e89c:	b21a      	sxth	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	440b      	add	r3, r1
 800e8aa:	7cdb      	ldrb	r3, [r3, #19]
 800e8ac:	b21b      	sxth	r3, r3
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e8b2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f103 0213 	add.w	r2, r3, #19
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8c0:	3b02      	subs	r3, #2
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f000 f939 	bl	800eb3e <calcCRC>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	893b      	ldrh	r3, [r7, #8]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d009      	beq.n	800e8ea <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e8dc:	3301      	adds	r3, #1
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e8e6:	23fc      	movs	r3, #252	; 0xfc
 800e8e8:	e10f      	b.n	800eb0a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	73bb      	strb	r3, [r7, #14]
 800e8f2:	e00c      	b.n	800e90e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e8f4:	7bbb      	ldrb	r3, [r7, #14]
 800e8f6:	4a87      	ldr	r2, [pc, #540]	; (800eb14 <validateRequest+0x290>)
 800e8f8:	5cd2      	ldrb	r2, [r2, r3]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	7d1b      	ldrb	r3, [r3, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d102      	bne.n	800e908 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e902:	2301      	movs	r3, #1
 800e904:	73fb      	strb	r3, [r7, #15]
	            break;
 800e906:	e005      	b.n	800e914 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e908:	7bbb      	ldrb	r3, [r7, #14]
 800e90a:	3301      	adds	r3, #1
 800e90c:	73bb      	strb	r3, [r7, #14]
 800e90e:	7bbb      	ldrb	r3, [r7, #14]
 800e910:	2b07      	cmp	r3, #7
 800e912:	d9ef      	bls.n	800e8f4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	f083 0301 	eor.w	r3, r3, #1
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d009      	beq.n	800e934 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e926:	3301      	adds	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e930:	2301      	movs	r3, #1
 800e932:	e0ea      	b.n	800eb0a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e934:	2300      	movs	r3, #0
 800e936:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	3b01      	subs	r3, #1
 800e942:	2b0f      	cmp	r3, #15
 800e944:	f200 80e0 	bhi.w	800eb08 <validateRequest+0x284>
 800e948:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <validateRequest+0xcc>)
 800e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94e:	bf00      	nop
 800e950:	0800e991 	.word	0x0800e991
 800e954:	0800e991 	.word	0x0800e991
 800e958:	0800eaa9 	.word	0x0800eaa9
 800e95c:	0800eaa9 	.word	0x0800eaa9
 800e960:	0800ea3d 	.word	0x0800ea3d
 800e964:	0800ea85 	.word	0x0800ea85
 800e968:	0800eb09 	.word	0x0800eb09
 800e96c:	0800eb09 	.word	0x0800eb09
 800e970:	0800eb09 	.word	0x0800eb09
 800e974:	0800eb09 	.word	0x0800eb09
 800e978:	0800eb09 	.word	0x0800eb09
 800e97c:	0800eb09 	.word	0x0800eb09
 800e980:	0800eb09 	.word	0x0800eb09
 800e984:	0800eb09 	.word	0x0800eb09
 800e988:	0800e991 	.word	0x0800e991
 800e98c:	0800eaa9 	.word	0x0800eaa9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	7d5a      	ldrb	r2, [r3, #21]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d9b      	ldrb	r3, [r3, #22]
 800e998:	4619      	mov	r1, r3
 800e99a:	4610      	mov	r0, r2
 800e99c:	f000 f8bc 	bl	800eb18 <word>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	091b      	lsrs	r3, r3, #4
 800e9a4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7dda      	ldrb	r2, [r3, #23]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7e1b      	ldrb	r3, [r3, #24]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	f000 f8b1 	bl	800eb18 <word>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	091b      	lsrs	r3, r3, #4
 800e9ba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7dda      	ldrb	r2, [r3, #23]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	7e1b      	ldrb	r3, [r3, #24]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f000 f8a6 	bl	800eb18 <word>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <validateRequest+0x15a>
 800e9d8:	897b      	ldrh	r3, [r7, #10]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e9de:	89ba      	ldrh	r2, [r7, #12]
 800e9e0:	897b      	ldrh	r3, [r7, #10]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	dd01      	ble.n	800e9f2 <validateRequest+0x16e>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e08b      	b.n	800eb0a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7dda      	ldrb	r2, [r3, #23]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7e1b      	ldrb	r3, [r3, #24]
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f000 f88b 	bl	800eb18 <word>
 800ea02:	4603      	mov	r3, r0
 800ea04:	08db      	lsrs	r3, r3, #3
 800ea06:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7dda      	ldrb	r2, [r3, #23]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7e1b      	ldrb	r3, [r3, #24]
 800ea10:	4619      	mov	r1, r3
 800ea12:	4610      	mov	r0, r2
 800ea14:	f000 f880 	bl	800eb18 <word>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <validateRequest+0x1a6>
 800ea24:	897b      	ldrh	r3, [r7, #10]
 800ea26:	3301      	adds	r3, #1
 800ea28:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800ea2a:	897b      	ldrh	r3, [r7, #10]
 800ea2c:	3305      	adds	r3, #5
 800ea2e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800ea30:	897b      	ldrh	r3, [r7, #10]
 800ea32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea36:	d960      	bls.n	800eafa <validateRequest+0x276>
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e066      	b.n	800eb0a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7d5a      	ldrb	r2, [r3, #21]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7d9b      	ldrb	r3, [r3, #22]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4610      	mov	r0, r2
 800ea48:	f000 f866 	bl	800eb18 <word>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	091b      	lsrs	r3, r3, #4
 800ea50:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7d5a      	ldrb	r2, [r3, #21]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d9b      	ldrb	r3, [r3, #22]
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	f000 f85b 	bl	800eb18 <word>
 800ea62:	4603      	mov	r3, r0
 800ea64:	f003 030f 	and.w	r3, r3, #15
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <validateRequest+0x1f0>
 800ea6e:	89bb      	ldrh	r3, [r7, #12]
 800ea70:	3301      	adds	r3, #1
 800ea72:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800ea7a:	89ba      	ldrh	r2, [r7, #12]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d93e      	bls.n	800eafe <validateRequest+0x27a>
 800ea80:	2302      	movs	r3, #2
 800ea82:	e042      	b.n	800eb0a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	7d5a      	ldrb	r2, [r3, #21]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	7d9b      	ldrb	r3, [r3, #22]
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f000 f842 	bl	800eb18 <word>
 800ea94:	4603      	mov	r3, r0
 800ea96:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ea9e:	89ba      	ldrh	r2, [r7, #12]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d92e      	bls.n	800eb02 <validateRequest+0x27e>
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	e030      	b.n	800eb0a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	7d5a      	ldrb	r2, [r3, #21]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7d9b      	ldrb	r3, [r3, #22]
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f000 f830 	bl	800eb18 <word>
 800eab8:	4603      	mov	r3, r0
 800eaba:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	7dda      	ldrb	r2, [r3, #23]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7e1b      	ldrb	r3, [r3, #24]
 800eac4:	4619      	mov	r1, r3
 800eac6:	4610      	mov	r0, r2
 800eac8:	f000 f826 	bl	800eb18 <word>
 800eacc:	4603      	mov	r3, r0
 800eace:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800ead0:	89ba      	ldrh	r2, [r7, #12]
 800ead2:	897b      	ldrh	r3, [r7, #10]
 800ead4:	4413      	add	r3, r2
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800eadc:	4293      	cmp	r3, r2
 800eade:	dd01      	ble.n	800eae4 <validateRequest+0x260>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e012      	b.n	800eb0a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800eae4:	897b      	ldrh	r3, [r7, #10]
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	3305      	adds	r3, #5
 800eaec:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800eaee:	897b      	ldrh	r3, [r7, #10]
 800eaf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaf4:	d907      	bls.n	800eb06 <validateRequest+0x282>
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e007      	b.n	800eb0a <validateRequest+0x286>
	        break;
 800eafa:	bf00      	nop
 800eafc:	e004      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eafe:	bf00      	nop
 800eb00:	e002      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eb06:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800eb08:	2300      	movs	r3, #0

}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	0800fadc 	.word	0x0800fadc

0800eb18 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	460a      	mov	r2, r1
 800eb22:	71fb      	strb	r3, [r7, #7]
 800eb24:	4613      	mov	r3, r2
 800eb26:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800eb28:	79bb      	ldrb	r3, [r7, #6]
 800eb2a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800eb30:	89bb      	ldrh	r3, [r7, #12]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b087      	sub	sp, #28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	460b      	mov	r3, r1
 800eb48:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800eb4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb4e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800eb50:	2300      	movs	r3, #0
 800eb52:	74fb      	strb	r3, [r7, #19]
 800eb54:	e023      	b.n	800eb9e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800eb56:	7cfb      	ldrb	r3, [r7, #19]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	4053      	eors	r3, r2
 800eb64:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800eb66:	2301      	movs	r3, #1
 800eb68:	74bb      	strb	r3, [r7, #18]
 800eb6a:	e012      	b.n	800eb92 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	085b      	lsrs	r3, r3, #1
 800eb78:	617b      	str	r3, [r7, #20]
            if (flag)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d005      	beq.n	800eb8c <calcCRC+0x4e>
                temp ^= 0xA001;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800eb86:	f083 0301 	eor.w	r3, r3, #1
 800eb8a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800eb8c:	7cbb      	ldrb	r3, [r7, #18]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	74bb      	strb	r3, [r7, #18]
 800eb92:	7cbb      	ldrb	r3, [r7, #18]
 800eb94:	2b08      	cmp	r3, #8
 800eb96:	d9e9      	bls.n	800eb6c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800eb98:	7cfb      	ldrb	r3, [r7, #19]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	74fb      	strb	r3, [r7, #19]
 800eb9e:	7cfa      	ldrb	r2, [r7, #19]
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d3d7      	bcc.n	800eb56 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	021b      	lsls	r3, r3, #8
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	b29b      	uxth	r3, r3

}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	371c      	adds	r7, #28
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	7a1a      	ldrb	r2, [r3, #8]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	3b80      	subs	r3, #128	; 0x80
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	79fa      	ldrb	r2, [r7, #7]
 800ebf4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2203      	movs	r2, #3
 800ebfa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800ebfe:	bf00      	nop
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800ec0a:	b590      	push	{r4, r7, lr}
 800ec0c:	b087      	sub	sp, #28
 800ec0e:	af02      	add	r7, sp, #8
 800ec10:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f103 0213 	add.w	r2, r3, #19
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f7ff ff8c 	bl	800eb3e <calcCRC>
 800ec26:	4603      	mov	r3, r0
 800ec28:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800ec2a:	89fb      	ldrh	r3, [r7, #14]
 800ec2c:	0a1b      	lsrs	r3, r3, #8
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec36:	4619      	mov	r1, r3
 800ec38:	b2d2      	uxtb	r2, r2
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	440b      	add	r3, r1
 800ec3e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec46:	3301      	adds	r3, #1
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec56:	4619      	mov	r1, r3
 800ec58:	89fb      	ldrh	r3, [r7, #14]
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	440b      	add	r3, r1
 800ec60:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00c      	beq.n	800ec94 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f8 fe44 	bl	800790c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68d8      	ldr	r0, [r3, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	8a1b      	ldrh	r3, [r3, #16]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	4619      	mov	r1, r3
 800ec90:	f7f5 f986 	bl	8003fa0 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d10c      	bne.n	800ecb8 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6858      	ldr	r0, [r3, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f103 0113 	add.w	r1, r3, #19
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	f7f8 f825 	bl	8006d00 <HAL_UART_Transmit_IT>
 800ecb6:	e00b      	b.n	800ecd0 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6858      	ldr	r0, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f103 0113 	add.w	r1, r3, #19
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	461a      	mov	r2, r3
 800eccc:	f7f8 f8f8 	bl	8006ec0 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800ecd0:	21fa      	movs	r1, #250	; 0xfa
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f7fd fcb2 	bl	800c63c <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800ecd8:	bf00      	nop
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	69db      	ldr	r3, [r3, #28]
 800ece2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0f7      	beq.n	800ecda <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00c      	beq.n	800ed0c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68d8      	ldr	r0, [r3, #12]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	8a1b      	ldrh	r3, [r3, #16]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	f7f5 f94f 	bl	8003fa0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f8 fe54 	bl	80079b4 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	2b04      	cmp	r3, #4
 800ed12:	d10c      	bne.n	800ed2e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800ed1a:	f7fc ff07 	bl	800bb2c <xTaskGetTickCount>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	2300      	movs	r3, #0
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	2300      	movs	r3, #0
 800ed26:	2102      	movs	r1, #2
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7fd ff5b 	bl	800cbe4 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800ed46:	bf00      	nop
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd90      	pop	{r4, r7, pc}

0800ed4e <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b088      	sub	sp, #32
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	7d5a      	ldrb	r2, [r3, #21]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7d9b      	ldrb	r3, [r3, #22]
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7ff fed7 	bl	800eb18 <word>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	7dda      	ldrb	r2, [r3, #23]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	7e1b      	ldrb	r3, [r3, #24]
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7ff fecd 	bl	800eb18 <word>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800ed82:	8abb      	ldrh	r3, [r7, #20]
 800ed84:	08db      	lsrs	r3, r3, #3
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800ed8a:	8abb      	ldrh	r3, [r7, #20]
 800ed8c:	f003 0307 	and.w	r3, r3, #7
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <process_FC1+0x4e>
 800ed96:	7ffb      	ldrb	r3, [r7, #31]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7ffa      	ldrb	r2, [r7, #31]
 800eda0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2203      	movs	r2, #3
 800eda6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800edb0:	461a      	mov	r2, r3
 800edb2:	7ffb      	ldrb	r3, [r7, #31]
 800edb4:	4413      	add	r3, r2
 800edb6:	3b01      	subs	r3, #1
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	4413      	add	r3, r2
 800edbc:	2200      	movs	r2, #0
 800edbe:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d103      	bne.n	800edd2 <process_FC1+0x84>
    	u16regs = modH->u16regsCoils;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800edd0:	61bb      	str	r3, [r7, #24]
    }


    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800edd2:	2300      	movs	r3, #0
 800edd4:	83bb      	strh	r3, [r7, #28]
 800edd6:	e056      	b.n	800ee86 <process_FC1+0x138>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800edd8:	8afa      	ldrh	r2, [r7, #22]
 800edda:	8bbb      	ldrh	r3, [r7, #28]
 800eddc:	4413      	add	r3, r2
 800edde:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800ede0:	8a3b      	ldrh	r3, [r7, #16]
 800ede2:	091b      	lsrs	r3, r3, #4
 800ede4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ede6:	8a3b      	ldrh	r3, [r7, #16]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	f003 030f 	and.w	r3, r3, #15
 800edee:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800edf0:	89fb      	ldrh	r3, [r7, #14]
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	4413      	add	r3, r2
 800edf8:	881b      	ldrh	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	7b7b      	ldrb	r3, [r7, #13]
 800edfe:	fa42 f303 	asr.w	r3, r2, r3
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d014      	beq.n	800ee34 <process_FC1+0xe6>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee10:	461a      	mov	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4413      	add	r3, r2
 800ee16:	7cda      	ldrb	r2, [r3, #19]
 800ee18:	7fbb      	ldrb	r3, [r7, #30]
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	6879      	ldr	r1, [r7, #4]
 800ee24:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	440b      	add	r3, r1
 800ee30:	74da      	strb	r2, [r3, #19]
 800ee32:	e015      	b.n	800ee60 <process_FC1+0x112>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4413      	add	r3, r2
 800ee40:	7cda      	ldrb	r2, [r3, #19]
 800ee42:	7fbb      	ldrb	r3, [r7, #30]
 800ee44:	2101      	movs	r1, #1
 800ee46:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	43db      	mvns	r3, r3
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	6879      	ldr	r1, [r7, #4]
 800ee52:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ee56:	4013      	ands	r3, r2
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	440b      	add	r3, r1
 800ee5e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800ee60:	7fbb      	ldrb	r3, [r7, #30]
 800ee62:	3301      	adds	r3, #1
 800ee64:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800ee66:	7fbb      	ldrb	r3, [r7, #30]
 800ee68:	2b07      	cmp	r3, #7
 800ee6a:	d909      	bls.n	800ee80 <process_FC1+0x132>
        {
            u8bitsno = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee76:	3301      	adds	r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ee80:	8bbb      	ldrh	r3, [r7, #28]
 800ee82:	3301      	adds	r3, #1
 800ee84:	83bb      	strh	r3, [r7, #28]
 800ee86:	8bba      	ldrh	r2, [r7, #28]
 800ee88:	8abb      	ldrh	r3, [r7, #20]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d3a4      	bcc.n	800edd8 <process_FC1+0x8a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800ee8e:	8abb      	ldrh	r3, [r7, #20]
 800ee90:	f003 0307 	and.w	r3, r3, #7
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <process_FC1+0x15c>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eea0:	3301      	adds	r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eeb0:	3302      	adds	r3, #2
 800eeb2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff fea8 	bl	800ec0a <sendTxBuffer>
    return u8CopyBufferSize;
 800eeba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3720      	adds	r7, #32
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b086      	sub	sp, #24
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	460b      	mov	r3, r1
 800eed0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	7d5a      	ldrb	r2, [r3, #21]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	7d9b      	ldrb	r3, [r3, #22]
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f7ff fe1b 	bl	800eb18 <word>
 800eee2:	4603      	mov	r3, r0
 800eee4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	7dda      	ldrb	r2, [r3, #23]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7e1b      	ldrb	r3, [r3, #24]
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7ff fe11 	bl	800eb18 <word>
 800eef6:	4603      	mov	r3, r0
 800eef8:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800eefa:	7b7b      	ldrb	r3, [r7, #13]
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2203      	movs	r2, #3
 800ef08:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800ef0c:	78fb      	ldrb	r3, [r7, #3]
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d104      	bne.n	800ef1c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef18:	613b      	str	r3, [r7, #16]
 800ef1a:	e006      	b.n	800ef2a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	2b04      	cmp	r3, #4
 800ef20:	d103      	bne.n	800ef2a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ef28:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ef2a:	89fb      	ldrh	r3, [r7, #14]
 800ef2c:	82fb      	strh	r3, [r7, #22]
 800ef2e:	e02e      	b.n	800ef8e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800ef30:	8afb      	ldrh	r3, [r7, #22]
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	4413      	add	r3, r2
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	0a1b      	lsrs	r3, r3, #8
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef44:	4619      	mov	r1, r3
 800ef46:	b2d2      	uxtb	r2, r2
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	440b      	add	r3, r1
 800ef4c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef54:	3301      	adds	r3, #1
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800ef5e:	8afb      	ldrh	r3, [r7, #22]
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	4413      	add	r3, r2
 800ef66:	881a      	ldrh	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef6e:	4619      	mov	r1, r3
 800ef70:	b2d2      	uxtb	r2, r2
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	440b      	add	r3, r1
 800ef76:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef7e:	3301      	adds	r3, #1
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ef88:	8afb      	ldrh	r3, [r7, #22]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	82fb      	strh	r3, [r7, #22]
 800ef8e:	8afa      	ldrh	r2, [r7, #22]
 800ef90:	89f9      	ldrh	r1, [r7, #14]
 800ef92:	7b7b      	ldrb	r3, [r7, #13]
 800ef94:	440b      	add	r3, r1
 800ef96:	429a      	cmp	r2, r3
 800ef98:	dbca      	blt.n	800ef30 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800efa0:	3302      	adds	r3, #2
 800efa2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff fe30 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800efaa:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	7d5a      	ldrb	r2, [r3, #21]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7d9b      	ldrb	r3, [r3, #22]
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f7ff fda5 	bl	800eb18 <word>
 800efce:	4603      	mov	r3, r0
 800efd0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800efd2:	89fb      	ldrh	r3, [r7, #14]
 800efd4:	091b      	lsrs	r3, r3, #4
 800efd6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800efd8:	89fb      	ldrh	r3, [r7, #14]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f003 030f 	and.w	r3, r3, #15
 800efe0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	7ddb      	ldrb	r3, [r3, #23]
 800efe6:	2bff      	cmp	r3, #255	; 0xff
 800efe8:	d115      	bne.n	800f016 <process_FC5+0x60>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eff0:	89bb      	ldrh	r3, [r7, #12]
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	4413      	add	r3, r2
 800eff6:	8819      	ldrh	r1, [r3, #0]
 800eff8:	7afb      	ldrb	r3, [r7, #11]
 800effa:	2201      	movs	r2, #1
 800effc:	fa02 f303 	lsl.w	r3, r2, r3
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f008:	89bb      	ldrh	r3, [r7, #12]
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	4403      	add	r3, r0
 800f00e:	430a      	orrs	r2, r1
 800f010:	b292      	uxth	r2, r2
 800f012:	801a      	strh	r2, [r3, #0]
 800f014:	e016      	b.n	800f044 <process_FC5+0x8e>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f01c:	89bb      	ldrh	r3, [r7, #12]
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	4413      	add	r3, r2
 800f022:	8819      	ldrh	r1, [r3, #0]
 800f024:	7afb      	ldrb	r3, [r7, #11]
 800f026:	2201      	movs	r2, #1
 800f028:	fa02 f303 	lsl.w	r3, r2, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	43db      	mvns	r3, r3
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f038:	89bb      	ldrh	r3, [r7, #12]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	4403      	add	r3, r0
 800f03e:	400a      	ands	r2, r1
 800f040:	b292      	uxth	r2, r2
 800f042:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2206      	movs	r2, #6
 800f048:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f052:	3302      	adds	r3, #2
 800f054:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff fdd7 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f05c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7d5a      	ldrb	r2, [r3, #21]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7d9b      	ldrb	r3, [r3, #22]
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7ff fd4c 	bl	800eb18 <word>
 800f080:	4603      	mov	r3, r0
 800f082:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	7dda      	ldrb	r2, [r3, #23]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	7e1b      	ldrb	r3, [r3, #24]
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7ff fd42 	bl	800eb18 <word>
 800f094:	4603      	mov	r3, r0
 800f096:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f09e:	89fb      	ldrh	r3, [r7, #14]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	89ba      	ldrh	r2, [r7, #12]
 800f0a6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2206      	movs	r2, #6
 800f0ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f0b6:	3302      	adds	r3, #2
 800f0b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7ff fda5 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f0c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3710      	adds	r7, #16
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7d5a      	ldrb	r2, [r3, #21]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	7d9b      	ldrb	r3, [r3, #22]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4610      	mov	r0, r2
 800f0e0:	f7ff fd1a 	bl	800eb18 <word>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7dda      	ldrb	r2, [r3, #23]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7e1b      	ldrb	r3, [r3, #24]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f7ff fd10 	bl	800eb18 <word>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800f100:	2307      	movs	r3, #7
 800f102:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f104:	2300      	movs	r3, #0
 800f106:	82bb      	strh	r3, [r7, #20]
 800f108:	e058      	b.n	800f1bc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800f10a:	8a7a      	ldrh	r2, [r7, #18]
 800f10c:	8abb      	ldrh	r3, [r7, #20]
 800f10e:	4413      	add	r3, r2
 800f110:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800f112:	89bb      	ldrh	r3, [r7, #12]
 800f114:	091b      	lsrs	r3, r3, #4
 800f116:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800f118:	89bb      	ldrh	r3, [r7, #12]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f003 030f 	and.w	r3, r3, #15
 800f120:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800f122:	7dfb      	ldrb	r3, [r7, #23]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	4413      	add	r3, r2
 800f128:	7cdb      	ldrb	r3, [r3, #19]
 800f12a:	461a      	mov	r2, r3
 800f12c:	7dbb      	ldrb	r3, [r7, #22]
 800f12e:	fa42 f303 	asr.w	r3, r2, r3
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	bf14      	ite	ne
 800f13a:	2301      	movne	r3, #1
 800f13c:	2300      	moveq	r3, #0
 800f13e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800f140:	7a3b      	ldrb	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d015      	beq.n	800f172 <process_FC15+0xa6>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f14c:	897b      	ldrh	r3, [r7, #10]
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	4413      	add	r3, r2
 800f152:	8819      	ldrh	r1, [r3, #0]
 800f154:	7a7b      	ldrb	r3, [r7, #9]
 800f156:	2201      	movs	r2, #1
 800f158:	fa02 f303 	lsl.w	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f164:	897b      	ldrh	r3, [r7, #10]
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4403      	add	r3, r0
 800f16a:	430a      	orrs	r2, r1
 800f16c:	b292      	uxth	r2, r2
 800f16e:	801a      	strh	r2, [r3, #0]
 800f170:	e016      	b.n	800f1a0 <process_FC15+0xd4>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f178:	897b      	ldrh	r3, [r7, #10]
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	4413      	add	r3, r2
 800f17e:	8819      	ldrh	r1, [r3, #0]
 800f180:	7a7b      	ldrb	r3, [r7, #9]
 800f182:	2201      	movs	r2, #1
 800f184:	fa02 f303 	lsl.w	r3, r2, r3
 800f188:	b29b      	uxth	r3, r3
 800f18a:	43db      	mvns	r3, r3
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f194:	897b      	ldrh	r3, [r7, #10]
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	4403      	add	r3, r0
 800f19a:	400a      	ands	r2, r1
 800f19c:	b292      	uxth	r2, r2
 800f19e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800f1a0:	7dbb      	ldrb	r3, [r7, #22]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800f1a6:	7dbb      	ldrb	r3, [r7, #22]
 800f1a8:	2b07      	cmp	r3, #7
 800f1aa:	d904      	bls.n	800f1b6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800f1b0:	7dfb      	ldrb	r3, [r7, #23]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f1b6:	8abb      	ldrh	r3, [r7, #20]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	82bb      	strh	r3, [r7, #20]
 800f1bc:	8aba      	ldrh	r2, [r7, #20]
 800f1be:	8a3b      	ldrh	r3, [r7, #16]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d3a2      	bcc.n	800f10a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2206      	movs	r2, #6
 800f1c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f1d2:	3302      	adds	r3, #2
 800f1d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff fd17 	bl	800ec0a <sendTxBuffer>
    return u8CopyBufferSize;
 800f1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7d5b      	ldrb	r3, [r3, #21]
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	b21a      	sxth	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7d9b      	ldrb	r3, [r3, #22]
 800f1fc:	b21b      	sxth	r3, r3
 800f1fe:	4313      	orrs	r3, r2
 800f200:	b21b      	sxth	r3, r3
 800f202:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7ddb      	ldrb	r3, [r3, #23]
 800f208:	021b      	lsls	r3, r3, #8
 800f20a:	b21a      	sxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	7e1b      	ldrb	r3, [r3, #24]
 800f210:	b21b      	sxth	r3, r3
 800f212:	4313      	orrs	r3, r2
 800f214:	b21b      	sxth	r3, r3
 800f216:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800f21e:	8a7b      	ldrh	r3, [r7, #18]
 800f220:	b2da      	uxtb	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2206      	movs	r2, #6
 800f22a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800f22e:	2300      	movs	r3, #0
 800f230:	82fb      	strh	r3, [r7, #22]
 800f232:	e01d      	b.n	800f270 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800f234:	8afb      	ldrh	r3, [r7, #22]
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	3307      	adds	r3, #7
        temp = word(
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	4413      	add	r3, r2
 800f23e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800f240:	8afb      	ldrh	r3, [r7, #22]
 800f242:	3304      	adds	r3, #4
 800f244:	005b      	lsls	r3, r3, #1
        temp = word(
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	4413      	add	r3, r2
 800f24a:	7cdb      	ldrb	r3, [r3, #19]
 800f24c:	4619      	mov	r1, r3
 800f24e:	f7ff fc63 	bl	800eb18 <word>
 800f252:	4603      	mov	r3, r0
 800f254:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f25c:	8ab9      	ldrh	r1, [r7, #20]
 800f25e:	8afb      	ldrh	r3, [r7, #22]
 800f260:	440b      	add	r3, r1
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	4413      	add	r3, r2
 800f266:	89fa      	ldrh	r2, [r7, #14]
 800f268:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800f26a:	8afb      	ldrh	r3, [r7, #22]
 800f26c:	3301      	adds	r3, #1
 800f26e:	82fb      	strh	r3, [r7, #22]
 800f270:	8afa      	ldrh	r2, [r7, #22]
 800f272:	8a7b      	ldrh	r3, [r7, #18]
 800f274:	429a      	cmp	r2, r3
 800f276:	d3dd      	bcc.n	800f234 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f27e:	3302      	adds	r3, #2
 800f280:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7ff fcc1 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f288:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af02      	add	r7, sp, #8
 800f29a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f29c:	2300      	movs	r3, #0
 800f29e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	e019      	b.n	800f2da <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800f2a6:	4a17      	ldr	r2, [pc, #92]	; (800f304 <HAL_UART_TxCpltCallback+0x70>)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d10e      	bne.n	800f2d4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800f2b6:	4a13      	ldr	r2, [pc, #76]	; (800f304 <HAL_UART_TxCpltCallback+0x70>)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2be:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f2c2:	f107 0308 	add.w	r3, r7, #8
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	f7fd fab5 	bl	800c83c <xTaskGenericNotifyFromISR>
	   		break;
 800f2d2:	e008      	b.n	800f2e6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	60fb      	str	r3, [r7, #12]
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <HAL_UART_TxCpltCallback+0x74>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	dbdf      	blt.n	800f2a6 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <HAL_UART_TxCpltCallback+0x68>
 800f2ec:	4b07      	ldr	r3, [pc, #28]	; (800f30c <HAL_UART_TxCpltCallback+0x78>)
 800f2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800f2fc:	bf00      	nop
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20002118 	.word	0x20002118
 800f308:	20002120 	.word	0x20002120
 800f30c:	e000ed04 	.word	0xe000ed04

0800f310 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b087      	sub	sp, #28
 800f314:	af02      	add	r7, sp, #8
 800f316:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f318:	2300      	movs	r3, #0
 800f31a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800f31c:	2300      	movs	r3, #0
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	e042      	b.n	800f3a8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800f322:	4a2d      	ldr	r2, [pc, #180]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d137      	bne.n	800f3a2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800f332:	4a29      	ldr	r2, [pc, #164]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d139      	bne.n	800f3b6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800f342:	4a25      	ldr	r2, [pc, #148]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800f34e:	4922      	ldr	r1, [pc, #136]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f356:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7fe fb9d 	bl	800da9c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800f362:	4a1d      	ldr	r2, [pc, #116]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f36a:	6858      	ldr	r0, [r3, #4]
 800f36c:	4a1a      	ldr	r2, [pc, #104]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f374:	33b8      	adds	r3, #184	; 0xb8
 800f376:	2201      	movs	r2, #1
 800f378:	4619      	mov	r1, r3
 800f37a:	f7f7 fd55 	bl	8006e28 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800f37e:	4a16      	ldr	r2, [pc, #88]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f386:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800f38a:	f7fc fbdf 	bl	800bb4c <xTaskGetTickCountFromISR>
 800f38e:	4602      	mov	r2, r0
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	2100      	movs	r1, #0
 800f396:	9100      	str	r1, [sp, #0]
 800f398:	2107      	movs	r1, #7
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7fd fc22 	bl	800cbe4 <xTimerGenericCommand>
    		}
    		break;
 800f3a0:	e009      	b.n	800f3b6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	; (800f3dc <HAL_UART_RxCpltCallback+0xcc>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	dbb6      	blt.n	800f322 <HAL_UART_RxCpltCallback+0x12>
 800f3b4:	e000      	b.n	800f3b8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800f3b6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d007      	beq.n	800f3ce <HAL_UART_RxCpltCallback+0xbe>
 800f3be:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <HAL_UART_RxCpltCallback+0xd0>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800f3ce:	bf00      	nop
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20002118 	.word	0x20002118
 800f3dc:	20002120 	.word	0x20002120
 800f3e0:	e000ed04 	.word	0xe000ed04

0800f3e4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e041      	b.n	800f476 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800f3f2:	4a27      	ldr	r2, [pc, #156]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d136      	bne.n	800f470 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f402:	4a23      	ldr	r2, [pc, #140]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f40e:	2b04      	cmp	r3, #4
 800f410:	d138      	bne.n	800f484 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f412:	e007      	b.n	800f424 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f414:	4a1e      	ldr	r2, [pc, #120]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f7 fdce 	bl	8006fc0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f424:	4a1a      	ldr	r2, [pc, #104]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f42c:	6858      	ldr	r0, [r3, #4]
 800f42e:	4a18      	ldr	r2, [pc, #96]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f436:	33d0      	adds	r3, #208	; 0xd0
 800f438:	2280      	movs	r2, #128	; 0x80
 800f43a:	4619      	mov	r1, r3
 800f43c:	f7fa fab7 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e6      	bne.n	800f414 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f446:	4a12      	ldr	r2, [pc, #72]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	490d      	ldr	r1, [pc, #52]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0204 	bic.w	r2, r2, #4
 800f46c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800f46e:	e009      	b.n	800f484 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	3301      	adds	r3, #1
 800f474:	60fb      	str	r3, [r7, #12]
 800f476:	4b07      	ldr	r3, [pc, #28]	; (800f494 <HAL_UART_ErrorCallback+0xb0>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4293      	cmp	r3, r2
 800f480:	dbb7      	blt.n	800f3f2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800f482:	e000      	b.n	800f486 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800f484:	bf00      	nop
}
 800f486:	bf00      	nop
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20002118 	.word	0x20002118
 800f494:	20002120 	.word	0x20002120

0800f498 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af02      	add	r7, sp, #8
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e061      	b.n	800f572 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800f4ae:	4a3c      	ldr	r2, [pc, #240]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d156      	bne.n	800f56c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f4be:	4a38      	ldr	r2, [pc, #224]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4c6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	d158      	bne.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800f4ce:	887b      	ldrh	r3, [r7, #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d055      	beq.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800f4d4:	4a32      	ldr	r2, [pc, #200]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4dc:	887a      	ldrh	r2, [r7, #2]
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800f4e4:	4a2e      	ldr	r2, [pc, #184]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f4f2:	e007      	b.n	800f504 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f4f4:	4a2a      	ldr	r2, [pc, #168]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f7 fd5e 	bl	8006fc0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f504:	4a26      	ldr	r2, [pc, #152]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50c:	6858      	ldr	r0, [r3, #4]
 800f50e:	4a24      	ldr	r2, [pc, #144]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f516:	33d0      	adds	r3, #208	; 0xd0
 800f518:	2280      	movs	r2, #128	; 0x80
 800f51a:	4619      	mov	r1, r3
 800f51c:	f7fa fa47 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e6      	bne.n	800f4f4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f526:	4a1e      	ldr	r2, [pc, #120]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	4919      	ldr	r1, [pc, #100]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0204 	bic.w	r2, r2, #4
 800f54c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800f54e:	4a14      	ldr	r2, [pc, #80]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f556:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f55a:	f107 0308 	add.w	r3, r7, #8
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	2300      	movs	r3, #0
 800f562:	2203      	movs	r2, #3
 800f564:	2100      	movs	r1, #0
 800f566:	f7fd f969 	bl	800c83c <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800f56a:	e009      	b.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3301      	adds	r3, #1
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	4b0c      	ldr	r3, [pc, #48]	; (800f5a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4293      	cmp	r3, r2
 800f57c:	db97      	blt.n	800f4ae <HAL_UARTEx_RxEventCallback+0x16>
 800f57e:	e000      	b.n	800f582 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800f580:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d007      	beq.n	800f598 <HAL_UARTEx_RxEventCallback+0x100>
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <HAL_UARTEx_RxEventCallback+0x110>)
 800f58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	f3bf 8f6f 	isb	sy
}
 800f598:	bf00      	nop
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20002118 	.word	0x20002118
 800f5a4:	20002120 	.word	0x20002120
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800f5ac:	b480      	push	{r7}
 800f5ae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800f5b0:	bf00      	nop
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
	...

0800f5bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af04      	add	r7, sp, #16
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800f5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ca:	9302      	str	r3, [sp, #8]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	1dfb      	adds	r3, r7, #7
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2178      	movs	r1, #120	; 0x78
 800f5da:	4803      	ldr	r0, [pc, #12]	; (800f5e8 <ssd1306_WriteCommand+0x2c>)
 800f5dc:	f7f4 fd94 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20000160 	.word	0x20000160

0800f5ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af04      	add	r7, sp, #16
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fe:	9202      	str	r2, [sp, #8]
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	2301      	movs	r3, #1
 800f608:	2240      	movs	r2, #64	; 0x40
 800f60a:	2178      	movs	r1, #120	; 0x78
 800f60c:	4803      	ldr	r0, [pc, #12]	; (800f61c <ssd1306_WriteData+0x30>)
 800f60e:	f7f4 fd7b 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f612:	bf00      	nop
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20000160 	.word	0x20000160

0800f620 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800f620:	b580      	push	{r7, lr}
 800f622:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800f624:	f7ff ffc2 	bl	800f5ac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800f628:	2064      	movs	r0, #100	; 0x64
 800f62a:	f7f2 fa1b 	bl	8001a64 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800f62e:	2000      	movs	r0, #0
 800f630:	f000 f8c0 	bl	800f7b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800f634:	2020      	movs	r0, #32
 800f636:	f7ff ffc1 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800f63a:	2000      	movs	r0, #0
 800f63c:	f7ff ffbe 	bl	800f5bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800f640:	20b0      	movs	r0, #176	; 0xb0
 800f642:	f7ff ffbb 	bl	800f5bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800f646:	20c8      	movs	r0, #200	; 0xc8
 800f648:	f7ff ffb8 	bl	800f5bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800f64c:	2000      	movs	r0, #0
 800f64e:	f7ff ffb5 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800f652:	2010      	movs	r0, #16
 800f654:	f7ff ffb2 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800f658:	2040      	movs	r0, #64	; 0x40
 800f65a:	f7ff ffaf 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800f65e:	20ff      	movs	r0, #255	; 0xff
 800f660:	f000 f894 	bl	800f78c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800f664:	20a1      	movs	r0, #161	; 0xa1
 800f666:	f7ff ffa9 	bl	800f5bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800f66a:	20a6      	movs	r0, #166	; 0xa6
 800f66c:	f7ff ffa6 	bl	800f5bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800f670:	20a8      	movs	r0, #168	; 0xa8
 800f672:	f7ff ffa3 	bl	800f5bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800f676:	203f      	movs	r0, #63	; 0x3f
 800f678:	f7ff ffa0 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800f67c:	20a4      	movs	r0, #164	; 0xa4
 800f67e:	f7ff ff9d 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800f682:	20d3      	movs	r0, #211	; 0xd3
 800f684:	f7ff ff9a 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800f688:	2000      	movs	r0, #0
 800f68a:	f7ff ff97 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800f68e:	20d5      	movs	r0, #213	; 0xd5
 800f690:	f7ff ff94 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800f694:	20f0      	movs	r0, #240	; 0xf0
 800f696:	f7ff ff91 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800f69a:	20d9      	movs	r0, #217	; 0xd9
 800f69c:	f7ff ff8e 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800f6a0:	2022      	movs	r0, #34	; 0x22
 800f6a2:	f7ff ff8b 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800f6a6:	20da      	movs	r0, #218	; 0xda
 800f6a8:	f7ff ff88 	bl	800f5bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800f6ac:	2012      	movs	r0, #18
 800f6ae:	f7ff ff85 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800f6b2:	20db      	movs	r0, #219	; 0xdb
 800f6b4:	f7ff ff82 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800f6b8:	2020      	movs	r0, #32
 800f6ba:	f7ff ff7f 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800f6be:	208d      	movs	r0, #141	; 0x8d
 800f6c0:	f7ff ff7c 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800f6c4:	2014      	movs	r0, #20
 800f6c6:	f7ff ff79 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800f6ca:	2001      	movs	r0, #1
 800f6cc:	f000 f872 	bl	800f7b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f000 f80f 	bl	800f6f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800f6d6:	f000 f831 	bl	800f73c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800f6da:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800f6e0:	4b03      	ldr	r3, [pc, #12]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800f6e6:	4b02      	ldr	r3, [pc, #8]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	711a      	strb	r2, [r3, #4]
}
 800f6ec:	bf00      	nop
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	20002524 	.word	0x20002524

0800f6f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f6fe:	2300      	movs	r3, #0
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e00d      	b.n	800f720 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d101      	bne.n	800f70e <ssd1306_Fill+0x1a>
 800f70a:	2100      	movs	r1, #0
 800f70c:	e000      	b.n	800f710 <ssd1306_Fill+0x1c>
 800f70e:	21ff      	movs	r1, #255	; 0xff
 800f710:	4a09      	ldr	r2, [pc, #36]	; (800f738 <ssd1306_Fill+0x44>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4413      	add	r3, r2
 800f716:	460a      	mov	r2, r1
 800f718:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	3301      	adds	r3, #1
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f726:	d3ed      	bcc.n	800f704 <ssd1306_Fill+0x10>
    }
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	20002124 	.word	0x20002124

0800f73c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f742:	2300      	movs	r3, #0
 800f744:	71fb      	strb	r3, [r7, #7]
 800f746:	e016      	b.n	800f776 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800f748:	79fb      	ldrb	r3, [r7, #7]
 800f74a:	3b50      	subs	r3, #80	; 0x50
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff ff34 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800f754:	2000      	movs	r0, #0
 800f756:	f7ff ff31 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800f75a:	2010      	movs	r0, #16
 800f75c:	f7ff ff2e 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	01db      	lsls	r3, r3, #7
 800f764:	4a08      	ldr	r2, [pc, #32]	; (800f788 <ssd1306_UpdateScreen+0x4c>)
 800f766:	4413      	add	r3, r2
 800f768:	2180      	movs	r1, #128	; 0x80
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff ff3e 	bl	800f5ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	3301      	adds	r3, #1
 800f774:	71fb      	strb	r3, [r7, #7]
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b07      	cmp	r3, #7
 800f77a:	d9e5      	bls.n	800f748 <ssd1306_UpdateScreen+0xc>
    }
}
 800f77c:	bf00      	nop
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20002124 	.word	0x20002124

0800f78c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800f796:	2381      	movs	r3, #129	; 0x81
 800f798:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800f79a:	7bfb      	ldrb	r3, [r7, #15]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7ff ff0d 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff ff09 	bl	800f5bc <ssd1306_WriteCommand>
}
 800f7aa:	bf00      	nop
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
	...

0800f7b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d005      	beq.n	800f7d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800f7c4:	23af      	movs	r3, #175	; 0xaf
 800f7c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800f7c8:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <ssd1306_SetDisplayOn+0x38>)
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	715a      	strb	r2, [r3, #5]
 800f7ce:	e004      	b.n	800f7da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800f7d0:	23ae      	movs	r3, #174	; 0xae
 800f7d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800f7d4:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <ssd1306_SetDisplayOn+0x38>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff feed 	bl	800f5bc <ssd1306_WriteCommand>
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20002524 	.word	0x20002524

0800f7f0 <memset>:
 800f7f0:	4402      	add	r2, r0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d100      	bne.n	800f7fa <memset+0xa>
 800f7f8:	4770      	bx	lr
 800f7fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f7fe:	e7f9      	b.n	800f7f4 <memset+0x4>

0800f800 <__libc_init_array>:
 800f800:	b570      	push	{r4, r5, r6, lr}
 800f802:	4d0d      	ldr	r5, [pc, #52]	; (800f838 <__libc_init_array+0x38>)
 800f804:	4c0d      	ldr	r4, [pc, #52]	; (800f83c <__libc_init_array+0x3c>)
 800f806:	1b64      	subs	r4, r4, r5
 800f808:	10a4      	asrs	r4, r4, #2
 800f80a:	2600      	movs	r6, #0
 800f80c:	42a6      	cmp	r6, r4
 800f80e:	d109      	bne.n	800f824 <__libc_init_array+0x24>
 800f810:	4d0b      	ldr	r5, [pc, #44]	; (800f840 <__libc_init_array+0x40>)
 800f812:	4c0c      	ldr	r4, [pc, #48]	; (800f844 <__libc_init_array+0x44>)
 800f814:	f000 f826 	bl	800f864 <_init>
 800f818:	1b64      	subs	r4, r4, r5
 800f81a:	10a4      	asrs	r4, r4, #2
 800f81c:	2600      	movs	r6, #0
 800f81e:	42a6      	cmp	r6, r4
 800f820:	d105      	bne.n	800f82e <__libc_init_array+0x2e>
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	f855 3b04 	ldr.w	r3, [r5], #4
 800f828:	4798      	blx	r3
 800f82a:	3601      	adds	r6, #1
 800f82c:	e7ee      	b.n	800f80c <__libc_init_array+0xc>
 800f82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f832:	4798      	blx	r3
 800f834:	3601      	adds	r6, #1
 800f836:	e7f2      	b.n	800f81e <__libc_init_array+0x1e>
 800f838:	0800faec 	.word	0x0800faec
 800f83c:	0800faec 	.word	0x0800faec
 800f840:	0800faec 	.word	0x0800faec
 800f844:	0800faf0 	.word	0x0800faf0

0800f848 <memcpy>:
 800f848:	440a      	add	r2, r1
 800f84a:	4291      	cmp	r1, r2
 800f84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f850:	d100      	bne.n	800f854 <memcpy+0xc>
 800f852:	4770      	bx	lr
 800f854:	b510      	push	{r4, lr}
 800f856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f85e:	4291      	cmp	r1, r2
 800f860:	d1f9      	bne.n	800f856 <memcpy+0xe>
 800f862:	bd10      	pop	{r4, pc}

0800f864 <_init>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	bf00      	nop
 800f868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86a:	bc08      	pop	{r3}
 800f86c:	469e      	mov	lr, r3
 800f86e:	4770      	bx	lr

0800f870 <_fini>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	bf00      	nop
 800f874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f876:	bc08      	pop	{r3}
 800f878:	469e      	mov	lr, r3
 800f87a:	4770      	bx	lr
