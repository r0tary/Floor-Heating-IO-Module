
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000e5d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800e718  0800e718  0001e718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e9a4  0800e9a4  0001e9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e9ac  0800e9ac  0001e9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e9b0  0800e9b0  0001e9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800e9b4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002040  20000080  0800ea28  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200020c0  0800ea28  000220c0  2**0
=======
  1 .text         0000f73c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fae4  0800fae4  0001fae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800faec  0800faec  0001faec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800faf0  0800faf0  0001faf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800faf4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024ac  20000080  0800fb68  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000252c  0800fb68  0002252c  2**0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 11 .debug_info   0002cae3  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000594d  00000000  00000000  0004cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002850  00000000  00000000  00052520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f10  00000000  00000000  00054d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027ba5  00000000  00000000  00056c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000299b8  00000000  00000000  0007e825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe278  00000000  00000000  000a81dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ad80  00000000  00000000  001a6458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001b11d8  2**0
=======
 11 .debug_info   0003093b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006021  00000000  00000000  00050a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c30  00000000  00000000  00056a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000222e  00000000  00000000  00059680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028e42  00000000  00000000  0005b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002fa1c  00000000  00000000  000846f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101e21  00000000  00000000  000b410c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bedc  00000000  00000000  001b5f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001c1e0c  2**0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000160:	0800e700 	.word	0x0800e700
=======
 8000160:	0800f864 	.word	0x0800f864
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
<<<<<<< HEAD
 800017c:	0800e700 	.word	0x0800e700
=======
 800017c:	0800f864 	.word	0x0800f864
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <HAL_ADC_ConvCpltCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 fb64 	bl	80092f4 <osThreadFlagsSet>

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000009c 	.word	0x2000009c

08000c38 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
<<<<<<< HEAD
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <ADC_Temp_Thread_Start+0x24>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <ADC_Temp_Thread_Start+0x28>)
 8000c42:	f008 fac5 	bl	80091d0 <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <ADC_Temp_Thread_Start+0x2c>)
 8000c4a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <ADC_Temp_Thread_Start+0x30>)
 8000c4e:	f008 fc3b 	bl	80094c8 <osEventFlagsNew>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <ADC_Temp_Thread_Start+0x34>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800e7e8 	.word	0x0800e7e8
 8000c60:	08000c99 	.word	0x08000c99
 8000c64:	2000009c 	.word	0x2000009c
 8000c68:	0800e80c 	.word	0x0800e80c
 8000c6c:	200000a0 	.word	0x200000a0

08000c70 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread
void Control_Thread_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <Control_Thread_Init+0x18>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <Control_Thread_Init+0x1c>)
 8000c7a:	f008 faa9 	bl	80091d0 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <Control_Thread_Init+0x20>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	0800e81c 	.word	0x0800e81c
 8000c8c:	08000d5d 	.word	0x08000d5d
 8000c90:	200000a4 	.word	0x200000a4
 8000c94:	00000000 	.word	0x00000000

08000c98 <CalculateTemp_Thread>:



// System Threads

void CalculateTemp_Thread(void *argument){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ca0:	217f      	movs	r1, #127	; 0x7f
 8000ca2:	4829      	ldr	r0, [pc, #164]	; (8000d48 <CalculateTemp_Thread+0xb0>)
 8000ca4:	f002 faa8 	bl	80031f8 <HAL_ADCEx_Calibration_Start>
=======
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ADC_Temp_Thread_Start+0x24>)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <ADC_Temp_Thread_Start+0x28>)
 8000c22:	f009 f831 	bl	8009c88 <osThreadNew>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <ADC_Temp_Thread_Start+0x2c>)
 8000c2a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <ADC_Temp_Thread_Start+0x30>)
 8000c2e:	f009 f8d8 	bl	8009de2 <osEventFlagsNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <ADC_Temp_Thread_Start+0x34>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	0800f970 	.word	0x0800f970
 8000c40:	08001291 	.word	0x08001291
 8000c44:	20000758 	.word	0x20000758
 8000c48:	0800f994 	.word	0x0800f994
 8000c4c:	2000075c 	.word	0x2000075c

08000c50 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c60:	f023 0218 	bic.w	r2, r3, #24
 8000c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fe72 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f872 	bl	8000dd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cec:	f000 f8e6 	bl	8000ebc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 fa50 	bl	8001194 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf4:	f000 fa2c 	bl	8001150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cf8:	f000 f9b6 	bl	8001068 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000cfc:	f000 fa00 	bl	8001100 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d00:	f000 f90e 	bl	8000f20 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d04:	f000 f970 	bl	8000fe8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <main+0xc8>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <main+0xc8>)
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <main+0xcc>)
 8000d12:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000d14:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <main+0xc8>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <main+0xc8>)
 8000d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d20:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <main+0xc8>)
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <main+0xd0>)
 8000d28:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <main+0xc8>)
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <main+0xc8>)
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <main+0xd4>)
 8000d34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <main+0xc8>)
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <main+0xd8>)
 8000d3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <main+0xc8>)
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <main+0xdc>)
 8000d44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <main+0xc8>)
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <main+0xe0>)
 8000d4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <main+0xc8>)
 8000d52:	220a      	movs	r2, #10
 8000d54:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <main+0xc8>)
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <main+0xc8>)
 8000d62:	220a      	movs	r2, #10
 8000d64:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <main+0xc8>)
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <main+0xc8>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <main+0xc8>)
 8000d7a:	f00c ff57 	bl	800dc2c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <main+0xc8>)
 8000d80:	f00c fff6 	bl	800dd70 <ModbusStart>

  //Initialize the SSD1306 OLED
  ssd1306_Init();
 8000d84:	f00e fc4c 	bl	800f620 <ssd1306_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d88:	f008 ff34 	bl	8009bf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <main+0xe4>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <main+0xe8>)
 8000d92:	f008 ff79 	bl	8009c88 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <main+0xec>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000d9c:	f7ff ff3c 	bl	8000c18 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000da0:	f008 ff4c 	bl	8009c3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0xc4>
 8000da6:	bf00      	nop
 8000da8:	20000600 	.word	0x20000600
 8000dac:	200001b4 	.word	0x200001b4
 8000db0:	48000800 	.word	0x48000800
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000001c 	.word	0x2000001c
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000058 	.word	0x20000058
 8000dc4:	0800f94c 	.word	0x0800f94c
 8000dc8:	08001359 	.word	0x08001359
 8000dcc:	200005fc 	.word	0x200005fc

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09a      	sub	sp, #104	; 0x68
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2248      	movs	r2, #72	; 0x48
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00e fd06 	bl	800f7f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e04:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	f023 0303 	bic.w	r3, r3, #3
 8000e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1a:	f003 fe87 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff16 	bl	8000c50 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <SystemClock_Config+0xe8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000e40:	2327      	movs	r3, #39	; 0x27
 8000e42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e60:	2360      	movs	r3, #96	; 0x60
 8000e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f9fd 	bl	800526c <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e78:	f000 fa88 	bl	800138c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e7c:	236f      	movs	r3, #111	; 0x6f
 8000e7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e80:	2302      	movs	r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fd59 	bl	8005954 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ea8:	f000 fa70 	bl	800138c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000eac:	f005 fb46 	bl	800653c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eb0:	bf00      	nop
 8000eb2:	3768      	adds	r7, #104	; 0x68
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	58000400 	.word	0x58000400

08000ebc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2250      	movs	r2, #80	; 0x50
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00e fc91 	bl	800f7f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000ece:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000ed2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000ed4:	2318      	movs	r3, #24
 8000ed6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000ee4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ee8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000eea:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000eee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000ef0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4618      	mov	r0, r3
 8000f08:	f005 f9a2 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000f12:	f000 fa3b 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f16:	bf00      	nop
 8000f18:	3750      	adds	r7, #80	; 0x50
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <MX_ADC1_Init+0xc0>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000f98:	f000 ffbe 	bl	8001f18 <HAL_ADC_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000fa2:	f000 f9f3 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0xc4>)
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xbc>)
 8000fc4:	f001 fbae 	bl	8002724 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fce:	f000 f9dd 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	50040000 	.word	0x50040000
 8000fe4:	14f00020 	.word	0x14f00020

08000fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C1_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C1_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C1_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C1_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C1_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_I2C1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_I2C1_Init+0x74>)
 8001024:	f002 ffd4 	bl	8003fd0 <HAL_I2C_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800102e:	f000 f9ad 	bl	800138c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C1_Init+0x74>)
 8001036:	f003 fbdf 	bl	80047f8 <HAL_I2CEx_ConfigAnalogFilter>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001040:	f000 f9a4 	bl	800138c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_I2C1_Init+0x74>)
 8001048:	f003 fc21 	bl	800488e <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001052:	f000 f99b 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000160 	.word	0x20000160
 8001060:	40005400 	.word	0x40005400
 8001064:	00300f38 	.word	0x00300f38

08001068 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_USART1_UART_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010b2:	f005 fdd5 	bl	8006c60 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 f966 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010c4:	f008 fbf7 	bl	80098b6 <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f000 f95d 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010d6:	f008 fc2c 	bl	8009932 <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f000 f954 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_USART1_UART_Init+0x90>)
 80010e6:	f008 fbad 	bl	8009844 <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f000 f94c 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001b4 	.word	0x200001b4
 80010fc:	40013800 	.word	0x40013800

08001100 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <MX_USB_PCD_Init+0x4c>)
 8001108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800110c:	2208      	movs	r2, #8
 800110e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001112:	2202      	movs	r2, #2
 8001114:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001118:	2202      	movs	r2, #2
 800111a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_USB_PCD_Init+0x48>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_USB_PCD_Init+0x48>)
 8001136:	f003 fbf6 	bl	8004926 <HAL_PCD_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001140:	f000 f924 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000308 	.word	0x20000308
 800114c:	40006800 	.word	0x40006800

08001150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff fd91 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fd8e 	bl	8000c7c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2105      	movs	r1, #5
 8001164:	200b      	movs	r0, #11
 8001166:	f002 fa45 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800116a:	200b      	movs	r0, #11
 800116c:	f002 fa5c 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2105      	movs	r1, #5
 8001174:	200c      	movs	r0, #12
 8001176:	f002 fa3d 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800117a:	200c      	movs	r0, #12
 800117c:	f002 fa54 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2105      	movs	r1, #5
 8001184:	200d      	movs	r0, #13
 8001186:	f002 fa35 	bl	80035f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800118a:	200d      	movs	r0, #13
 800118c:	f002 fa4c 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	2004      	movs	r0, #4
 80011aa:	f7ff fd80 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff fd7d 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fd7a 	bl	8000cae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	2008      	movs	r0, #8
 80011bc:	f7ff fd77 	bl	8000cae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4827      	ldr	r0, [pc, #156]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011c6:	f002 feeb 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2102      	movs	r1, #2
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f002 fee5 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2103      	movs	r1, #3
 80011da:	4823      	ldr	r0, [pc, #140]	; (8001268 <MX_GPIO_Init+0xd4>)
 80011dc:	f002 fee0 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 80011e0:	2308      	movs	r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	481b      	ldr	r0, [pc, #108]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011f6:	f002 fd63 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f002 fd55 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001216:	2310      	movs	r3, #16
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001228:	f002 fd4a 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001242:	f002 fd3d 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001246:	2303      	movs	r3, #3
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_GPIO_Init+0xd8>)
 8001258:	f002 fd32 	bl	8003cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000800 	.word	0x48000800
 8001268:	48000400 	.word	0x48000400
 800126c:	48000c00 	.word	0x48000c00

08001270 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	osEventFlagsSet(tempFlagsHandle,0x01);
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_ADC_ConvCpltCallback+0x1c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f008 fdee 	bl	8009e60 <osEventFlagsSet>

}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000075c 	.word	0x2000075c

08001290 <CalculateTemp_Thread>:

void CalculateTemp_Thread(void *argument){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001298:	217f      	movs	r1, #127	; 0x7f
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <CalculateTemp_Thread+0xb0>)
 800129c:	f002 f85e 	bl	800335c <HAL_ADCEx_Calibration_Start>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
<<<<<<< HEAD
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4928      	ldr	r1, [pc, #160]	; (8000d4c <CalculateTemp_Thread+0xb4>)
 8000cac:	4826      	ldr	r0, [pc, #152]	; (8000d48 <CalculateTemp_Thread+0xb0>)
 8000cae:	f001 f9cd 	bl	800204c <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f008 fb69 	bl	8009390 <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <CalculateTemp_Thread+0xb4>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fbad 	bl	8000424 <__aeabi_i2d>
 8000cca:	a319      	add	r3, pc, #100	; (adr r3, 8000d30 <CalculateTemp_Thread+0x98>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f7ff fc12 	bl	80004f8 <__aeabi_dmul>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	491d      	ldr	r1, [pc, #116]	; (8000d50 <CalculateTemp_Thread+0xb8>)
 8000cda:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <CalculateTemp_Thread+0xb8>)
 8000ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce4:	a314      	add	r3, pc, #80	; (adr r3, 8000d38 <CalculateTemp_Thread+0xa0>)
 8000ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cea:	f7ff fa4d 	bl	8000188 <__aeabi_dsub>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <CalculateTemp_Thread+0xbc>)
 8000cfc:	f7ff fbfc 	bl	80004f8 <__aeabi_dmul>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	a30d      	add	r3, pc, #52	; (adr r3, 8000d40 <CalculateTemp_Thread+0xa8>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff fd1d 	bl	800074c <__aeabi_ddiv>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4910      	ldr	r1, [pc, #64]	; (8000d58 <CalculateTemp_Thread+0xc0>)
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <CalculateTemp_Thread+0xb0>)
 8000d1e:	f001 fa19 	bl	8002154 <HAL_ADC_Stop_DMA>
		osDelay(2);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f008 fbb5 	bl	8009492 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d28:	e7be      	b.n	8000ca8 <CalculateTemp_Thread+0x10>
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	f9353597 	.word	0xf9353597
 8000d34:	3f47fffb 	.word	0x3f47fffb
 8000d38:	083126e9 	.word	0x083126e9
 8000d3c:	3fda1cac 	.word	0x3fda1cac
 8000d40:	851eb852 	.word	0x851eb852
 8000d44:	400051eb 	.word	0x400051eb
 8000d48:	200000c0 	.word	0x200000c0
 8000d4c:	200000a8 	.word	0x200000a8
 8000d50:	200000b0 	.word	0x200000b0
 8000d54:	40590000 	.word	0x40590000
 8000d58:	200000b8 	.word	0x200000b8

08000d5c <ControlTask>:
	}

}

void ControlTask(void *argument){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO

	for(;;)
	{
		osDelay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f008 fb94 	bl	8009492 <osDelay>
 8000d6a:	e7fb      	b.n	8000d64 <ControlTask+0x8>

08000d6c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d7c:	f023 0218 	bic.w	r2, r3, #24
 8000d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fd56 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f852 	bl	8000eac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e08:	f000 f8c6 	bl	8000f98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 f9f0 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f000 f9cc 	bl	80011ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e14:	f000 f956 	bl	80010c4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e18:	f000 f9a0 	bl	800115c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000e1c:	f000 f8ee 	bl	8000ffc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <main+0x94>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <main+0x94>)
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <main+0x98>)
 8000e2a:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <main+0x94>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <main+0x94>)
 8000e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e38:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <main+0x94>)
 8000e3e:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <main+0x9c>)
 8000e40:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <main+0x94>)
 8000e44:	2208      	movs	r2, #8
 8000e46:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regs = ModbusDATA;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <main+0x94>)
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <main+0xa0>)
 8000e4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize = sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <main+0x94>)
 8000e52:	2232      	movs	r2, #50	; 0x32
 8000e54:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW_DMA;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <main+0x94>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x94>)
 8000e62:	f00b ff9b 	bl	800cd9c <ModbusInit>

 //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <main+0x94>)
 8000e68:	f00c f83a 	bl	800cee0 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e6c:	f008 f966 	bl	800913c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <main+0xa4>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <main+0xa8>)
 8000e76:	f008 f9ab 	bl	80091d0 <osThreadNew>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <main+0xac>)
 8000e7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000e80:	f7ff feda 	bl	8000c38 <ADC_Temp_Thread_Start>
  Control_Thread_Init();
 8000e84:	f7ff fef4 	bl	8000c70 <Control_Thread_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e88:	f008 f97c 	bl	8009184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <main+0x90>
 8000e8e:	bf00      	nop
 8000e90:	200005d0 	.word	0x200005d0
 8000e94:	20000184 	.word	0x20000184
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	0800e840 	.word	0x0800e840
 8000ea4:	080012cd 	.word	0x080012cd
 8000ea8:	200005cc 	.word	0x200005cc

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2248      	movs	r2, #72	; 0x48
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00d fbe6 	bl	800e68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	f023 0303 	bic.w	r3, r3, #3
 8000eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ef6:	f003 f8bd 	bl	8004074 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ff36 	bl	8000d6c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <SystemClock_Config+0xe8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <SystemClock_Config+0xe8>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <SystemClock_Config+0xe8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f1c:	2327      	movs	r3, #39	; 0x27
 8000f1e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f26:	2301      	movs	r3, #1
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f3c:	2360      	movs	r3, #96	; 0x60
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 fc33 	bl	80047b4 <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f54:	f000 f9d4 	bl	8001300 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f58:	236f      	movs	r3, #111	; 0x6f
 8000f5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2101      	movs	r1, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 ff8f 	bl	8004e9c <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f84:	f000 f9bc 	bl	8001300 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f88:	f004 fd7c 	bl	8005a84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f8c:	bf00      	nop
 8000f8e:	3768      	adds	r7, #104	; 0x68
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58000400 	.word	0x58000400

08000f98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2250      	movs	r2, #80	; 0x50
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00d fb71 	bl	800e68c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000faa:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8000fae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000fb0:	2318      	movs	r3, #24
 8000fb2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000fc0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000fc6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8000fca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000fcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fbd8 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000fee:	f000 f987 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	; 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <MX_ADC1_Init+0xc0>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001032:	2204      	movs	r2, #4
 8001034:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001038:	2200      	movs	r2, #0
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_ADC1_Init+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_ADC1_Init+0xbc>)
 8001074:	f000 fe9e 	bl	8001db4 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800107e:	f000 f93f 	bl	8001300 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_ADC1_Init+0xc4>)
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001086:	2306      	movs	r3, #6
 8001088:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800108a:	2302      	movs	r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108e:	237f      	movs	r3, #127	; 0x7f
 8001090:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001092:	2304      	movs	r3, #4
 8001094:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_ADC1_Init+0xbc>)
 80010a0:	f001 fa8e 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010aa:	f000 f929 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000c0 	.word	0x200000c0
 80010bc:	50040000 	.word	0x50040000
 80010c0:	14f00020 	.word	0x14f00020

080010c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_USART1_UART_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_USART1_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART1_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_USART1_UART_Init+0x90>)
 800110e:	f005 f84b 	bl	80061a8 <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001118:	f000 f8f2 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_USART1_UART_Init+0x90>)
 8001120:	f007 fe6d 	bl	8008dfe <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800112a:	f000 f8e9 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_USART1_UART_Init+0x90>)
 8001132:	f007 fea2 	bl	8008e7a <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800113c:	f000 f8e0 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_USART1_UART_Init+0x90>)
 8001142:	f007 fe23 	bl	8008d8c <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800114c:	f000 f8d8 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000184 	.word	0x20000184
 8001158:	40013800 	.word	0x40013800

0800115c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001162:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <MX_USB_PCD_Init+0x4c>)
 8001164:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001168:	2208      	movs	r2, #8
 800116a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 800116e:	2202      	movs	r2, #2
 8001170:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001174:	2202      	movs	r2, #2
 8001176:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_USB_PCD_Init+0x48>)
 8001192:	f002 fe6b 	bl	8003e6c <HAL_PCD_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800119c:	f000 f8b0 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200002d8 	.word	0x200002d8
 80011a8:	40006800 	.word	0x40006800

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011b0:	2004      	movs	r0, #4
 80011b2:	f7ff fdf1 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fdee 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	200b      	movs	r0, #11
 80011c2:	f002 f965 	bl	8003490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c6:	200b      	movs	r0, #11
 80011c8:	f002 f97c 	bl	80034c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2105      	movs	r1, #5
 80011d0:	200c      	movs	r0, #12
 80011d2:	f002 f95d 	bl	8003490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011d6:	200c      	movs	r0, #12
 80011d8:	f002 f974 	bl	80034c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	200d      	movs	r0, #13
 80011e2:	f002 f955 	bl	8003490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011e6:	200d      	movs	r0, #13
 80011e8:	f002 f96c 	bl	80034c4 <HAL_NVIC_EnableIRQ>

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	2004      	movs	r0, #4
 8001206:	f7ff fde0 	bl	8000dca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff fddd 	bl	8000dca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff fdda 	bl	8000dca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	2008      	movs	r0, #8
 8001218:	f7ff fdd7 	bl	8000dca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2108      	movs	r1, #8
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <MX_GPIO_Init+0xd0>)
 8001222:	f002 fe0b 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f002 fe05 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2123      	movs	r1, #35	; 0x23
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_GPIO_Init+0xd4>)
 8001238:	f002 fe00 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 800123c:	2308      	movs	r3, #8
 800123e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	481b      	ldr	r0, [pc, #108]	; (80012c0 <MX_GPIO_Init+0xd0>)
 8001252:	f002 fc83 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001256:	2302      	movs	r3, #2
 8001258:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f002 fc75 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001272:	2310      	movs	r3, #16
 8001274:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <MX_GPIO_Init+0xd0>)
 8001284:	f002 fc6a 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001288:	2323      	movs	r3, #35	; 0x23
 800128a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_GPIO_Init+0xd4>)
 800129e:	f002 fc5d 	bl	8003b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80012a2:	2303      	movs	r3, #3
 80012a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_GPIO_Init+0xd8>)
 80012b4:	f002 fc52 	bl	8003b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48000c00 	.word	0x48000c00

080012cc <StartDefaultTask>:
=======
 80012a0:	2201      	movs	r2, #1
 80012a2:	4928      	ldr	r1, [pc, #160]	; (8001344 <CalculateTemp_Thread+0xb4>)
 80012a4:	4826      	ldr	r0, [pc, #152]	; (8001340 <CalculateTemp_Thread+0xb0>)
 80012a6:	f000 ff83 	bl	80021b0 <HAL_ADC_Start_DMA>
		osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <CalculateTemp_Thread+0xb8>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	2201      	movs	r2, #1
 80012b4:	2101      	movs	r1, #1
 80012b6:	f008 fe17 	bl	8009ee8 <osEventFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <CalculateTemp_Thread+0xb4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8af 	bl	8000424 <__aeabi_i2d>
 80012c6:	a318      	add	r3, pc, #96	; (adr r3, 8001328 <CalculateTemp_Thread+0x98>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff f914 	bl	80004f8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	491d      	ldr	r1, [pc, #116]	; (800134c <CalculateTemp_Thread+0xbc>)
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <CalculateTemp_Thread+0xbc>)
 80012dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e0:	a313      	add	r3, pc, #76	; (adr r3, 8001330 <CalculateTemp_Thread+0xa0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff4f 	bl	8000188 <__aeabi_dsub>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <CalculateTemp_Thread+0xc0>)
 80012f8:	f7ff f8fe 	bl	80004f8 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	a30c      	add	r3, pc, #48	; (adr r3, 8001338 <CalculateTemp_Thread+0xa8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff fa1f 	bl	800074c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4910      	ldr	r1, [pc, #64]	; (8001354 <CalculateTemp_Thread+0xc4>)
 8001314:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <CalculateTemp_Thread+0xb0>)
 800131a:	f000 ffcd 	bl	80022b8 <HAL_ADC_Stop_DMA>
		osDelay(2);
 800131e:	2002      	movs	r0, #2
 8001320:	f008 fd44 	bl	8009dac <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8001324:	e7bc      	b.n	80012a0 <CalculateTemp_Thread+0x10>
 8001326:	bf00      	nop
 8001328:	f9353597 	.word	0xf9353597
 800132c:	3f47fffb 	.word	0x3f47fffb
 8001330:	083126e9 	.word	0x083126e9
 8001334:	3fda1cac 	.word	0x3fda1cac
 8001338:	851eb852 	.word	0x851eb852
 800133c:	400051eb 	.word	0x400051eb
 8001340:	2000009c 	.word	0x2000009c
 8001344:	20000760 	.word	0x20000760
 8001348:	2000075c 	.word	0x2000075c
 800134c:	20000768 	.word	0x20000768
 8001350:	40590000 	.word	0x40590000
 8001354:	20000770 	.word	0x20000770

08001358 <StartDefaultTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
<<<<<<< HEAD
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
=======
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 80012d4:	2001      	movs	r0, #1
 80012d6:	f008 f8dc 	bl	8009492 <osDelay>
 80012da:	e7fb      	b.n	80012d4 <StartDefaultTask+0x8>

080012dc <HAL_TIM_PeriodElapsedCallback>:
=======
 8001360:	2001      	movs	r0, #1
 8001362:	f008 fd23 	bl	8009dac <osDelay>
 8001366:	e7fb      	b.n	8001360 <StartDefaultTask+0x8>

08001368 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
=======
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
<<<<<<< HEAD
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ee:	f000 faff 	bl	80018f0 <HAL_IncTick>
=======
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800137a:	f000 fb47 	bl	8001a0c <HAL_IncTick>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40014400 	.word	0x40014400

08001300 <Error_Handler>:
=======
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40014400 	.word	0x40014400

0800138c <Error_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
=======
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
=======
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>

0800130a <LL_AHB2_GRP1_EnableClock>:
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4313      	orrs	r3, r2
 8001320:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4013      	ands	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_APB1_GRP1_EnableClock>:
=======
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>

08001396 <LL_AHB2_GRP1_EnableClock>:
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_APB1_GRP1_EnableClock>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001348:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800134a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001360:	68fb      	ldr	r3, [r7, #12]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_APB2_GRP1_EnableClock>:
=======
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_APB2_GRP1_EnableClock>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
<<<<<<< HEAD
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800137c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4313      	orrs	r3, r2
 8001384:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_MspInit>:
=======
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_MspInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
=======
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80013a4:	2200      	movs	r2, #0
 80013a6:	210f      	movs	r1, #15
 80013a8:	f06f 0001 	mvn.w	r0, #1
 80013ac:	f002 f870 	bl	8003490 <HAL_NVIC_SetPriority>
=======
 8001430:	2200      	movs	r2, #0
 8001432:	210f      	movs	r1, #15
 8001434:	f06f 0001 	mvn.w	r0, #1
 8001438:	f002 f8dc 	bl	80035f4 <HAL_NVIC_SetPriority>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_ADC_MspInit>:
=======
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_ADC_MspInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_ADC_MspInit+0xb8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d146      	bne.n	8001464 <HAL_ADC_MspInit+0xb0>
=======
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_ADC_MspInit+0xb8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d146      	bne.n	80014f0 <HAL_ADC_MspInit+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 80013d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013da:	f7ff ff96 	bl	800130a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff ff93 	bl	800130a <LL_AHB2_GRP1_EnableClock>
=======
 8001462:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001466:	f7ff ff96 	bl	8001396 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff93 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
<<<<<<< HEAD
 80013e4:	2301      	movs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f002 fbaf 	bl	8003b5c <HAL_GPIO_Init>
=======
 8001470:	2301      	movs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 fc1b 	bl	8003cc0 <HAL_GPIO_Init>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
<<<<<<< HEAD
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_ADC_MspInit+0xc0>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001406:	2205      	movs	r2, #5
 8001408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 800142e:	2220      	movs	r2, #32
 8001430:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 800143a:	f002 f851 	bl	80034e0 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001444:	f7ff ff5c 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 800144c:	64da      	str	r2, [r3, #76]	; 0x4c
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_ADC_MspInit+0xbc>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	2012      	movs	r0, #18
 800145a:	f002 f819 	bl	8003490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800145e:	2012      	movs	r0, #18
 8001460:	f002 f830 	bl	80034c4 <HAL_NVIC_EnableIRQ>
=======
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_ADC_MspInit+0xc0>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001492:	2205      	movs	r2, #5
 8001494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014ba:	2220      	movs	r2, #32
 80014bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014c6:	f002 f8bd 	bl	8003644 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80014d0:	f7ff ff5c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_ADC_MspInit+0xbc>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	2012      	movs	r0, #18
 80014e6:	f002 f885 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ea:	2012      	movs	r0, #18
 80014ec:	f002 f89c 	bl	8003628 <HAL_NVIC_EnableIRQ>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	50040000 	.word	0x50040000
 8001470:	20000124 	.word	0x20000124
 8001474:	40020030 	.word	0x40020030

08001478 <HAL_UART_MspInit>:
=======
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	50040000 	.word	0x50040000
 80014fc:	20000100 	.word	0x20000100
 8001500:	40020030 	.word	0x40020030

08001504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09c      	sub	sp, #112	; 0x70
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2250      	movs	r2, #80	; 0x50
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f00e f963 	bl	800f7f0 <memset>
  if(hi2c->Instance==I2C1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_I2C_MspInit+0x88>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d126      	bne.n	8001582 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001534:	2304      	movs	r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001538:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fe84 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f7ff ff1d 	bl	800138c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff ff1f 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156a:	2304      	movs	r3, #4
 800156c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001572:	4619      	mov	r1, r3
 8001574:	4806      	ldr	r0, [pc, #24]	; (8001590 <HAL_I2C_MspInit+0x8c>)
 8001576:	f002 fba3 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800157e:	f7ff ff23 	bl	80013c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3770      	adds	r7, #112	; 0x70
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	48000400 	.word	0x48000400

08001594 <HAL_UART_MspInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001478:	b580      	push	{r7, lr}
 800147a:	b09c      	sub	sp, #112	; 0x70
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2250      	movs	r2, #80	; 0x50
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f00d f8f7 	bl	800e68c <memset>
  if(huart->Instance==USART1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_UART_MspInit+0x138>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d17f      	bne.n	80015a8 <HAL_UART_MspInit+0x130>
=======
 8001594:	b580      	push	{r7, lr}
 8001596:	b09c      	sub	sp, #112	; 0x70
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2250      	movs	r2, #80	; 0x50
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00e f91b 	bl	800f7f0 <memset>
  if(huart->Instance==USART1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_UART_MspInit+0x138>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d17f      	bne.n	80016c4 <HAL_UART_MspInit+0x130>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< HEAD
 80014a8:	2301      	movs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f96f 	bl	8005798 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff ff1e 	bl	8001300 <Error_Handler>
=======
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f004 fe3d 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015dc:	f7ff fed6 	bl	800138c <Error_Handler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80014c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014c8:	f7ff ff51 	bl	800136e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	2002      	movs	r0, #2
 80014ce:	f7ff ff1c 	bl	800130a <LL_AHB2_GRP1_EnableClock>
=======
 80015e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015e4:	f7ff ff09 	bl	80013fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	2002      	movs	r0, #2
 80015ea:	f7ff fed4 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
<<<<<<< HEAD
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014da:	2301      	movs	r3, #1
 80014dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e2:	2307      	movs	r3, #7
 80014e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4831      	ldr	r0, [pc, #196]	; (80015b4 <HAL_UART_MspInit+0x13c>)
 80014ee:	f002 fb35 	bl	8003b5c <HAL_GPIO_Init>
=======
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015fe:	2307      	movs	r3, #7
 8001600:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001606:	4619      	mov	r1, r3
 8001608:	4831      	ldr	r0, [pc, #196]	; (80016d0 <HAL_UART_MspInit+0x13c>)
 800160a:	f002 fb59 	bl	8003cc0 <HAL_GPIO_Init>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
<<<<<<< HEAD
 80014f2:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_UART_MspInit+0x140>)
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <HAL_UART_MspInit+0x144>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80014f8:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_UART_MspInit+0x140>)
 80014fa:	220e      	movs	r2, #14
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_UART_MspInit+0x140>)
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_UART_MspInit+0x140>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001528:	4823      	ldr	r0, [pc, #140]	; (80015b8 <HAL_UART_MspInit+0x140>)
 800152a:	f001 ffd9 	bl	80034e0 <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001534:	f7ff fee4 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_UART_MspInit+0x140>)
 800153c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001540:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_UART_MspInit+0x140>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001548:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x14c>)
 800154a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_UART_MspInit+0x148>)
 800154e:	220f      	movs	r2, #15
 8001550:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001554:	2210      	movs	r2, #16
 8001556:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_UART_MspInit+0x148>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_UART_MspInit+0x148>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <HAL_UART_MspInit+0x148>)
 800157e:	f001 ffaf 	bl	80034e0 <HAL_DMA_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001588:	f7ff feba 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001590:	67da      	str	r2, [r3, #124]	; 0x7c
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_UART_MspInit+0x148>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2105      	movs	r1, #5
 800159c:	2024      	movs	r0, #36	; 0x24
 800159e:	f001 ff77 	bl	8003490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a2:	2024      	movs	r0, #36	; 0x24
 80015a4:	f001 ff8e 	bl	80034c4 <HAL_NVIC_EnableIRQ>
=======
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001610:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x144>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001616:	220e      	movs	r2, #14
 8001618:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001646:	f001 fffd 	bl	8003644 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001650:	f7ff fe9c 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_UART_MspInit+0x140>)
 8001658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0x140>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_UART_MspInit+0x14c>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_UART_MspInit+0x148>)
 800166a:	220f      	movs	r2, #15
 800166c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001670:	2210      	movs	r2, #16
 8001672:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x148>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_UART_MspInit+0x148>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_UART_MspInit+0x148>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001698:	4810      	ldr	r0, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x148>)
 800169a:	f001 ffd3 	bl	8003644 <HAL_DMA_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80016a4:	f7ff fe72 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_UART_MspInit+0x148>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2105      	movs	r1, #5
 80016b8:	2024      	movs	r0, #36	; 0x24
 80016ba:	f001 ff9b 	bl	80035f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016be:	2024      	movs	r0, #36	; 0x24
 80016c0:	f001 ffb2 	bl	8003628 <HAL_NVIC_EnableIRQ>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80015a8:	bf00      	nop
 80015aa:	3770      	adds	r7, #112	; 0x70
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013800 	.word	0x40013800
 80015b4:	48000400 	.word	0x48000400
 80015b8:	20000218 	.word	0x20000218
 80015bc:	40020008 	.word	0x40020008
 80015c0:	20000278 	.word	0x20000278
 80015c4:	4002001c 	.word	0x4002001c

080015c8 <HAL_PCD_MspInit>:
=======
 80016c4:	bf00      	nop
 80016c6:	3770      	adds	r7, #112	; 0x70
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013800 	.word	0x40013800
 80016d0:	48000400 	.word	0x48000400
 80016d4:	20000248 	.word	0x20000248
 80016d8:	40020008 	.word	0x40020008
 80016dc:	200002a8 	.word	0x200002a8
 80016e0:	4002001c 	.word	0x4002001c

080016e4 <HAL_PCD_MspInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
<<<<<<< HEAD
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_PCD_MspInit+0x5c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d118      	bne.n	800161c <HAL_PCD_MspInit+0x54>
=======
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_PCD_MspInit+0x5c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d118      	bne.n	8001738 <HAL_PCD_MspInit+0x54>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fe8d 	bl	800130a <LL_AHB2_GRP1_EnableClock>
=======
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe45 	bl	8001396 <LL_AHB2_GRP1_EnableClock>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 80015f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001602:	230a      	movs	r3, #10
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f002 faa4 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001614:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001618:	f7ff fe90 	bl	800133c <LL_APB1_GRP1_EnableClock>
=======
 800170c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800171e:	230a      	movs	r3, #10
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f002 fac8 	bl	8003cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001730:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001734:	f7ff fe48 	bl	80013c8 <LL_APB1_GRP1_EnableClock>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
<<<<<<< HEAD
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40006800 	.word	0x40006800

08001628 <LL_APB2_GRP1_EnableClock>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164c:	68fb      	ldr	r3, [r7, #12]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_InitTick>:
=======
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40006800 	.word	0x40006800

08001744 <LL_APB2_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_InitTick>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2019      	movs	r0, #25
 8001672:	f001 ff0d 	bl	8003490 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001676:	2019      	movs	r0, #25
 8001678:	f001 ff24 	bl	80034c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800167c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001680:	f7ff ffd2 	bl	8001628 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f003 fdf0 	bl	8005274 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001694:	f003 fdd8 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 8001698:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <HAL_InitTick+0x8c>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	3b01      	subs	r3, #1
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_InitTick+0x90>)
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_InitTick+0x94>)
 80016ac:	601a      	str	r2, [r3, #0]
=======
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2019      	movs	r0, #25
 800178e:	f001 ff31 	bl	80035f4 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001792:	2019      	movs	r0, #25
 8001794:	f001 ff48 	bl	8003628 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800179c:	f7ff ffd2 	bl	8001744 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fabe 	bl	8005d2c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017b0:	f004 faa6 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 80017b4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_InitTick+0x8c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	3b01      	subs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0x90>)
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_InitTick+0x94>)
 80017c8:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_InitTick+0x90>)
 80016b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b4:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_InitTick+0x90>)
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_InitTick+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_InitTick+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80016c8:	4808      	ldr	r0, [pc, #32]	; (80016ec <HAL_InitTick+0x90>)
 80016ca:	f004 faf2 	bl	8005cb2 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d104      	bne.n	80016de <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_InitTick+0x90>)
 80016d6:	f004 fb4d 	bl	8005d74 <HAL_TIM_Base_Start_IT>
 80016da:	4603      	mov	r3, r0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x84>
=======
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_InitTick+0x90>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_InitTick+0x90>)
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_InitTick+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <HAL_InitTick+0x90>)
 80017e6:	f004 ffc0 	bl	800676a <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_InitTick+0x90>)
 80017f2:	f005 f81b 	bl	800682c <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x84>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	20000714 	.word	0x20000714
 80016f0:	40014400 	.word	0x40014400

080016f4 <NMI_Handler>:
=======
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000778 	.word	0x20000778
 800180c:	40014400 	.word	0x40014400

08001810 <NMI_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
=======
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:
=======
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
=======
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:
=======
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
=======
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:
=======
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
=======
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:
=======
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
=======
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <DebugMon_Handler>:
=======
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <DebugMon_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
=======
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DMA1_Channel1_IRQHandler>:
=======
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DMA1_Channel1_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
=======
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< HEAD
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Channel1_IRQHandler+0x10>)
 8001726:	f002 f8bc 	bl	80038a2 <HAL_DMA_IRQHandler>
=======
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 f8e0 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< HEAD
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000218 	.word	0x20000218

08001734 <DMA1_Channel2_IRQHandler>:
=======
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000248 	.word	0x20000248

08001850 <DMA1_Channel2_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
<<<<<<< HEAD
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
=======
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
<<<<<<< HEAD
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Channel2_IRQHandler+0x10>)
 800173a:	f002 f8b2 	bl	80038a2 <HAL_DMA_IRQHandler>
=======
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Channel2_IRQHandler+0x10>)
 8001856:	f002 f8d6 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
<<<<<<< HEAD
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000278 	.word	0x20000278

08001748 <DMA1_Channel3_IRQHandler>:
=======
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002a8 	.word	0x200002a8

08001864 <DMA1_Channel3_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
<<<<<<< HEAD
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
=======
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <DMA1_Channel3_IRQHandler+0x10>)
 800174e:	f002 f8a8 	bl	80038a2 <HAL_DMA_IRQHandler>
=======
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Channel3_IRQHandler+0x10>)
 800186a:	f002 f8cc 	bl	8003a06 <HAL_DMA_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
<<<<<<< HEAD
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000124 	.word	0x20000124

0800175c <ADC1_IRQHandler>:
=======
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000100 	.word	0x20000100

08001878 <ADC1_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
<<<<<<< HEAD
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
=======
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <ADC1_IRQHandler+0x10>)
 8001762:	f000 fd58 	bl	8002216 <HAL_ADC_IRQHandler>
=======
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <ADC1_IRQHandler+0x10>)
 800187e:	f000 fd7c 	bl	800237a <HAL_ADC_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
<<<<<<< HEAD
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000c0 	.word	0x200000c0

08001770 <TIM1_UP_TIM16_IRQHandler>:
=======
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000009c 	.word	0x2000009c

0800188c <TIM1_UP_TIM16_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
<<<<<<< HEAD
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
=======
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
<<<<<<< HEAD
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001776:	f004 fb4b 	bl	8005e10 <HAL_TIM_IRQHandler>
=======
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001892:	f005 f819 	bl	80068c8 <HAL_TIM_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
<<<<<<< HEAD
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000714 	.word	0x20000714

08001784 <USART1_IRQHandler>:
=======
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000778 	.word	0x20000778

080018a0 <USART1_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
=======
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <USART1_IRQHandler+0x10>)
 800178a:	f005 f821 	bl	80067d0 <HAL_UART_IRQHandler>
=======
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <USART1_IRQHandler+0x10>)
 80018a6:	f005 fcef 	bl	8007288 <HAL_UART_IRQHandler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000184 	.word	0x20000184

08001798 <SystemInit>:
=======
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001b4 	.word	0x200001b4

080018b4 <SystemInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
=======
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <SystemInit+0x98>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a23      	ldr	r2, [pc, #140]	; (8001830 <SystemInit+0x98>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SystemInit+0x98>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <SystemInit+0x98>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
<<<<<<< HEAD
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80017c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80017c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <SystemInit+0x9c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e2:	f023 0305 	bic.w	r3, r3, #5
 80017e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <SystemInit+0xa0>)
 8001804:	60da      	str	r2, [r3, #12]
=======
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018e0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <SystemInit+0x9c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f023 0305 	bic.w	r3, r3, #5
 8001902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <SystemInit+0xa0>)
 8001920:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
<<<<<<< HEAD
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <SystemInit+0xa0>)
 800180c:	611a      	str	r2, [r3, #16]
=======
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <SystemInit+0xa0>)
 8001928:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
<<<<<<< HEAD
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	faf6fefb 	.word	0xfaf6fefb
 8001838:	22041000 	.word	0x22041000

0800183c <CopyDataInit>:
=======
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	faf6fefb 	.word	0xfaf6fefb
 8001954:	22041000 	.word	0x22041000

08001958 <CopyDataInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
<<<<<<< HEAD
 800183c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001840:	3304      	adds	r3, #4

08001842 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001842:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001844:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001846:	d3f9      	bcc.n	800183c <CopyDataInit>
  bx lr
 8001848:	4770      	bx	lr

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800184a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800184c:	3004      	adds	r0, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800184e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>
  bx lr
 8001852:	4770      	bx	lr

08001854 <Reset_Handler>:
=======
 8001958:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195c:	3304      	adds	r3, #4

0800195e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001960:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001962:	d3f9      	bcc.n	8001958 <CopyDataInit>
  bx lr
 8001964:	4770      	bx	lr

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001966:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001968:	3004      	adds	r0, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800196a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>
  bx lr
 800196e:	4770      	bx	lr

08001970 <Reset_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
<<<<<<< HEAD
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001856:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f7ff ff9e 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LoopForever+0x6>)
 800185e:	490c      	ldr	r1, [pc, #48]	; (8001890 <LoopForever+0xa>)
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <LoopForever+0xe>)
 8001862:	2300      	movs	r3, #0
 8001864:	f7ff ffed 	bl	8001842 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <LoopForever+0x12>)
 800186a:	490c      	ldr	r1, [pc, #48]	; (800189c <LoopForever+0x16>)
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <LoopForever+0x1a>)
 800186e:	2300      	movs	r3, #0
 8001870:	f7ff ffe7 	bl	8001842 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <LoopForever+0x1e>)
 8001876:	490c      	ldr	r1, [pc, #48]	; (80018a8 <LoopForever+0x22>)
 8001878:	2300      	movs	r3, #0
 800187a:	f7ff ffe8 	bl	800184e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800187e:	f00c ff0d 	bl	800e69c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001882:	f7ff fabb 	bl	8000dfc <main>

08001886 <LoopForever>:

LoopForever:
  b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   r0, =_estack
 8001888:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800188c:	20000008 	.word	0x20000008
 8001890:	2000007c 	.word	0x2000007c
 8001894:	0800e9b4 	.word	0x0800e9b4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001898:	20030000 	.word	0x20030000
 800189c:	20030000 	.word	0x20030000
 80018a0:	0800ea28 	.word	0x0800ea28
  INIT_BSS _sbss, _ebss
 80018a4:	20000080 	.word	0x20000080
 80018a8:	200020c0 	.word	0x200020c0

080018ac <AES1_IRQHandler>:
=======
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001974:	f7ff ff9e 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <LoopForever+0x6>)
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <LoopForever+0xa>)
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <LoopForever+0xe>)
 800197e:	2300      	movs	r3, #0
 8001980:	f7ff ffed 	bl	800195e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <LoopForever+0x12>)
 8001986:	490c      	ldr	r1, [pc, #48]	; (80019b8 <LoopForever+0x16>)
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <LoopForever+0x1a>)
 800198a:	2300      	movs	r3, #0
 800198c:	f7ff ffe7 	bl	800195e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0x1e>)
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <LoopForever+0x22>)
 8001994:	2300      	movs	r3, #0
 8001996:	f7ff ffe8 	bl	800196a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199a:	f00d ff31 	bl	800f800 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800199e:	f7ff f99f 	bl	8000ce0 <main>

080019a2 <LoopForever>:

LoopForever:
  b LoopForever
 80019a2:	e7fe      	b.n	80019a2 <LoopForever>
  ldr   r0, =_estack
 80019a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019a8:	20000008 	.word	0x20000008
 80019ac:	2000007c 	.word	0x2000007c
 80019b0:	0800faf4 	.word	0x0800faf4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019b4:	20030000 	.word	0x20030000
 80019b8:	20030000 	.word	0x20030000
 80019bc:	0800fb68 	.word	0x0800fb68
  INIT_BSS _sbss, _ebss
 80019c0:	20000080 	.word	0x20000080
 80019c4:	2000252c 	.word	0x2000252c

080019c8 <AES1_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 80018ac:	e7fe      	b.n	80018ac <AES1_IRQHandler>
	...

080018b0 <HAL_Init>:
=======
 80019c8:	e7fe      	b.n	80019c8 <AES1_IRQHandler>
	...

080019cc <HAL_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
=======
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_Init+0x3c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_Init+0x3c>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]
=======
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_Init+0x3c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_Init+0x3c>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80018c6:	2003      	movs	r0, #3
 80018c8:	f001 fdd7 	bl	800347a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018cc:	200f      	movs	r0, #15
 80018ce:	f7ff fec5 	bl	800165c <HAL_InitTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	e001      	b.n	80018e2 <HAL_Init+0x32>
=======
 80019e2:	2003      	movs	r0, #3
 80019e4:	f001 fdfb 	bl	80035de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e8:	200f      	movs	r0, #15
 80019ea:	f7ff fec5 	bl	8001778 <HAL_InitTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	e001      	b.n	80019fe <HAL_Init+0x32>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 80018de:	f7ff fd5f 	bl	80013a0 <HAL_MspInit>
=======
 80019fa:	f7ff fd17 	bl	800142c <HAL_MspInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80018e2:	79fb      	ldrb	r3, [r7, #7]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	58004000 	.word	0x58004000

080018f0 <HAL_IncTick>:
=======
 80019fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58004000 	.word	0x58004000

08001a0c <HAL_IncTick>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000074 	.word	0x20000074
 8001914:	20000760 	.word	0x20000760

08001918 <HAL_GetTick>:
=======
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000074 	.word	0x20000074
 8001a30:	200007c4 	.word	0x200007c4

08001a34 <HAL_GetTick>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000760 	.word	0x20000760

08001930 <HAL_GetTickPrio>:
=======
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	200007c4 	.word	0x200007c4

08001a4c <HAL_GetTickPrio>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
<<<<<<< HEAD
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTickPrio+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000070 	.word	0x20000070

08001948 <LL_ADC_SetCommonClock>:
=======
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTickPrio+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000070 	.word	0x20000070

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffe2 	bl	8001a34 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffd2 	bl	8001a34 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000074 	.word	0x20000074

08001aac <LL_ADC_SetCommonClock>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
=======
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
<<<<<<< HEAD
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetCommonPathInternalCh>:
=======
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_GetCommonPathInternalCh>:
=======
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffset>:
=======
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_SetOffset>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3360      	adds	r3, #96	; 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <LL_ADC_SetOffset+0x44>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	4313      	orrs	r3, r2
 80019e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	03fff000 	.word	0x03fff000

080019f8 <LL_ADC_GetOffsetChannel>:
=======
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3360      	adds	r3, #96	; 0x60
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <LL_ADC_SetOffset+0x44>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	03fff000 	.word	0x03fff000

08001b5c <LL_ADC_GetOffsetChannel>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3360      	adds	r3, #96	; 0x60
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffsetState>:
=======
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetOffsetState>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
=======
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
<<<<<<< HEAD
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a72:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_REG_SetSequencerRanks>:
=======
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bd6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
=======
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
<<<<<<< HEAD
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3330      	adds	r3, #48	; 0x30
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	211f      	movs	r1, #31
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 011f 	and.w	r1, r3, #31
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
=======
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	211f      	movs	r1, #31
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 011f 	and.w	r1, r3, #31
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
<<<<<<< HEAD
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_REG_GetDMATransfer>:
=======
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_GetDMATransfer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
=======
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
<<<<<<< HEAD
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0e5b      	lsrs	r3, r3, #25
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0d1b      	lsrs	r3, r3, #20
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2107      	movs	r1, #7
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	401a      	ands	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0d1b      	lsrs	r3, r3, #20
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0318 	and.w	r3, r3, #24
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b94:	40d9      	lsrs	r1, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	400b      	ands	r3, r1
 8001b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	0007ffff 	.word	0x0007ffff

08001bb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6093      	str	r3, [r2, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
=======
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_IsEnabled+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_IsEnabled+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d101      	bne.n	8001ce2 <LL_ADC_IsDisableOngoing+0x18>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
=======
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3314      	adds	r3, #20
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0e5b      	lsrs	r3, r3, #25
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2107      	movs	r1, #7
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0d1b      	lsrs	r3, r3, #20
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0318 	and.w	r3, r3, #24
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf8:	40d9      	lsrs	r1, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	0007ffff 	.word	0x0007ffff

08001d1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
<<<<<<< HEAD
  MODIFY_REG(ADCx->CR,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
=======
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6093      	str	r3, [r2, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

<<<<<<< HEAD
08001d40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
=======
08001d40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
=======
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d54:	d101      	bne.n	8001d5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
=======
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]
=======
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
<<<<<<< HEAD
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
=======
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da6:	2300      	movs	r3, #0
=======
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da4:	d101      	bne.n	8001daa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001daa:	2300      	movs	r3, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

<<<<<<< HEAD
08001db4 <HAL_ADC_Init>:
=======
08001db8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df4:	f043 0202 	orr.w	r2, r3, #2
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_IsEnabled+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_IsEnabled+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_IsDisableOngoing+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_IsDisableOngoing+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d101      	bne.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ede:	f043 0220 	orr.w	r2, r3, #32
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_ADC_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
=======
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e12e      	b.n	8002030 <HAL_ADC_Init+0x27c>
=======
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12e      	b.n	8002194 <HAL_ADC_Init+0x27c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
=======
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_Init+0x40>
=======
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x40>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fae7 	bl	80013b4 <HAL_ADC_MspInit>
=======
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fa7b 	bl	8001440 <HAL_ADC_MspInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff feef 	bl	8001bdc <LL_ADC_IsDeepPowerDownEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fed5 	bl	8001bb8 <LL_ADC_DisableDeepPowerDown>
=======
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff feef 	bl	8001d40 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fed5 	bl	8001d1c <LL_ADC_DisableDeepPowerDown>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff0a 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff feee 	bl	8001c04 <LL_ADC_EnableInternalRegulator>
=======
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff0a 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff feee 	bl	8001d68 <LL_ADC_EnableInternalRegulator>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8001e28:	4b83      	ldr	r3, [pc, #524]	; (8002038 <HAL_ADC_Init+0x284>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	4a83      	ldr	r2, [pc, #524]	; (800203c <HAL_ADC_Init+0x288>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e3c:	e002      	b.n	8001e44 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f9      	bne.n	8001e3e <HAL_ADC_Init+0x8a>
=======
 8001f8c:	4b83      	ldr	r3, [pc, #524]	; (800219c <HAL_ADC_Init+0x284>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a83      	ldr	r2, [pc, #524]	; (80021a0 <HAL_ADC_Init+0x288>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Init+0x8a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff feec 	bl	8001c2c <LL_ADC_IsInternalRegulatorEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	77fb      	strb	r3, [r7, #31]
=======
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff feec 	bl	8001d90 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0210 	orr.w	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	77fb      	strb	r3, [r7, #31]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff60 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80c7 	bne.w	800201e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 80c3 	bne.w	800201e <HAL_ADC_Init+0x26a>
=======
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff60 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8001fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80c7 	bne.w	8002182 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c3 	bne.w	8002182 <HAL_ADC_Init+0x26a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ea0:	f043 0202 	orr.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fef9 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb8:	4861      	ldr	r0, [pc, #388]	; (8002040 <HAL_ADC_Init+0x28c>)
 8001eba:	f7ff fef3 	bl	8001ca4 <LL_ADC_IsEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_Init+0x11c>
=======
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fef9 	bl	8001e08 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201c:	4861      	ldr	r0, [pc, #388]	; (80021a4 <HAL_ADC_Init+0x28c>)
 800201e:	f7ff fef3 	bl	8001e08 <LL_ADC_IsEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_ADC_Init+0x11c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	485e      	ldr	r0, [pc, #376]	; (8002044 <HAL_ADC_Init+0x290>)
 8001ecc:	f7ff fd3c 	bl	8001948 <LL_ADC_SetCommonClock>
=======
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4619      	mov	r1, r3
 800202e:	485e      	ldr	r0, [pc, #376]	; (80021a8 <HAL_ADC_Init+0x290>)
 8002030:	f7ff fd3c 	bl	8001aac <LL_ADC_SetCommonClock>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e5b      	ldrb	r3, [r3, #25]
 8001ed4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ee0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ee6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eee:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001ef0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	3b01      	subs	r3, #1
 8001f08:	045b      	lsls	r3, r3, #17
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
=======
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e5b      	ldrb	r3, [r3, #25]
 8002038:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002044:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800204a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002054:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	3b01      	subs	r3, #1
 800206c:	045b      	lsls	r3, r3, #17
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
=======
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b45      	ldr	r3, [pc, #276]	; (8002048 <HAL_ADC_Init+0x294>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]
=======
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_ADC_Init+0x294>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fefb 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8001f4a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff1c 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8001f56:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d13d      	bne.n	8001fda <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d13a      	bne.n	8001fda <HAL_ADC_Init+0x226>
=======
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fefb 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80020ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff1c 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 80020ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13d      	bne.n	800213e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13a      	bne.n	800213e <HAL_ADC_Init+0x226>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f70:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f80:	f023 0302 	bic.w	r3, r3, #2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	69b9      	ldr	r1, [r7, #24]
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d118      	bne.n	8001fca <HAL_ADC_Init+0x216>
=======
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e4:	f023 0302 	bic.w	r3, r3, #2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	430b      	orrs	r3, r1
 80020f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d118      	bne.n	800212e <HAL_ADC_Init+0x216>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	e007      	b.n	8001fda <HAL_ADC_Init+0x226>
=======
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002106:	f023 0304 	bic.w	r3, r3, #4
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211e:	430a      	orrs	r2, r1
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	e007      	b.n	800213e <HAL_ADC_Init+0x226>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
=======
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10c      	bne.n	8001ffc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f023 010f 	bic.w	r1, r3, #15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffa:	e007      	b.n	800200c <HAL_ADC_Init+0x258>
=======
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10c      	bne.n	8002160 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f023 010f 	bic.w	r1, r3, #15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x258>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020f 	bic.w	r2, r2, #15
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020f 	bic.w	r2, r2, #15
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f023 0303 	bic.w	r3, r3, #3
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
 800201c:	e007      	b.n	800202e <HAL_ADC_Init+0x27a>
=======
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	f043 0201 	orr.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
 8002180:	e007      	b.n	8002192 <HAL_ADC_Init+0x27a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	77fb      	strb	r3, [r7, #31]
=======
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	77fb      	strb	r3, [r7, #31]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800202e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	2000006c 	.word	0x2000006c
 800203c:	053e2d63 	.word	0x053e2d63
 8002040:	50040000 	.word	0x50040000
 8002044:	50040300 	.word	0x50040300
 8002048:	fff0c007 	.word	0xfff0c007

0800204c <HAL_ADC_Start_DMA>:
=======
 8002192:	7ffb      	ldrb	r3, [r7, #31]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000006c 	.word	0x2000006c
 80021a0:	053e2d63 	.word	0x053e2d63
 80021a4:	50040000 	.word	0x50040000
 80021a8:	50040300 	.word	0x50040300
 80021ac:	fff0c007 	.word	0xfff0c007

080021b0 <HAL_ADC_Start_DMA>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
=======
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe6f 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d167      	bne.n	8002138 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Start_DMA+0x2a>
 8002072:	2302      	movs	r3, #2
 8002074:	e063      	b.n	800213e <HAL_ADC_Start_DMA+0xf2>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 ff20 	bl	8002ec4 <ADC_Enable>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d14f      	bne.n	800212e <HAL_ADC_Start_DMA+0xe2>
=======
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fe6f 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d167      	bne.n	800229c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start_DMA+0x2a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e063      	b.n	80022a2 <HAL_ADC_Start_DMA+0xf2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 ff20 	bl	8003028 <ADC_Enable>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14f      	bne.n	8002292 <HAL_ADC_Start_DMA+0xe2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f023 0206 	bic.w	r2, r3, #6
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_Start_DMA+0x76>
=======
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f023 0206 	bic.w	r2, r3, #6
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58
 800221e:	e002      	b.n	8002226 <HAL_ADC_Start_DMA+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_ADC_Start_DMA+0xfc>)
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_ADC_Start_DMA+0x100>)
 80020d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_ADC_Start_DMA+0x104>)
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_ADC_Start_DMA+0xfc>)
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <HAL_ADC_Start_DMA+0x100>)
 8002234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_Start_DMA+0x104>)
 800223c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	221c      	movs	r2, #28
 80020e0:	601a      	str	r2, [r3, #0]
=======
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	221c      	movs	r2, #28
 8002244:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	605a      	str	r2, [r3, #4]
=======
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0210 	orr.w	r2, r2, #16
 800225c:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
<<<<<<< HEAD
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	60da      	str	r2, [r3, #12]
=======
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
<<<<<<< HEAD
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3340      	adds	r3, #64	; 0x40
 8002114:	4619      	mov	r1, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f001 fa89 	bl	8003630 <HAL_DMA_Start_IT>
 800211e:	4603      	mov	r3, r0
 8002120:	75fb      	strb	r3, [r7, #23]
=======
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3340      	adds	r3, #64	; 0x40
 8002278:	4619      	mov	r1, r3
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f001 fa89 	bl	8003794 <HAL_DMA_Start_IT>
 8002282:	4603      	mov	r3, r0
 8002284:	75fb      	strb	r3, [r7, #23]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fde2 	bl	8001cf0 <LL_ADC_REG_StartConversion>
 800212c:	e006      	b.n	800213c <HAL_ADC_Start_DMA+0xf0>
=======
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fde2 	bl	8001e54 <LL_ADC_REG_StartConversion>
 8002290:	e006      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002136:	e001      	b.n	800213c <HAL_ADC_Start_DMA+0xf0>
=======
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Start_DMA+0xf0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 8002138:	2302      	movs	r3, #2
 800213a:	75fb      	strb	r3, [r7, #23]
=======
 800229c:	2302      	movs	r3, #2
 800229e:	75fb      	strb	r3, [r7, #23]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800213c:	7dfb      	ldrb	r3, [r7, #23]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08003077 	.word	0x08003077
 800214c:	0800314f 	.word	0x0800314f
 8002150:	0800316b 	.word	0x0800316b

08002154 <HAL_ADC_Stop_DMA>:
=======
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	080031db 	.word	0x080031db
 80022b0:	080032b3 	.word	0x080032b3
 80022b4:	080032cf 	.word	0x080032cf

080022b8 <HAL_ADC_Stop_DMA>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
=======
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Stop_DMA+0x16>
 8002166:	2302      	movs	r3, #2
 8002168:	e051      	b.n	800220e <HAL_ADC_Stop_DMA+0xba>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Stop_DMA+0x16>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e051      	b.n	8002372 <HAL_ADC_Stop_DMA+0xba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
<<<<<<< HEAD
 8002172:	2103      	movs	r1, #3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fde9 	bl	8002d4c <ADC_ConversionStop>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
=======
 80022d6:	2103      	movs	r1, #3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fde9 	bl	8002eb0 <ADC_ConversionStop>
 80022de:	4603      	mov	r3, r0
 80022e0:	73fb      	strb	r3, [r7, #15]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d13f      	bne.n	8002204 <HAL_ADC_Stop_DMA+0xb0>
=======
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13f      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
<<<<<<< HEAD
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	60da      	str	r2, [r3, #12]
=======
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d10f      	bne.n	80021c2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 fabd 	bl	8003726 <HAL_DMA_Abort>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d10f      	bne.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fabd 	bl	800388a <HAL_DMA_Abort>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0210 	bic.w	r2, r2, #16
 80021d0:	605a      	str	r2, [r3, #4]
=======
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 feed 	bl	8002fb8 <ADC_Disable>
 80021de:	4603      	mov	r3, r0
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e002      	b.n	80021ea <HAL_ADC_Stop_DMA+0x96>
=======
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 feed 	bl	800311c <ADC_Disable>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e002      	b.n	800234e <HAL_ADC_Stop_DMA+0x96>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      (void)ADC_Disable(hadc);
<<<<<<< HEAD
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fee7 	bl	8002fb8 <ADC_Disable>
=======
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fee7 	bl	800311c <ADC_Disable>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
<<<<<<< HEAD
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_Stop_DMA+0xb0>
=======
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Stop_DMA+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_ADC_IRQHandler>:
=======
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_ADC_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002216:	b580      	push	{r7, lr}
 8002218:	b088      	sub	sp, #32
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	617b      	str	r3, [r7, #20]
=======
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
<<<<<<< HEAD
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d017      	beq.n	800226c <HAL_ADC_IRQHandler+0x56>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d012      	beq.n	800226c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
<<<<<<< HEAD
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 f854 	bl	800330c <HAL_ADCEx_EndOfSamplingCallback>
=======
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 f854 	bl	8003470 <HAL_ADCEx_EndOfSamplingCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
<<<<<<< HEAD
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
=======
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2202      	movs	r2, #2
 80023ce:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
<<<<<<< HEAD
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_ADC_IRQHandler+0x6a>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002286:	2b00      	cmp	r3, #0
 8002288:	d05d      	beq.n	8002346 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d058      	beq.n	8002346 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x6a>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d05d      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d058      	beq.n	80024aa <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
<<<<<<< HEAD
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbd2 	bl	8001a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03d      	beq.n	8002338 <HAL_ADC_IRQHandler+0x122>
=======
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbd2 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d03d      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
<<<<<<< HEAD
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ca:	d035      	beq.n	8002338 <HAL_ADC_IRQHandler+0x122>
=======
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	d035      	beq.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
<<<<<<< HEAD
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d12e      	bne.n	8002338 <HAL_ADC_IRQHandler+0x122>
=======
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b08      	cmp	r3, #8
 800243c:	d12e      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fd2e 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_ADC_IRQHandler+0x10a>
=======
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fd2e 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11a      	bne.n	8002484 <HAL_ADC_IRQHandler+0x10a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
<<<<<<< HEAD
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020c 	bic.w	r2, r2, #12
 80022f8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d112      	bne.n	8002338 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
 800231e:	e00b      	b.n	8002338 <HAL_ADC_IRQHandler+0x122>
=======
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 020c 	bic.w	r2, r2, #12
 800245c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d112      	bne.n	800249c <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
 8002482:	e00b      	b.n	800249c <HAL_ADC_IRQHandler+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe fc6d 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
=======
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe fee7 	bl	8001270 <HAL_ADC_ConvCpltCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
<<<<<<< HEAD
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
=======
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	220c      	movs	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
<<<<<<< HEAD
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_ADC_IRQHandler+0x144>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002360:	2b00      	cmp	r3, #0
 8002362:	d074      	beq.n	800244e <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06f      	beq.n	800244e <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_ADC_IRQHandler+0x144>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d074      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06f      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
<<<<<<< HEAD
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fbb2 	bl	8001af4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002390:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fb5f 	bl	8001a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 800239c:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
=======
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbb2 	bl	8001c58 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024f4:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fb5f 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002500:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
<<<<<<< HEAD
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d049      	beq.n	8002440 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x1b0>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d041      	beq.n	8002440 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d13c      	bne.n	8002440 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b40      	cmp	r3, #64	; 0x40
 80023d2:	d135      	bne.n	8002440 <HAL_ADC_IRQHandler+0x22a>
=======
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d049      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_IRQHandler+0x1b0>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d041      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13c      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d135      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
<<<<<<< HEAD
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12e      	bne.n	8002440 <HAL_ADC_IRQHandler+0x22a>
=======
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d12e      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fcd1 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11a      	bne.n	8002428 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002400:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d112      	bne.n	8002440 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
 8002426:	e00b      	b.n	8002440 <HAL_ADC_IRQHandler+0x22a>
=======
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fcd1 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11a      	bne.n	800258c <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002564:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_IRQHandler+0x22a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 ff3b 	bl	80032bc <HAL_ADCEx_InjectedConvCpltCallback>
=======
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 ff3b 	bl	8003420 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
<<<<<<< HEAD
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2260      	movs	r2, #96	; 0x60
 800244c:	601a      	str	r2, [r3, #0]
=======
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2260      	movs	r2, #96	; 0x60
 80025b0:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
<<<<<<< HEAD
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d011      	beq.n	800247c <HAL_ADC_IRQHandler+0x266>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d011      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00c      	beq.n	80025e0 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f891 	bl	8002596 <HAL_ADC_LevelOutOfWindowCallback>
=======
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f891 	bl	80026fa <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
<<<<<<< HEAD
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	601a      	str	r2, [r3, #0]
=======
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
<<<<<<< HEAD
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d012      	beq.n	80024ac <HAL_ADC_IRQHandler+0x296>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
<<<<<<< HEAD
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 ff21 	bl	80032e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
=======
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ff21 	bl	8003448 <HAL_ADCEx_LevelOutOfWindow2Callback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
<<<<<<< HEAD
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024aa:	601a      	str	r2, [r3, #0]
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
<<<<<<< HEAD
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_ADC_IRQHandler+0x2c6>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
<<<<<<< HEAD
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 ff13 	bl	80032f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
=======
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 ff13 	bl	800345c <HAL_ADCEx_LevelOutOfWindow3Callback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
<<<<<<< HEAD
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
=======
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
<<<<<<< HEAD
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d02b      	beq.n	800253e <HAL_ADC_IRQHandler+0x328>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d026      	beq.n	800253e <HAL_ADC_IRQHandler+0x328>
=======
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02b      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d026      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x328>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
<<<<<<< HEAD
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	e009      	b.n	8002512 <HAL_ADC_IRQHandler+0x2fc>
=======
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e009      	b.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
<<<<<<< HEAD
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fae8 	bl	8001ad8 <LL_ADC_REG_GetDMATransfer>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 800250e:	2301      	movs	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
=======
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fae8 	bl	8001c3c <LL_ADC_REG_GetDMATransfer>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    if (overrun_error == 1UL)
<<<<<<< HEAD
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10e      	bne.n	8002536 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f043 0202 	orr.w	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10e      	bne.n	800269a <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f83a 	bl	80025aa <HAL_ADC_ErrorCallback>
=======
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f83a 	bl	800270e <HAL_ADC_ErrorCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2210      	movs	r2, #16
 800253c:	601a      	str	r2, [r3, #0]
=======
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2210      	movs	r2, #16
 80026a0:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
<<<<<<< HEAD
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d018      	beq.n	800257a <HAL_ADC_IRQHandler+0x364>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	2b00      	cmp	r3, #0
 8002550:	d013      	beq.n	800257a <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f043 0208 	orr.w	r2, r3, #8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002572:	601a      	str	r2, [r3, #0]
=======
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f043 0208 	orr.w	r2, r3, #8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
<<<<<<< HEAD
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 feab 	bl	80032d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
=======
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 feab 	bl	8003434 <HAL_ADCEx_InjectedQueueOverflowCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
<<<<<<< HEAD
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_ADC_ConvHalfCpltCallback>:
=======
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
=======
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_ADC_LevelOutOfWindowCallback>:
=======
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
=======
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_ADC_ErrorCallback>:
=======
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_ADC_ErrorCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
=======
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_ADC_ConfigChannel>:
=======
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ADC_ConfigChannel>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0b6      	sub	sp, #216	; 0xd8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
=======
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b6      	sub	sp, #216	; 0xd8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
=======
 800272e:	2300      	movs	r3, #0
 8002730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x22>
 80025de:	2302      	movs	r3, #2
 80025e0:	e39f      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x762>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e39f      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x762>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fba6 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8384 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	f7ff fa39 	bl	8001a80 <LL_ADC_REG_SetSequencerRanks>
=======
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fba6 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8384 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	f7ff fa39 	bl	8001be4 <LL_ADC_REG_SetSequencerRanks>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fb94 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002618:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fbb4 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8002626:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 81a6 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 81a1 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x3c0>
=======
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fb94 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 800277c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbb4 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 800278a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 81a6 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 81a1 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
<<<<<<< HEAD
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	461a      	mov	r2, r3
 800264c:	f7ff fa65 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>
=======
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fa65 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
<<<<<<< HEAD
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	08db      	lsrs	r3, r3, #3
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b04      	cmp	r3, #4
 8002670:	d00a      	beq.n	8002688 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002682:	f7ff f995 	bl	80019b0 <LL_ADC_SetOffset>
 8002686:	e17b      	b.n	8002980 <HAL_ADC_ConfigChannel+0x3c0>
=======
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00a      	beq.n	80027ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027e6:	f7ff f995 	bl	8001b14 <LL_ADC_SetOffset>
 80027ea:	e17b      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
<<<<<<< HEAD
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f9b2 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0xf4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f9a7 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	e01e      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x132>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f99c 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f9b2 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_ADC_ConfigChannel+0xf4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9a7 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	f003 021f 	and.w	r2, r3, #31
 8002816:	e01e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x132>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f99c 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 80026c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 800282a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 80026d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
=======
 8002836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800283a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 80026da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e004      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80026e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_ConfigChannel+0x14a>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	e018      	b.n	800273c <HAL_ADC_ConfigChannel+0x17c>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800271e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002726:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e004      	b.n	800273c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f96b 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f94f 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_ADC_ConfigChannel+0x1ba>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f944 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	0e9b      	lsrs	r3, r3, #26
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	e01e      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1f8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f939 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002798:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800279c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e004      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80027ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x210>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	e018      	b.n	8002802 <HAL_ADC_ConfigChannel+0x242>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e004      	b.n	8002802 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80027f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	429a      	cmp	r2, r3
 8002804:	d106      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f908 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f8ec 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x280>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f8e1 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	e01e      	b.n	800287e <HAL_ADC_ConfigChannel+0x2be>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f8d6 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800285e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e004      	b.n	800287c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x2d6>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0e9b      	lsrs	r3, r3, #26
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	e016      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x304>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80028ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2102      	movs	r1, #2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff f8a7 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2103      	movs	r1, #3
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f88b 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x342>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2103      	movs	r1, #3
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f880 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	e017      	b.n	8002932 <HAL_ADC_ConfigChannel+0x372>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2103      	movs	r1, #3
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f875 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002914:	fa93 f3a3 	rbit	r3, r3
 8002918:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800291a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800291e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e003      	b.n	8002930 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_ConfigChannel+0x38a>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	e011      	b.n	800296e <HAL_ADC_ConfigChannel+0x3ae>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	429a      	cmp	r2, r3
 8002970:	d106      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	2103      	movs	r1, #3
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f852 	bl	8001a24 <LL_ADC_SetOffsetState>
=======
 800283e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e004      	b.n	8002854 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800284a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_ConfigChannel+0x14a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	e018      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800288a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e004      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f96b 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f94f 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <HAL_ADC_ConfigChannel+0x1ba>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f944 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028d4:	4603      	mov	r3, r0
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	e01e      	b.n	800291c <HAL_ADC_ConfigChannel+0x1f8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f939 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e004      	b.n	800291a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d105      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x210>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	e018      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800294c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e004      	b.n	8002966 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800295c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f908 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2102      	movs	r1, #2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f8ec 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002984:	4603      	mov	r3, r0
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x280>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f8e1 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	e01e      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2be>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f8d6 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80029ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e004      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2d6>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	e016      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e004      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2102      	movs	r1, #2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f8a7 	bl	8001b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f88b 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x342>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f880 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	e017      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x372>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f875 	bl	8001b5c <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x38a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	e011      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3ae>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e003      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2103      	movs	r1, #3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f852 	bl	8001b88 <LL_ADC_SetOffsetState>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f98d 	bl	8001ca4 <LL_ADC_IsEnabled>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 81c2 	bne.w	8002d16 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f7ff f8e6 	bl	8001b70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a8e      	ldr	r2, [pc, #568]	; (8002be4 <HAL_ADC_ConfigChannel+0x624>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	f040 8130 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x650>
=======
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f98d 	bl	8001e08 <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 81c2 	bne.w	8002e7a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f7ff f8e6 	bl	8001cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	; (8002d48 <HAL_ADC_ConfigChannel+0x624>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8130 	bne.w	8002d74 <HAL_ADC_ConfigChannel+0x650>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x418>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	2b09      	cmp	r3, #9
 80029ce:	bf94      	ite	ls
 80029d0:	2301      	movls	r3, #1
 80029d2:	2300      	movhi	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e019      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x44c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80029f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2b09      	cmp	r3, #9
 8002a04:	bf94      	ite	ls
 8002a06:	2301      	movls	r3, #1
 8002a08:	2300      	movhi	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d079      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x46c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	3301      	adds	r3, #1
 8002a24:	069b      	lsls	r3, r3, #26
 8002a26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a2a:	e015      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x498>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a44:	2320      	movs	r3, #32
 8002a46:	e003      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	069b      	lsls	r3, r3, #26
 8002a54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x4b8>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	e017      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x4e8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e003      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	ea42 0103 	orr.w	r1, r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x50e>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	051b      	lsls	r3, r3, #20
 8002acc:	e018      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x540>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	430b      	orrs	r3, r1
 8002b02:	e080      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x560>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	069b      	lsls	r3, r3, #26
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	e015      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x58c>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e003      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x5ac>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	e017      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x5dc>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	61fb      	str	r3, [r7, #28]
  return result;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x608>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b1e      	subs	r3, #30
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	e01d      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x644>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	613b      	str	r3, [r7, #16]
  return result;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e005      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x630>
 8002be4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c04:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7fe ff85 	bl	8001b1a <LL_ADC_SetChannelSamplingTime>
=======
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10b      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x418>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	bf94      	ite	ls
 8002b34:	2301      	movls	r3, #1
 8002b36:	2300      	movhi	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e019      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x44c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	bf94      	ite	ls
 8002b6a:	2301      	movls	r3, #1
 8002b6c:	2300      	movhi	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d079      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x46c>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	069b      	lsls	r3, r3, #26
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	e015      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x498>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e003      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x4b8>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	e017      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4e8>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be4:	fa93 f3a3 	rbit	r3, r3
 8002be8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e003      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x50e>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	3301      	adds	r3, #1
 8002c24:	f003 021f 	and.w	r2, r3, #31
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	051b      	lsls	r3, r3, #20
 8002c30:	e018      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x540>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c64:	430b      	orrs	r3, r1
 8002c66:	e080      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x560>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c82:	e015      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x58c>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	069b      	lsls	r3, r3, #26
 8002cac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x5ac>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	e017      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5dc>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	61fb      	str	r3, [r7, #28]
  return result;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e003      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x608>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	051b      	lsls	r3, r3, #20
 8002d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	e01d      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x644>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	613b      	str	r3, [r7, #16]
  return result;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e005      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x630>
 8002d48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b1e      	subs	r3, #30
 8002d62:	051b      	lsls	r3, r3, #20
 8002d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d68:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fe ff85 	bl	8001c7e <LL_ADC_SetChannelSamplingTime>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b45      	ldr	r3, [pc, #276]	; (8002d2c <HAL_ADC_ConfigChannel+0x76c>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d07c      	beq.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
=======
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <HAL_ADC_ConfigChannel+0x76c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d07c      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
<<<<<<< HEAD
 8002c1c:	4844      	ldr	r0, [pc, #272]	; (8002d30 <HAL_ADC_ConfigChannel+0x770>)
 8002c1e:	f7fe feb9 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8002c22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
=======
 8002d80:	4844      	ldr	r0, [pc, #272]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002d82:	f7fe feb9 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 8002d86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8002c26:	4843      	ldr	r0, [pc, #268]	; (8002d34 <HAL_ADC_ConfigChannel+0x774>)
 8002c28:	f7ff f83c 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d15e      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x730>
=======
 8002d8a:	4843      	ldr	r0, [pc, #268]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002d8c:	f7ff f83c 	bl	8001e08 <LL_ADC_IsEnabled>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d15e      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x730>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
<<<<<<< HEAD
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <HAL_ADC_ConfigChannel+0x778>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d127      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x6cc>
 8002c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d121      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <HAL_ADC_ConfigChannel+0x774>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d161      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4834      	ldr	r0, [pc, #208]	; (8002d30 <HAL_ADC_ConfigChannel+0x770>)
 8002c5e:	f7fe fe86 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
=======
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <HAL_ADC_ConfigChannel+0x778>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d127      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
 8002da0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d161      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4834      	ldr	r0, [pc, #208]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002dc2:	f7fe fe86 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_ADC_ConfigChannel+0x77c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	4a35      	ldr	r2, [pc, #212]	; (8002d40 <HAL_ADC_ConfigChannel+0x780>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8a:	e044      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
=======
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_ADC_ConfigChannel+0x77c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_ADC_ConfigChannel+0x780>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dee:	e044      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
<<<<<<< HEAD
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_ADC_ConfigChannel+0x784>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d113      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x6fe>
 8002c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <HAL_ADC_ConfigChannel+0x774>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d134      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	481e      	ldr	r0, [pc, #120]	; (8002d30 <HAL_ADC_ConfigChannel+0x770>)
 8002cb8:	f7fe fe59 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cbc:	e02b      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_ADC_ConfigChannel+0x788>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d126      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d120      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_ADC_ConfigChannel+0x774>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11b      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4811      	ldr	r0, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x770>)
 8002cea:	f7fe fe40 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 8002cee:	e012      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
=======
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_ADC_ConfigChannel+0x784>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d113      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d134      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481e      	ldr	r0, [pc, #120]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e1c:	f7fe fe59 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e02b      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <HAL_ADC_ConfigChannel+0x788>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d126      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d120      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_ADC_ConfigChannel+0x774>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d11b      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4811      	ldr	r0, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x770>)
 8002e4e:	f7fe fe40 	bl	8001ad2 <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e012      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x756>
=======
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e66:	e008      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x756>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
=======
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8002d1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	37d8      	adds	r7, #216	; 0xd8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	80080000 	.word	0x80080000
 8002d30:	50040300 	.word	0x50040300
 8002d34:	50040000 	.word	0x50040000
 8002d38:	c7520000 	.word	0xc7520000
 8002d3c:	2000006c 	.word	0x2000006c
 8002d40:	053e2d63 	.word	0x053e2d63
 8002d44:	cb840000 	.word	0xcb840000
 8002d48:	80000001 	.word	0x80000001

08002d4c <ADC_ConversionStop>:
=======
 8002e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	37d8      	adds	r7, #216	; 0xd8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	80080000 	.word	0x80080000
 8002e94:	50040300 	.word	0x50040300
 8002e98:	50040000 	.word	0x50040000
 8002e9c:	c7520000 	.word	0xc7520000
 8002ea0:	2000006c 	.word	0x2000006c
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	cb840000 	.word	0xcb840000
 8002eac:	80000001 	.word	0x80000001

08002eb0 <ADC_ConversionStop>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
<<<<<<< HEAD
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
=======
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
<<<<<<< HEAD
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
=======
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe ffec 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002d68:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f80d 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8098 	beq.w	8002eb4 <ADC_ConversionStop+0x168>
=======
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ffec 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002ecc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f80d 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002ed8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8098 	beq.w	8003018 <ADC_ConversionStop+0x168>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
<<<<<<< HEAD
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02a      	beq.n	8002de8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7e5b      	ldrb	r3, [r3, #25]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d126      	bne.n	8002de8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7e1b      	ldrb	r3, [r3, #24]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d122      	bne.n	8002de8 <ADC_ConversionStop+0x9c>
=======
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02a      	beq.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e5b      	ldrb	r3, [r3, #25]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d126      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7e1b      	ldrb	r3, [r3, #24]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d122      	bne.n	8002f4c <ADC_ConversionStop+0x9c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
<<<<<<< HEAD
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002da6:	e014      	b.n	8002dd2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <ADC_ConversionStop+0x174>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d90d      	bls.n	8002dcc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e074      	b.n	8002eb6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d1e3      	bne.n	8002da8 <ADC_ConversionStop+0x5c>
=======
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f0a:	e014      	b.n	8002f36 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4a45      	ldr	r2, [pc, #276]	; (8003024 <ADC_ConversionStop+0x174>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d90d      	bls.n	8002f30 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e074      	b.n	800301a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d1e3      	bne.n	8002f0c <ADC_ConversionStop+0x5c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
<<<<<<< HEAD
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
=======
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
<<<<<<< HEAD
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d014      	beq.n	8002e18 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe ffa4 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe ff61 	bl	8001cca <LL_ADC_IsDisableOngoing>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe ff80 	bl	8001d18 <LL_ADC_REG_StopConversion>
=======
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d014      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe ffa4 	bl	8001ea4 <LL_ADC_REG_IsConversionOngoing>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff61 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe ff80 	bl	8001e7c <LL_ADC_REG_StopConversion>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
<<<<<<< HEAD
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d014      	beq.n	8002e48 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe ffb3 	bl	8001d8e <LL_ADC_INJ_IsConversionOngoing>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ff49 	bl	8001cca <LL_ADC_IsDisableOngoing>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe ff8f 	bl	8001d66 <LL_ADC_INJ_StopConversion>
=======
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d014      	beq.n	8002fac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe ffb3 	bl	8001ef2 <LL_ADC_INJ_IsConversionOngoing>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe ff49 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ff8f 	bl	8001eca <LL_ADC_INJ_StopConversion>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
<<<<<<< HEAD
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d005      	beq.n	8002e5a <ADC_ConversionStop+0x10e>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d105      	bne.n	8002e60 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e54:	230c      	movs	r3, #12
 8002e56:	617b      	str	r3, [r7, #20]
        break;
 8002e58:	e005      	b.n	8002e66 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	617b      	str	r3, [r7, #20]
        break;
 8002e5e:	e002      	b.n	8002e66 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e60:	2304      	movs	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
        break;
 8002e64:	bf00      	nop
=======
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d005      	beq.n	8002fbe <ADC_ConversionStop+0x10e>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d105      	bne.n	8002fc4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002fb8:	230c      	movs	r3, #12
 8002fba:	617b      	str	r3, [r7, #20]
        break;
 8002fbc:	e005      	b.n	8002fca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	617b      	str	r3, [r7, #20]
        break;
 8002fc2:	e002      	b.n	8002fca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	617b      	str	r3, [r7, #20]
        break;
 8002fc8:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002e66:	f7fe fd57 	bl	8001918 <HAL_GetTick>
 8002e6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e6c:	e01b      	b.n	8002ea6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e6e:	f7fe fd53 	bl	8001918 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d914      	bls.n	8002ea6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1dc      	bne.n	8002e6e <ADC_ConversionStop+0x122>
=======
 8002fca:	f7fe fd33 	bl	8001a34 <HAL_GetTick>
 8002fce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fd0:	e01b      	b.n	800300a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002fd2:	f7fe fd2f 	bl	8001a34 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d914      	bls.n	800300a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1dc      	bne.n	8002fd2 <ADC_ConversionStop+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3720      	adds	r7, #32
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	a33fffff 	.word	0xa33fffff

08002ec4 <ADC_Enable>:
=======
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	a33fffff 	.word	0xa33fffff

08003028 <ADC_Enable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
=======
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe fee5 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d15e      	bne.n	8002f9e <ADC_Enable+0xda>
=======
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fee5 	bl	8001e08 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d15e      	bne.n	8003102 <ADC_Enable+0xda>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
<<<<<<< HEAD
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <ADC_Enable+0xe4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <ADC_Enable+0x46>
=======
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b30      	ldr	r3, [pc, #192]	; (800310c <ADC_Enable+0xe4>)
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <ADC_Enable+0x46>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	f043 0210 	orr.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e04a      	b.n	8002fa0 <ADC_Enable+0xdc>
=======
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e04a      	b.n	8003104 <ADC_Enable+0xdc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fea0 	bl	8001c54 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f14:	4825      	ldr	r0, [pc, #148]	; (8002fac <ADC_Enable+0xe8>)
 8002f16:	f7fe fd3d 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00f      	beq.n	8002f44 <ADC_Enable+0x80>
=======
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fea0 	bl	8001db8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003078:	4825      	ldr	r0, [pc, #148]	; (8003110 <ADC_Enable+0xe8>)
 800307a:	f7fe fd3d 	bl	8001af8 <LL_ADC_GetCommonPathInternalCh>
 800307e:	4603      	mov	r3, r0
 8003080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <ADC_Enable+0x80>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <ADC_Enable+0xec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <ADC_Enable+0xf0>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	3301      	adds	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f36:	e002      	b.n	8002f3e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <ADC_Enable+0x74>
=======
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <ADC_Enable+0xec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <ADC_Enable+0xf0>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x74>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002f44:	f7fe fce8 	bl	8001918 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f4a:	e021      	b.n	8002f90 <ADC_Enable+0xcc>
=======
 80030a8:	f7fe fcc4 	bl	8001a34 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ae:	e021      	b.n	80030f4 <ADC_Enable+0xcc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fe fea7 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe fe77 	bl	8001c54 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f66:	f7fe fcd7 	bl	8001918 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d90d      	bls.n	8002f90 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0210 	orr.w	r2, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d1d6      	bne.n	8002f4c <ADC_Enable+0x88>
=======
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fea7 	bl	8001e08 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fe77 	bl	8001db8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7fe fcb3 	bl	8001a34 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d90d      	bls.n	80030f4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d1d6      	bne.n	80030b0 <ADC_Enable+0x88>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	8000003f 	.word	0x8000003f
 8002fac:	50040300 	.word	0x50040300
 8002fb0:	2000006c 	.word	0x2000006c
 8002fb4:	053e2d63 	.word	0x053e2d63

08002fb8 <ADC_Disable>:
=======
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	8000003f 	.word	0x8000003f
 8003110:	50040300 	.word	0x50040300
 8003114:	2000006c 	.word	0x2000006c
 8003118:	053e2d63 	.word	0x053e2d63

0800311c <ADC_Disable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fe80 	bl	8001cca <LL_ADC_IsDisableOngoing>
 8002fca:	60f8      	str	r0, [r7, #12]
=======
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fe80 	bl	8001e2e <LL_ADC_IsDisableOngoing>
 800312e:	60f8      	str	r0, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe fe67 	bl	8001ca4 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d047      	beq.n	800306c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d144      	bne.n	800306c <ADC_Disable+0xb4>
=======
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe fe67 	bl	8001e08 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d047      	beq.n	80031d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d144      	bne.n	80031d0 <ADC_Disable+0xb4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
<<<<<<< HEAD
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030d 	and.w	r3, r3, #13
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10c      	bne.n	800300a <ADC_Disable+0x52>
=======
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030d 	and.w	r3, r3, #13
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10c      	bne.n	800316e <ADC_Disable+0x52>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
<<<<<<< HEAD
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fe41 	bl	8001c7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2203      	movs	r2, #3
 8003000:	601a      	str	r2, [r3, #0]
=======
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fe41 	bl	8001de0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2203      	movs	r2, #3
 8003164:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003002:	f7fe fc89 	bl	8001918 <HAL_GetTick>
 8003006:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003008:	e029      	b.n	800305e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003026:	f7fe fc77 	bl	8001918 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d914      	bls.n	800305e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00d      	beq.n	800305e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1dc      	bne.n	8003026 <ADC_Disable+0x6e>
=======
 8003166:	f7fe fc65 	bl	8001a34 <HAL_GetTick>
 800316a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800316c:	e029      	b.n	80031c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0210 	orr.w	r2, r3, #16
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e023      	b.n	80031d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800318a:	f7fe fc53 	bl	8001a34 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d914      	bls.n	80031c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0210 	orr.w	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e007      	b.n	80031d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1dc      	bne.n	800318a <ADC_Disable+0x6e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <ADC_DMAConvCplt>:
=======
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ADC_DMAConvCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800308c:	2b00      	cmp	r3, #0
 800308e:	d14b      	bne.n	8003128 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14b      	bne.n	800328c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d021      	beq.n	80030ee <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fcd3 	bl	8001a5a <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d032      	beq.n	8003120 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12b      	bne.n	8003120 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11f      	bne.n	8003120 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
 80030ec:	e018      	b.n	8003120 <ADC_DMAConvCplt+0xaa>
=======
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fcd3 	bl	8001bbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d032      	beq.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d12b      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11f      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
 8003250:	e018      	b.n	8003284 <ADC_DMAConvCplt+0xaa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d111      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7fd fd79 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
=======
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7fd fff3 	bl	8001270 <HAL_ADC_ConvCpltCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8003126:	e00e      	b.n	8003146 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fa38 	bl	80025aa <HAL_ADC_ErrorCallback>
}
 800313a:	e004      	b.n	8003146 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <ADC_DMAHalfConvCplt>:
=======
 800328a:	e00e      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff fa38 	bl	800270e <HAL_ADC_ErrorCallback>
}
 800329e:	e004      	b.n	80032aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <ADC_DMAHalfConvCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	60fb      	str	r3, [r7, #12]
=======
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fa10 	bl	8002582 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <ADC_DMAError>:
=======
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fa10 	bl	80026e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <ADC_DMAError>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	659a      	str	r2, [r3, #88]	; 0x58
=======
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fa0a 	bl	80025aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <LL_ADC_StartCalibration>:
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e4:	d101      	bne.n	80031ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADCEx_Calibration_Start>:
=======
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fa0a 	bl	800270e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <LL_ADC_StartCalibration>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800331e:	4313      	orrs	r3, r2
 8003320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_IsCalibrationOnGoing>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003348:	d101      	bne.n	800334e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_ADCEx_Calibration_Start>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
<<<<<<< HEAD
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
=======
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
=======
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_ADCEx_Calibration_Start+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e04d      	b.n	80032b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e04d      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
<<<<<<< HEAD
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fecb 	bl	8002fb8 <ADC_Disable>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d136      	bne.n	800329a <HAL_ADCEx_Calibration_Start+0xa2>
=======
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fecb 	bl	800311c <ADC_Disable>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d136      	bne.n	80033fe <HAL_ADCEx_Calibration_Start+0xa2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	f043 0202 	orr.w	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003398:	f023 0302 	bic.w	r3, r3, #2
 800339c:	f043 0202 	orr.w	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
<<<<<<< HEAD
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ffa9 	bl	800319e <LL_ADC_StartCalibration>
=======
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ffa9 	bl	8003302 <LL_ADC_StartCalibration>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
<<<<<<< HEAD
 800324c:	e014      	b.n	8003278 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d90d      	bls.n	8003278 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f023 0312 	bic.w	r3, r3, #18
 8003264:	f043 0210 	orr.w	r2, r3, #16
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80033b0:	e014      	b.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_ADCEx_Calibration_Start+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d90d      	bls.n	80033dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f023 0312 	bic.w	r3, r3, #18
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e01b      	b.n	80032b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffa7 	bl	80031d0 <LL_ADC_IsCalibrationOnGoing>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e2      	bne.n	800324e <HAL_ADCEx_Calibration_Start+0x56>
=======
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e01b      	b.n	8003414 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ffa7 	bl	8003334 <LL_ADC_IsCalibrationOnGoing>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e2      	bne.n	80033b2 <HAL_ADCEx_Calibration_Start+0x56>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f023 0303 	bic.w	r3, r3, #3
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
 8003298:	e005      	b.n	80032a6 <HAL_ADCEx_Calibration_Start+0xae>
=======
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f023 0303 	bic.w	r3, r3, #3
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
 80033fc:	e005      	b.n	800340a <HAL_ADCEx_Calibration_Start+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f043 0210 	orr.w	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00026aaa 	.word	0x00026aaa

080032bc <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	00026aaa 	.word	0x00026aaa

08003420 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
=======
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
=======
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_ADCEx_InjectedQueueOverflowCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
=======
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
=======
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADCEx_LevelOutOfWindow2Callback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
=======
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
=======
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_ADCEx_LevelOutOfWindow3Callback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
=======
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_ADCEx_EndOfSamplingCallback>:
=======
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_ADCEx_EndOfSamplingCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
=======
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <__NVIC_SetPriorityGrouping>:
=======
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <__NVIC_SetPriorityGrouping>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
=======
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
=======
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
=======
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
=======
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
=======
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_NVIC_SetPriorityGrouping>:
=======
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
=======
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff4c 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_NVIC_SetPriority>:
=======
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ff4c 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_NVIC_SetPriority>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	73fb      	strb	r3, [r7, #15]
=======
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	73fb      	strb	r3, [r7, #15]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800349e:	f7ff ff63 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f7ff ffb3 	bl	8003414 <NVIC_EncodePriority>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff82 	bl	80033c0 <__NVIC_SetPriority>
}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_NVIC_EnableIRQ>:
=======
 8003602:	f7ff ff63 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003606:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f7ff ffb3 	bl	8003578 <NVIC_EncodePriority>
 8003612:	4602      	mov	r2, r0
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff82 	bl	8003524 <__NVIC_SetPriority>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_NVIC_EnableIRQ>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
=======
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff56 	bl	8003384 <__NVIC_EnableIRQ>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Init>:
=======
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff56 	bl	80034e8 <__NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
=======
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< HEAD
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e08e      	b.n	8003610 <HAL_DMA_Init+0x130>
=======
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e08e      	b.n	8003774 <HAL_DMA_Init+0x130>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_DMA_Init+0x138>)
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d80f      	bhi.n	800351e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_DMA_Init+0x13c>)
 8003506:	4413      	add	r3, r2
 8003508:	4a45      	ldr	r2, [pc, #276]	; (8003620 <HAL_DMA_Init+0x140>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	009a      	lsls	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a42      	ldr	r2, [pc, #264]	; (8003624 <HAL_DMA_Init+0x144>)
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
 800351c:	e00e      	b.n	800353c <HAL_DMA_Init+0x5c>
=======
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_DMA_Init+0x138>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_DMA_Init+0x13c>)
 800366a:	4413      	add	r3, r2
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_DMA_Init+0x144>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
<<<<<<< HEAD
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_DMA_Init+0x148>)
 8003526:	4413      	add	r3, r2
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_DMA_Init+0x140>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	009a      	lsls	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a3c      	ldr	r2, [pc, #240]	; (800362c <HAL_DMA_Init+0x14c>)
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_DMA_Init+0x148>)
 800368a:	4413      	add	r3, r2
 800368c:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <HAL_DMA_Init+0x140>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_DMA_Init+0x14c>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
=======
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]
=======
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< HEAD
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fa80 	bl	8003a94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359c:	d102      	bne.n	80035a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
=======
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa80 	bl	8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003700:	d102      	bne.n	8003708 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< HEAD
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_DMA_Init+0x106>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d80c      	bhi.n	80035e6 <HAL_DMA_Init+0x106>
=======
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003714:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_DMA_Init+0x106>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d80c      	bhi.n	800374a <HAL_DMA_Init+0x106>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< HEAD
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa9f 	bl	8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	e008      	b.n	80035f8 <HAL_DMA_Init+0x118>
=======
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa9f 	bl	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	e008      	b.n	800375c <HAL_DMA_Init+0x118>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
<<<<<<< HEAD
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40020407 	.word	0x40020407
 800361c:	bffdfff8 	.word	0xbffdfff8
 8003620:	cccccccd 	.word	0xcccccccd
 8003624:	40020000 	.word	0x40020000
 8003628:	bffdfbf8 	.word	0xbffdfbf8
 800362c:	40020400 	.word	0x40020400

08003630 <HAL_DMA_Start_IT>:
=======
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020407 	.word	0x40020407
 8003780:	bffdfff8 	.word	0xbffdfff8
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	40020000 	.word	0x40020000
 800378c:	bffdfbf8 	.word	0xbffdfbf8
 8003790:	40020400 	.word	0x40020400

08003794 <HAL_DMA_Start_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
<<<<<<< HEAD
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
=======
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Start_IT+0x20>
 800364c:	2302      	movs	r3, #2
 800364e:	e066      	b.n	800371e <HAL_DMA_Start_IT+0xee>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d155      	bne.n	8003710 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9c5 	bl	8003a18 <DMA_SetConfig>
=======
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Start_IT+0x20>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e066      	b.n	8003882 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d155      	bne.n	8003874 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f9c5 	bl	8003b7c <DMA_SetConfig>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 020e 	orr.w	r2, r2, #14
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_DMA_Start_IT+0x98>
=======
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 020e 	orr.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00f      	b.n	800382c <HAL_DMA_Start_IT+0x98>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 020a 	orr.w	r2, r2, #10
 80036c6:	601a      	str	r2, [r3, #0]
=======
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 020a 	orr.w	r2, r2, #10
 800382a:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< HEAD
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_Start_IT+0xce>
=======
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_Start_IT+0xce>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]
=======
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003860:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e005      	b.n	800371c <HAL_DMA_Start_IT+0xec>
=======
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e005      	b.n	8003880 <HAL_DMA_Start_IT+0xec>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_DMA_Abort>:
=======
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e04f      	b.n	80037d8 <HAL_DMA_Abort+0xb2>
=======
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e04f      	b.n	800393c <HAL_DMA_Abort+0xb2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e040      	b.n	80037d8 <HAL_DMA_Abort+0xb2>
=======
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d008      	beq.n	80038ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e040      	b.n	800393c <HAL_DMA_Abort+0xb2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 020e 	bic.w	r2, r2, #14
 8003764:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f003 021c 	and.w	r2, r3, #28
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00c      	beq.n	80037c6 <HAL_DMA_Abort+0xa0>
=======
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 021c 	and.w	r2, r3, #28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_DMA_Abort+0xa0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037c4:	605a      	str	r2, [r3, #4]
=======
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003928:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_DMA_Abort_IT>:
=======
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_Abort_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d005      	beq.n	8003808 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2204      	movs	r2, #4
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e047      	b.n	8003898 <HAL_DMA_Abort_IT+0xb4>
=======
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e047      	b.n	80039fc <HAL_DMA_Abort_IT+0xb4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 020e 	bic.w	r2, r2, #14
 8003816:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f003 021c 	and.w	r2, r3, #28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003854:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_DMA_Abort_IT+0x94>
=======
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 020e 	bic.w	r2, r2, #14
 800397a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2101      	movs	r1, #1
 80039aa:	fa01 f202 	lsl.w	r2, r1, r2
 80039ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_DMA_Abort_IT+0x94>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003876:	605a      	str	r2, [r3, #4]
=======
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039da:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
    }
  }
  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DMA_IRQHandler>:
=======
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    }
  }
  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_DMA_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f003 031c 	and.w	r3, r3, #28
 80038c2:	2204      	movs	r2, #4
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d026      	beq.n	800391c <HAL_DMA_IRQHandler+0x7a>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d021      	beq.n	800391c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0204 	bic.w	r2, r2, #4
 80038f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 021c 	and.w	r2, r3, #28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2104      	movs	r1, #4
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]
=======
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 031c 	and.w	r3, r3, #28
 8003a26:	2204      	movs	r2, #4
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d026      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d021      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f003 021c 	and.w	r2, r3, #28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2104      	movs	r1, #4
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d071      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800391a:	e06c      	b.n	80039f6 <HAL_DMA_IRQHandler+0x154>
=======
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d071      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a7e:	e06c      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
<<<<<<< HEAD
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 031c 	and.w	r3, r3, #28
 8003924:	2202      	movs	r2, #2
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02e      	beq.n	800398e <HAL_DMA_IRQHandler+0xec>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d029      	beq.n	800398e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020a 	bic.w	r2, r2, #10
 8003956:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	f003 021c 	and.w	r2, r3, #28
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2102      	movs	r1, #2
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d038      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800398c:	e033      	b.n	80039f6 <HAL_DMA_IRQHandler+0x154>
=======
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 031c 	and.w	r3, r3, #28
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d02e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d029      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020a 	bic.w	r2, r2, #10
 8003aba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 021c 	and.w	r2, r3, #28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af0:	e033      	b.n	8003b5a <HAL_DMA_IRQHandler+0x154>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
<<<<<<< HEAD
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 031c 	and.w	r3, r3, #28
 8003996:	2208      	movs	r2, #8
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x156>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d025      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x156>
=======
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 031c 	and.w	r3, r3, #28
 8003afa:	2208      	movs	r2, #8
 8003afc:	409a      	lsls	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d02a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d025      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 020e 	bic.w	r2, r2, #14
 80039ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	f003 021c 	and.w	r2, r3, #28
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
=======
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020e 	bic.w	r2, r2, #14
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 021c 	and.w	r2, r3, #28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
}
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_DMA_GetError>:
=======
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
}
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA_GetError>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <DMA_SetConfig>:
=======
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_SetConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a40:	605a      	str	r2, [r3, #4]
=======
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ba4:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f003 021c 	and.w	r2, r3, #28
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d108      	bne.n	8003a78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	60da      	str	r2, [r3, #12]
=======
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f003 021c 	and.w	r2, r3, #28
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d108      	bne.n	8003bdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 8003a76:	e007      	b.n	8003a88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 8003bda:	e007      	b.n	8003bec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
=======
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< HEAD
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d80a      	bhi.n	8003abe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6493      	str	r3, [r2, #72]	; 0x48
 8003abc:	e007      	b.n	8003ace <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
=======
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d80a      	bhi.n	8003c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c20:	e007      	b.n	8003c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
<<<<<<< HEAD
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	009a      	lsls	r2, r3, #2
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6493      	str	r3, [r2, #72]	; 0x48
=======
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6493      	str	r3, [r2, #72]	; 0x48
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
<<<<<<< HEAD
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3b08      	subs	r3, #8
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ae4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40020407 	.word	0x40020407
 8003b04:	4002081c 	.word	0x4002081c
 8003b08:	cccccccd 	.word	0xcccccccd
 8003b0c:	40020880 	.word	0x40020880

08003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3b08      	subs	r3, #8
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40020407 	.word	0x40020407
 8003c68:	4002081c 	.word	0x4002081c
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	40020880 	.word	0x40020880

08003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	409a      	lsls	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	1000823f 	.word	0x1000823f
 8003b58:	40020940 	.word	0x40020940

08003b5c <HAL_GPIO_Init>:
=======
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	1000823f 	.word	0x1000823f
 8003cbc:	40020940 	.word	0x40020940

08003cc0 <HAL_GPIO_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
=======
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8003b6a:	e14c      	b.n	8003e06 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 813e 	beq.w	8003e00 <HAL_GPIO_Init+0x2a4>
=======
 8003cce:	e14c      	b.n	8003f6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 813e 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d005      	beq.n	8003b9c <HAL_GPIO_Init+0x40>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d130      	bne.n	8003bfe <HAL_GPIO_Init+0xa2>
=======
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4013      	ands	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 0201 	and.w	r2, r3, #1
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	605a      	str	r2, [r3, #4]
=======
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d017      	beq.n	8003c3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	2203      	movs	r2, #3
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	60da      	str	r2, [r3, #12]
=======
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d123      	bne.n	8003c8e <HAL_GPIO_Init+0x132>
=======
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	08da      	lsrs	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	08da      	lsrs	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3208      	adds	r2, #8
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]
=======
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8098 	beq.w	8003e00 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cd0:	4a54      	ldr	r2, [pc, #336]	; (8003e24 <HAL_GPIO_Init+0x2c8>)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cfa:	d019      	beq.n	8003d30 <HAL_GPIO_Init+0x1d4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_GPIO_Init+0x2cc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <HAL_GPIO_Init+0x1d0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_GPIO_Init+0x2d0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00d      	beq.n	8003d28 <HAL_GPIO_Init+0x1cc>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a48      	ldr	r2, [pc, #288]	; (8003e30 <HAL_GPIO_Init+0x2d4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <HAL_GPIO_Init+0x1c8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a47      	ldr	r2, [pc, #284]	; (8003e34 <HAL_GPIO_Init+0x2d8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_GPIO_Init+0x1c4>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	e008      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d20:	2307      	movs	r3, #7
 8003d22:	e006      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d24:	2303      	movs	r3, #3
 8003d26:	e004      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e002      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_GPIO_Init+0x1d6>
 8003d30:	2300      	movs	r3, #0
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	f002 0203 	and.w	r2, r2, #3
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	4093      	lsls	r3, r2
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d42:	4938      	ldr	r1, [pc, #224]	; (8003e24 <HAL_GPIO_Init+0x2c8>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	3302      	adds	r3, #2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d50:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d74:	4a30      	ldr	r2, [pc, #192]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d7a:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d9e:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dca:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <HAL_GPIO_Init+0x2dc>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
=======
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8098 	beq.w	8003f64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d019      	beq.n	8003e94 <HAL_GPIO_Init+0x1d4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d013      	beq.n	8003e90 <HAL_GPIO_Init+0x1d0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00d      	beq.n	8003e8c <HAL_GPIO_Init+0x1cc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2d4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <HAL_GPIO_Init+0x1c8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a47      	ldr	r2, [pc, #284]	; (8003f98 <HAL_GPIO_Init+0x2d8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_GPIO_Init+0x1c4>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e008      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e84:	2307      	movs	r3, #7
 8003e86:	e006      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e004      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_GPIO_Init+0x1d6>
 8003e94:	2300      	movs	r3, #0
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	f002 0203 	and.w	r2, r2, #3
 8003e9c:	0092      	lsls	r2, r2, #2
 8003e9e:	4093      	lsls	r3, r2
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ea6:	4938      	ldr	r1, [pc, #224]	; (8003f88 <HAL_GPIO_Init+0x2c8>)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed8:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ede:	4b2f      	ldr	r3, [pc, #188]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_GPIO_Init+0x2dc>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    position++;
<<<<<<< HEAD
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f47f aeab 	bne.w	8003b6c <HAL_GPIO_Init+0x10>
  }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40010000 	.word	0x40010000
 8003e28:	48000400 	.word	0x48000400
 8003e2c:	48000800 	.word	0x48000800
 8003e30:	48000c00 	.word	0x48000c00
 8003e34:	48001000 	.word	0x48001000
 8003e38:	58000800 	.word	0x58000800

08003e3c <HAL_GPIO_WritePin>:
=======
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f aeab 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	48000400 	.word	0x48000400
 8003f90:	48000800 	.word	0x48000800
 8003f94:	48000c00 	.word	0x48000c00
 8003f98:	48001000 	.word	0x48001000
 8003f9c:	58000800 	.word	0x58000800

08003fa0 <HAL_GPIO_WritePin>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
=======
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
=======
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_PCD_Init>:
=======
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fa84 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d107      	bne.n	800404a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e006      	b.n	8004058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d108      	bne.n	8004072 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	e007      	b.n	8004082 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b20      	cmp	r3, #32
 800412c:	f040 80f9 	bne.w	8004322 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_I2C_Mem_Write+0x34>
 8004136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0ed      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Mem_Write+0x4e>
 8004152:	2302      	movs	r3, #2
 8004154:	e0e6      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800415e:	f7fd fc69 	bl	8001a34 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2319      	movs	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f955 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d1      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	; 0x21
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a8:	88f8      	ldrh	r0, [r7, #6]
 80041aa:	893a      	ldrh	r2, [r7, #8]
 80041ac:	8979      	ldrh	r1, [r7, #10]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	4603      	mov	r3, r0
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8b9 	bl	8004330 <I2C_RequestMemoryWrite>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0a9      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2bff      	cmp	r3, #255	; 0xff
 80041d8:	d90e      	bls.n	80041f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	8979      	ldrh	r1, [r7, #10]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 facf 	bl	8004794 <I2C_TransferConfig>
 80041f6:	e00f      	b.n	8004218 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	b2da      	uxtb	r2, r3
 8004208:	8979      	ldrh	r1, [r7, #10]
 800420a:	2300      	movs	r3, #0
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fabe 	bl	8004794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f94e 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07b      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	781a      	ldrb	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d034      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d130      	bne.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8d1 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04d      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2bff      	cmp	r3, #255	; 0xff
 8004290:	d90e      	bls.n	80042b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	b2da      	uxtb	r2, r3
 800429e:	8979      	ldrh	r1, [r7, #10]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fa73 	bl	8004794 <I2C_TransferConfig>
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	8979      	ldrh	r1, [r7, #10]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fa62 	bl	8004794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d19e      	bne.n	8004218 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f934 	bl	800454c <I2C_WaitOnSTOPFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01a      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2220      	movs	r2, #32
 80042f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_I2C_Mem_Write+0x224>)
 8004302:	400b      	ands	r3, r1
 8004304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	fe00e800 	.word	0xfe00e800

08004330 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <I2C_RequestMemoryWrite+0xa4>)
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa1b 	bl	8004794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8ab 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02c      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004378:	893b      	ldrh	r3, [r7, #8]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
 8004382:	e015      	b.n	80043b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004384:	893b      	ldrh	r3, [r7, #8]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	b29b      	uxth	r3, r3
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f891 	bl	80044be <I2C_WaitOnTXISFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e012      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f830 	bl	8004420 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	80002000 	.word	0x80002000

080043d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d103      	bne.n	80043f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d007      	beq.n	8004414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	619a      	str	r2, [r3, #24]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004430:	e031      	b.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d02d      	beq.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd fafb 	bl	8001a34 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d122      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	d113      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00f      	b.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d0be      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ca:	e033      	b.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f87f 	bl	80045d4 <I2C_IsErrorOccurred>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e031      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d025      	beq.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fd faa4 	bl	8001a34 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11a      	bne.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d013      	beq.n	8004534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e007      	b.n	8004544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d1c4      	bne.n	80044cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004558:	e02f      	b.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f838 	bl	80045d4 <I2C_IsErrorOccurred>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e02d      	b.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fd fa61 	bl	8001a34 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11a      	bne.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	d013      	beq.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e007      	b.n	80045ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d1c8      	bne.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	; 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d068      	beq.n	80046d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004608:	e049      	b.n	800469e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d045      	beq.n	800469e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fd fa0f 	bl	8001a34 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_IsErrorOccurred+0x54>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d121      	bne.n	8004690 <I2C_IsErrorOccurred+0xbc>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	d01d      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b20      	cmp	r3, #32
 8004658:	d01a      	beq.n	8004690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800466a:	f7fd f9e3 	bl	8001a34 <HAL_GetTick>
 800466e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004670:	e00e      	b.n	8004690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004672:	f7fd f9df 	bl	8001a34 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b19      	cmp	r3, #25
 800467e:	d907      	bls.n	8004690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f043 0320 	orr.w	r3, r3, #32
 8004686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800468e:	e006      	b.n	800469e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d1e9      	bne.n	8004672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d003      	beq.n	80046b4 <I2C_IsErrorOccurred+0xe0>
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0aa      	beq.n	800460a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2220      	movs	r2, #32
 80046c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f043 0304 	orr.w	r3, r3, #4
 80046ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01c      	beq.n	8004782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff fe45 	bl	80043d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <I2C_IsErrorOccurred+0x1bc>)
 800475a:	400b      	ands	r3, r1
 800475c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004786:	4618      	mov	r0, r3
 8004788:	3728      	adds	r7, #40	; 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	4613      	mov	r3, r2
 80047a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ac:	7a7b      	ldrb	r3, [r7, #9]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	4313      	orrs	r3, r2
 80047be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	0d5b      	lsrs	r3, r3, #21
 80047ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <I2C_TransferConfig+0x60>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	43db      	mvns	r3, r3
 80047d8:	ea02 0103 	and.w	r1, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	03ff63ff 	.word	0x03ff63ff

080047f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d138      	bne.n	8004880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e032      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800484a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d139      	bne.n	8004918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e033      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	; 0x24
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_PCD_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b08b      	sub	sp, #44	; 0x2c
 8003e70:	af06      	add	r7, sp, #24
 8003e72:	6078      	str	r0, [r7, #4]
=======
 8004926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004928:	b08b      	sub	sp, #44	; 0x2c
 800492a:	af06      	add	r7, sp, #24
 800492c:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e0cb      	b.n	8004016 <HAL_PCD_Init+0x1aa>
=======
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0cb      	b.n	8004ad0 <HAL_PCD_Init+0x1aa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
=======
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fb98 	bl	80015c8 <HAL_PCD_MspInit>
=======
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fc fec9 	bl	80016e4 <HAL_PCD_MspInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 f8c9 	bl	800903c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	e040      	b.n	8003f32 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	440b      	add	r3, r1
 8003ed6:	7bfa      	ldrb	r2, [r7, #15]
 8003ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	3303      	adds	r3, #3
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	440b      	add	r3, r1
 8003f12:	333c      	adds	r3, #60	; 0x3c
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	440b      	add	r3, r1
 8003f26:	3340      	adds	r3, #64	; 0x40
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3b9      	bcc.n	8003eb0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e044      	b.n	8003fcc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f58:	7bfa      	ldrb	r2, [r7, #15]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3b5      	bcc.n	8003f42 <HAL_PCD_Init+0xd6>
=======
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f005 f8c8 	bl	8009af4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e040      	b.n	80049ec <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	440b      	add	r3, r1
 800497a:	3301      	adds	r3, #1
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	3303      	adds	r3, #3
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	333c      	adds	r3, #60	; 0x3c
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3340      	adds	r3, #64	; 0x40
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	3301      	adds	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3b9      	bcc.n	800496a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e044      	b.n	8004a86 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	440b      	add	r3, r1
 8004a0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	440b      	add	r3, r1
 8004a36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3301      	adds	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3b5      	bcc.n	80049fc <HAL_PCD_Init+0xd6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
<<<<<<< HEAD
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	687e      	ldr	r6, [r7, #4]
 8003fde:	466d      	mov	r5, sp
 8003fe0:	f106 0410 	add.w	r4, r6, #16
 8003fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	1d33      	adds	r3, r6, #4
 8003fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	f005 f83e 	bl	8009072 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f805 	bl	800401e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800401e <HAL_PCDEx_ActivateLPM>:
=======
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	687e      	ldr	r6, [r7, #4]
 8004a98:	466d      	mov	r5, sp
 8004a9a:	f106 0410 	add.w	r4, r6, #16
 8004a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	602b      	str	r3, [r5, #0]
 8004aa6:	1d33      	adds	r3, r6, #4
 8004aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aaa:	6838      	ldr	r0, [r7, #0]
 8004aac:	f005 f83d 	bl	8009b2a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f805 	bl	8004ad8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad8 <HAL_PCDEx_ActivateLPM>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004042:	b29b      	uxth	r3, r3
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004056:	b29b      	uxth	r3, r3
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_PWR_EnableBkUpAccess>:
=======
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_PWR_EnableBkUpAccess>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< HEAD
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800407e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	58000400 	.word	0x58000400

08004094 <HAL_PWREx_GetVoltageRange>:
=======
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b30:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58000400 	.word	0x58000400

08004b4c <HAL_PWREx_GetVoltageRange>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_PWREx_GetVoltageRange+0x18>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	58000400 	.word	0x58000400

080040b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c2:	d101      	bne.n	80040c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_HSE_Enable>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <LL_RCC_HSE_Disable>:
{
 80040f2:	b480      	push	{r7}
 80040f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_RCC_HSE_IsReady>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004122:	d101      	bne.n	8004128 <LL_RCC_HSE_IsReady+0x18>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <LL_RCC_HSE_IsReady+0x1a>
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_RCC_HSI_Enable>:
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_HSI_Disable>:
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_RCC_HSI_IsReady>:
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d101      	bne.n	8004188 <LL_RCC_HSI_IsReady+0x18>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <LL_RCC_HSI_IsReady+0x1a>
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_HSI48_Enable>:
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_HSI48_Disable>:
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_HSI48_IsReady>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d101      	bne.n	800421a <LL_RCC_HSI48_IsReady+0x18>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <LL_RCC_HSI48_IsReady+0x1a>
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_RCC_LSE_Enable>:
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800423e:	bf00      	nop
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_RCC_LSE_Disable>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_LSE_EnableBypass>:
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_RCC_LSE_DisableBypass>:
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_LSE_IsReady>:
=======
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	58000400 	.word	0x58000400

08004b68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d101      	bne.n	8004b80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_HSE_Enable>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_HSE_Disable>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_HSE_IsReady>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bda:	d101      	bne.n	8004be0 <LL_RCC_HSE_IsReady+0x18>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <LL_RCC_HSE_IsReady+0x1a>
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <LL_RCC_HSI_Enable>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_HSI_Disable>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_HSI_IsReady>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d101      	bne.n	8004c40 <LL_RCC_HSI_IsReady+0x18>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <LL_RCC_HSI_IsReady+0x1a>
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_RCC_HSI48_Enable>:
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c8e:	bf00      	nop
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_HSI48_Disable>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004cb0:	bf00      	nop
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <LL_RCC_HSI48_IsReady>:
{
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d101      	bne.n	8004cd2 <LL_RCC_HSI48_IsReady+0x18>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_RCC_HSI48_IsReady+0x1a>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_LSE_Enable>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_LSE_Disable>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <LL_RCC_LSE_EnableBypass>:
{
 8004d22:	b480      	push	{r7}
 8004d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d3a:	bf00      	nop
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_LSE_DisableBypass>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_LSE_IsReady>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
<<<<<<< HEAD
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d101      	bne.n	80042c6 <LL_RCC_LSE_IsReady+0x18>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <LL_RCC_LSE_IsReady+0x1a>
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_LSI1_Enable>:
=======
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d101      	bne.n	8004d7e <LL_RCC_LSE_IsReady+0x18>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <LL_RCC_LSE_IsReady+0x1a>
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_RCC_LSI1_Enable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
<<<<<<< HEAD
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042ea:	bf00      	nop
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_LSI1_Disable>:
=======
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_LSI1_Disable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
<<<<<<< HEAD
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_RCC_LSI1_IsReady>:
=======
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_LSI1_IsReady>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
<<<<<<< HEAD
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d101      	bne.n	800432e <LL_RCC_LSI1_IsReady+0x18>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <LL_RCC_LSI1_IsReady+0x1a>
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_RCC_LSI2_Enable>:
=======
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d101      	bne.n	8004de6 <LL_RCC_LSI1_IsReady+0x18>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <LL_RCC_LSI1_IsReady+0x1a>
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_LSI2_Enable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
<<<<<<< HEAD
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_LSI2_Disable>:
=======
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_LSI2_Disable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
<<<<<<< HEAD
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_RCC_LSI2_IsReady>:
=======
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_LSI2_IsReady>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
<<<<<<< HEAD
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b08      	cmp	r3, #8
 8004390:	d101      	bne.n	8004396 <LL_RCC_LSI2_IsReady+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_RCC_LSI2_IsReady+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <LL_RCC_LSI2_SetTrimming>:
=======
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d101      	bne.n	8004e4e <LL_RCC_LSI2_IsReady+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_RCC_LSI2_IsReady+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_LSI2_SetTrimming>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
<<<<<<< HEAD
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80043aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_MSI_Enable>:
=======
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <LL_RCC_MSI_Enable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
<<<<<<< HEAD
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_MSI_Disable>:
=======
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6013      	str	r3, [r2, #0]
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_MSI_Disable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
<<<<<<< HEAD
 80043ee:	b480      	push	{r7}
 80043f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6013      	str	r3, [r2, #0]
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_RCC_MSI_IsReady>:
=======
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_MSI_IsReady>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
<<<<<<< HEAD
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d101      	bne.n	8004422 <LL_RCC_MSI_IsReady+0x16>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <LL_RCC_MSI_IsReady+0x18>
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <LL_RCC_MSI_SetRange>:
=======
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d101      	bne.n	8004eda <LL_RCC_MSI_IsReady+0x16>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <LL_RCC_MSI_IsReady+0x18>
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_RCC_MSI_SetRange>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
<<<<<<< HEAD
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_RCC_MSI_GetRange>:
=======
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_MSI_GetRange>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
<<<<<<< HEAD
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004466:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2bb0      	cmp	r3, #176	; 0xb0
 800446c:	d901      	bls.n	8004472 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800446e:	23b0      	movs	r3, #176	; 0xb0
 8004470:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004472:	687b      	ldr	r3, [r7, #4]
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_RCC_MSI_SetCalibTrimming>:
=======
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2bb0      	cmp	r3, #176	; 0xb0
 8004f24:	d901      	bls.n	8004f2a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004f26:	23b0      	movs	r3, #176	; 0xb0
 8004f28:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004f2a:	687b      	ldr	r3, [r7, #4]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_MSI_SetCalibTrimming>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
<<<<<<< HEAD
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_SetSysClkSource>:
=======
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	021b      	lsls	r3, r3, #8
 8004f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetSysClkSource>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
<<<<<<< HEAD
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <LL_RCC_GetSysClkSource>:
=======
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 0203 	bic.w	r2, r3, #3
 8004f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_GetSysClkSource>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
<<<<<<< HEAD
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_SetAHBPrescaler>:
=======
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 030c 	and.w	r3, r3, #12
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_SetAHBPrescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_C2_RCC_SetAHBPrescaler>:
=======
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <LL_C2_RCC_SetAHBPrescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_SetAHB4Prescaler>:
=======
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_SetAHB4Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800454e:	f023 020f 	bic.w	r2, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <LL_RCC_SetAPB1Prescaler>:
=======
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005006:	f023 020f 	bic.w	r2, r3, #15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	091b      	lsrs	r3, r3, #4
 800500e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_RCC_SetAPB1Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_RCC_SetAPB2Prescaler>:
=======
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800502c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_RCC_SetAPB2Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
<<<<<<< HEAD
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <LL_RCC_GetAHBPrescaler>:
=======
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800505e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_GetAHBPrescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
<<<<<<< HEAD
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_C2_RCC_GetAHBPrescaler>:
=======
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005082:	4618      	mov	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_C2_RCC_GetAHBPrescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
<<<<<<< HEAD
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_GetAHB4Prescaler>:
=======
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_GetAHB4Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
<<<<<<< HEAD
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <LL_RCC_GetAPB1Prescaler>:
=======
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_GetAPB1Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
<<<<<<< HEAD
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_RCC_GetAPB2Prescaler>:
=======
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_GetAPB2Prescaler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
<<<<<<< HEAD
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <LL_RCC_PLL_Enable>:
=======
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_PLL_Enable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
<<<<<<< HEAD
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800463e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464c:	6013      	str	r3, [r2, #0]
}
 800464e:	bf00      	nop
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_RCC_PLL_Disable>:
=======
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005104:	6013      	str	r3, [r2, #0]
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_RCC_PLL_Disable>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
<<<<<<< HEAD
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_PLL_IsReady>:
=======
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_PLL_IsReady>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
<<<<<<< HEAD
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004688:	d101      	bne.n	800468e <LL_RCC_PLL_IsReady+0x18>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <LL_RCC_PLL_IsReady+0x1a>
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_RCC_PLL_GetN>:
=======
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005140:	d101      	bne.n	8005146 <LL_RCC_PLL_IsReady+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_RCC_PLL_IsReady+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_PLL_GetN>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
<<<<<<< HEAD
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800469e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_PLL_GetR>:
=======
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005162:	4618      	mov	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_RCC_PLL_GetR>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
<<<<<<< HEAD
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_RCC_PLL_GetDivider>:
=======
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800517a:	4618      	mov	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_RCC_PLL_GetDivider>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
<<<<<<< HEAD
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_PLL_GetMainSource>:
=======
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_RCC_PLL_GetMainSource>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
<<<<<<< HEAD
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_RCC_IsActiveFlag_HPRE>:
=======
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_IsActiveFlag_HPRE>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
<<<<<<< HEAD
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d101      	bne.n	8004714 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_RCC_IsActiveFlag_C2HPRE>:
=======
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c6:	d101      	bne.n	80051cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_IsActiveFlag_C2HPRE>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
<<<<<<< HEAD
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004734:	d101      	bne.n	800473a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_RCC_IsActiveFlag_SHDHPRE>:
=======
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_IsActiveFlag_SHDHPRE>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
<<<<<<< HEAD
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475a:	d101      	bne.n	8004760 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <LL_RCC_IsActiveFlag_PPRE1>:
=======
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005212:	d101      	bne.n	8005218 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_IsActiveFlag_PPRE1>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
<<<<<<< HEAD
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477e:	d101      	bne.n	8004784 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_RCC_IsActiveFlag_PPRE2>:
=======
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005236:	d101      	bne.n	800523c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_IsActiveFlag_PPRE2>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
<<<<<<< HEAD
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800479e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047a2:	d101      	bne.n	80047a8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_RCC_OscConfig>:
=======
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800525a:	d101      	bne.n	8005260 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_RCC_OscConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b08d      	sub	sp, #52	; 0x34
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
=======
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b08d      	sub	sp, #52	; 0x34
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e363      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e363      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
<<<<<<< HEAD
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 808d 	beq.w	80048ee <HAL_RCC_OscConfig+0x13a>
=======
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808d 	beq.w	80053a6 <HAL_RCC_OscConfig+0x13a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 80047d4:	f7ff fe7d 	bl	80044d2 <LL_RCC_GetSysClkSource>
 80047d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047da:	f7ff ff83 	bl	80046e4 <LL_RCC_PLL_GetMainSource>
 80047de:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x3e>
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d147      	bne.n	800487c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d144      	bne.n	800487c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e347      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 800528c:	f7ff fe7d 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005290:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005292:	f7ff ff83 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005296:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x3e>
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d147      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d144      	bne.n	8005334 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e347      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004802:	f7ff fe28 	bl	8004456 <LL_RCC_MSI_GetRange>
 8004806:	4603      	mov	r3, r0
 8004808:	429c      	cmp	r4, r3
 800480a:	d914      	bls.n	8004836 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd61 	bl	80052d8 <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e336      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80052ba:	f7ff fe28 	bl	8004f0e <LL_RCC_MSI_GetRange>
 80052be:	4603      	mov	r3, r0
 80052c0:	429c      	cmp	r4, r3
 80052c2:	d914      	bls.n	80052ee <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fd61 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e336      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fe02 	bl	800442e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fe26 	bl	8004480 <LL_RCC_MSI_SetCalibTrimming>
 8004834:	e013      	b.n	800485e <HAL_RCC_OscConfig+0xaa>
=======
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe02 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fe26 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 80052ec:	e013      	b.n	8005316 <HAL_RCC_OscConfig+0xaa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fdf7 	bl	800442e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fe1b 	bl	8004480 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fd42 	bl	80052d8 <RCC_SetFlashLatencyFromMSIRange>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e317      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fdf7 	bl	8004ee6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fe1b 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fd42 	bl	8005d90 <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e317      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< HEAD
 800485e:	f000 fcc9 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8004862:	4603      	mov	r3, r0
 8004864:	4aa4      	ldr	r2, [pc, #656]	; (8004af8 <HAL_RCC_OscConfig+0x344>)
 8004866:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004868:	4ba4      	ldr	r3, [pc, #656]	; (8004afc <HAL_RCC_OscConfig+0x348>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fef5 	bl	800165c <HAL_InitTick>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d039      	beq.n	80048ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e308      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 8005316:	f000 fcc9 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 800531a:	4603      	mov	r3, r0
 800531c:	4aa4      	ldr	r2, [pc, #656]	; (80055b0 <HAL_RCC_OscConfig+0x344>)
 800531e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005320:	4ba4      	ldr	r3, [pc, #656]	; (80055b4 <HAL_RCC_OscConfig+0x348>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fa27 	bl	8001778 <HAL_InitTick>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d039      	beq.n	80053a4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e308      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01e      	beq.n	80048c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004884:	f7ff fda4 	bl	80043d0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004888:	f7fd f846 	bl	8001918 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004890:	f7fd f842 	bl	8001918 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e2f5      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80048a2:	f7ff fdb3 	bl	800440c <LL_RCC_MSI_IsReady>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f1      	beq.n	8004890 <HAL_RCC_OscConfig+0xdc>
=======
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800533c:	f7ff fda4 	bl	8004e88 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005340:	f7fc fb78 	bl	8001a34 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005348:	f7fc fb74 	bl	8001a34 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e2f5      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800535a:	f7ff fdb3 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0f1      	beq.n	8005348 <HAL_RCC_OscConfig+0xdc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fdbc 	bl	800442e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fde0 	bl	8004480 <LL_RCC_MSI_SetCalibTrimming>
 80048c0:	e015      	b.n	80048ee <HAL_RCC_OscConfig+0x13a>
=======
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fdbc 	bl	8004ee6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fde0 	bl	8004f38 <LL_RCC_MSI_SetCalibTrimming>
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 80048c2:	f7ff fd94 	bl	80043ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048c6:	f7fd f827 	bl	8001918 <HAL_GetTick>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ce:	f7fd f823 	bl	8001918 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e2d6      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80048e0:	f7ff fd94 	bl	800440c <LL_RCC_MSI_IsReady>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f1      	bne.n	80048ce <HAL_RCC_OscConfig+0x11a>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048ec:	bf00      	nop
=======
 800537a:	f7ff fd94 	bl	8004ea6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800537e:	f7fc fb59 	bl	8001a34 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005386:	f7fc fb55 	bl	8001a34 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e2d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005398:	f7ff fd94 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <HAL_RCC_OscConfig+0x11a>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053a4:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d047      	beq.n	800498a <HAL_RCC_OscConfig+0x1d6>
=======
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 80048fa:	f7ff fdea 	bl	80044d2 <LL_RCC_GetSysClkSource>
 80048fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004900:	f7ff fef0 	bl	80046e4 <LL_RCC_PLL_GetMainSource>
 8004904:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d005      	beq.n	8004918 <HAL_RCC_OscConfig+0x164>
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b0c      	cmp	r3, #12
 8004910:	d108      	bne.n	8004924 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d105      	bne.n	8004924 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d134      	bne.n	800498a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e2b4      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 80053b2:	f7ff fdea 	bl	8004f8a <LL_RCC_GetSysClkSource>
 80053b6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b8:	f7ff fef0 	bl	800519c <LL_RCC_PLL_GetMainSource>
 80053bc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x164>
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d105      	bne.n	80053dc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d134      	bne.n	8005442 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2b4      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d102      	bne.n	8004934 <HAL_RCC_OscConfig+0x180>
 800492e:	f7ff fbd1 	bl	80040d4 <LL_RCC_HSE_Enable>
 8004932:	e001      	b.n	8004938 <HAL_RCC_OscConfig+0x184>
 8004934:	f7ff fbdd 	bl	80040f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fc ffea 	bl	8001918 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004948:	f7fc ffe6 	bl	8001918 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e299      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800495a:	f7ff fbd9 	bl	8004110 <LL_RCC_HSE_IsReady>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f1      	beq.n	8004948 <HAL_RCC_OscConfig+0x194>
 8004964:	e011      	b.n	800498a <HAL_RCC_OscConfig+0x1d6>
=======
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d102      	bne.n	80053ec <HAL_RCC_OscConfig+0x180>
 80053e6:	f7ff fbd1 	bl	8004b8c <LL_RCC_HSE_Enable>
 80053ea:	e001      	b.n	80053f0 <HAL_RCC_OscConfig+0x184>
 80053ec:	f7ff fbdd 	bl	8004baa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc fb1c 	bl	8001a34 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fc fb18 	bl	8001a34 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e299      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005412:	f7ff fbd9 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f1      	beq.n	8005400 <HAL_RCC_OscConfig+0x194>
 800541c:	e011      	b.n	8005442 <HAL_RCC_OscConfig+0x1d6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004966:	f7fc ffd7 	bl	8001918 <HAL_GetTick>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800496e:	f7fc ffd3 	bl	8001918 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	; 0x64
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e286      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004980:	f7ff fbc6 	bl	8004110 <LL_RCC_HSE_IsReady>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f1      	bne.n	800496e <HAL_RCC_OscConfig+0x1ba>
=======
 800541e:	f7fc fb09 	bl	8001a34 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005426:	f7fc fb05 	bl	8001a34 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b64      	cmp	r3, #100	; 0x64
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e286      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005438:	f7ff fbc6 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f1      	bne.n	8005426 <HAL_RCC_OscConfig+0x1ba>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d04c      	beq.n	8004a30 <HAL_RCC_OscConfig+0x27c>
=======
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04c      	beq.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004996:	f7ff fd9c 	bl	80044d2 <LL_RCC_GetSysClkSource>
 800499a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800499c:	f7ff fea2 	bl	80046e4 <LL_RCC_PLL_GetMainSource>
 80049a0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_OscConfig+0x200>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d10e      	bne.n	80049cc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d10b      	bne.n	80049cc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e266      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 800544e:	f7ff fd9c 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005452:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	f7ff fea2 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005458:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d005      	beq.n	800546c <HAL_RCC_OscConfig+0x200>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d10e      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d10b      	bne.n	8005484 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e266      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fbe5 	bl	8004194 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049ca:	e031      	b.n	8004a30 <HAL_RCC_OscConfig+0x27c>
=======
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fbe5 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005482:	e031      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	f7ff fbae 	bl	8004134 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc ff9e 	bl	8001918 <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fc ff9a 	bl	8001918 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e24d      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049f2:	f7ff fbbd 	bl	8004170 <LL_RCC_HSI_IsReady>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f1      	beq.n	80049e0 <HAL_RCC_OscConfig+0x22c>
=======
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	f7ff fbae 	bl	8004bec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc fad0 	bl	8001a34 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005498:	f7fc facc 	bl	8001a34 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e24d      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80054aa:	f7ff fbbd 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f1      	beq.n	8005498 <HAL_RCC_OscConfig+0x22c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fbc7 	bl	8004194 <LL_RCC_HSI_SetCalibTrimming>
 8004a06:	e013      	b.n	8004a30 <HAL_RCC_OscConfig+0x27c>
=======
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fbc7 	bl	8004c4c <LL_RCC_HSI_SetCalibTrimming>
 80054be:	e013      	b.n	80054e8 <HAL_RCC_OscConfig+0x27c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004a08:	f7ff fba3 	bl	8004152 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fc ff84 	bl	8001918 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fc ff80 	bl	8001918 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e233      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a26:	f7ff fba3 	bl	8004170 <LL_RCC_HSI_IsReady>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f1      	bne.n	8004a14 <HAL_RCC_OscConfig+0x260>
=======
 80054c0:	f7ff fba3 	bl	8004c0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fc fab6 	bl	8001a34 <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fc fab2 	bl	8001a34 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e233      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80054de:	f7ff fba3 	bl	8004c28 <LL_RCC_HSI_IsReady>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f1      	bne.n	80054cc <HAL_RCC_OscConfig+0x260>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
<<<<<<< HEAD
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a3 	beq.w	8004b90 <HAL_RCC_OscConfig+0x3dc>
=======
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a3 	beq.w	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d076      	beq.n	8004b40 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d046      	beq.n	8004aec <HAL_RCC_OscConfig+0x338>
=======
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d076      	beq.n	80055f8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d046      	beq.n	80055a4 <HAL_RCC_OscConfig+0x338>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
<<<<<<< HEAD
 8004a5e:	f7ff fc5a 	bl	8004316 <LL_RCC_LSI1_IsReady>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d113      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a68:	f7ff fc33 	bl	80042d2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a6c:	f7fc ff54 	bl	8001918 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a74:	f7fc ff50 	bl	8001918 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e203      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a86:	f7ff fc46 	bl	8004316 <LL_RCC_LSI1_IsReady>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f1      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2c0>
=======
 8005516:	f7ff fc5a 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d113      	bne.n	8005548 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005520:	f7ff fc33 	bl	8004d8a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005524:	f7fc fa86 	bl	8001a34 <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800552c:	f7fc fa82 	bl	8001a34 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e203      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800553e:	f7ff fc46 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f1      	beq.n	800552c <HAL_RCC_OscConfig+0x2c0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
<<<<<<< HEAD
 8004a90:	f7ff fc53 	bl	800433a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc ff40 	bl	8001918 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a9c:	f7fc ff3c 	bl	8001918 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1ef      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004aae:	f7ff fc66 	bl	800437e <LL_RCC_LSI2_IsReady>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f1      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2e8>
=======
 8005548:	f7ff fc53 	bl	8004df2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc fa72 	bl	8001a34 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005554:	f7fc fa6e 	bl	8001a34 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1ef      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005566:	f7ff fc66 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f1      	beq.n	8005554 <HAL_RCC_OscConfig+0x2e8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
<<<<<<< HEAD
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fc70 	bl	80043a2 <LL_RCC_LSI2_SetTrimming>
=======
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fc70 	bl	8004e5a <LL_RCC_LSI2_SetTrimming>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
<<<<<<< HEAD
 8004ac2:	f7ff fc17 	bl	80042f4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fc ff27 	bl	8001918 <HAL_GetTick>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ace:	f7fc ff23 	bl	8001918 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e1d6      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ae0:	f7ff fc19 	bl	8004316 <LL_RCC_LSI1_IsReady>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f1      	bne.n	8004ace <HAL_RCC_OscConfig+0x31a>
 8004aea:	e051      	b.n	8004b90 <HAL_RCC_OscConfig+0x3dc>
=======
 800557a:	f7ff fc17 	bl	8004dac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fa59 	bl	8001a34 <HAL_GetTick>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005586:	f7fc fa55 	bl	8001a34 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1d6      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005598:	f7ff fc19 	bl	8004dce <LL_RCC_LSI1_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f1      	bne.n	8005586 <HAL_RCC_OscConfig+0x31a>
 80055a2:	e051      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
<<<<<<< HEAD
 8004aec:	f7ff fbf1 	bl	80042d2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc ff12 	bl	8001918 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004af6:	e00c      	b.n	8004b12 <HAL_RCC_OscConfig+0x35e>
 8004af8:	2000006c 	.word	0x2000006c
 8004afc:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b00:	f7fc ff0a 	bl	8001918 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e1bd      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b12:	f7ff fc00 	bl	8004316 <LL_RCC_LSI1_IsReady>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f1      	beq.n	8004b00 <HAL_RCC_OscConfig+0x34c>
=======
 80055a4:	f7ff fbf1 	bl	8004d8a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fa44 	bl	8001a34 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ae:	e00c      	b.n	80055ca <HAL_RCC_OscConfig+0x35e>
 80055b0:	2000006c 	.word	0x2000006c
 80055b4:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055b8:	f7fc fa3c 	bl	8001a34 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e1bd      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80055ca:	f7ff fc00 	bl	8004dce <LL_RCC_LSI1_IsReady>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f1      	beq.n	80055b8 <HAL_RCC_OscConfig+0x34c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
<<<<<<< HEAD
 8004b1c:	f7ff fc1e 	bl	800435c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b22:	f7fc fef9 	bl	8001918 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e1ac      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b34:	f7ff fc23 	bl	800437e <LL_RCC_LSI2_IsReady>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f1      	bne.n	8004b22 <HAL_RCC_OscConfig+0x36e>
 8004b3e:	e027      	b.n	8004b90 <HAL_RCC_OscConfig+0x3dc>
=======
 80055d4:	f7ff fc1e 	bl	8004e14 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055da:	f7fc fa2b 	bl	8001a34 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1ac      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055ec:	f7ff fc23 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f1      	bne.n	80055da <HAL_RCC_OscConfig+0x36e>
 80055f6:	e027      	b.n	8005648 <HAL_RCC_OscConfig+0x3dc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
<<<<<<< HEAD
 8004b40:	f7ff fc0c 	bl	800435c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b44:	f7fc fee8 	bl	8001918 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b4c:	f7fc fee4 	bl	8001918 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e197      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b5e:	f7ff fc0e 	bl	800437e <LL_RCC_LSI2_IsReady>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f1      	bne.n	8004b4c <HAL_RCC_OscConfig+0x398>
=======
 80055f8:	f7ff fc0c 	bl	8004e14 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fc fa1a 	bl	8001a34 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005604:	f7fc fa16 	bl	8001a34 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e197      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005616:	f7ff fc0e 	bl	8004e36 <LL_RCC_LSI2_IsReady>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f1      	bne.n	8005604 <HAL_RCC_OscConfig+0x398>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
<<<<<<< HEAD
 8004b68:	f7ff fbc4 	bl	80042f4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fc fed4 	bl	8001918 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b74:	f7fc fed0 	bl	8001918 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e183      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b86:	f7ff fbc6 	bl	8004316 <LL_RCC_LSI1_IsReady>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f1      	bne.n	8004b74 <HAL_RCC_OscConfig+0x3c0>
=======
 8005620:	f7ff fbc4 	bl	8004dac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fc fa06 	bl	8001a34 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800562c:	f7fc fa02 	bl	8001a34 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e183      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800563e:	f7ff fbc6 	bl	8004dce <LL_RCC_LSI1_IsReady>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f1      	bne.n	800562c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d05b      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4a0>
=======
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d05b      	beq.n	800570c <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
<<<<<<< HEAD
 8004b9c:	4ba7      	ldr	r3, [pc, #668]	; (8004e3c <HAL_RCC_OscConfig+0x688>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ba8:	f7ff fa64 	bl	8004074 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bac:	f7fc feb4 	bl	8001918 <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7fc feb0 	bl	8001918 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e163      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc6:	4b9d      	ldr	r3, [pc, #628]	; (8004e3c <HAL_RCC_OscConfig+0x688>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x400>
=======
 8005654:	4ba7      	ldr	r3, [pc, #668]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005660:	f7ff fa64 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005664:	f7fc f9e6 	bl	8001a34 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc f9e2 	bl	8001a34 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e163      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567e:	4b9d      	ldr	r3, [pc, #628]	; (80058f4 <HAL_RCC_OscConfig+0x688>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x400>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d102      	bne.n	8004be0 <HAL_RCC_OscConfig+0x42c>
 8004bda:	f7ff fb24 	bl	8004226 <LL_RCC_LSE_Enable>
 8004bde:	e00c      	b.n	8004bfa <HAL_RCC_OscConfig+0x446>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d104      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x43e>
 8004be8:	f7ff fb3f 	bl	800426a <LL_RCC_LSE_EnableBypass>
 8004bec:	f7ff fb1b 	bl	8004226 <LL_RCC_LSE_Enable>
 8004bf0:	e003      	b.n	8004bfa <HAL_RCC_OscConfig+0x446>
 8004bf2:	f7ff fb29 	bl	8004248 <LL_RCC_LSE_Disable>
 8004bf6:	f7ff fb49 	bl	800428c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c02:	f7fc fe89 	bl	8001918 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fc fe85 	bl	8001918 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e136      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c20:	f7ff fb45 	bl	80042ae <LL_RCC_LSE_IsReady>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ef      	beq.n	8004c0a <HAL_RCC_OscConfig+0x456>
 8004c2a:	e013      	b.n	8004c54 <HAL_RCC_OscConfig+0x4a0>
=======
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_RCC_OscConfig+0x42c>
 8005692:	f7ff fb24 	bl	8004cde <LL_RCC_LSE_Enable>
 8005696:	e00c      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d104      	bne.n	80056aa <HAL_RCC_OscConfig+0x43e>
 80056a0:	f7ff fb3f 	bl	8004d22 <LL_RCC_LSE_EnableBypass>
 80056a4:	f7ff fb1b 	bl	8004cde <LL_RCC_LSE_Enable>
 80056a8:	e003      	b.n	80056b2 <HAL_RCC_OscConfig+0x446>
 80056aa:	f7ff fb29 	bl	8004d00 <LL_RCC_LSE_Disable>
 80056ae:	f7ff fb49 	bl	8004d44 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ba:	f7fc f9bb 	bl	8001a34 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80056c0:	e00a      	b.n	80056d8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c2:	f7fc f9b7 	bl	8001a34 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e136      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80056d8:	f7ff fb45 	bl	8004d66 <LL_RCC_LSE_IsReady>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <HAL_RCC_OscConfig+0x456>
 80056e2:	e013      	b.n	800570c <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004c2c:	f7fc fe74 	bl	8001918 <HAL_GetTick>
 8004c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fc fe70 	bl	8001918 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e121      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c4a:	f7ff fb30 	bl	80042ae <LL_RCC_LSE_IsReady>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ef      	bne.n	8004c34 <HAL_RCC_OscConfig+0x480>
=======
 80056e4:	f7fc f9a6 	bl	8001a34 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80056ea:	e00a      	b.n	8005702 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ec:	f7fc f9a2 	bl	8001a34 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e121      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005702:	f7ff fb30 	bl	8004d66 <LL_RCC_LSE_IsReady>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ef      	bne.n	80056ec <HAL_RCC_OscConfig+0x480>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d02c      	beq.n	8004cba <HAL_RCC_OscConfig+0x506>
=======
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02c      	beq.n	8005772 <HAL_RCC_OscConfig+0x506>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d014      	beq.n	8004c92 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c68:	f7ff faa9 	bl	80041be <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc fe54 	bl	8001918 <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c74:	f7fc fe50 	bl	8001918 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e103      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c86:	f7ff fabc 	bl	8004202 <LL_RCC_HSI48_IsReady>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f1      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4c0>
 8004c90:	e013      	b.n	8004cba <HAL_RCC_OscConfig+0x506>
=======
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d014      	beq.n	800574a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005720:	f7ff faa9 	bl	8004c76 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc f986 	bl	8001a34 <HAL_GetTick>
 8005728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572c:	f7fc f982 	bl	8001a34 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e103      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800573e:	f7ff fabc 	bl	8004cba <LL_RCC_HSI48_IsReady>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f1      	beq.n	800572c <HAL_RCC_OscConfig+0x4c0>
 8005748:	e013      	b.n	8005772 <HAL_RCC_OscConfig+0x506>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 8004c92:	f7ff faa5 	bl	80041e0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fc fe3f 	bl	8001918 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c9e:	f7fc fe3b 	bl	8001918 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e0ee      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004cb0:	f7ff faa7 	bl	8004202 <LL_RCC_HSI48_IsReady>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f1      	bne.n	8004c9e <HAL_RCC_OscConfig+0x4ea>
=======
 800574a:	f7ff faa5 	bl	8004c98 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fc f971 	bl	8001a34 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fc f96d 	bl	8001a34 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0ee      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005768:	f7ff faa7 	bl	8004cba <LL_RCC_HSI48_IsReady>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f1      	bne.n	8005756 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80e4 	beq.w	8004e8c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc4:	f7ff fc05 	bl	80044d2 <LL_RCC_GetSysClkSource>
 8004cc8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f040 80b4 	bne.w	8004e44 <HAL_RCC_OscConfig+0x690>
=======
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80e4 	beq.w	8005944 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800577c:	f7ff fc05 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005780:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	2b02      	cmp	r3, #2
 8005790:	f040 80b4 	bne.w	80058fc <HAL_RCC_OscConfig+0x690>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
<<<<<<< HEAD
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 0203 	and.w	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d123      	bne.n	8004d32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d11c      	bne.n	8004d32 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d114      	bne.n	8004d32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d05d      	beq.n	8004dee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d058      	beq.n	8004dea <HAL_RCC_OscConfig+0x636>
=======
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	429a      	cmp	r2, r3
 80057a0:	d123      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d11c      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	0a1b      	lsrs	r3, r3, #8
 80057b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d114      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d10d      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057d8:	429a      	cmp	r2, r3
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d05d      	beq.n	80058a6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	d058      	beq.n	80058a2 <HAL_RCC_OscConfig+0x636>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0a1      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e0a1      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004d4a:	f7ff fc85 	bl	8004658 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d4e:	f7fc fde3 	bl	8001918 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fc fddf 	bl	8001918 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e092      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <HAL_RCC_OscConfig+0x5a2>
=======
 8005802:	f7ff fc85 	bl	8005110 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005806:	f7fc f915 	bl	8001a34 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fc f911 	bl	8001a34 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e092      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ef      	bne.n	800580e <HAL_RCC_OscConfig+0x5a2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCC_OscConfig+0x68c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d8e:	0212      	lsls	r2, r2, #8
 8004d90:	4311      	orrs	r1, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d9c:	4311      	orrs	r1, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004da2:	430a      	orrs	r2, r1
 8004da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60cb      	str	r3, [r1, #12]
=======
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	4b30      	ldr	r3, [pc, #192]	; (80058f8 <HAL_RCC_OscConfig+0x68c>)
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005846:	0212      	lsls	r2, r2, #8
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800584e:	4311      	orrs	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800585a:	430a      	orrs	r2, r1
 800585c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005860:	4313      	orrs	r3, r2
 8005862:	60cb      	str	r3, [r1, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004dac:	f7ff fc45 	bl	800463a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc0:	f7fc fdaa 	bl	8001918 <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc8:	f7fc fda6 	bl	8001918 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e059      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ef      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004de8:	e050      	b.n	8004e8c <HAL_RCC_OscConfig+0x6d8>
=======
 8005864:	f7ff fc45 	bl	80050f2 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005878:	f7fc f8dc 	bl	8001a34 <HAL_GetTick>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7fc f8d8 	bl	8001a34 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e059      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a0:	e050      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 8004dea:	2301      	movs	r3, #1
 8004dec:	e04f      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 80058a2:	2301      	movs	r3, #1
 80058a4:	e04f      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d147      	bne.n	8004e8c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dfc:	f7ff fc1d 	bl	800463a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e10:	f7fc fd82 	bl	8001918 <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fc fd7e 	bl	8001918 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e031      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ef      	beq.n	8004e18 <HAL_RCC_OscConfig+0x664>
 8004e38:	e028      	b.n	8004e8c <HAL_RCC_OscConfig+0x6d8>
 8004e3a:	bf00      	nop
 8004e3c:	58000400 	.word	0x58000400
 8004e40:	11c1808c 	.word	0x11c1808c
=======
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d147      	bne.n	8005944 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058b4:	f7ff fc1d 	bl	80050f2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058c8:	f7fc f8b4 	bl	8001a34 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc f8b0 	bl	8001a34 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e031      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCC_OscConfig+0x664>
 80058f0:	e028      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
 80058f2:	bf00      	nop
 80058f4:	58000400 	.word	0x58000400
 80058f8:	11c1808c 	.word	0x11c1808c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
<<<<<<< HEAD
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d01e      	beq.n	8004e88 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	f7ff fc05 	bl	8004658 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fc fd63 	bl	8001918 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fc fd5f 	bl	8001918 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e012      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ef      	bne.n	8004e56 <HAL_RCC_OscConfig+0x6a2>
=======
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d01e      	beq.n	8005940 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	f7ff fc05 	bl	8005110 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fc f895 	bl	8001a34 <HAL_GetTick>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800590e:	f7fc f891 	bl	8001a34 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e012      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_OscConfig+0x6a2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
<<<<<<< HEAD
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_OscConfig+0x6e4>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
 8004e86:	e001      	b.n	8004e8c <HAL_RCC_OscConfig+0x6d8>
=======
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <HAL_RCC_OscConfig+0x6e4>)
 800593a:	4013      	ands	r3, r2
 800593c:	60cb      	str	r3, [r1, #12]
 800593e:	e001      	b.n	8005944 <HAL_RCC_OscConfig+0x6d8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x6da>
=======
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x6da>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3734      	adds	r7, #52	; 0x34
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	eefefffc 	.word	0xeefefffc

08004e9c <HAL_RCC_ClockConfig>:
=======
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3734      	adds	r7, #52	; 0x34
 800594a:	46bd      	mov	sp, r7
 800594c:	bd90      	pop	{r4, r7, pc}
 800594e:	bf00      	nop
 8005950:	eefefffc 	.word	0xeefefffc

08005954 <HAL_RCC_ClockConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
=======
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e12d      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
=======
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e12d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8004eb0:	4b98      	ldr	r3, [pc, #608]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d91b      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b95      	ldr	r3, [pc, #596]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 0207 	bic.w	r2, r3, #7
 8004ec6:	4993      	ldr	r1, [pc, #588]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ece:	f7fc fd23 	bl	8001918 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]
=======
 8005968:	4b98      	ldr	r3, [pc, #608]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d91b      	bls.n	80059ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b95      	ldr	r3, [pc, #596]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4993      	ldr	r1, [pc, #588]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005986:	f7fc f855 	bl	8001a34 <HAL_GetTick>
 800598a:	60f8      	str	r0, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ed6:	f7fc fd1f 	bl	8001918 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e111      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d1ef      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x3a>
=======
 800598c:	e008      	b.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800598e:	f7fc f851 	bl	8001a34 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e111      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_ClockConfig+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff faef 	bl	80044ea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f0c:	f7fc fd04 	bl	8001918 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f14:	f7fc fd00 	bl	8001918 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0f2      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f26:	f7ff fbe9 	bl	80046fc <LL_RCC_IsActiveFlag_HPRE>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f1      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x78>
=======
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff faef 	bl	8004fa2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c4:	f7fc f836 	bl	8001a34 <HAL_GetTick>
 80059c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059cc:	f7fc f832 	bl	8001a34 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e0f2      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059de:	f7ff fbe9 	bl	80051b4 <LL_RCC_IsActiveFlag_HPRE>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f1      	beq.n	80059cc <HAL_RCC_ClockConfig+0x78>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
<<<<<<< HEAD
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d016      	beq.n	8004f6a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fae6 	bl	8004512 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f46:	f7fc fce7 	bl	8001918 <HAL_GetTick>
 8004f4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f4e:	f7fc fce3 	bl	8001918 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0d5      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f60:	f7ff fbde 	bl	8004720 <LL_RCC_IsActiveFlag_C2HPRE>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f1      	beq.n	8004f4e <HAL_RCC_ClockConfig+0xb2>
=======
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d016      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fae6 	bl	8004fca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fe:	f7fc f819 	bl	8001a34 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a06:	f7fc f815 	bl	8001a34 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0d5      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a18:	f7ff fbde 	bl	80051d8 <LL_RCC_IsActiveFlag_C2HPRE>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f1      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xb2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
<<<<<<< HEAD
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fadf 	bl	800453e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f80:	f7fc fcca 	bl	8001918 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f88:	f7fc fcc6 	bl	8001918 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0b8      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f9a:	f7ff fbd4 	bl	8004746 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f1      	beq.n	8004f88 <HAL_RCC_ClockConfig+0xec>
=======
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d016      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fadf 	bl	8004ff6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a38:	f7fb fffc 	bl	8001a34 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a40:	f7fb fff8 	bl	8001a34 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0b8      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a52:	f7ff fbd4 	bl	80051fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0f1      	beq.n	8005a40 <HAL_RCC_ClockConfig+0xec>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d016      	beq.n	8004fde <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fad9 	bl	800456c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fba:	f7fc fcad 	bl	8001918 <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fc2:	f7fc fca9 	bl	8001918 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e09b      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fd4:	f7ff fbca 	bl	800476c <LL_RCC_IsActiveFlag_PPRE1>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f1      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x126>
=======
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fad9 	bl	8005024 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a72:	f7fb ffdf 	bl	8001a34 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a7a:	f7fb ffdb 	bl	8001a34 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e09b      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a8c:	f7ff fbca 	bl	8005224 <LL_RCC_IsActiveFlag_PPRE1>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x126>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d017      	beq.n	800501a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff facf 	bl	8004594 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ff6:	f7fc fc8f 	bl	8001918 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ffe:	f7fc fc8b 	bl	8001918 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e07d      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005010:	f7ff fbbe 	bl	8004790 <LL_RCC_IsActiveFlag_PPRE2>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f1      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x162>
=======
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d017      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff facf 	bl	800504c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aae:	f7fb ffc1 	bl	8001a34 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ab6:	f7fb ffbd 	bl	8001a34 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e07d      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ac8:	f7ff fbbe 	bl	8005248 <LL_RCC_IsActiveFlag_PPRE2>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f1      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x162>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d043      	beq.n	80050ae <HAL_RCC_ClockConfig+0x212>
=======
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d043      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x212>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d106      	bne.n	800503c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800502e:	f7ff f86f 	bl	8004110 <LL_RCC_HSE_IsReady>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11e      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e067      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
=======
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ae6:	f7ff f86f 	bl	8004bc8 <LL_RCC_HSE_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11e      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d106      	bne.n	8005052 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005044:	f7ff fb17 	bl	8004676 <LL_RCC_PLL_IsReady>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d113      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e05c      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
=======
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005afc:	f7ff fb17 	bl	800512e <LL_RCC_PLL_IsReady>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e05c      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800505a:	f7ff f9d7 	bl	800440c <LL_RCC_MSI_IsReady>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d108      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e051      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
=======
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b12:	f7ff f9d7 	bl	8004ec4 <LL_RCC_MSI_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e051      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
<<<<<<< HEAD
 8005068:	f7ff f882 	bl	8004170 <LL_RCC_HSI_IsReady>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e04a      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
=======
 8005b20:	f7ff f882 	bl	8004c28 <LL_RCC_HSI_IsReady>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e04a      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fa15 	bl	80044aa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fc fc4a 	bl	8001918 <HAL_GetTick>
 8005084:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	e00a      	b.n	800509e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005088:	f7fc fc46 	bl	8001918 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e036      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509e:	f7ff fa18 	bl	80044d2 <LL_RCC_GetSysClkSource>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d1ec      	bne.n	8005088 <HAL_RCC_ClockConfig+0x1ec>
=======
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fa15 	bl	8004f62 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fb ff7c 	bl	8001a34 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	e00a      	b.n	8005b56 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b40:	f7fb ff78 	bl	8001a34 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e036      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	f7ff fa18 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d1ec      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x1ec>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80050ae:	4b19      	ldr	r3, [pc, #100]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d21b      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050bc:	4b15      	ldr	r3, [pc, #84]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 0207 	bic.w	r2, r3, #7
 80050c4:	4913      	ldr	r1, [pc, #76]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050cc:	f7fc fc24 	bl	8001918 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]
=======
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d21b      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 0207 	bic.w	r2, r3, #7
 8005b7c:	4913      	ldr	r1, [pc, #76]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fb ff56 	bl	8001a34 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050d4:	f7fc fc20 	bl	8001918 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e012      	b.n	800510c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_ClockConfig+0x278>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1ef      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x238>
=======
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b8c:	f7fb ff52 	bl	8001a34 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e012      	b.n	8005bc4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x278>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d1ef      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x238>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
<<<<<<< HEAD
 80050f4:	f000 f87e 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_RCC_ClockConfig+0x27c>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80050fe:	f7fc fc17 	bl	8001930 <HAL_GetTickPrio>
 8005102:	4603      	mov	r3, r0
 8005104:	4618      	mov	r0, r3
 8005106:	f7fc faa9 	bl	800165c <HAL_InitTick>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	58004000 	.word	0x58004000
 8005118:	2000006c 	.word	0x2000006c

0800511c <HAL_RCC_GetSysClockFreq>:
=======
 8005bac:	f000 f87e 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <HAL_RCC_ClockConfig+0x27c>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005bb6:	f7fb ff49 	bl	8001a4c <HAL_GetTickPrio>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fb fddb 	bl	8001778 <HAL_InitTick>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	58004000 	.word	0x58004000
 8005bd0:	2000006c 	.word	0x2000006c

08005bd4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
=======
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8005122:	f7ff f9d6 	bl	80044d2 <LL_RCC_GetSysClkSource>
 8005126:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_RCC_GetSysClockFreq+0x28>
=======
 8005bda:	f7ff f9d6 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005bde:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x28>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
<<<<<<< HEAD
 800512e:	f7ff f992 	bl	8004456 <LL_RCC_MSI_GetRange>
 8005132:	4603      	mov	r3, r0
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e04b      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d102      	bne.n	8005150 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e045      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d10a      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005156:	f7fe ffab 	bl	80040b0 <LL_RCC_HSE_IsEnabledDiv2>
 800515a:	4603      	mov	r3, r0
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e03a      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8005be6:	f7ff f992 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005bea:	4603      	mov	r3, r0
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e04b      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d102      	bne.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c02:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	e045      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c0e:	f7fe ffab 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d102      	bne.n	8005c1e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e03a      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8005166:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e037      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0xc0>
=======
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e037      	b.n	8005c94 <HAL_RCC_GetSysClockFreq+0xc0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
<<<<<<< HEAD
 800516c:	f7ff faba 	bl	80046e4 <LL_RCC_PLL_GetMainSource>
 8005170:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d003      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x64>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b03      	cmp	r3, #3
 800517c:	d003      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x6a>
 800517e:	e00d      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005182:	60bb      	str	r3, [r7, #8]
        break;
 8005184:	e015      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005186:	f7fe ff93 	bl	80040b0 <LL_RCC_HSE_IsEnabledDiv2>
 800518a:	4603      	mov	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d102      	bne.n	8005196 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005190:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005192:	60bb      	str	r3, [r7, #8]
=======
 8005c24:	f7ff faba 	bl	800519c <LL_RCC_PLL_GetMainSource>
 8005c28:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d003      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x64>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005c36:	e00d      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c3a:	60bb      	str	r3, [r7, #8]
        break;
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c3e:	f7fe ff93 	bl	8004b68 <LL_RCC_HSE_IsEnabledDiv2>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c4a:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
<<<<<<< HEAD
 8005194:	e00d      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005198:	60bb      	str	r3, [r7, #8]
        break;
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800519c:	f7ff f95b 	bl	8004456 <LL_RCC_MSI_GetRange>
 80051a0:	4603      	mov	r3, r0
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ae:	60bb      	str	r3, [r7, #8]
        break;
 80051b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80051b2:	f7ff fa72 	bl	800469a <LL_RCC_PLL_GetN>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	fb03 f402 	mul.w	r4, r3, r2
 80051be:	f7ff fa85 	bl	80046cc <LL_RCC_PLL_GetDivider>
 80051c2:	4603      	mov	r3, r0
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	3301      	adds	r3, #1
 80051c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80051cc:	f7ff fa72 	bl	80046b4 <LL_RCC_PLL_GetR>
 80051d0:	4603      	mov	r3, r0
 80051d2:	0f5b      	lsrs	r3, r3, #29
 80051d4:	3301      	adds	r3, #1
 80051d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80051da:	60fb      	str	r3, [r7, #12]
=======
 8005c4c:	e00d      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005c4e:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c50:	60bb      	str	r3, [r7, #8]
        break;
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c54:	f7ff f95b 	bl	8004f0e <LL_RCC_MSI_GetRange>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c66:	60bb      	str	r3, [r7, #8]
        break;
 8005c68:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005c6a:	f7ff fa72 	bl	8005152 <LL_RCC_PLL_GetN>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	fb03 f402 	mul.w	r4, r3, r2
 8005c76:	f7ff fa85 	bl	8005184 <LL_RCC_PLL_GetDivider>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	3301      	adds	r3, #1
 8005c80:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c84:	f7ff fa72 	bl	800516c <LL_RCC_PLL_GetR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	0f5b      	lsrs	r3, r3, #29
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c92:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
<<<<<<< HEAD
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd90      	pop	{r4, r7, pc}
 80051e6:	bf00      	nop
 80051e8:	0800e8c4 	.word	0x0800e8c4
 80051ec:	00f42400 	.word	0x00f42400
 80051f0:	01e84800 	.word	0x01e84800

080051f4 <HAL_RCC_GetHCLKFreq>:
=======
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd90      	pop	{r4, r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800fa04 	.word	0x0800fa04
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	01e84800 	.word	0x01e84800

08005cac <HAL_RCC_GetHCLKFreq>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80051f4:	b598      	push	{r3, r4, r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051f8:	f7ff ff90 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80051fc:	4604      	mov	r4, r0
 80051fe:	f7ff f9dd 	bl	80045bc <LL_RCC_GetAHBPrescaler>
 8005202:	4603      	mov	r3, r0
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	4a03      	ldr	r2, [pc, #12]	; (8005218 <HAL_RCC_GetHCLKFreq+0x24>)
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd98      	pop	{r3, r4, r7, pc}
 8005218:	0800e864 	.word	0x0800e864

0800521c <HAL_RCC_GetPCLK1Freq>:
=======
 8005cac:	b598      	push	{r3, r4, r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005cb0:	f7ff ff90 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	f7ff f9dd 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd98      	pop	{r3, r4, r7, pc}
 8005cd0:	0800f9a4 	.word	0x0800f9a4

08005cd4 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800521c:	b598      	push	{r3, r4, r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005220:	f7ff ffe8 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005224:	4604      	mov	r4, r0
 8005226:	f7ff f9f0 	bl	800460a <LL_RCC_GetAPB1Prescaler>
 800522a:	4603      	mov	r3, r0
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	4a04      	ldr	r2, [pc, #16]	; (8005244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd98      	pop	{r3, r4, r7, pc}
 8005244:	0800e8a4 	.word	0x0800e8a4

08005248 <HAL_RCC_GetPCLK2Freq>:
=======
 8005cd4:	b598      	push	{r3, r4, r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cd8:	f7ff ffe8 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	f7ff f9f0 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd98      	pop	{r3, r4, r7, pc}
 8005cfc:	0800f9e4 	.word	0x0800f9e4

08005d00 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005248:	b598      	push	{r3, r4, r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800524c:	f7ff ffd2 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005250:	4604      	mov	r4, r0
 8005252:	f7ff f9e6 	bl	8004622 <LL_RCC_GetAPB2Prescaler>
 8005256:	4603      	mov	r3, r0
 8005258:	0adb      	lsrs	r3, r3, #11
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	4a04      	ldr	r2, [pc, #16]	; (8005270 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	fa24 f303 	lsr.w	r3, r4, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd98      	pop	{r3, r4, r7, pc}
 8005270:	0800e8a4 	.word	0x0800e8a4

08005274 <HAL_RCC_GetClockConfig>:
=======
 8005d00:	b598      	push	{r3, r4, r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d04:	f7ff ffd2 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	f7ff f9e6 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	0adb      	lsrs	r3, r3, #11
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd98      	pop	{r3, r4, r7, pc}
 8005d28:	0800f9e4 	.word	0x0800f9e4

08005d2c <HAL_RCC_GetClockConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
=======
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
<<<<<<< HEAD
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	226f      	movs	r2, #111	; 0x6f
 8005282:	601a      	str	r2, [r3, #0]
=======
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	226f      	movs	r2, #111	; 0x6f
 8005d3a:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
<<<<<<< HEAD
 8005284:	f7ff f925 	bl	80044d2 <LL_RCC_GetSysClkSource>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800528e:	f7ff f995 	bl	80045bc <LL_RCC_GetAHBPrescaler>
 8005292:	4602      	mov	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005298:	f7ff f9b7 	bl	800460a <LL_RCC_GetAPB1Prescaler>
 800529c:	4602      	mov	r2, r0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80052a2:	f7ff f9be 	bl	8004622 <LL_RCC_GetAPB2Prescaler>
 80052a6:	4602      	mov	r2, r0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80052ac:	f7ff f992 	bl	80045d4 <LL_C2_RCC_GetAHBPrescaler>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80052b6:	f7ff f99a 	bl	80045ee <LL_RCC_GetAHB4Prescaler>
 80052ba:	4602      	mov	r2, r0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052c0:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <HAL_RCC_GetClockConfig+0x60>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0207 	and.w	r2, r3, #7
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	58004000 	.word	0x58004000

080052d8 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8005d3c:	f7ff f925 	bl	8004f8a <LL_RCC_GetSysClkSource>
 8005d40:	4602      	mov	r2, r0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005d46:	f7ff f995 	bl	8005074 <LL_RCC_GetAHBPrescaler>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005d50:	f7ff f9b7 	bl	80050c2 <LL_RCC_GetAPB1Prescaler>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005d5a:	f7ff f9be 	bl	80050da <LL_RCC_GetAPB2Prescaler>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005d64:	f7ff f992 	bl	800508c <LL_C2_RCC_GetAHBPrescaler>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005d6e:	f7ff f99a 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <HAL_RCC_GetClockConfig+0x60>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0207 	and.w	r2, r3, #7
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	58004000 	.word	0x58004000

08005d90 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
<<<<<<< HEAD
 80052d8:	b590      	push	{r4, r7, lr}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
=======
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
<<<<<<< HEAD
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2bb0      	cmp	r3, #176	; 0xb0
 80052e4:	d903      	bls.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e007      	b.n	80052fe <RCC_SetFlashLatencyFromMSIRange+0x26>
=======
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2bb0      	cmp	r3, #176	; 0xb0
 8005d9c:	d903      	bls.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e007      	b.n	8005db6 <RCC_SetFlashLatencyFromMSIRange+0x26>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
<<<<<<< HEAD
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	4a11      	ldr	r2, [pc, #68]	; (800533c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80052fe:	f7ff f976 	bl	80045ee <LL_RCC_GetAHB4Prescaler>
 8005302:	4603      	mov	r3, r0
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800530c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	0c9c      	lsrs	r4, r3, #18
 8005322:	f7fe feb7 	bl	8004094 <HAL_PWREx_GetVoltageRange>
 8005326:	4603      	mov	r3, r0
 8005328:	4619      	mov	r1, r3
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f80c 	bl	8005348 <RCC_SetFlashLatency>
 8005330:	4603      	mov	r3, r0
=======
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005db6:	f7ff f976 	bl	80050a6 <LL_RCC_GetAHB4Prescaler>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	; (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	0c9c      	lsrs	r4, r3, #18
 8005dda:	f7fe feb7 	bl	8004b4c <HAL_PWREx_GetVoltageRange>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f80c 	bl	8005e00 <RCC_SetFlashLatency>
 8005de8:	4603      	mov	r3, r0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
<<<<<<< HEAD
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bd90      	pop	{r4, r7, pc}
 800533a:	bf00      	nop
 800533c:	0800e8c4 	.word	0x0800e8c4
 8005340:	0800e864 	.word	0x0800e864
 8005344:	431bde83 	.word	0x431bde83

08005348 <RCC_SetFlashLatency>:
=======
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd90      	pop	{r4, r7, pc}
 8005df2:	bf00      	nop
 8005df4:	0800fa04 	.word	0x0800fa04
 8005df8:	0800f9a4 	.word	0x0800f9a4
 8005dfc:	431bde83 	.word	0x431bde83

08005e00 <RCC_SetFlashLatency>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
<<<<<<< HEAD
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b093      	sub	sp, #76	; 0x4c
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <RCC_SetFlashLatency+0xe8>)
 8005354:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800535a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <RCC_SetFlashLatency+0xec>)
 8005360:	f107 031c 	add.w	r3, r7, #28
 8005364:	ca07      	ldmia	r2, {r0, r1, r2}
 8005366:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800536a:	4b33      	ldr	r3, [pc, #204]	; (8005438 <RCC_SetFlashLatency+0xf0>)
 800536c:	f107 040c 	add.w	r4, r7, #12
 8005370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005376:	2300      	movs	r3, #0
 8005378:	647b      	str	r3, [r7, #68]	; 0x44
=======
 8005e00:	b590      	push	{r4, r7, lr}
 8005e02:	b093      	sub	sp, #76	; 0x4c
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <RCC_SetFlashLatency+0xe8>)
 8005e0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005e10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <RCC_SetFlashLatency+0xec>)
 8005e18:	f107 031c 	add.w	r3, r7, #28
 8005e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e22:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <RCC_SetFlashLatency+0xf0>)
 8005e24:	f107 040c 	add.w	r4, r7, #12
 8005e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005380:	d11a      	bne.n	80053b8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005382:	2300      	movs	r3, #0
 8005384:	643b      	str	r3, [r7, #64]	; 0x40
 8005386:	e013      	b.n	80053b0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	3348      	adds	r3, #72	; 0x48
 800538e:	443b      	add	r3, r7
 8005390:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d807      	bhi.n	80053aa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	3348      	adds	r3, #72	; 0x48
 80053a0:	443b      	add	r3, r7
 80053a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053a6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053a8:	e020      	b.n	80053ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	3301      	adds	r3, #1
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d9e8      	bls.n	8005388 <RCC_SetFlashLatency+0x40>
 80053b6:	e019      	b.n	80053ec <RCC_SetFlashLatency+0xa4>
=======
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d11a      	bne.n	8005e70 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3e:	e013      	b.n	8005e68 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3348      	adds	r3, #72	; 0x48
 8005e46:	443b      	add	r3, r7
 8005e48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d807      	bhi.n	8005e62 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3348      	adds	r3, #72	; 0x48
 8005e58:	443b      	add	r3, r7
 8005e5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e60:	e020      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3301      	adds	r3, #1
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d9e8      	bls.n	8005e40 <RCC_SetFlashLatency+0x40>
 8005e6e:	e019      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
<<<<<<< HEAD
 80053b8:	2300      	movs	r3, #0
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053bc:	e013      	b.n	80053e6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3348      	adds	r3, #72	; 0x48
 80053c4:	443b      	add	r3, r7
 80053c6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d807      	bhi.n	80053e0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	3348      	adds	r3, #72	; 0x48
 80053d6:	443b      	add	r3, r7
 80053d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053de:	e005      	b.n	80053ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e2:	3301      	adds	r3, #1
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d9e8      	bls.n	80053be <RCC_SetFlashLatency+0x76>
=======
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	e013      	b.n	8005e9e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3348      	adds	r3, #72	; 0x48
 8005e7c:	443b      	add	r3, r7
 8005e7e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d807      	bhi.n	8005e98 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	3348      	adds	r3, #72	; 0x48
 8005e8e:	443b      	add	r3, r7
 8005e90:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e94:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e96:	e005      	b.n	8005ea4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d9e8      	bls.n	8005e76 <RCC_SetFlashLatency+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 80053ec:	4b13      	ldr	r3, [pc, #76]	; (800543c <RCC_SetFlashLatency+0xf4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f023 0207 	bic.w	r2, r3, #7
 80053f4:	4911      	ldr	r1, [pc, #68]	; (800543c <RCC_SetFlashLatency+0xf4>)
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053fc:	f7fc fa8c 	bl	8001918 <HAL_GetTick>
 8005400:	63b8      	str	r0, [r7, #56]	; 0x38
=======
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fb fdbe 	bl	8001a34 <HAL_GetTick>
 8005eb8:	63b8      	str	r0, [r7, #56]	; 0x38
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8005402:	e008      	b.n	8005416 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005404:	f7fc fa88 	bl	8001918 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e007      	b.n	8005426 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <RCC_SetFlashLatency+0xf4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005420:	429a      	cmp	r2, r3
 8005422:	d1ef      	bne.n	8005404 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	374c      	adds	r7, #76	; 0x4c
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	0800e744 	.word	0x0800e744
 8005434:	0800e754 	.word	0x0800e754
 8005438:	0800e760 	.word	0x0800e760
 800543c:	58004000 	.word	0x58004000

08005440 <LL_RCC_LSE_IsEnabled>:
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <LL_RCC_LSE_IsEnabled+0x18>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <LL_RCC_LSE_IsEnabled+0x1a>
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_RCC_LSE_IsReady>:
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d101      	bne.n	800547c <LL_RCC_LSE_IsReady+0x18>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <LL_RCC_LSE_IsReady+0x1a>
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_RCC_MSI_EnablePLLMode>:
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800548c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_SetRFWKPClockSource>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_SetSMPSClockSource>:
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80054da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	f023 0203 	bic.w	r2, r3, #3
 80054e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LL_RCC_SetSMPSPrescaler>:
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800550c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4313      	orrs	r3, r2
 8005514:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_RCC_SetUSARTClockSource>:
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <LL_RCC_SetLPUARTClockSource>:
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_RCC_SetI2CClockSource>:
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005586:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005592:	43db      	mvns	r3, r3
 8005594:	401a      	ands	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800559e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_SetLPTIMClockSource>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	43db      	mvns	r3, r3
 80055cc:	401a      	ands	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_RCC_SetSAIClockSource>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80055f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_RCC_SetRNGClockSource>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <LL_RCC_SetCLK48ClockSource>:
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_RCC_SetUSBClockSource>:
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ffe3 	bl	8005640 <LL_RCC_SetCLK48ClockSource>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <LL_RCC_SetADCClockSource>:
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <LL_RCC_SetRTCClockSource>:
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_RCC_GetRTCClockSource>:
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_ForceBackupDomainReset>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800570c:	bf00      	nop
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800571a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800572e:	bf00      	nop
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_RCC_PLLSAI1_Enable>:
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_PLLSAI1_Disable>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005768:	6013      	str	r3, [r2, #0]
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_RCC_PLLSAI1_IsReady>:
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d101      	bne.n	800578c <LL_RCC_PLLSAI1_IsReady+0x18>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8005eba:	e008      	b.n	8005ece <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ebc:	f7fb fdba 	bl	8001a34 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e007      	b.n	8005ede <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <RCC_SetFlashLatency+0xf4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d1ef      	bne.n	8005ebc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	374c      	adds	r7, #76	; 0x4c
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	0800f8a8 	.word	0x0800f8a8
 8005eec:	0800f8b8 	.word	0x0800f8b8
 8005ef0:	0800f8c4 	.word	0x0800f8c4
 8005ef4:	58004000 	.word	0x58004000

08005ef8 <LL_RCC_LSE_IsEnabled>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <LL_RCC_LSE_IsEnabled+0x18>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <LL_RCC_LSE_IsEnabled+0x1a>
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_LSE_IsReady>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d101      	bne.n	8005f34 <LL_RCC_LSE_IsReady+0x18>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <LL_RCC_LSE_IsReady+0x1a>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_SetRFWKPClockSource>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_RCC_SetSMPSClockSource>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetSMPSPrescaler>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_SetUSARTClockSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <LL_RCC_SetLPUARTClockSource>:
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800601a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_SetI2CClockSource>:
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800603a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800604a:	43db      	mvns	r3, r3
 800604c:	401a      	ands	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_RCC_SetLPTIMClockSource>:
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	43db      	mvns	r3, r3
 8006084:	401a      	ands	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_SetSAIClockSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_SetRNGClockSource>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_SetCLK48ClockSource>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800610c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_SetUSBClockSource>:
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ffe3 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <LL_RCC_SetADCClockSource>:
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <LL_RCC_SetRTCClockSource>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800617a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_RCC_GetRTCClockSource>:
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_ForceBackupDomainReset>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <LL_RCC_PLLSAI1_Enable>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_PLLSAI1_Disable>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_PLLSAI1_IsReady>:
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800623a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623e:	d101      	bne.n	8006244 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80057a0:	2300      	movs	r3, #0
 80057a2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	77bb      	strb	r3, [r7, #30]
=======
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	77bb      	strb	r3, [r7, #30]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d034      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d034      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057bc:	d021      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80057be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c2:	d81b      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057c8:	d01d      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ce:	d815      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d110      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x64>
=======
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006274:	d021      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800627a:	d81b      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800627c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006280:	d01d      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006286:	d815      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800628c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006290:	d110      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
<<<<<<< HEAD
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057ea:	e00d      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 8006292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80062a2:	e00d      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
<<<<<<< HEAD
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f94d 	bl	8005a90 <RCCEx_PLLSAI1_ConfigNP>
 80057f6:	4603      	mov	r3, r0
 80057f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057fa:	e005      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x70>
=======
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f94d 	bl	8006548 <RCCEx_PLLSAI1_ConfigNP>
 80062ae:	4603      	mov	r3, r0
 80062b0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80062b2:	e005      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
        break;
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005808:	7ffb      	ldrb	r3, [r7, #31]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fee8 	bl	80055e8 <LL_RCC_SetSAIClockSource>
 8005818:	e001      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x86>
=======
 80062b4:	2301      	movs	r3, #1
 80062b6:	77fb      	strb	r3, [r7, #31]
        break;
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	7ffb      	ldrb	r3, [r7, #31]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fee8 	bl	80060a0 <LL_RCC_SetSAIClockSource>
 80062d0:	e001      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800581a:	7ffb      	ldrb	r3, [r7, #31]
 800581c:	77bb      	strb	r3, [r7, #30]
=======
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
 80062d4:	77bb      	strb	r3, [r7, #30]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005826:	2b00      	cmp	r3, #0
 8005828:	d046      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800582a:	f7ff ff56 	bl	80056da <LL_RCC_GetRTCClockSource>
 800582e:	61b8      	str	r0, [r7, #24]
=======
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d046      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80062e2:	f7ff ff56 	bl	8006192 <LL_RCC_GetRTCClockSource>
 80062e6:	61b8      	str	r0, [r7, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
<<<<<<< HEAD
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d03c      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800583a:	f7fe fc1b 	bl	8004074 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ff30 	bl	80056ae <LL_RCC_SetRTCClockSource>
 800584e:	e02e      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x116>
=======
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d03c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062f2:	f7fe fc1b 	bl	8004b2c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff30 	bl	8006166 <LL_RCC_SetRTCClockSource>
 8006306:	e02e      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
<<<<<<< HEAD
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800585a:	f7ff ff4b 	bl	80056f4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800585e:	f7ff ff5a 	bl	8005716 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800587a:	f7ff fde1 	bl	8005440 <LL_RCC_LSE_IsEnabled>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d114      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005884:	f7fc f848 	bl	8001918 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800588a:	e00b      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588c:	f7fc f844 	bl	8001918 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d902      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	77fb      	strb	r3, [r7, #31]
              break;
 80058a2:	e004      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058a4:	f7ff fdde 	bl	8005464 <LL_RCC_LSE_IsReady>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d1ee      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xf4>
=======
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006312:	f7ff ff4b 	bl	80061ac <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006316:	f7ff ff5a 	bl	80061ce <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006332:	f7ff fde1 	bl	8005ef8 <LL_RCC_LSE_IsEnabled>
 8006336:	4603      	mov	r3, r0
 8006338:	2b01      	cmp	r3, #1
 800633a:	d114      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800633c:	f7fb fb7a 	bl	8001a34 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006342:	e00b      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006344:	f7fb fb76 	bl	8001a34 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006352:	4293      	cmp	r3, r2
 8006354:	d902      	bls.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	77fb      	strb	r3, [r7, #31]
              break;
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800635c:	f7ff fdde 	bl	8005f1c <LL_RCC_LSE_IsReady>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d1ee      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }
      }

      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
 80058b0:	77bb      	strb	r3, [r7, #30]
 80058b2:	e001      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
=======
 8006366:	7ffb      	ldrb	r3, [r7, #31]
 8006368:	77bb      	strb	r3, [r7, #30]
 800636a:	e001      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x120>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80058b4:	7ffb      	ldrb	r3, [r7, #31]
 80058b6:	77bb      	strb	r3, [r7, #30]
=======
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	77bb      	strb	r3, [r7, #30]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fe2a 	bl	8005522 <LL_RCC_SetUSARTClockSource>
=======
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fe2a 	bl	8005fda <LL_RCC_SetUSARTClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d004      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
=======
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x14c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fe35 	bl	800554e <LL_RCC_SetLPUARTClockSource>
=======
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fe35 	bl	8006006 <LL_RCC_SetLPUARTClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fe5d 	bl	80055b4 <LL_RCC_SetLPTIMClockSource>
=======
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fe5d 	bl	800606c <LL_RCC_SetLPTIMClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fe52 	bl	80055b4 <LL_RCC_SetLPTIMClockSource>
=======
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fe52 	bl	800606c <LL_RCC_SetLPTIMClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x18e>
=======
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x18e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fe2a 	bl	800557a <LL_RCC_SetI2CClockSource>
=======
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fe2a 	bl	8006032 <LL_RCC_SetI2CClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
=======
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fe1f 	bl	800557a <LL_RCC_SetI2CClockSource>
=======
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fe1f 	bl	8006032 <LL_RCC_SetI2CClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d022      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fe8d 	bl	800566c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595a:	d107      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005974:	d10b      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f8e3 	bl	8005b46 <RCCEx_PLLSAI1_ConfigNQ>
 8005980:	4603      	mov	r3, r0
 8005982:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005984:	7ffb      	ldrb	r3, [r7, #31]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800598a:	7ffb      	ldrb	r3, [r7, #31]
 800598c:	77bb      	strb	r3, [r7, #30]
=======
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe8d 	bl	8006124 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006422:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f8e3 	bl	80065fe <RCCEx_PLLSAI1_ConfigNQ>
 8006438:	4603      	mov	r3, r0
 800643a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800643c:	7ffb      	ldrb	r3, [r7, #31]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006442:	7ffb      	ldrb	r3, [r7, #31]
 8006444:	77bb      	strb	r3, [r7, #30]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02b      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
=======
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
<<<<<<< HEAD
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d008      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fe2a 	bl	8005614 <LL_RCC_SetRNGClockSource>
 80059c0:	e00a      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7ff fe21 	bl	8005614 <LL_RCC_SetRNGClockSource>
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff fe34 	bl	8005640 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059e0:	d107      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f0:	60d3      	str	r3, [r2, #12]
=======
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d008      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fe2a 	bl	80060cc <LL_RCC_SetRNGClockSource>
 8006478:	e00a      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff fe21 	bl	80060cc <LL_RCC_SetRNGClockSource>
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fe34 	bl	80060f8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064a8:	60d3      	str	r3, [r2, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d022      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
=======
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d022      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fe3d 	bl	8005682 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a10:	d107      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a20:	60d3      	str	r3, [r2, #12]
=======
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fe3d 	bl	800613a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c8:	d107      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	60d3      	str	r3, [r2, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a2a:	d10b      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 f8e3 	bl	8005bfc <RCCEx_PLLSAI1_ConfigNR>
 8005a36:	4603      	mov	r3, r0
 8005a38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a40:	7ffb      	ldrb	r3, [r7, #31]
 8005a42:	77bb      	strb	r3, [r7, #30]
=======
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e2:	d10b      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 f8e3 	bl	80066b4 <RCCEx_PLLSAI1_ConfigNR>
 80064ee:	4603      	mov	r3, r0
 80064f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	77bb      	strb	r3, [r7, #30]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
<<<<<<< HEAD
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
<<<<<<< HEAD
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fd26 	bl	80054a6 <LL_RCC_SetRFWKPClockSource>
=======
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fd26 	bl	8005f5e <LL_RCC_SetRFWKPClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
<<<<<<< HEAD
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
=======
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
<<<<<<< HEAD
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fd45 	bl	80054fa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fd2c 	bl	80054d2 <LL_RCC_SetSMPSClockSource>
=======
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd45 	bl	8005fb2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff fd2c 	bl	8005f8a <LL_RCC_SetSMPSClockSource>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
<<<<<<< HEAD
 8005a7a:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_RCCEx_EnableMSIPLLMode>:
=======
 8006532:	7fbb      	ldrb	r3, [r7, #30]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_RCCEx_EnableMSIPLLMode>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
<<<<<<< HEAD
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005a88:	f7ff fcfe 	bl	8005488 <LL_RCC_MSI_EnablePLLMode>
}
 8005a8c:	bf00      	nop
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <RCCEx_PLLSAI1_ConfigNP>:
=======
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006540:	f7ff fcfe 	bl	8005f40 <LL_RCC_MSI_EnablePLLMode>
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}

08006548 <RCCEx_PLLSAI1_ConfigNP>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
=======
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 8005a9c:	f7ff fe5b 	bl	8005756 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aa0:	f7fb ff3a 	bl	8001918 <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005aa6:	e009      	b.n	8005abc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa8:	f7fb ff36 	bl	8001918 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d902      	bls.n	8005abc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8005aba:	e004      	b.n	8005ac6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005abc:	f7ff fe5a 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <RCCEx_PLLSAI1_ConfigNP+0x18>
=======
 8006554:	f7ff fe5b 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006558:	f7fb fa6c 	bl	8001a34 <HAL_GetTick>
 800655c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655e:	e009      	b.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006560:	f7fb fa68 	bl	8001a34 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
      break;
 8006572:	e004      	b.n	800657e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006574:	f7ff fe5a 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <RCCEx_PLLSAI1_ConfigNP+0x18>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d137      	bne.n	8005b3c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af6:	4313      	orrs	r3, r2
 8005af8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005afa:	f7ff fe1d 	bl	8005738 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afe:	f7fb ff0b 	bl	8001918 <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b04:	e009      	b.n	8005b1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b06:	f7fb ff07 	bl	8001918 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d902      	bls.n	8005b1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	73fb      	strb	r3, [r7, #15]
        break;
 8005b18:	e004      	b.n	8005b24 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b1a:	f7ff fe2b 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d1f0      	bne.n	8005b06 <RCCEx_PLLSAI1_ConfigNP+0x76>
=======
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d137      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800659c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ae:	4313      	orrs	r3, r2
 80065b0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065b2:	f7ff fe1d 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b6:	f7fb fa3d 	bl	8001a34 <HAL_GetTick>
 80065ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065bc:	e009      	b.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065be:	f7fb fa39 	bl	8001a34 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d902      	bls.n	80065d2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
        break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065d2:	f7ff fe2b 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d1f0      	bne.n	80065be <RCCEx_PLLSAI1_ConfigNP+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d108      	bne.n	8005b3c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	610b      	str	r3, [r1, #16]
=======
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return status;
<<<<<<< HEAD
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <RCCEx_PLLSAI1_ConfigNQ>:
=======
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <RCCEx_PLLSAI1_ConfigNQ>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
=======
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 8005b52:	f7ff fe00 	bl	8005756 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b56:	f7fb fedf 	bl	8001918 <HAL_GetTick>
 8005b5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b5c:	e009      	b.n	8005b72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5e:	f7fb fedb 	bl	8001918 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d902      	bls.n	8005b72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b70:	e004      	b.n	8005b7c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b72:	f7ff fdff 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <RCCEx_PLLSAI1_ConfigNQ+0x18>
=======
 800660a:	f7ff fe00 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800660e:	f7fb fa11 	bl	8001a34 <HAL_GetTick>
 8006612:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006614:	e009      	b.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006616:	f7fb fa0d 	bl	8001a34 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d902      	bls.n	800662a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e004      	b.n	8006634 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800662a:	f7ff fdff 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1f0      	bne.n	8006616 <RCCEx_PLLSAI1_ConfigNQ+0x18>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d137      	bne.n	8005bf2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b96:	4313      	orrs	r3, r2
 8005b98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bac:	4313      	orrs	r3, r2
 8005bae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bb0:	f7ff fdc2 	bl	8005738 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bb4:	f7fb feb0 	bl	8001918 <HAL_GetTick>
 8005bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bba:	e009      	b.n	8005bd0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bbc:	f7fb feac 	bl	8001918 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d902      	bls.n	8005bd0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bce:	e004      	b.n	8005bda <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bd0:	f7ff fdd0 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d1f0      	bne.n	8005bbc <RCCEx_PLLSAI1_ConfigNQ+0x76>
=======
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d137      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006668:	f7ff fdc2 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666c:	f7fb f9e2 	bl	8001a34 <HAL_GetTick>
 8006670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006672:	e009      	b.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006674:	f7fb f9de 	bl	8001a34 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d902      	bls.n	8006688 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
        break;
 8006686:	e004      	b.n	8006692 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006688:	f7ff fdd0 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d1f0      	bne.n	8006674 <RCCEx_PLLSAI1_ConfigNQ+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d108      	bne.n	8005bf2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	610b      	str	r3, [r1, #16]
=======
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	4313      	orrs	r3, r2
 80066a8:	610b      	str	r3, [r1, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return status;
<<<<<<< HEAD
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <RCCEx_PLLSAI1_ConfigNR>:
=======
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <RCCEx_PLLSAI1_ConfigNR>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
<<<<<<< HEAD
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	73fb      	strb	r3, [r7, #15]
=======
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
<<<<<<< HEAD
 8005c08:	f7ff fda5 	bl	8005756 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c0c:	f7fb fe84 	bl	8001918 <HAL_GetTick>
 8005c10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c12:	e009      	b.n	8005c28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c14:	f7fb fe80 	bl	8001918 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d902      	bls.n	8005c28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	73fb      	strb	r3, [r7, #15]
      break;
 8005c26:	e004      	b.n	8005c32 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c28:	f7ff fda4 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <RCCEx_PLLSAI1_ConfigNR+0x18>
=======
 80066c0:	f7ff fda5 	bl	800620e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066c4:	f7fb f9b6 	bl	8001a34 <HAL_GetTick>
 80066c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ca:	e009      	b.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066cc:	f7fb f9b2 	bl	8001a34 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d902      	bls.n	80066e0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
      break;
 80066de:	e004      	b.n	80066ea <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066e0:	f7ff fda4 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <RCCEx_PLLSAI1_ConfigNR+0x18>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d137      	bne.n	8005ca8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c62:	4313      	orrs	r3, r2
 8005c64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c66:	f7ff fd67 	bl	8005738 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6a:	f7fb fe55 	bl	8001918 <HAL_GetTick>
 8005c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c70:	e009      	b.n	8005c86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c72:	f7fb fe51 	bl	8001918 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d902      	bls.n	8005c86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	73fb      	strb	r3, [r7, #15]
        break;
 8005c84:	e004      	b.n	8005c90 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c86:	f7ff fd75 	bl	8005774 <LL_RCC_PLLSAI1_IsReady>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d1f0      	bne.n	8005c72 <RCCEx_PLLSAI1_ConfigNR+0x76>
=======
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d137      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006704:	4313      	orrs	r3, r2
 8006706:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671a:	4313      	orrs	r3, r2
 800671c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800671e:	f7ff fd67 	bl	80061f0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006722:	f7fb f987 	bl	8001a34 <HAL_GetTick>
 8006726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006728:	e009      	b.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672a:	f7fb f983 	bl	8001a34 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d902      	bls.n	800673e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	73fb      	strb	r3, [r7, #15]
        break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800673e:	f7ff fd75 	bl	800622c <LL_RCC_PLLSAI1_IsReady>
 8006742:	4603      	mov	r3, r0
 8006744:	2b01      	cmp	r3, #1
 8006746:	d1f0      	bne.n	800672a <RCCEx_PLLSAI1_ConfigNR+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    if (status == HAL_OK)
<<<<<<< HEAD
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
=======
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800674e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return status;
<<<<<<< HEAD
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_Base_Init>:
=======
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_Base_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e049      	b.n	8005d58 <HAL_TIM_Base_Init+0xa6>
=======
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e049      	b.n	8006810 <HAL_TIM_Base_Init+0xa6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f841 	bl	8005d60 <HAL_TIM_Base_MspInit>
=======
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f841 	bl	8006818 <HAL_TIM_Base_MspInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 f9b7 	bl	8006064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_Base_MspInit>:
=======
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f000 f9b7 	bl	8006b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_TIM_Base_MspInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
=======
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIM_Base_Start_IT>:
=======
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_Base_Start_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
=======
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e036      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0x86>
=======
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b01      	cmp	r3, #1
 800683e:	d001      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e036      	b.n	80068b2 <HAL_TIM_Base_Start_IT+0x86>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <HAL_TIM_Base_Start_IT+0x94>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x44>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d115      	bne.n	8005de4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <HAL_TIM_Base_Start_IT+0x98>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b06      	cmp	r3, #6
 8005dc8:	d015      	beq.n	8005df6 <HAL_TIM_Base_Start_IT+0x82>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d011      	beq.n	8005df6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de2:	e008      	b.n	8005df6 <HAL_TIM_Base_Start_IT+0x82>
=======
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <HAL_TIM_Base_Start_IT+0x94>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x44>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d115      	bne.n	800689c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_TIM_Base_Start_IT+0x98>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d015      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d011      	beq.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689a:	e008      	b.n	80068ae <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e000      	b.n	8005df8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df6:	bf00      	nop
=======
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ae:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	00010007 	.word	0x00010007

08005e10 <HAL_TIM_IRQHandler>:
=======
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x52>
=======
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x52>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8e4 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x5e>
=======
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e4 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8d6 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8e7 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
=======
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8d6 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8e7 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0204 	mvn.w	r2, #4
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x9e>
=======
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0204 	mvn.w	r2, #4
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8be 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xaa>
=======
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8be 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8b0 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8c1 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
=======
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8b0 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8c1 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0208 	mvn.w	r2, #8
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0xea>
=======
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d020      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01b      	beq.n	80069c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0208 	mvn.w	r2, #8
 8006994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2204      	movs	r2, #4
 800699a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_TIM_IRQHandler+0xea>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f898 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xf6>
=======
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f898 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069b0:	e005      	b.n	80069be <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f88a 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f89b 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
=======
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f88a 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f89b 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x136>
=======
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d020      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0210 	mvn.w	r2, #16
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x136>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f872 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x142>
=======
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f872 	bl	8006ae0 <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0x142>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f864 	bl	8006014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f875 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
=======
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f864 	bl	8006acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f875 	bl	8006af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00c      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
=======
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb f9b0 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
=======
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fc9a 	bl	8001368 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f98:	611a      	str	r2, [r3, #16]
=======
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a50:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8d0 	bl	8006140 <HAL_TIMEx_BreakCallback>
=======
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8d0 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
<<<<<<< HEAD
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fbc:	611a      	str	r2, [r3, #16]
=======
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a74:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8c8 	bl	8006154 <HAL_TIMEx_Break2Callback>
=======
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f8c8 	bl	8006c0c <HAL_TIMEx_Break2Callback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe0:	611a      	str	r2, [r3, #16]
=======
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a98:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f834 	bl	8006050 <HAL_TIM_TriggerCallback>
=======
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f834 	bl	8006b08 <HAL_TIM_TriggerCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0220 	mvn.w	r2, #32
 8006004:	611a      	str	r2, [r3, #16]
=======
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0220 	mvn.w	r2, #32
 8006abc:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f890 	bl	800612c <HAL_TIMEx_CommutCallback>
=======
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f890 	bl	8006be4 <HAL_TIMEx_CommutCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
=======
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_IC_CaptureCallback>:
=======
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
=======
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
=======
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_TriggerCallback>:
=======
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_TriggerCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
=======
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_Base_SetConfig>:
=======
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_Base_SetConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <TIM_Base_SetConfig+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0x20>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006082:	d108      	bne.n	8006096 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a21      	ldr	r2, [pc, #132]	; (8006120 <TIM_Base_SetConfig+0xbc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0x52>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0x52>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <TIM_Base_SetConfig+0xc0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0x52>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <TIM_Base_SetConfig+0xc4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
=======
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0x20>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d108      	bne.n	8006b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0x52>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <TIM_Base_SetConfig+0xbc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0xa0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a0b      	ldr	r2, [pc, #44]	; (8006124 <TIM_Base_SetConfig+0xc0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0xa0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <TIM_Base_SetConfig+0xc4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0xbc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d007      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <TIM_Base_SetConfig+0xc0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_Base_SetConfig+0xa0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <TIM_Base_SetConfig+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d103      	bne.n	8006bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	615a      	str	r2, [r3, #20]
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800

0800612c <HAL_TIMEx_CommutCallback>:
=======
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
=======
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_BreakCallback>:
=======
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
=======
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_Break2Callback>:
=======
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_Break2Callback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
=======
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_RCC_GetUSARTClockSource>:
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006174:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4013      	ands	r3, r2
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_RCC_GetLPUARTClockSource>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4013      	ands	r3, r2
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UART_Init>:
=======
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <LL_RCC_GetUSARTClockSource>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4013      	ands	r3, r2
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_GetLPUARTClockSource>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4013      	ands	r3, r2
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_Init>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e042      	b.n	8006240 <HAL_UART_Init+0x98>
=======
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e042      	b.n	8006cf8 <HAL_UART_Init+0x98>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
=======
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fb f953 	bl	8001478 <HAL_UART_MspInit>
=======
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fa fc85 	bl	8001594 <HAL_UART_MspInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2224      	movs	r2, #36	; 0x24
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
=======
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	; 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 f914 	bl	8007420 <UART_AdvFeatureConfig>
=======
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 f914 	bl	8007ed8 <UART_AdvFeatureConfig>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fee9 	bl	8006fd0 <UART_SetConfig>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e01b      	b.n	8006240 <HAL_UART_Init+0x98>
=======
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fee9 	bl	8007a88 <UART_SetConfig>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e01b      	b.n	8006cf8 <HAL_UART_Init+0x98>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f993 	bl	8007564 <UART_CheckIdleState>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UART_Transmit_IT>:
=======
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f993 	bl	800801c <UART_CheckIdleState>
 8006cf6:	4603      	mov	r3, r0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UART_Transmit_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006248:	b480      	push	{r7}
 800624a:	b091      	sub	sp, #68	; 0x44
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	2b20      	cmp	r3, #32
 800625e:	d178      	bne.n	8006352 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_UART_Transmit_IT+0x24>
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e071      	b.n	8006354 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	88fa      	ldrh	r2, [r7, #6]
 800627a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2221      	movs	r2, #33	; 0x21
 8006298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a4:	d12a      	bne.n	80062fc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d107      	bne.n	80062c0 <HAL_UART_Transmit_IT+0x78>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a29      	ldr	r2, [pc, #164]	; (8006360 <HAL_UART_Transmit_IT+0x118>)
 80062bc:	679a      	str	r2, [r3, #120]	; 0x78
 80062be:	e002      	b.n	80062c6 <HAL_UART_Transmit_IT+0x7e>
=======
 8006d00:	b480      	push	{r7}
 8006d02:	b091      	sub	sp, #68	; 0x44
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d178      	bne.n	8006e0a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Transmit_IT+0x24>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e071      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2221      	movs	r2, #33	; 0x21
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5c:	d12a      	bne.n	8006db4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d107      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a29      	ldr	r2, [pc, #164]	; (8006e18 <HAL_UART_Transmit_IT+0x118>)
 8006d74:	679a      	str	r2, [r3, #120]	; 0x78
 8006d76:	e002      	b.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4a28      	ldr	r2, [pc, #160]	; (8006364 <HAL_UART_Transmit_IT+0x11c>)
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a28      	ldr	r2, [pc, #160]	; (8006e1c <HAL_UART_Transmit_IT+0x11c>)
 8006d7c:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
<<<<<<< HEAD
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062e6:	637a      	str	r2, [r7, #52]	; 0x34
 80062e8:	633b      	str	r3, [r7, #48]	; 0x30
=======
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9e:	637a      	str	r2, [r7, #52]	; 0x34
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80062ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <HAL_UART_Transmit_IT+0x7e>
 80062fa:	e028      	b.n	800634e <HAL_UART_Transmit_IT+0x106>
=======
 8006da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e5      	bne.n	8006d7e <HAL_UART_Transmit_IT+0x7e>
 8006db2:	e028      	b.n	8006e06 <HAL_UART_Transmit_IT+0x106>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006304:	d107      	bne.n	8006316 <HAL_UART_Transmit_IT+0xce>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <HAL_UART_Transmit_IT+0x120>)
 8006312:	679a      	str	r2, [r3, #120]	; 0x78
 8006314:	e002      	b.n	800631c <HAL_UART_Transmit_IT+0xd4>
=======
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d107      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <HAL_UART_Transmit_IT+0x120>)
 8006dca:	679a      	str	r2, [r3, #120]	; 0x78
 8006dcc:	e002      	b.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
<<<<<<< HEAD
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a14      	ldr	r2, [pc, #80]	; (800636c <HAL_UART_Transmit_IT+0x124>)
 800631a:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a14      	ldr	r2, [pc, #80]	; (8006e24 <HAL_UART_Transmit_IT+0x124>)
 8006dd2:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
<<<<<<< HEAD
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	613b      	str	r3, [r7, #16]
   return(result);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	69f9      	ldr	r1, [r7, #28]
 8006340:	6a3a      	ldr	r2, [r7, #32]
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	61bb      	str	r3, [r7, #24]
   return(result);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e6      	bne.n	800631c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e000      	b.n	8006354 <HAL_UART_Transmit_IT+0x10c>
=======
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e6      	bne.n	8006dd4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e000      	b.n	8006e0c <HAL_UART_Transmit_IT+0x10c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8006352:	2302      	movs	r3, #2
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3744      	adds	r7, #68	; 0x44
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	080081d7 	.word	0x080081d7
 8006364:	080080f7 	.word	0x080080f7
 8006368:	08008035 	.word	0x08008035
 800636c:	08007f7d 	.word	0x08007f7d

08006370 <HAL_UART_Receive_IT>:
=======
 8006e0a:	2302      	movs	r3, #2
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3744      	adds	r7, #68	; 0x44
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	08008c8f 	.word	0x08008c8f
 8006e1c:	08008baf 	.word	0x08008baf
 8006e20:	08008aed 	.word	0x08008aed
 8006e24:	08008a35 	.word	0x08008a35

08006e28 <HAL_UART_Receive_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006384:	2b20      	cmp	r3, #32
 8006386:	d137      	bne.n	80063f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_UART_Receive_IT+0x24>
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e030      	b.n	80063fa <HAL_UART_Receive_IT+0x8a>
=======
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d137      	bne.n	8006eb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Receive_IT+0x24>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e030      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_UART_Receive_IT+0x94>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d01f      	beq.n	80063e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	613b      	str	r3, [r7, #16]
   return(result);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	69f9      	ldr	r1, [r7, #28]
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e6      	bne.n	80063b6 <HAL_UART_Receive_IT+0x46>
=======
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <HAL_UART_Receive_IT+0x94>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d01f      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d018      	beq.n	8006ea0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	e853 3f00 	ldrex	r3, [r3]
 8006e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e90:	69f9      	ldr	r1, [r7, #28]
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	e841 2300 	strex	r3, r2, [r1]
 8006e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1e6      	bne.n	8006e6e <HAL_UART_Receive_IT+0x46>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f001 f9ca 	bl	8007788 <UART_Start_Receive_IT>
 80063f4:	4603      	mov	r3, r0
 80063f6:	e000      	b.n	80063fa <HAL_UART_Receive_IT+0x8a>
=======
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 f9ca 	bl	8008240 <UART_Start_Receive_IT>
 8006eac:	4603      	mov	r3, r0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Receive_IT+0x8a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80063f8:	2302      	movs	r3, #2
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3728      	adds	r7, #40	; 0x28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40008000 	.word	0x40008000

08006408 <HAL_UART_Transmit_DMA>:
=======
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3728      	adds	r7, #40	; 0x28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40008000 	.word	0x40008000

08006ec0 <HAL_UART_Transmit_DMA>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	2b20      	cmp	r3, #32
 800641e:	d167      	bne.n	80064f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <HAL_UART_Transmit_DMA+0x24>
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e060      	b.n	80064f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	88fa      	ldrh	r2, [r7, #6]
 8006442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2221      	movs	r2, #33	; 0x21
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d028      	beq.n	80064b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006462:	4a26      	ldr	r2, [pc, #152]	; (80064fc <HAL_UART_Transmit_DMA+0xf4>)
 8006464:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	4a25      	ldr	r2, [pc, #148]	; (8006500 <HAL_UART_Transmit_DMA+0xf8>)
 800646c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006472:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_UART_Transmit_DMA+0xfc>)
 8006474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647a:	2200      	movs	r2, #0
 800647c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006486:	4619      	mov	r1, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3328      	adds	r3, #40	; 0x28
 800648e:	461a      	mov	r2, r3
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	f7fd f8cd 	bl	8003630 <HAL_DMA_Start_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2210      	movs	r2, #16
 80064a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e020      	b.n	80064f2 <HAL_UART_Transmit_DMA+0xea>
=======
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d167      	bne.n	8006fa8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Transmit_DMA+0x24>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e060      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	88fa      	ldrh	r2, [r7, #6]
 8006efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2221      	movs	r2, #33	; 0x21
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d028      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_UART_Transmit_DMA+0xf4>)
 8006f1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f22:	4a25      	ldr	r2, [pc, #148]	; (8006fb8 <HAL_UART_Transmit_DMA+0xf8>)
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f2a:	4a24      	ldr	r2, [pc, #144]	; (8006fbc <HAL_UART_Transmit_DMA+0xfc>)
 8006f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f32:	2200      	movs	r2, #0
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3328      	adds	r3, #40	; 0x28
 8006f46:	461a      	mov	r2, r3
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	f7fc fc23 	bl	8003794 <HAL_DMA_Start_IT>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2210      	movs	r2, #16
 8006f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e020      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
<<<<<<< HEAD
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2240      	movs	r2, #64	; 0x40
 80064b6:	621a      	str	r2, [r3, #32]
=======
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2240      	movs	r2, #64	; 0x40
 8006f6e:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< HEAD
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	613b      	str	r3, [r7, #16]
   return(result);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	623a      	str	r2, [r7, #32]
 80064da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	69f9      	ldr	r1, [r7, #28]
 80064de:	6a3a      	ldr	r2, [r7, #32]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <HAL_UART_Transmit_DMA+0xea>
=======
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	623a      	str	r2, [r7, #32]
 8006f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e5      	bne.n	8006f70 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Transmit_DMA+0xea>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	08007c67 	.word	0x08007c67
 8006500:	08007d01 	.word	0x08007d01
 8006504:	08007e87 	.word	0x08007e87

08006508 <HAL_UART_DMAStop>:
=======
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	0800871f 	.word	0x0800871f
 8006fb8:	080087b9 	.word	0x080087b9
 8006fbc:	0800893f 	.word	0x0800893f

08006fc0 <HAL_UART_DMAStop>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006508:	b580      	push	{r7, lr}
 800650a:	b090      	sub	sp, #64	; 0x40
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
=======
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b090      	sub	sp, #64	; 0x40
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
<<<<<<< HEAD
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b80      	cmp	r3, #128	; 0x80
 800652c:	d139      	bne.n	80065a2 <HAL_UART_DMAStop+0x9a>
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	2b21      	cmp	r3, #33	; 0x21
 8006532:	d136      	bne.n	80065a2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	61fb      	str	r3, [r7, #28]
   return(result);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd f8d6 	bl	8003726 <HAL_DMA_Abort>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006584:	4618      	mov	r0, r3
 8006586:	f7fd fa3b 	bl	8003a00 <HAL_DMA_GetError>
 800658a:	4603      	mov	r3, r0
 800658c:	2b20      	cmp	r3, #32
 800658e:	d105      	bne.n	800659c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2210      	movs	r2, #16
 8006594:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e047      	b.n	800662c <HAL_UART_DMAStop+0x124>
=======
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d139      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b21      	cmp	r3, #33	; 0x21
 8006fea:	d136      	bne.n	800705a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800700c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702c:	4618      	mov	r0, r3
 800702e:	f7fc fc2c 	bl	800388a <HAL_DMA_Abort>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fd91 	bl	8003b64 <HAL_DMA_GetError>
 8007042:	4603      	mov	r3, r0
 8007044:	2b20      	cmp	r3, #32
 8007046:	d105      	bne.n	8007054 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2210      	movs	r2, #16
 800704c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e047      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }

    UART_EndTxTransfer(huart);
<<<<<<< HEAD
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fabb 	bl	8007b18 <UART_EndTxTransfer>
=======
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fabb 	bl	80085d0 <UART_EndTxTransfer>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d13c      	bne.n	800662a <HAL_UART_DMAStop+0x122>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b22      	cmp	r3, #34	; 0x22
 80065b4:	d139      	bne.n	800662a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	633b      	str	r3, [r7, #48]	; 0x30
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3308      	adds	r3, #8
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	61ba      	str	r2, [r7, #24]
 80065d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6979      	ldr	r1, [r7, #20]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	613b      	str	r3, [r7, #16]
   return(result);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d017      	beq.n	8006624 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fd f893 	bl	8003726 <HAL_DMA_Abort>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd f9f7 	bl	8003a00 <HAL_DMA_GetError>
 8006612:	4603      	mov	r3, r0
 8006614:	2b20      	cmp	r3, #32
 8006616:	d105      	bne.n	8006624 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2210      	movs	r2, #16
 800661c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e003      	b.n	800662c <HAL_UART_DMAStop+0x124>
=======
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d13c      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2b22      	cmp	r3, #34	; 0x22
 800706c:	d139      	bne.n	80070e2 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60bb      	str	r3, [r7, #8]
   return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007084:	633b      	str	r3, [r7, #48]	; 0x30
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	61ba      	str	r2, [r7, #24]
 8007090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	613b      	str	r3, [r7, #16]
   return(result);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d017      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fc fbe9 	bl	800388a <HAL_DMA_Abort>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fc fd4d 	bl	8003b64 <HAL_DMA_GetError>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d105      	bne.n	80070dc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2210      	movs	r2, #16
 80070d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e003      	b.n	80070e4 <HAL_UART_DMAStop+0x124>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }

    UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fab8 	bl	8007b9a <UART_EndRxTransfer>
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3740      	adds	r7, #64	; 0x40
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_UART_AbortReceive_IT>:
=======
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fab8 	bl	8008652 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3740      	adds	r7, #64	; 0x40
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_AbortReceive_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006634:	b580      	push	{r7, lr}
 8006636:	b09a      	sub	sp, #104	; 0x68
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800664a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006650:	667b      	str	r3, [r7, #100]	; 0x64
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665a:	657b      	str	r3, [r7, #84]	; 0x54
 800665c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e6      	bne.n	800663c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3308      	adds	r3, #8
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	663b      	str	r3, [r7, #96]	; 0x60
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006692:	643a      	str	r2, [r7, #64]	; 0x40
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e3      	bne.n	800666e <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d118      	bne.n	80066e0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <HAL_UART_AbortReceive_IT+0x7a>
=======
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b09a      	sub	sp, #104	; 0x68
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007104:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007108:	667b      	str	r3, [r7, #100]	; 0x64
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007112:	657b      	str	r3, [r7, #84]	; 0x54
 8007114:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	663b      	str	r3, [r7, #96]	; 0x60
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800714a:	643a      	str	r2, [r7, #64]	; 0x40
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d118      	bne.n	8007198 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	61fb      	str	r3, [r7, #28]
   return(result);
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007186:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <HAL_UART_AbortReceive_IT+0x7a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
<<<<<<< HEAD
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d154      	bne.n	8006798 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006704:	65bb      	str	r3, [r7, #88]	; 0x58
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800670e:	61ba      	str	r2, [r7, #24]
 8006710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6979      	ldr	r1, [r7, #20]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	613b      	str	r3, [r7, #16]
   return(result);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d017      	beq.n	800675c <HAL_UART_AbortReceive_IT+0x128>
=======
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d154      	bne.n	8007250 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071c6:	61ba      	str	r2, [r7, #24]
 80071c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d017      	beq.n	8007214 <HAL_UART_AbortReceive_IT+0x128>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
<<<<<<< HEAD
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_UART_AbortReceive_IT+0x198>)
 8006734:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd f851 	bl	80037e4 <HAL_DMA_Abort_IT>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03c      	beq.n	80067c2 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006756:	4610      	mov	r0, r2
 8006758:	4798      	blx	r3
 800675a:	e032      	b.n	80067c2 <HAL_UART_AbortReceive_IT+0x18e>
=======
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ea:	4a26      	ldr	r2, [pc, #152]	; (8007284 <HAL_UART_AbortReceive_IT+0x198>)
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fc fba7 	bl	8003948 <HAL_DMA_Abort_IT>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03c      	beq.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	e032      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
<<<<<<< HEAD
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	220f      	movs	r2, #15
 8006770:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0208 	orr.w	r2, r2, #8
 8006780:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	220f      	movs	r2, #15
 8007228:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0208 	orr.w	r2, r2, #8
 8007238:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb55 	bl	8006e40 <HAL_UART_AbortReceiveCpltCallback>
 8006796:	e014      	b.n	80067c2 <HAL_UART_AbortReceive_IT+0x18e>
=======
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb55 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
 800724e:	e014      	b.n	800727a <HAL_UART_AbortReceive_IT+0x18e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
<<<<<<< HEAD
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	220f      	movs	r2, #15
 80067ac:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	220f      	movs	r2, #15
 8007264:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb3f 	bl	8006e40 <HAL_UART_AbortReceiveCpltCallback>
=======
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb3f 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
<<<<<<< HEAD
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3768      	adds	r7, #104	; 0x68
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	08007f33 	.word	0x08007f33

080067d0 <HAL_UART_IRQHandler>:
=======
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3768      	adds	r7, #104	; 0x68
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	080089eb 	.word	0x080089eb

08007288 <HAL_UART_IRQHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b0ba      	sub	sp, #232	; 0xe8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 8007288:	b580      	push	{r7, lr}
 800728a:	b0ba      	sub	sp, #232	; 0xe8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 80067f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80067fe:	4013      	ands	r3, r2
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11b      	bne.n	8006844 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800680c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 82e3 	beq.w	8006e00 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
      }
      return;
 8006842:	e2dd      	b.n	8006e00 <HAL_UART_IRQHandler+0x630>
=======
 80072ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072b6:	4013      	ands	r3, r2
 80072b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11b      	bne.n	80072fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d105      	bne.n	80072e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d009      	beq.n	80072fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 82e3 	beq.w	80078b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
      }
      return;
 80072fa:	e2dd      	b.n	80078b8 <HAL_UART_IRQHandler+0x630>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 8006844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8123 	beq.w	8006a94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800684e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006852:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <HAL_UART_IRQHandler+0x2b8>)
 8006854:	4013      	ands	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800685a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800685e:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <HAL_UART_IRQHandler+0x2bc>)
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8116 	beq.w	8006a94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d011      	beq.n	8006898 <HAL_UART_IRQHandler+0xc8>
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2201      	movs	r2, #1
 8006886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688e:	f043 0201 	orr.w	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80072fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8123 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007306:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 800730c:	4013      	ands	r3, r2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007312:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007316:	4b8b      	ldr	r3, [pc, #556]	; (8007544 <HAL_UART_IRQHandler+0x2bc>)
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8116 	beq.w	800754c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d011      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007346:	f043 0201 	orr.w	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d011      	beq.n	80068c8 <HAL_UART_IRQHandler+0xf8>
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2202      	movs	r2, #2
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d011      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2202      	movs	r2, #2
 800736e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d011      	beq.n	80068f8 <HAL_UART_IRQHandler+0x128>
 80068d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2204      	movs	r2, #4
 80068e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	f043 0202 	orr.w	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2204      	movs	r2, #4
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a6:	f043 0202 	orr.w	r2, r3, #2
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006910:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006914:	4b5c      	ldr	r3, [pc, #368]	; (8006a88 <HAL_UART_IRQHandler+0x2b8>)
 8006916:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2208      	movs	r2, #8
 8006922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f043 0208 	orr.w	r2, r3, #8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d105      	bne.n	80073d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073cc:	4b5c      	ldr	r3, [pc, #368]	; (8007540 <HAL_UART_IRQHandler+0x2b8>)
 80073ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2208      	movs	r2, #8
 80073da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8006934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693c:	2b00      	cmp	r3, #0
 800693e:	d012      	beq.n	8006966 <HAL_UART_IRQHandler+0x196>
 8006940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d012      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800740c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8249 	beq.w	8006e04 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d013      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800697e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
=======
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8249 	beq.w	80078bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800742a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d005      	beq.n	80069ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d054      	beq.n	8006a74 <HAL_UART_IRQHandler+0x2a4>
=======
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d005      	beq.n	8007482 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800747a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800747e:	2b00      	cmp	r3, #0
 8007480:	d054      	beq.n	800752c <HAL_UART_IRQHandler+0x2a4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f8e5 	bl	8007b9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d146      	bne.n	8006a6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1d9      	bne.n	80069de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d017      	beq.n	8006a64 <HAL_UART_IRQHandler+0x294>
=======
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 f8e5 	bl	8008652 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d146      	bne.n	8007524 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3308      	adds	r3, #8
 800749c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3308      	adds	r3, #8
 80074be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1d9      	bne.n	8007496 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <HAL_UART_IRQHandler+0x294>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3a:	4a15      	ldr	r2, [pc, #84]	; (8006a90 <HAL_UART_IRQHandler+0x2c0>)
 8006a3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fc fecd 	bl	80037e4 <HAL_DMA_Abort_IT>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d019      	beq.n	8006a84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	e00f      	b.n	8006a84 <HAL_UART_IRQHandler+0x2b4>
=======
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <HAL_UART_IRQHandler+0x2c0>)
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fc fa23 	bl	8003948 <HAL_DMA_Abort_IT>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751a:	e00f      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f007 fd2d 	bl	800e4c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6a:	e00b      	b.n	8006a84 <HAL_UART_IRQHandler+0x2b4>
=======
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f007 ff61 	bl	800f3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007522:	e00b      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f007 fd29 	bl	800e4c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a72:	e007      	b.n	8006a84 <HAL_UART_IRQHandler+0x2b4>
=======
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f007 ff5d 	bl	800f3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752a:	e007      	b.n	800753c <HAL_UART_IRQHandler+0x2b4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f007 fd25 	bl	800e4c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a82:	e1bf      	b.n	8006e04 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	bf00      	nop
    return;
 8006a86:	e1bd      	b.n	8006e04 <HAL_UART_IRQHandler+0x634>
 8006a88:	10000001 	.word	0x10000001
 8006a8c:	04000120 	.word	0x04000120
 8006a90:	08007f07 	.word	0x08007f07
=======
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f007 ff59 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800753a:	e1bf      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	bf00      	nop
    return;
 800753e:	e1bd      	b.n	80078bc <HAL_UART_IRQHandler+0x634>
 8007540:	10000001 	.word	0x10000001
 8007544:	04000120 	.word	0x04000120
 8007548:	080089bf 	.word	0x080089bf
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f040 8153 	bne.w	8006d44 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 814c 	beq.w	8006d44 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8145 	beq.w	8006d44 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	f040 80bb 	bne.w	8006c48 <HAL_UART_IRQHandler+0x478>
=======
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 8153 	bne.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 814c 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8145 	beq.w	80077fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2210      	movs	r2, #16
 8007578:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	f040 80bb 	bne.w	8007700 <HAL_UART_IRQHandler+0x478>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 818f 	beq.w	8006e08 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006af4:	429a      	cmp	r2, r3
 8006af6:	f080 8187 	bcs.w	8006e08 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 8087 	bne.w	8006c26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1da      	bne.n	8006b18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3308      	adds	r3, #8
 8006b68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e1      	bne.n	8006b62 <HAL_UART_IRQHandler+0x392>
=======
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 818f 	beq.w	80078c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ac:	429a      	cmp	r2, r3
 80075ae:	f080 8187 	bcs.w	80078c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 8087 	bne.w	80076de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1da      	bne.n	80075d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800762a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800762c:	f023 0301 	bic.w	r3, r3, #1
 8007630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800763e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e1      	bne.n	800761a <HAL_UART_IRQHandler+0x392>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e3      	bne.n	8006b9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e4      	bne.n	8006be4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fc fd80 	bl	8003726 <HAL_DMA_Abort>
=======
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007660:	e853 3f00 	ldrex	r3, [r3]
 8007664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800767a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800767c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e3      	bne.n	8007656 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076be:	65bb      	str	r3, [r7, #88]	; 0x58
 80076c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e4      	bne.n	800769c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fc f8d6 	bl	800388a <HAL_DMA_Abort>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f007 fc99 	bl	800e578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c46:	e0df      	b.n	8006e08 <HAL_UART_IRQHandler+0x638>
=======
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f007 fecd 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076fe:	e0df      	b.n	80078c0 <HAL_UART_IRQHandler+0x638>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80d1 	beq.w	8006e0c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80cc 	beq.w	8006e0c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c96:	647b      	str	r3, [r7, #68]	; 0x44
 8006c98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e4      	bne.n	8006c74 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cd2:	633a      	str	r2, [r7, #48]	; 0x30
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e1      	bne.n	8006caa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e4      	bne.n	8006cfa <HAL_UART_IRQHandler+0x52a>
=======
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80d1 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80cc 	beq.w	80078c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800774e:	647b      	str	r3, [r7, #68]	; 0x44
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800775c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e4      	bne.n	800772c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3308      	adds	r3, #8
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	623b      	str	r3, [r7, #32]
   return(result);
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800778a:	633a      	str	r2, [r7, #48]	; 0x30
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e1      	bne.n	8007762 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0310 	bic.w	r3, r3, #16
 80077c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e4      	bne.n	80077b2 <HAL_UART_IRQHandler+0x52a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8006d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f007 fc1b 	bl	800e578 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d42:	e063      	b.n	8006e0c <HAL_UART_IRQHandler+0x63c>
=======
 80077ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f007 fe4f 	bl	800f498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077fa:	e063      	b.n	80078c4 <HAL_UART_IRQHandler+0x63c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_UART_IRQHandler+0x59e>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d64:	621a      	str	r2, [r3, #32]
=======
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00e      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d008      	beq.n	8007826 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800781c:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fff2 	bl	8008d50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d6c:	e051      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
=======
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fff2 	bl	8009808 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007824:	e051      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< HEAD
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d014      	beq.n	8006da4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d03a      	beq.n	8006e10 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
    }
    return;
 8006da2:	e035      	b.n	8006e10 <HAL_UART_IRQHandler+0x640>
=======
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d014      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b00      	cmp	r3, #0
 800783c:	d105      	bne.n	800784a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800783e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784e:	2b00      	cmp	r3, #0
 8007850:	d03a      	beq.n	80078c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
    }
    return;
 800785a:	e035      	b.n	80078c8 <HAL_UART_IRQHandler+0x640>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8006da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5f4>
 8006db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fa7f 	bl	80082c0 <UART_EndTransmit_IT>
    return;
 8006dc2:	e026      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
=======
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa7f 	bl	8008d78 <UART_EndTransmit_IT>
    return;
 800787a:	e026      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< HEAD
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_UART_IRQHandler+0x614>
 8006dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_UART_IRQHandler+0x614>
=======
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
 8007888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800788c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_UART_IRQHandler+0x614>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< HEAD
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 ffcb 	bl	8008d78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006de2:	e016      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
=======
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 ffcb 	bl	8009830 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789a:	e016      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< HEAD
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d010      	beq.n	8006e12 <HAL_UART_IRQHandler+0x642>
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	da0c      	bge.n	8006e12 <HAL_UART_IRQHandler+0x642>
=======
 800789c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d010      	beq.n	80078ca <HAL_UART_IRQHandler+0x642>
 80078a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da0c      	bge.n	80078ca <HAL_UART_IRQHandler+0x642>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< HEAD
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 ffb3 	bl	8008d64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dfe:	e008      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
      return;
 8006e00:	bf00      	nop
 8006e02:	e006      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
    return;
 8006e04:	bf00      	nop
 8006e06:	e004      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
      return;
 8006e08:	bf00      	nop
 8006e0a:	e002      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
      return;
 8006e0c:	bf00      	nop
 8006e0e:	e000      	b.n	8006e12 <HAL_UART_IRQHandler+0x642>
    return;
 8006e10:	bf00      	nop
  }
}
 8006e12:	37e8      	adds	r7, #232	; 0xe8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_TxHalfCpltCallback>:
=======
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 ffb3 	bl	800981c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b6:	e008      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078b8:	bf00      	nop
 80078ba:	e006      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078bc:	bf00      	nop
 80078be:	e004      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
      return;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_UART_IRQHandler+0x642>
    return;
 80078c8:	bf00      	nop
  }
}
 80078ca:	37e8      	adds	r7, #232	; 0xe8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_TxHalfCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
=======
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_UART_RxHalfCpltCallback>:
=======
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
=======
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_AbortReceiveCpltCallback>:
=======
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UART_AbortReceiveCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
=======
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_HalfDuplex_EnableTransmitter>:
=======
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_HalfDuplex_EnableTransmitter>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006e54:	b480      	push	{r7}
 8006e56:	b08f      	sub	sp, #60	; 0x3c
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e042      	b.n	8006ef0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2224      	movs	r2, #36	; 0x24
 8006e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f023 030c 	bic.w	r3, r3, #12
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f043 0308 	orr.w	r3, r3, #8
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6979      	ldr	r1, [r7, #20]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	373c      	adds	r7, #60	; 0x3c
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_HalfDuplex_EnableReceiver>:
=======
 800790c:	b480      	push	{r7}
 800790e:	b08f      	sub	sp, #60	; 0x3c
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800791e:	2302      	movs	r3, #2
 8007920:	e042      	b.n	80079a8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2224      	movs	r2, #36	; 0x24
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	e853 3f00 	ldrex	r3, [r3]
 800793e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f023 030c 	bic.w	r3, r3, #12
 8007946:	637b      	str	r3, [r7, #52]	; 0x34
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007952:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e6      	bne.n	8007932 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f043 0308 	orr.w	r3, r3, #8
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	373c      	adds	r7, #60	; 0x3c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_HalfDuplex_EnableReceiver>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006efc:	b480      	push	{r7}
 8006efe:	b08f      	sub	sp, #60	; 0x3c
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_HalfDuplex_EnableReceiver+0x16>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e042      	b.n	8006f98 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	; 0x24
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f023 030c 	bic.w	r3, r3, #12
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f043 0304 	orr.w	r3, r3, #4
 8006f68:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6979      	ldr	r1, [r7, #20]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e6      	bne.n	8006f54 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	373c      	adds	r7, #60	; 0x3c
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UART_GetState>:
=======
 80079b4:	b480      	push	{r7}
 80079b6:	b08f      	sub	sp, #60	; 0x3c
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_HalfDuplex_EnableReceiver+0x16>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e042      	b.n	8007a50 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2224      	movs	r2, #36	; 0x24
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f023 030c 	bic.w	r3, r3, #12
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 0304 	orr.w	r3, r3, #4
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e6      	bne.n	8007a0c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	373c      	adds	r7, #60	; 0x3c
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_GetState>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4313      	orrs	r3, r2
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <UART_SetConfig>:
=======
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a72:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <UART_SetConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd4:	b08c      	sub	sp, #48	; 0x30
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6178      	str	r0, [r7, #20]
=======
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4baf      	ldr	r3, [pc, #700]	; (80072bc <UART_SetConfig+0x2ec>)
 8007000:	4013      	ands	r3, r2
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007008:	430b      	orrs	r3, r1
 800700a:	6013      	str	r3, [r2, #0]
=======
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baf      	ldr	r3, [pc, #700]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
=======
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4aa4      	ldr	r2, [pc, #656]	; (80072c0 <UART_SetConfig+0x2f0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007038:	4313      	orrs	r3, r2
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4aa4      	ldr	r2, [pc, #656]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
<<<<<<< HEAD
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007046:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007050:	430b      	orrs	r3, r1
 8007052:	6093      	str	r3, [r2, #8]
=======
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	f023 010f 	bic.w	r1, r3, #15
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a95      	ldr	r2, [pc, #596]	; (80072c4 <UART_SetConfig+0x2f4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d125      	bne.n	80070c0 <UART_SetConfig+0xf0>
 8007074:	2003      	movs	r0, #3
 8007076:	f7ff f877 	bl	8006168 <LL_RCC_GetUSARTClockSource>
 800707a:	4603      	mov	r3, r0
 800707c:	2b03      	cmp	r3, #3
 800707e:	d81b      	bhi.n	80070b8 <UART_SetConfig+0xe8>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0xb8>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	08007099 	.word	0x08007099
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070b1 	.word	0x080070b1
 8007098:	2301      	movs	r3, #1
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709e:	e042      	b.n	8007126 <UART_SetConfig+0x156>
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e03e      	b.n	8007126 <UART_SetConfig+0x156>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ae:	e03a      	b.n	8007126 <UART_SetConfig+0x156>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070b6:	e036      	b.n	8007126 <UART_SetConfig+0x156>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070be:	e032      	b.n	8007126 <UART_SetConfig+0x156>
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a7e      	ldr	r2, [pc, #504]	; (80072c0 <UART_SetConfig+0x2f0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d12a      	bne.n	8007120 <UART_SetConfig+0x150>
 80070ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80070ce:	f7ff f85b 	bl	8006188 <LL_RCC_GetLPUARTClockSource>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d8:	d01a      	beq.n	8007110 <UART_SetConfig+0x140>
 80070da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070de:	d81b      	bhi.n	8007118 <UART_SetConfig+0x148>
 80070e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e4:	d00c      	beq.n	8007100 <UART_SetConfig+0x130>
 80070e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ea:	d815      	bhi.n	8007118 <UART_SetConfig+0x148>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <UART_SetConfig+0x128>
 80070f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f4:	d008      	beq.n	8007108 <UART_SetConfig+0x138>
 80070f6:	e00f      	b.n	8007118 <UART_SetConfig+0x148>
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e012      	b.n	8007126 <UART_SetConfig+0x156>
 8007100:	2302      	movs	r3, #2
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e00e      	b.n	8007126 <UART_SetConfig+0x156>
 8007108:	2304      	movs	r3, #4
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710e:	e00a      	b.n	8007126 <UART_SetConfig+0x156>
 8007110:	2308      	movs	r3, #8
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007116:	e006      	b.n	8007126 <UART_SetConfig+0x156>
 8007118:	2310      	movs	r3, #16
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711e:	e002      	b.n	8007126 <UART_SetConfig+0x156>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a95      	ldr	r2, [pc, #596]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	2003      	movs	r0, #3
 8007b2e:	f7ff f877 	bl	8006c20 <LL_RCC_GetUSARTClockSource>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d81b      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e042      	b.n	8007bde <UART_SetConfig+0x156>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e03e      	b.n	8007bde <UART_SetConfig+0x156>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e03a      	b.n	8007bde <UART_SetConfig+0x156>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e036      	b.n	8007bde <UART_SetConfig+0x156>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e032      	b.n	8007bde <UART_SetConfig+0x156>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7e      	ldr	r2, [pc, #504]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d12a      	bne.n	8007bd8 <UART_SetConfig+0x150>
 8007b82:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b86:	f7ff f85b 	bl	8006c40 <LL_RCC_GetLPUARTClockSource>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b90:	d01a      	beq.n	8007bc8 <UART_SetConfig+0x140>
 8007b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b96:	d81b      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9c:	d00c      	beq.n	8007bb8 <UART_SetConfig+0x130>
 8007b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba2:	d815      	bhi.n	8007bd0 <UART_SetConfig+0x148>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <UART_SetConfig+0x128>
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bac:	d008      	beq.n	8007bc0 <UART_SetConfig+0x138>
 8007bae:	e00f      	b.n	8007bd0 <UART_SetConfig+0x148>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e012      	b.n	8007bde <UART_SetConfig+0x156>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e00a      	b.n	8007bde <UART_SetConfig+0x156>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bce:	e006      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd6:	e002      	b.n	8007bde <UART_SetConfig+0x156>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
<<<<<<< HEAD
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <UART_SetConfig+0x2f0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	f040 8097 	bne.w	8007260 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007136:	2b08      	cmp	r3, #8
 8007138:	d823      	bhi.n	8007182 <UART_SetConfig+0x1b2>
 800713a:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <UART_SetConfig+0x170>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007165 	.word	0x08007165
 8007144:	08007183 	.word	0x08007183
 8007148:	0800716d 	.word	0x0800716d
 800714c:	08007183 	.word	0x08007183
 8007150:	08007173 	.word	0x08007173
 8007154:	08007183 	.word	0x08007183
 8007158:	08007183 	.word	0x08007183
 800715c:	08007183 	.word	0x08007183
 8007160:	0800717b 	.word	0x0800717b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007164:	f7fe f85a 	bl	800521c <HAL_RCC_GetPCLK1Freq>
 8007168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800716a:	e010      	b.n	800718e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800716c:	4b56      	ldr	r3, [pc, #344]	; (80072c8 <UART_SetConfig+0x2f8>)
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007170:	e00d      	b.n	800718e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007172:	f7fd ffd3 	bl	800511c <HAL_RCC_GetSysClockFreq>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007178:	e009      	b.n	800718e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007180:	e005      	b.n	800718e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800718c:	bf00      	nop
=======
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a65      	ldr	r2, [pc, #404]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	f040 8097 	bne.w	8007d18 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d823      	bhi.n	8007c3a <UART_SetConfig+0x1b2>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x170>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c3b 	.word	0x08007c3b
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c2b 	.word	0x08007c2b
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	08007c3b 	.word	0x08007c3b
 8007c14:	08007c3b 	.word	0x08007c3b
 8007c18:	08007c33 	.word	0x08007c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fe f85a 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8007c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c22:	e010      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c24:	4b56      	ldr	r3, [pc, #344]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c28:	e00d      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2a:	f7fd ffd3 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007c2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c30:	e009      	b.n	8007c46 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c38:	e005      	b.n	8007c46 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007c44:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 812b 	beq.w	80073ec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	4a4c      	ldr	r2, [pc, #304]	; (80072cc <UART_SetConfig+0x2fc>)
 800719c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4413      	add	r3, r2
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d305      	bcc.n	80071c6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d903      	bls.n	80071ce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071cc:	e10e      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 812b 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d305      	bcc.n	8007c7e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d903      	bls.n	8007c86 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c84:	e10e      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2200      	movs	r2, #0
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	60fa      	str	r2, [r7, #12]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	4a3c      	ldr	r2, [pc, #240]	; (80072cc <UART_SetConfig+0x2fc>)
 80071dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2200      	movs	r2, #0
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071f0:	f7f9 fb94 	bl	800091c <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4610      	mov	r0, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	020b      	lsls	r3, r1, #8
 8007206:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800720a:	0202      	lsls	r2, r0, #8
 800720c:	6979      	ldr	r1, [r7, #20]
 800720e:	6849      	ldr	r1, [r1, #4]
 8007210:	0849      	lsrs	r1, r1, #1
 8007212:	2000      	movs	r0, #0
 8007214:	460c      	mov	r4, r1
 8007216:	4605      	mov	r5, r0
 8007218:	eb12 0804 	adds.w	r8, r2, r4
 800721c:	eb43 0905 	adc.w	r9, r3, r5
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	469a      	mov	sl, r3
 8007228:	4693      	mov	fp, r2
 800722a:	4652      	mov	r2, sl
 800722c:	465b      	mov	r3, fp
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f7f9 fb73 	bl	800091c <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4613      	mov	r3, r2
 800723c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007244:	d308      	bcc.n	8007258 <UART_SetConfig+0x288>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724c:	d204      	bcs.n	8007258 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6a3a      	ldr	r2, [r7, #32]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	e0c9      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	60fa      	str	r2, [r7, #12]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	4a3c      	ldr	r2, [pc, #240]	; (8007d84 <UART_SetConfig+0x2fc>)
 8007c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ca8:	f7f8 fe38 	bl	800091c <__aeabi_uldivmod>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	020b      	lsls	r3, r1, #8
 8007cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cc2:	0202      	lsls	r2, r0, #8
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	6849      	ldr	r1, [r1, #4]
 8007cc8:	0849      	lsrs	r1, r1, #1
 8007cca:	2000      	movs	r0, #0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	4605      	mov	r5, r0
 8007cd0:	eb12 0804 	adds.w	r8, r2, r4
 8007cd4:	eb43 0905 	adc.w	r9, r3, r5
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	469a      	mov	sl, r3
 8007ce0:	4693      	mov	fp, r2
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fe17 	bl	800091c <__aeabi_uldivmod>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cfc:	d308      	bcc.n	8007d10 <UART_SetConfig+0x288>
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d04:	d204      	bcs.n	8007d10 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	60da      	str	r2, [r3, #12]
 8007d0e:	e0c9      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 8007258:	2301      	movs	r3, #1
 800725a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800725e:	e0c5      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d16:	e0c5      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007268:	d16d      	bne.n	8007346 <UART_SetConfig+0x376>
=======
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d20:	d16d      	bne.n	8007dfe <UART_SetConfig+0x376>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
<<<<<<< HEAD
 800726a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800726e:	3b01      	subs	r3, #1
 8007270:	2b07      	cmp	r3, #7
 8007272:	d82d      	bhi.n	80072d0 <UART_SetConfig+0x300>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x2ac>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	0800729d 	.word	0x0800729d
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072d1 	.word	0x080072d1
 8007288:	080072ab 	.word	0x080072ab
 800728c:	080072d1 	.word	0x080072d1
 8007290:	080072d1 	.word	0x080072d1
 8007294:	080072d1 	.word	0x080072d1
 8007298:	080072b3 	.word	0x080072b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fd ffd4 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 80072a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072a2:	e01b      	b.n	80072dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a4:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <UART_SetConfig+0x2f8>)
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072a8:	e018      	b.n	80072dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fd ff37 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80072ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072b0:	e014      	b.n	80072dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072b8:	e010      	b.n	80072dc <UART_SetConfig+0x30c>
 80072ba:	bf00      	nop
 80072bc:	cfff69f3 	.word	0xcfff69f3
 80072c0:	40008000 	.word	0x40008000
 80072c4:	40013800 	.word	0x40013800
 80072c8:	00f42400 	.word	0x00f42400
 80072cc:	0800e904 	.word	0x0800e904
      default:
        pclk = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072da:	bf00      	nop
=======
 8007d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b07      	cmp	r3, #7
 8007d2a:	d82d      	bhi.n	8007d88 <UART_SetConfig+0x300>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x2ac>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d55 	.word	0x08007d55
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d89 	.word	0x08007d89
 8007d40:	08007d63 	.word	0x08007d63
 8007d44:	08007d89 	.word	0x08007d89
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d89 	.word	0x08007d89
 8007d50:	08007d6b 	.word	0x08007d6b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd ffd4 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5a:	e01b      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d5c:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <UART_SetConfig+0x2f8>)
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d60:	e018      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d62:	f7fd ff37 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d68:	e014      	b.n	8007d94 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d70:	e010      	b.n	8007d94 <UART_SetConfig+0x30c>
 8007d72:	bf00      	nop
 8007d74:	cfff69f3 	.word	0xcfff69f3
 8007d78:	40008000 	.word	0x40008000
 8007d7c:	40013800 	.word	0x40013800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	0800fa44 	.word	0x0800fa44
      default:
        pclk = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d92:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8084 	beq.w	80073ec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	4a4b      	ldr	r2, [pc, #300]	; (8007418 <UART_SetConfig+0x448>)
 80072ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f6:	005a      	lsls	r2, r3, #1
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	441a      	add	r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	2b0f      	cmp	r3, #15
 800730e:	d916      	bls.n	800733e <UART_SetConfig+0x36e>
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007316:	d212      	bcs.n	800733e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f023 030f 	bic.w	r3, r3, #15
 8007320:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	085b      	lsrs	r3, r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	b29a      	uxth	r2, r3
 800732e:	8bfb      	ldrh	r3, [r7, #30]
 8007330:	4313      	orrs	r3, r2
 8007332:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	8bfa      	ldrh	r2, [r7, #30]
 800733a:	60da      	str	r2, [r3, #12]
 800733c:	e056      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8084 	beq.w	8007ea4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	4a4b      	ldr	r2, [pc, #300]	; (8007ed0 <UART_SetConfig+0x448>)
 8007da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dae:	005a      	lsls	r2, r3, #1
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	441a      	add	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	2b0f      	cmp	r3, #15
 8007dc6:	d916      	bls.n	8007df6 <UART_SetConfig+0x36e>
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dce:	d212      	bcs.n	8007df6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f023 030f 	bic.w	r3, r3, #15
 8007dd8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	085b      	lsrs	r3, r3, #1
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	8bfb      	ldrh	r3, [r7, #30]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	8bfa      	ldrh	r2, [r7, #30]
 8007df2:	60da      	str	r2, [r3, #12]
 8007df4:	e056      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800733e:	2301      	movs	r3, #1
 8007340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007344:	e052      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dfc:	e052      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8007346:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800734a:	3b01      	subs	r3, #1
 800734c:	2b07      	cmp	r3, #7
 800734e:	d822      	bhi.n	8007396 <UART_SetConfig+0x3c6>
 8007350:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0x388>)
 8007352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007356:	bf00      	nop
 8007358:	08007379 	.word	0x08007379
 800735c:	08007381 	.word	0x08007381
 8007360:	08007397 	.word	0x08007397
 8007364:	08007387 	.word	0x08007387
 8007368:	08007397 	.word	0x08007397
 800736c:	08007397 	.word	0x08007397
 8007370:	08007397 	.word	0x08007397
 8007374:	0800738f 	.word	0x0800738f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fd ff66 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 800737c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800737e:	e010      	b.n	80073a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007380:	4b26      	ldr	r3, [pc, #152]	; (800741c <UART_SetConfig+0x44c>)
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007384:	e00d      	b.n	80073a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007386:	f7fd fec9 	bl	800511c <HAL_RCC_GetSysClockFreq>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800738c:	e009      	b.n	80073a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007394:	e005      	b.n	80073a2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073a0:	bf00      	nop
    }

    if (pclk != 0U)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d021      	beq.n	80073ec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	4a1a      	ldr	r2, [pc, #104]	; (8007418 <UART_SetConfig+0x448>)
 80073ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	441a      	add	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	d909      	bls.n	80073e6 <UART_SetConfig+0x416>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d205      	bcs.n	80073e6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e002      	b.n	80073ec <UART_SetConfig+0x41c>
=======
 8007dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d822      	bhi.n	8007e4e <UART_SetConfig+0x3c6>
 8007e08:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <UART_SetConfig+0x388>)
 8007e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0e:	bf00      	nop
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e4f 	.word	0x08007e4f
 8007e1c:	08007e3f 	.word	0x08007e3f
 8007e20:	08007e4f 	.word	0x08007e4f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e4f 	.word	0x08007e4f
 8007e2c:	08007e47 	.word	0x08007e47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e30:	f7fd ff66 	bl	8005d00 <HAL_RCC_GetPCLK2Freq>
 8007e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e36:	e010      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e38:	4b26      	ldr	r3, [pc, #152]	; (8007ed4 <UART_SetConfig+0x44c>)
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e3c:	e00d      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3e:	f7fd fec9 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e44:	e009      	b.n	8007e5a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e4c:	e005      	b.n	8007e5a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e58:	bf00      	nop
    }

    if (pclk != 0U)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d021      	beq.n	8007ea4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <UART_SetConfig+0x448>)
 8007e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	441a      	add	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d909      	bls.n	8007e9e <UART_SetConfig+0x416>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e90:	d205      	bcs.n	8007e9e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e002      	b.n	8007ea4 <UART_SetConfig+0x41c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
=======
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2200      	movs	r2, #0
 8007400:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2200      	movs	r2, #0
 8007406:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007408:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800740c:	4618      	mov	r0, r3
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007416:	bf00      	nop
 8007418:	0800e904 	.word	0x0800e904
 800741c:	00f42400 	.word	0x00f42400

08007420 <UART_AdvFeatureConfig>:
=======
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ec0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3730      	adds	r7, #48	; 0x30
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800fa44 	.word	0x0800fa44
 8007ed4:	00f42400 	.word	0x00f42400

08007ed8 <UART_AdvFeatureConfig>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
=======
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
=======
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
=======
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
=======
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
=======
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
=======
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
=======
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <UART_AdvFeatureConfig+0x116>
=======
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01a      	beq.n	8007fee <UART_AdvFeatureConfig+0x116>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d10a      	bne.n	8007536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
=======
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd6:	d10a      	bne.n	8007fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <UART_CheckIdleState>:
=======
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <UART_CheckIdleState>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007564:	b580      	push	{r7, lr}
 8007566:	b098      	sub	sp, #96	; 0x60
 8007568:	af02      	add	r7, sp, #8
 800756a:	6078      	str	r0, [r7, #4]
=======
 800801c:	b580      	push	{r7, lr}
 800801e:	b098      	sub	sp, #96	; 0x60
 8008020:	af02      	add	r7, sp, #8
 8008022:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007574:	f7fa f9d0 	bl	8001918 <HAL_GetTick>
 8007578:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b08      	cmp	r3, #8
 8007586:	d12f      	bne.n	80075e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007590:	2200      	movs	r2, #0
 8007592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f88e 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d022      	beq.n	80075e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b6:	653b      	str	r3, [r7, #80]	; 0x50
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
 80075c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e063      	b.n	80076b0 <UART_CheckIdleState+0x14c>
=======
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800802c:	f7f9 fd02 	bl	8001a34 <HAL_GetTick>
 8008030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d12f      	bne.n	80080a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008048:	2200      	movs	r2, #0
 800804a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f88e 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d022      	beq.n	80080a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	653b      	str	r3, [r7, #80]	; 0x50
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	647b      	str	r3, [r7, #68]	; 0x44
 800807a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800807e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e063      	b.n	8008168 <UART_CheckIdleState+0x14c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0304 	and.w	r3, r3, #4
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d149      	bne.n	800768a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075fe:	2200      	movs	r2, #0
 8007600:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f857 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d03c      	beq.n	800768a <UART_CheckIdleState+0x126>
=======
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d149      	bne.n	8008142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b6:	2200      	movs	r2, #0
 80080b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f857 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d03c      	beq.n	8008142 <UART_CheckIdleState+0x126>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	623b      	str	r3, [r7, #32]
   return(result);
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
 8007630:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	60fb      	str	r3, [r7, #12]
   return(result);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	64bb      	str	r3, [r7, #72]	; 0x48
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3308      	adds	r3, #8
 8007660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007662:	61fa      	str	r2, [r7, #28]
 8007664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	617b      	str	r3, [r7, #20]
   return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e5      	bne.n	8007642 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e012      	b.n	80076b0 <UART_CheckIdleState+0x14c>
=======
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	623b      	str	r3, [r7, #32]
   return(result);
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
 80080e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	60fb      	str	r3, [r7, #12]
   return(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	64bb      	str	r3, [r7, #72]	; 0x48
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811a:	61fa      	str	r2, [r7, #28]
 800811c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	617b      	str	r3, [r7, #20]
   return(result);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e5      	bne.n	80080fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e012      	b.n	8008168 <UART_CheckIdleState+0x14c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3758      	adds	r7, #88	; 0x58
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <UART_WaitOnFlagUntilTimeout>:
=======
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3758      	adds	r7, #88	; 0x58
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c8:	e049      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d045      	beq.n	800775e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d2:	f7fa f921 	bl	8001918 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d302      	bcc.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e048      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d031      	beq.n	800775e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b08      	cmp	r3, #8
 8007706:	d110      	bne.n	800772a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2208      	movs	r2, #8
 800770e:	621a      	str	r2, [r3, #32]
=======
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008180:	e049      	b.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d045      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7f9 fc53 	bl	8001a34 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e048      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d031      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d110      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2208      	movs	r2, #8
 80081c6:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fa42 	bl	8007b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2208      	movs	r2, #8
 800771a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e029      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007738:	d111      	bne.n	800775e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007742:	621a      	str	r2, [r3, #32]
=======
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa42 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2208      	movs	r2, #8
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e029      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d111      	bne.n	8008216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fa:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fa28 	bl	8007b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e00f      	b.n	800777e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4013      	ands	r3, r2
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	429a      	cmp	r2, r3
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	429a      	cmp	r2, r3
 800777a:	d0a6      	beq.n	80076ca <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa28 	bl	8008652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e00f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69da      	ldr	r2, [r3, #28]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	429a      	cmp	r2, r3
 8008224:	bf0c      	ite	eq
 8008226:	2301      	moveq	r3, #1
 8008228:	2300      	movne	r3, #0
 800822a:	b2db      	uxtb	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	429a      	cmp	r2, r3
 8008232:	d0a6      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <UART_Start_Receive_IT>:
=======
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <UART_Start_Receive_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007788:	b480      	push	{r7}
 800778a:	b0a3      	sub	sp, #140	; 0x8c
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d10e      	bne.n	80077da <UART_Start_Receive_IT+0x52>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <UART_Start_Receive_IT+0x48>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80077ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077ce:	e02d      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	22ff      	movs	r2, #255	; 0xff
 80077d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077d8:	e028      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <UART_Start_Receive_IT+0x76>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <UART_Start_Receive_IT+0x6c>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077f2:	e01b      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	227f      	movs	r2, #127	; 0x7f
 80077f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077fc:	e016      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007806:	d10d      	bne.n	8007824 <UART_Start_Receive_IT+0x9c>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <UART_Start_Receive_IT+0x92>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	227f      	movs	r2, #127	; 0x7f
 8007814:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007818:	e008      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	223f      	movs	r2, #63	; 0x3f
 800781e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007822:	e003      	b.n	800782c <UART_Start_Receive_IT+0xa4>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800784c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007860:	673a      	str	r2, [r7, #112]	; 0x70
 8007862:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007866:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800786e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e3      	bne.n	800783c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787c:	d14f      	bne.n	800791e <UART_Start_Receive_IT+0x196>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007884:	88fa      	ldrh	r2, [r7, #6]
 8007886:	429a      	cmp	r2, r3
 8007888:	d349      	bcc.n	800791e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007892:	d107      	bne.n	80078a4 <UART_Start_Receive_IT+0x11c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4a47      	ldr	r2, [pc, #284]	; (80079bc <UART_Start_Receive_IT+0x234>)
 80078a0:	675a      	str	r2, [r3, #116]	; 0x74
 80078a2:	e002      	b.n	80078aa <UART_Start_Receive_IT+0x122>
=======
 8008240:	b480      	push	{r7}
 8008242:	b0a3      	sub	sp, #140	; 0x8c
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008272:	d10e      	bne.n	8008292 <UART_Start_Receive_IT+0x52>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d105      	bne.n	8008288 <UART_Start_Receive_IT+0x48>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008282:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008286:	e02d      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22ff      	movs	r2, #255	; 0xff
 800828c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008290:	e028      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <UART_Start_Receive_IT+0x76>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <UART_Start_Receive_IT+0x6c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	22ff      	movs	r2, #255	; 0xff
 80082a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082aa:	e01b      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	227f      	movs	r2, #127	; 0x7f
 80082b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082b4:	e016      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082be:	d10d      	bne.n	80082dc <UART_Start_Receive_IT+0x9c>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <UART_Start_Receive_IT+0x92>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	227f      	movs	r2, #127	; 0x7f
 80082cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082d0:	e008      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	223f      	movs	r2, #63	; 0x3f
 80082d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80082da:	e003      	b.n	80082e4 <UART_Start_Receive_IT+0xa4>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2222      	movs	r2, #34	; 0x22
 80082f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3308      	adds	r3, #8
 80082fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008318:	673a      	str	r2, [r7, #112]	; 0x70
 800831a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800831e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e3      	bne.n	80082f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008334:	d14f      	bne.n	80083d6 <UART_Start_Receive_IT+0x196>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	429a      	cmp	r2, r3
 8008340:	d349      	bcc.n	80083d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834a:	d107      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d103      	bne.n	800835c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a47      	ldr	r2, [pc, #284]	; (8008474 <UART_Start_Receive_IT+0x234>)
 8008358:	675a      	str	r2, [r3, #116]	; 0x74
 800835a:	e002      	b.n	8008362 <UART_Start_Receive_IT+0x122>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a46      	ldr	r2, [pc, #280]	; (80079c0 <UART_Start_Receive_IT+0x238>)
 80078a8:	675a      	str	r2, [r3, #116]	; 0x74
=======
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a46      	ldr	r2, [pc, #280]	; (8008478 <UART_Start_Receive_IT+0x238>)
 8008360:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01a      	beq.n	80078e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e4      	bne.n	80078b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3308      	adds	r3, #8
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007908:	64ba      	str	r2, [r7, #72]	; 0x48
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800790e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e5      	bne.n	80078e8 <UART_Start_Receive_IT+0x160>
 800791c:	e046      	b.n	80079ac <UART_Start_Receive_IT+0x224>
=======
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01a      	beq.n	80083a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800838c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800838e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008392:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e4      	bne.n	800836a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <UART_Start_Receive_IT+0x160>
 80083d4:	e046      	b.n	8008464 <UART_Start_Receive_IT+0x224>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d107      	bne.n	8007938 <UART_Start_Receive_IT+0x1b0>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d103      	bne.n	8007938 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a24      	ldr	r2, [pc, #144]	; (80079c4 <UART_Start_Receive_IT+0x23c>)
 8007934:	675a      	str	r2, [r3, #116]	; 0x74
 8007936:	e002      	b.n	800793e <UART_Start_Receive_IT+0x1b6>
=======
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d107      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <UART_Start_Receive_IT+0x23c>)
 80083ec:	675a      	str	r2, [r3, #116]	; 0x74
 80083ee:	e002      	b.n	80083f6 <UART_Start_Receive_IT+0x1b6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <UART_Start_Receive_IT+0x240>)
 800793c:	675a      	str	r2, [r3, #116]	; 0x74
=======
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a23      	ldr	r2, [pc, #140]	; (8008480 <UART_Start_Receive_IT+0x240>)
 80083f4:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d019      	beq.n	800797a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800795a:	677b      	str	r3, [r7, #116]	; 0x74
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_Start_Receive_IT+0x1be>
 8007978:	e018      	b.n	80079ac <UART_Start_Receive_IT+0x224>
=======
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d019      	beq.n	8008432 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008412:	677b      	str	r3, [r7, #116]	; 0x74
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
 800841e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e6      	bne.n	80083fe <UART_Start_Receive_IT+0x1be>
 8008430:	e018      	b.n	8008464 <UART_Start_Receive_IT+0x224>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
<<<<<<< HEAD
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f043 0320 	orr.w	r3, r3, #32
 800798e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007998:	623b      	str	r3, [r7, #32]
 800799a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	378c      	adds	r7, #140	; 0x8c
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	080089e9 	.word	0x080089e9
 80079c0:	08008689 	.word	0x08008689
 80079c4:	080084d1 	.word	0x080084d1
 80079c8:	08008319 	.word	0x08008319

080079cc <UART_Start_Receive_DMA>:
=======
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	67bb      	str	r3, [r7, #120]	; 0x78
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008450:	623b      	str	r3, [r7, #32]
 8008452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	61bb      	str	r3, [r7, #24]
   return(result);
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	378c      	adds	r7, #140	; 0x8c
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	080094a1 	.word	0x080094a1
 8008478:	08009141 	.word	0x08009141
 800847c:	08008f89 	.word	0x08008f89
 8008480:	08008dd1 	.word	0x08008dd1

08008484 <UART_Start_Receive_DMA>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b096      	sub	sp, #88	; 0x58
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2222      	movs	r2, #34	; 0x22
 80079f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02d      	beq.n	8007a5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a08:	4a40      	ldr	r2, [pc, #256]	; (8007b0c <UART_Start_Receive_DMA+0x140>)
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a12:	4a3f      	ldr	r2, [pc, #252]	; (8007b10 <UART_Start_Receive_DMA+0x144>)
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <UART_Start_Receive_DMA+0x148>)
 8007a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a26:	2200      	movs	r2, #0
 8007a28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3324      	adds	r3, #36	; 0x24
 8007a36:	4619      	mov	r1, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	88fb      	ldrh	r3, [r7, #6]
 8007a40:	f7fb fdf6 	bl	8003630 <HAL_DMA_Start_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e051      	b.n	8007b02 <UART_Start_Receive_DMA+0x136>
=======
 8008484:	b580      	push	{r7, lr}
 8008486:	b096      	sub	sp, #88	; 0x58
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2222      	movs	r2, #34	; 0x22
 80084ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02d      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c0:	4a40      	ldr	r2, [pc, #256]	; (80085c4 <UART_Start_Receive_DMA+0x140>)
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ca:	4a3f      	ldr	r2, [pc, #252]	; (80085c8 <UART_Start_Receive_DMA+0x144>)
 80084cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d4:	4a3d      	ldr	r2, [pc, #244]	; (80085cc <UART_Start_Receive_DMA+0x148>)
 80084d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3324      	adds	r3, #36	; 0x24
 80084ee:	4619      	mov	r1, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	461a      	mov	r2, r3
 80084f6:	88fb      	ldrh	r3, [r7, #6]
 80084f8:	f7fb f94c 	bl	8003794 <HAL_DMA_Start_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2210      	movs	r2, #16
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e051      	b.n	80085ba <UART_Start_Receive_DMA+0x136>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d018      	beq.n	8007a98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a86:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_Start_Receive_DMA+0x9a>
=======
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
 800853e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <UART_Start_Receive_DMA+0x9a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ab8:	637a      	str	r2, [r7, #52]	; 0x34
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e5      	bne.n	8007a98 <UART_Start_Receive_DMA+0xcc>
=======
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	653b      	str	r3, [r7, #80]	; 0x50
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3308      	adds	r3, #8
 800856e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008570:	637a      	str	r2, [r7, #52]	; 0x34
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <UART_Start_Receive_DMA+0xcc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	613b      	str	r3, [r7, #16]
   return(result);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aec:	623a      	str	r2, [r7, #32]
 8007aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69f9      	ldr	r1, [r7, #28]
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3758      	adds	r7, #88	; 0x58
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08007d1d 	.word	0x08007d1d
 8007b10:	08007e49 	.word	0x08007e49
 8007b14:	08007e87 	.word	0x08007e87

08007b18 <UART_EndTxTransfer>:
=======
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3308      	adds	r3, #8
 800858a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	613b      	str	r3, [r7, #16]
   return(result);
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085a4:	623a      	str	r2, [r7, #32]
 80085a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	69f9      	ldr	r1, [r7, #28]
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e5      	bne.n	8008584 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3758      	adds	r7, #88	; 0x58
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	080087d5 	.word	0x080087d5
 80085c8:	08008901 	.word	0x08008901
 80085cc:	0800893f 	.word	0x0800893f

080085d0 <UART_EndTxTransfer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007b18:	b480      	push	{r7}
 8007b1a:	b08f      	sub	sp, #60	; 0x3c
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b40:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e6      	bne.n	8007b20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b72:	61ba      	str	r2, [r7, #24]
 8007b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007b8e:	bf00      	nop
 8007b90:	373c      	adds	r7, #60	; 0x3c
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <UART_EndRxTransfer>:
=======
 80085d0:	b480      	push	{r7}
 80085d2:	b08f      	sub	sp, #60	; 0x3c
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e6      	bne.n	80085d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3308      	adds	r3, #8
 8008610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	60bb      	str	r3, [r7, #8]
   return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008620:	633b      	str	r3, [r7, #48]	; 0x30
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3308      	adds	r3, #8
 8008628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862a:	61ba      	str	r2, [r7, #24]
 800862c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6979      	ldr	r1, [r7, #20]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	613b      	str	r3, [r7, #16]
   return(result);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008646:	bf00      	nop
 8008648:	373c      	adds	r7, #60	; 0x3c
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <UART_EndRxTransfer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007b9a:	b480      	push	{r7}
 8007b9c:	b095      	sub	sp, #84	; 0x54
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e3      	bne.n	8007bd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d118      	bne.n	8007c46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f023 0310 	bic.w	r3, r3, #16
 8007c28:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6979      	ldr	r1, [r7, #20]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e6      	bne.n	8007c14 <UART_EndRxTransfer+0x7a>
=======
 8008652:	b480      	push	{r7}
 8008654:	b095      	sub	sp, #84	; 0x54
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
 800867a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800867e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	e853 3f00 	ldrex	r3, [r3]
 800869a:	61fb      	str	r3, [r7, #28]
   return(result);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e3      	bne.n	800868c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d118      	bne.n	80086fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6979      	ldr	r1, [r7, #20]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	613b      	str	r3, [r7, #16]
   return(result);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_EndRxTransfer+0x7a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c5a:	bf00      	nop
 8007c5c:	3754      	adds	r7, #84	; 0x54
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <UART_DMATransmitCplt>:
=======
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <UART_DMATransmitCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b090      	sub	sp, #64	; 0x40
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d137      	bne.n	8007cf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 800871e:	b580      	push	{r7, lr}
 8008720:	b090      	sub	sp, #64	; 0x40
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d137      	bne.n	80087aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800873a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800873c:	2200      	movs	r2, #0
 800873e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
<<<<<<< HEAD
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007caa:	633a      	str	r2, [r7, #48]	; 0x30
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	69b9      	ldr	r1, [r7, #24]
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_DMATransmitCplt+0x58>
=======
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	623b      	str	r3, [r7, #32]
   return(result);
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60fb      	str	r3, [r7, #12]
   return(result);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69b9      	ldr	r1, [r7, #24]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	617b      	str	r3, [r7, #20]
   return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_DMATransmitCplt+0x58>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8007cf0:	e002      	b.n	8007cf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007cf4:	f006 fb3e 	bl	800e374 <HAL_UART_TxCpltCallback>
}
 8007cf8:	bf00      	nop
 8007cfa:	3740      	adds	r7, #64	; 0x40
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_DMATxHalfCplt>:
=======
 80087a8:	e002      	b.n	80087b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80087aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087ac:	f006 fd72 	bl	800f294 <HAL_UART_TxCpltCallback>
}
 80087b0:	bf00      	nop
 80087b2:	3740      	adds	r7, #64	; 0x40
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <UART_DMATxHalfCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	60fb      	str	r3, [r7, #12]
=======
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
<<<<<<< HEAD
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff f882 	bl	8006e18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_DMAReceiveCplt>:
=======
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff f882 	bl	80078d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <UART_DMAReceiveCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b09c      	sub	sp, #112	; 0x70
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d171      	bne.n	8007e1c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e6      	bne.n	8007d40 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3308      	adds	r3, #8
 8007d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	667b      	str	r3, [r7, #100]	; 0x64
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d92:	647a      	str	r2, [r7, #68]	; 0x44
 8007d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_DMAReceiveCplt+0x56>
=======
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b09c      	sub	sp, #112	; 0x70
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d171      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80087f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880c:	66bb      	str	r3, [r7, #104]	; 0x68
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008816:	65bb      	str	r3, [r7, #88]	; 0x58
 8008818:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800881c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	f023 0301 	bic.w	r3, r3, #1
 8008840:	667b      	str	r3, [r7, #100]	; 0x64
 8008842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800884a:	647a      	str	r2, [r7, #68]	; 0x44
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <UART_DMAReceiveCplt+0x56>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	623b      	str	r3, [r7, #32]
   return(result);
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e5      	bne.n	8007da6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d118      	bne.n	8007e1c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0310 	bic.w	r3, r3, #16
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0c:	69b9      	ldr	r1, [r7, #24]
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	617b      	str	r3, [r7, #20]
   return(result);
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e6      	bne.n	8007dea <UART_DMAReceiveCplt+0xce>
=======
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	623b      	str	r3, [r7, #32]
   return(result);
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008874:	663b      	str	r3, [r7, #96]	; 0x60
 8008876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3308      	adds	r3, #8
 800887c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800887e:	633a      	str	r2, [r7, #48]	; 0x30
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e5      	bne.n	800885e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d118      	bne.n	80088d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	e853 3f00 	ldrex	r3, [r3]
 80088ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0310 	bic.w	r3, r3, #16
 80088b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	e841 2300 	strex	r3, r2, [r1]
 80088cc:	617b      	str	r3, [r7, #20]
   return(result);
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e6      	bne.n	80088a2 <UART_DMAReceiveCplt+0xce>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
<<<<<<< HEAD
 8007e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1e:	2200      	movs	r2, #0
 8007e20:	671a      	str	r2, [r3, #112]	; 0x70
=======
 80088d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d107      	bne.n	8007e3a <UART_DMAReceiveCplt+0x11e>
=======
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d107      	bne.n	80088f2 <UART_DMAReceiveCplt+0x11e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8007e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e30:	4619      	mov	r1, r3
 8007e32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e34:	f006 fba0 	bl	800e578 <HAL_UARTEx_RxEventCallback>
=======
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e8:	4619      	mov	r1, r3
 80088ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088ec:	f006 fdd4 	bl	800f498 <HAL_UARTEx_RxEventCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8007e38:	e002      	b.n	8007e40 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e3c:	f006 fad8 	bl	800e3f0 <HAL_UART_RxCpltCallback>
}
 8007e40:	bf00      	nop
 8007e42:	3770      	adds	r7, #112	; 0x70
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <UART_DMARxHalfCplt>:
=======
 80088f0:	e002      	b.n	80088f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088f4:	f006 fd0c 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 80088f8:	bf00      	nop
 80088fa:	3770      	adds	r7, #112	; 0x70
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <UART_DMARxHalfCplt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	60fb      	str	r3, [r7, #12]
=======
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
<<<<<<< HEAD
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	671a      	str	r2, [r3, #112]	; 0x70
=======
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d109      	bne.n	8007e78 <UART_DMARxHalfCplt+0x30>
=======
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d109      	bne.n	8008930 <UART_DMARxHalfCplt+0x30>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< HEAD
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f006 fb81 	bl	800e578 <HAL_UARTEx_RxEventCallback>
=======
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f006 fdb5 	bl	800f498 <HAL_UARTEx_RxEventCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8007e76:	e002      	b.n	8007e7e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7fe ffd7 	bl	8006e2c <HAL_UART_RxHalfCpltCallback>
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <UART_DMAError>:
=======
 800892e:	e002      	b.n	8008936 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7fe ffd7 	bl	80078e4 <HAL_UART_RxHalfCpltCallback>
}
 8008936:	bf00      	nop
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <UART_DMAError>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eae:	2b80      	cmp	r3, #128	; 0x80
 8007eb0:	d109      	bne.n	8007ec6 <UART_DMAError+0x40>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b21      	cmp	r3, #33	; 0x21
 8007eb6:	d106      	bne.n	8007ec6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007ec0:	6978      	ldr	r0, [r7, #20]
 8007ec2:	f7ff fe29 	bl	8007b18 <UART_EndTxTransfer>
=======
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008966:	2b80      	cmp	r3, #128	; 0x80
 8008968:	d109      	bne.n	800897e <UART_DMAError+0x40>
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b21      	cmp	r3, #33	; 0x21
 800896e:	d106      	bne.n	800897e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008978:	6978      	ldr	r0, [r7, #20]
 800897a:	f7ff fe29 	bl	80085d0 <UART_EndTxTransfer>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b40      	cmp	r3, #64	; 0x40
 8007ed2:	d109      	bne.n	8007ee8 <UART_DMAError+0x62>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b22      	cmp	r3, #34	; 0x22
 8007ed8:	d106      	bne.n	8007ee8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f7ff fe59 	bl	8007b9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f043 0210 	orr.w	r2, r3, #16
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b40      	cmp	r3, #64	; 0x40
 800898a:	d109      	bne.n	80089a0 <UART_DMAError+0x62>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b22      	cmp	r3, #34	; 0x22
 8008990:	d106      	bne.n	80089a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff fe59 	bl	8008652 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a6:	f043 0210 	orr.w	r2, r3, #16
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f006 fae3 	bl	800e4c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_DMAAbortOnError>:
=======
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f006 fd17 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMAAbortOnError>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
=======
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f006 facd 	bl	800e4c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <UART_DMARxOnlyAbortCallback>:
=======
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f006 fd01 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <UART_DMARxOnlyAbortCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	220f      	movs	r2, #15
 8007f4e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0208 	orr.w	r2, r2, #8
 8007f5e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	220f      	movs	r2, #15
 8008a06:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
<<<<<<< HEAD
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7fe ff66 	bl	8006e40 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <UART_TxISR_8BIT>:
=======
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7fe ff66 	bl	80078f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_TxISR_8BIT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007f7c:	b480      	push	{r7}
 8007f7e:	b08f      	sub	sp, #60	; 0x3c
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8a:	2b21      	cmp	r3, #33	; 0x21
 8007f8c:	d14c      	bne.n	8008028 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d132      	bne.n	8008000 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e6      	bne.n	8007fcc <UART_TxISR_8BIT+0x50>
=======
 8008a34:	b480      	push	{r7}
 8008a36:	b08f      	sub	sp, #60	; 0x3c
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	2b21      	cmp	r3, #33	; 0x21
 8008a44:	d14c      	bne.n	8008ae0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d132      	bne.n	8008ab8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a98:	633b      	str	r3, [r7, #48]	; 0x30
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6979      	ldr	r1, [r7, #20]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_TxISR_8BIT+0x50>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 8007ffe:	e013      	b.n	8008028 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008004:	781a      	ldrb	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008028:	bf00      	nop
 800802a:	373c      	adds	r7, #60	; 0x3c
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <UART_TxISR_16BIT>:
=======
 8008ab6:	e013      	b.n	8008ae0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ae0:	bf00      	nop
 8008ae2:	373c      	adds	r7, #60	; 0x3c
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <UART_TxISR_16BIT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008034:	b480      	push	{r7}
 8008036:	b091      	sub	sp, #68	; 0x44
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
=======
 8008aec:	b480      	push	{r7}
 8008aee:	b091      	sub	sp, #68	; 0x44
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	2b21      	cmp	r3, #33	; 0x21
 8008044:	d151      	bne.n	80080ea <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d132      	bne.n	80080b8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	623b      	str	r3, [r7, #32]
   return(result);
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008066:	63bb      	str	r3, [r7, #56]	; 0x38
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	633b      	str	r3, [r7, #48]	; 0x30
 8008072:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	60fb      	str	r3, [r7, #12]
   return(result);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	69b9      	ldr	r1, [r7, #24]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	617b      	str	r3, [r7, #20]
   return(result);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e6      	bne.n	8008084 <UART_TxISR_16BIT+0x50>
=======
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	2b21      	cmp	r3, #33	; 0x21
 8008afc:	d151      	bne.n	8008ba2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d132      	bne.n	8008b70 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	e853 3f00 	ldrex	r3, [r3]
 8008b16:	623b      	str	r3, [r7, #32]
   return(result);
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
 8008b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b30:	e841 2300 	strex	r3, r2, [r1]
 8008b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1e6      	bne.n	8008b0a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	617b      	str	r3, [r7, #20]
   return(result);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e6      	bne.n	8008b3c <UART_TxISR_16BIT+0x50>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
<<<<<<< HEAD
 80080b6:	e018      	b.n	80080ea <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d2:	1c9a      	adds	r2, r3, #2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80080ea:	bf00      	nop
 80080ec:	3744      	adds	r7, #68	; 0x44
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <UART_TxISR_8BIT_FIFOEN>:
=======
 8008b6e:	e018      	b.n	8008ba2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8a:	1c9a      	adds	r2, r3, #2
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ba2:	bf00      	nop
 8008ba4:	3744      	adds	r7, #68	; 0x44
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <UART_TxISR_8BIT_FIFOEN>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80080f6:	b480      	push	{r7}
 80080f8:	b091      	sub	sp, #68	; 0x44
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
=======
 8008bae:	b480      	push	{r7}
 8008bb0:	b091      	sub	sp, #68	; 0x44
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008104:	2b21      	cmp	r3, #33	; 0x21
 8008106:	d160      	bne.n	80081ca <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800810e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008110:	e057      	b.n	80081c2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d133      	bne.n	8008186 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	623b      	str	r3, [r7, #32]
   return(result);
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008134:	63bb      	str	r3, [r7, #56]	; 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813e:	633a      	str	r2, [r7, #48]	; 0x30
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e5      	bne.n	800811e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	69b9      	ldr	r1, [r7, #24]
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	617b      	str	r3, [r7, #20]
   return(result);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008184:	e021      	b.n	80081ca <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008190:	2b00      	cmp	r3, #0
 8008192:	d013      	beq.n	80081bc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008198:	781a      	ldrb	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081be:	3b01      	subs	r3, #1
 80081c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1a4      	bne.n	8008112 <UART_TxISR_8BIT_FIFOEN+0x1c>
=======
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbc:	2b21      	cmp	r3, #33	; 0x21
 8008bbe:	d160      	bne.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bc6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bc8:	e057      	b.n	8008c7a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d133      	bne.n	8008c3e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	623b      	str	r3, [r7, #32]
   return(result);
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	69b9      	ldr	r1, [r7, #24]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	617b      	str	r3, [r7, #20]
   return(result);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008c3c:	e021      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d013      	beq.n	8008c74 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c76:	3b01      	subs	r3, #1
 8008c78:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1a4      	bne.n	8008bca <UART_TxISR_8BIT_FIFOEN+0x1c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< HEAD
 80081c8:	e7ff      	b.n	80081ca <UART_TxISR_8BIT_FIFOEN+0xd4>
 80081ca:	bf00      	nop
 80081cc:	3744      	adds	r7, #68	; 0x44
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <UART_TxISR_16BIT_FIFOEN>:
=======
 8008c80:	e7ff      	b.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008c82:	bf00      	nop
 8008c84:	3744      	adds	r7, #68	; 0x44
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <UART_TxISR_16BIT_FIFOEN>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80081d6:	b480      	push	{r7}
 80081d8:	b091      	sub	sp, #68	; 0x44
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
=======
 8008c8e:	b480      	push	{r7}
 8008c90:	b091      	sub	sp, #68	; 0x44
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	2b21      	cmp	r3, #33	; 0x21
 80081e6:	d165      	bne.n	80082b4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081f0:	e05c      	b.n	80082ac <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d133      	bne.n	8008266 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	61fb      	str	r3, [r7, #28]
   return(result);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e5      	bne.n	80081fe <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008246:	633b      	str	r3, [r7, #48]	; 0x30
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6979      	ldr	r1, [r7, #20]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	613b      	str	r3, [r7, #16]
   return(result);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e6      	bne.n	8008232 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008264:	e026      	b.n	80082b4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	d018      	beq.n	80082a6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828e:	1c9a      	adds	r2, r3, #2
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082a8:	3b01      	subs	r3, #1
 80082aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80082ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d19f      	bne.n	80081f2 <UART_TxISR_16BIT_FIFOEN+0x1c>
=======
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9c:	2b21      	cmp	r3, #33	; 0x21
 8008c9e:	d165      	bne.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ca6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ca8:	e05c      	b.n	8008d64 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d133      	bne.n	8008d1e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e5      	bne.n	8008cb6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	613b      	str	r3, [r7, #16]
   return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d1c:	e026      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	1c9a      	adds	r2, r3, #2
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	3b01      	subs	r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d60:	3b01      	subs	r3, #1
 8008d62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d19f      	bne.n	8008caa <UART_TxISR_16BIT_FIFOEN+0x1c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* Nothing to do */
      }
    }
  }
}
<<<<<<< HEAD
 80082b2:	e7ff      	b.n	80082b4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80082b4:	bf00      	nop
 80082b6:	3744      	adds	r7, #68	; 0x44
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <UART_EndTransmit_IT>:
=======
 8008d6a:	e7ff      	b.n	8008d6c <UART_TxISR_16BIT_FIFOEN+0xde>
 8008d6c:	bf00      	nop
 8008d6e:	3744      	adds	r7, #68	; 0x44
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <UART_EndTransmit_IT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6979      	ldr	r1, [r7, #20]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	613b      	str	r3, [r7, #16]
   return(result);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	679a      	str	r2, [r3, #120]	; 0x78
=======
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f006 f833 	bl	800e374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830e:	bf00      	nop
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <UART_RxISR_8BIT>:
=======
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f006 fa67 	bl	800f294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3720      	adds	r7, #32
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <UART_RxISR_8BIT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008318:	b580      	push	{r7, lr}
 800831a:	b09c      	sub	sp, #112	; 0x70
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008326:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b09c      	sub	sp, #112	; 0x70
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008330:	2b22      	cmp	r3, #34	; 0x22
 8008332:	f040 80be 	bne.w	80084b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008344:	b2d9      	uxtb	r1, r3
 8008346:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800834a:	b2da      	uxtb	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008350:	400a      	ands	r2, r1
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	f040 80a1 	bne.w	80084c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800838e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008394:	66bb      	str	r3, [r7, #104]	; 0x68
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800839e:	65bb      	str	r3, [r7, #88]	; 0x58
 80083a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e6      	bne.n	8008380 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	667b      	str	r3, [r7, #100]	; 0x64
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083d2:	647a      	str	r2, [r7, #68]	; 0x44
 80083d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a33      	ldr	r2, [pc, #204]	; (80084cc <UART_RxISR_8BIT+0x1b4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d01f      	beq.n	8008444 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d018      	beq.n	8008444 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	623b      	str	r3, [r7, #32]
   return(result);
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008426:	663b      	str	r3, [r7, #96]	; 0x60
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008430:	633b      	str	r3, [r7, #48]	; 0x30
 8008432:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_RxISR_8BIT+0xfa>
=======
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de8:	2b22      	cmp	r3, #34	; 0x22
 8008dea:	f040 80be 	bne.w	8008f6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008df8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008dfc:	b2d9      	uxtb	r1, r3
 8008dfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e08:	400a      	ands	r2, r1
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 80a1 	bne.w	8008f7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	667b      	str	r3, [r7, #100]	; 0x64
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <UART_RxISR_8BIT+0x1b4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d01f      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d018      	beq.n	8008efc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ede:	663b      	str	r3, [r7, #96]	; 0x60
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e6      	bne.n	8008eca <UART_RxISR_8BIT+0xfa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008448:	2b01      	cmp	r3, #1
 800844a:	d12e      	bne.n	80084aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	e853 3f00 	ldrex	r3, [r3]
 800845e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0310 	bic.w	r3, r3, #16
 8008466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008474:	69b9      	ldr	r1, [r7, #24]
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	e841 2300 	strex	r3, r2, [r1]
 800847c:	617b      	str	r3, [r7, #20]
   return(result);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e6      	bne.n	8008452 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b10      	cmp	r3, #16
 8008490:	d103      	bne.n	800849a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2210      	movs	r2, #16
 8008498:	621a      	str	r2, [r3, #32]
=======
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d12e      	bne.n	8008f62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0310 	bic.w	r3, r3, #16
 8008f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f28:	61fb      	str	r3, [r7, #28]
 8008f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	69b9      	ldr	r1, [r7, #24]
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	617b      	str	r3, [r7, #20]
   return(result);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b10      	cmp	r3, #16
 8008f48:	d103      	bne.n	8008f52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2210      	movs	r2, #16
 8008f50:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f006 f868 	bl	800e578 <HAL_UARTEx_RxEventCallback>
=======
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f006 fa9c 	bl	800f498 <HAL_UARTEx_RxEventCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80084a8:	e00b      	b.n	80084c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f005 ffa0 	bl	800e3f0 <HAL_UART_RxCpltCallback>
}
 80084b0:	e007      	b.n	80084c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	699a      	ldr	r2, [r3, #24]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0208 	orr.w	r2, r2, #8
 80084c0:	619a      	str	r2, [r3, #24]
}
 80084c2:	bf00      	nop
 80084c4:	3770      	adds	r7, #112	; 0x70
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	40008000 	.word	0x40008000

080084d0 <UART_RxISR_16BIT>:
=======
 8008f60:	e00b      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f006 f9d4 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 8008f68:	e007      	b.n	8008f7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699a      	ldr	r2, [r3, #24]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	619a      	str	r2, [r3, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	3770      	adds	r7, #112	; 0x70
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40008000 	.word	0x40008000

08008f88 <UART_RxISR_16BIT>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b09c      	sub	sp, #112	; 0x70
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b09c      	sub	sp, #112	; 0x70
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e8:	2b22      	cmp	r3, #34	; 0x22
 80084ea:	f040 80be 	bne.w	800866a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80084fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008506:	4013      	ands	r3, r2
 8008508:	b29a      	uxth	r2, r3
 800850a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800850c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	1c9a      	adds	r2, r3, #2
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	f040 80a1 	bne.w	800867a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800854c:	667b      	str	r3, [r7, #100]	; 0x64
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008556:	657b      	str	r3, [r7, #84]	; 0x54
 8008558:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800855c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	663b      	str	r3, [r7, #96]	; 0x60
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800858a:	643a      	str	r2, [r7, #64]	; 0x40
 800858c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a33      	ldr	r2, [pc, #204]	; (8008684 <UART_RxISR_16BIT+0x1b4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d01f      	beq.n	80085fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d018      	beq.n	80085fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e6      	bne.n	80085ca <UART_RxISR_16BIT+0xfa>
=======
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa0:	2b22      	cmp	r3, #34	; 0x22
 8008fa2:	f040 80be 	bne.w	8009122 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008fba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 80a1 	bne.w	8009132 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009004:	667b      	str	r3, [r7, #100]	; 0x64
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900e:	657b      	str	r3, [r7, #84]	; 0x54
 8009010:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e6      	bne.n	8008ff0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	3308      	adds	r3, #8
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	663b      	str	r3, [r7, #96]	; 0x60
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009042:	643a      	str	r2, [r7, #64]	; 0x40
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e5      	bne.n	8009022 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2220      	movs	r2, #32
 800905a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a33      	ldr	r2, [pc, #204]	; (800913c <UART_RxISR_16BIT+0x1b4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d01f      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d018      	beq.n	80090b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e6      	bne.n	8009082 <UART_RxISR_16BIT+0xfa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d12e      	bne.n	8008662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	60bb      	str	r3, [r7, #8]
   return(result);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f023 0310 	bic.w	r3, r3, #16
 800861e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6979      	ldr	r1, [r7, #20]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	613b      	str	r3, [r7, #16]
   return(result);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e6      	bne.n	800860a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b10      	cmp	r3, #16
 8008648:	d103      	bne.n	8008652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2210      	movs	r2, #16
 8008650:	621a      	str	r2, [r3, #32]
=======
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d12e      	bne.n	800911a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0310 	bic.w	r3, r3, #16
 80090d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	613b      	str	r3, [r7, #16]
   return(result);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d103      	bne.n	800910a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2210      	movs	r2, #16
 8009108:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f005 ff8c 	bl	800e578 <HAL_UARTEx_RxEventCallback>
=======
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f006 f9c0 	bl	800f498 <HAL_UARTEx_RxEventCallback>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008660:	e00b      	b.n	800867a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f005 fec4 	bl	800e3f0 <HAL_UART_RxCpltCallback>
}
 8008668:	e007      	b.n	800867a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0208 	orr.w	r2, r2, #8
 8008678:	619a      	str	r2, [r3, #24]
}
 800867a:	bf00      	nop
 800867c:	3770      	adds	r7, #112	; 0x70
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40008000 	.word	0x40008000

08008688 <UART_RxISR_8BIT_FIFOEN>:
=======
 8009118:	e00b      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f006 f8f8 	bl	800f310 <HAL_UART_RxCpltCallback>
}
 8009120:	e007      	b.n	8009132 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	619a      	str	r2, [r3, #24]
}
 8009132:	bf00      	nop
 8009134:	3770      	adds	r7, #112	; 0x70
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	40008000 	.word	0x40008000

08009140 <UART_RxISR_8BIT_FIFOEN>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008688:	b580      	push	{r7, lr}
 800868a:	b0ac      	sub	sp, #176	; 0xb0
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008696:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
=======
 8009140:	b580      	push	{r7, lr}
 8009142:	b0ac      	sub	sp, #176	; 0xb0
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800914e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086be:	2b22      	cmp	r3, #34	; 0x22
 80086c0:	f040 8182 	bne.w	80089c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ce:	e125      	b.n	800891c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80086de:	b2d9      	uxtb	r1, r3
 80086e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	400a      	ands	r2, r1
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d053      	beq.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d011      	beq.n	8008752 <UART_RxISR_8BIT_FIFOEN+0xca>
 800872e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00b      	beq.n	8008752 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2201      	movs	r2, #1
 8008740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008748:	f043 0201 	orr.w	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 8182 	bne.w	8009480 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009182:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	e125      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009192:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	400a      	ands	r2, r1
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d053      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
 80091e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2201      	movs	r2, #1
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800875e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2202      	movs	r2, #2
 8008770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008778:	f043 0204 	orr.w	r2, r3, #4
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2202      	movs	r2, #2
 8009228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	f043 0204 	orr.w	r2, r3, #4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d011      	beq.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800878e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00b      	beq.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2204      	movs	r2, #4
 80087a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a8:	f043 0202 	orr.w	r2, r3, #2
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800923a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2204      	movs	r2, #4
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x142>
=======
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f005 fe81 	bl	800e4c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f006 f8b5 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 80a2 	bne.w	800891c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008800:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e4      	bne.n	80087d8 <UART_RxISR_8BIT_FIFOEN+0x150>
=======
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 80a2 	bne.w	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800929e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80092c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e4      	bne.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x150>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800881e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008836:	66ba      	str	r2, [r7, #104]	; 0x68
 8008838:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800883c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e1      	bne.n	800880e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a5f      	ldr	r2, [pc, #380]	; (80089e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d021      	beq.n	80088ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01a      	beq.n	80088ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800888a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008898:	657b      	str	r3, [r7, #84]	; 0x54
 800889a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800889e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e4      	bne.n	8008876 <UART_RxISR_8BIT_FIFOEN+0x1ee>
=======
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80092f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e1      	bne.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a5f      	ldr	r2, [pc, #380]	; (8009498 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d021      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01a      	beq.n	8009364 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800933e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009350:	657b      	str	r3, [r7, #84]	; 0x54
 8009352:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800935e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e4      	bne.n	800932e <UART_RxISR_8BIT_FIFOEN+0x1ee>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d130      	bne.n	8008916 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	f023 0310 	bic.w	r3, r3, #16
 80088ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088dc:	643b      	str	r3, [r7, #64]	; 0x40
 80088de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e4      	bne.n	80088ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	f003 0310 	and.w	r3, r3, #16
 80088fa:	2b10      	cmp	r3, #16
 80088fc:	d103      	bne.n	8008906 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2210      	movs	r2, #16
 8008904:	621a      	str	r2, [r3, #32]
=======
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d130      	bne.n	80093ce <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009394:	643b      	str	r3, [r7, #64]	; 0x40
 8009396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800939a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e4      	bne.n	8009372 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f003 0310 	and.w	r3, r3, #16
 80093b2:	2b10      	cmp	r3, #16
 80093b4:	d103      	bne.n	80093be <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2210      	movs	r2, #16
 80093bc:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f005 fe32 	bl	800e578 <HAL_UARTEx_RxEventCallback>
 8008914:	e002      	b.n	800891c <UART_RxISR_8BIT_FIFOEN+0x294>
=======
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f006 f866 	bl	800f498 <HAL_UARTEx_RxEventCallback>
 80093cc:	e002      	b.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x294>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f005 fd6a 	bl	800e3f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800891c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	f47f aecf 	bne.w	80086d0 <UART_RxISR_8BIT_FIFOEN+0x48>
=======
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f005 ff9e 	bl	800f310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d006      	beq.n	80093ea <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f47f aecf 	bne.w	8009188 <UART_RxISR_8BIT_FIFOEN+0x48>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008938:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800893c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008940:	2b00      	cmp	r3, #0
 8008942:	d049      	beq.n	80089d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800894a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800894e:	429a      	cmp	r2, r3
 8008950:	d242      	bcs.n	80089d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	61fb      	str	r3, [r7, #28]
   return(result);
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800897c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800898e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	60bb      	str	r3, [r7, #8]
   return(result);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f043 0320 	orr.w	r3, r3, #32
 80089a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	6979      	ldr	r1, [r7, #20]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	613b      	str	r3, [r7, #16]
   return(result);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e4      	bne.n	8008990 <UART_RxISR_8BIT_FIFOEN+0x308>
=======
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d049      	beq.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009402:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009406:	429a      	cmp	r2, r3
 8009408:	d242      	bcs.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	61fb      	str	r3, [r7, #28]
   return(result);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e3      	bne.n	800940a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a15      	ldr	r2, [pc, #84]	; (800949c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009446:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	60bb      	str	r3, [r7, #8]
   return(result);
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	f043 0320 	orr.w	r3, r3, #32
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800946a:	61bb      	str	r3, [r7, #24]
 800946c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6979      	ldr	r1, [r7, #20]
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	613b      	str	r3, [r7, #16]
   return(result);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e4      	bne.n	8009448 <UART_RxISR_8BIT_FIFOEN+0x308>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80089c6:	e007      	b.n	80089d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0208 	orr.w	r2, r2, #8
 80089d6:	619a      	str	r2, [r3, #24]
}
 80089d8:	bf00      	nop
 80089da:	37b0      	adds	r7, #176	; 0xb0
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40008000 	.word	0x40008000
 80089e4:	08008319 	.word	0x08008319

080089e8 <UART_RxISR_16BIT_FIFOEN>:
=======
 800947e:	e007      	b.n	8009490 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699a      	ldr	r2, [r3, #24]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0208 	orr.w	r2, r2, #8
 800948e:	619a      	str	r2, [r3, #24]
}
 8009490:	bf00      	nop
 8009492:	37b0      	adds	r7, #176	; 0xb0
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40008000 	.word	0x40008000
 800949c:	08008dd1 	.word	0x08008dd1

080094a0 <UART_RxISR_16BIT_FIFOEN>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b0ae      	sub	sp, #184	; 0xb8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
=======
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b0ae      	sub	sp, #184	; 0xb8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a1e:	2b22      	cmp	r3, #34	; 0x22
 8008a20:	f040 8186 	bne.w	8008d30 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a2a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a2e:	e129      	b.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a58:	1c9a      	adds	r2, r3, #2
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d053      	beq.n	8008b2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d011      	beq.n	8008ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aac:	f043 0201 	orr.w	r2, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d6:	2b22      	cmp	r3, #34	; 0x22
 80094d8:	f040 8186 	bne.w	80097e8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094e6:	e129      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80094fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80094fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009502:	4013      	ands	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800950a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009510:	1c9a      	adds	r2, r3, #2
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800951c:	b29b      	uxth	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d053      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800953e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d011      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
 800954a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800954e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2201      	movs	r2, #1
 800955c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009564:	f043 0201 	orr.w	r2, r3, #1
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d011      	beq.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008adc:	f043 0204 	orr.w	r2, r3, #4
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800956e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d011      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800957a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00b      	beq.n	800959e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2202      	movs	r2, #2
 800958c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009594:	f043 0204 	orr.w	r2, r3, #4
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d011      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2204      	movs	r2, #4
 8008b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b0c:	f043 0202 	orr.w	r2, r3, #2
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 800959e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095a2:	f003 0304 	and.w	r3, r3, #4
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d011      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2204      	movs	r2, #4
 80095bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c4:	f043 0202 	orr.w	r2, r3, #2
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d006      	beq.n	8008b2e <UART_RxISR_16BIT_FIFOEN+0x146>
=======
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x146>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f005 fccf 	bl	800e4c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
=======
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f005 ff03 	bl	800f3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 80a4 	bne.w	8008c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b62:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e2      	bne.n	8008b3c <UART_RxISR_16BIT_FIFOEN+0x154>
=======
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 80a4 	bne.w	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800961a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800961e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e2      	bne.n	80095f4 <UART_RxISR_16BIT_FIFOEN+0x154>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b80:	e853 3f00 	ldrex	r3, [r3]
 8008b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3308      	adds	r3, #8
 8008b9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e1      	bne.n	8008b76 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a5f      	ldr	r2, [pc, #380]	; (8008d48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d021      	beq.n	8008c14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01a      	beq.n	8008c14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e4      	bne.n	8008bde <UART_RxISR_16BIT_FIFOEN+0x1f6>
=======
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3308      	adds	r3, #8
 8009634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800963e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3308      	adds	r3, #8
 8009652:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800965c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e1      	bne.n	800962e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a5f      	ldr	r2, [pc, #380]	; (8009800 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d021      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01a      	beq.n	80096cc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e4      	bne.n	8009696 <UART_RxISR_16BIT_FIFOEN+0x1f6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d130      	bne.n	8008c7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	f023 0310 	bic.w	r3, r3, #16
 8008c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c44:	647b      	str	r3, [r7, #68]	; 0x44
 8008c46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e4      	bne.n	8008c22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b10      	cmp	r3, #16
 8008c64:	d103      	bne.n	8008c6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2210      	movs	r2, #16
 8008c6c:	621a      	str	r2, [r3, #32]
=======
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d130      	bne.n	8009736 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	f023 0310 	bic.w	r3, r3, #16
 80096ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096fc:	647b      	str	r3, [r7, #68]	; 0x44
 80096fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009702:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e4      	bne.n	80096da <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b10      	cmp	r3, #16
 800971c:	d103      	bne.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2210      	movs	r2, #16
 8009724:	621a      	str	r2, [r3, #32]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f005 fc7e 	bl	800e578 <HAL_UARTEx_RxEventCallback>
 8008c7c:	e002      	b.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x29c>
=======
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f005 feb2 	bl	800f498 <HAL_UARTEx_RxEventCallback>
 8009734:	e002      	b.n	800973c <UART_RxISR_16BIT_FIFOEN+0x29c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f005 fbb6 	bl	800e3f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d006      	beq.n	8008c9a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c90:	f003 0320 	and.w	r3, r3, #32
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f47f aecb 	bne.w	8008a30 <UART_RxISR_16BIT_FIFOEN+0x48>
=======
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f005 fdea 	bl	800f310 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800973c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009748:	f003 0320 	and.w	r3, r3, #32
 800974c:	2b00      	cmp	r3, #0
 800974e:	f47f aecb 	bne.w	80094e8 <UART_RxISR_16BIT_FIFOEN+0x48>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ca4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d049      	beq.n	8008d40 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cb2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d242      	bcs.n	8008d40 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cde:	633a      	str	r2, [r7, #48]	; 0x30
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e3      	bne.n	8008cba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008cf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f043 0320 	orr.w	r3, r3, #32
 8008d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	69b9      	ldr	r1, [r7, #24]
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	617b      	str	r3, [r7, #20]
   return(result);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e4      	bne.n	8008cf8 <UART_RxISR_16BIT_FIFOEN+0x310>
=======
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009758:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800975c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009760:	2b00      	cmp	r3, #0
 8009762:	d049      	beq.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800976a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800976e:	429a      	cmp	r2, r3
 8009770:	d242      	bcs.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	623b      	str	r3, [r7, #32]
   return(result);
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3308      	adds	r3, #8
 8009792:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009796:	633a      	str	r2, [r7, #48]	; 0x30
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e3      	bne.n	8009772 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f043 0320 	orr.w	r3, r3, #32
 80097c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	69b9      	ldr	r1, [r7, #24]
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	617b      	str	r3, [r7, #20]
   return(result);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <UART_RxISR_16BIT_FIFOEN+0x310>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008d2e:	e007      	b.n	8008d40 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0208 	orr.w	r2, r2, #8
 8008d3e:	619a      	str	r2, [r3, #24]
}
 8008d40:	bf00      	nop
 8008d42:	37b8      	adds	r7, #184	; 0xb8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	40008000 	.word	0x40008000
 8008d4c:	080084d1 	.word	0x080084d1

08008d50 <HAL_UARTEx_WakeupCallback>:
=======
 80097e6:	e007      	b.n	80097f8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0208 	orr.w	r2, r2, #8
 80097f6:	619a      	str	r2, [r3, #24]
}
 80097f8:	bf00      	nop
 80097fa:	37b8      	adds	r7, #184	; 0xb8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40008000 	.word	0x40008000
 8009804:	08008f89 	.word	0x08008f89

08009808 <HAL_UARTEx_WakeupCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
=======
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
=======
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
=======
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_UARTEx_DisableFifoMode>:
=======
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
=======
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d101      	bne.n	8008da2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d9e:	2302      	movs	r3, #2
 8008da0:	e027      	b.n	8008df2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2224      	movs	r2, #36	; 0x24
 8008dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <HAL_UARTEx_SetTxFifoThreshold>:
=======
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_UARTEx_DisableFifoMode+0x16>
 8009856:	2302      	movs	r3, #2
 8009858:	e027      	b.n	80098aa <HAL_UARTEx_DisableFifoMode+0x66>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2224      	movs	r2, #36	; 0x24
 8009866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 0201 	bic.w	r2, r2, #1
 8009880:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
=======
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e02d      	b.n	8008e72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2224      	movs	r2, #36	; 0x24
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0201 	bic.w	r2, r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8a4 	bl	8008fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <HAL_UARTEx_SetRxFifoThreshold>:
=======
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098ca:	2302      	movs	r3, #2
 80098cc:	e02d      	b.n	800992a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2224      	movs	r2, #36	; 0x24
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8a4 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
=======
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e02d      	b.n	8008eee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2224      	movs	r2, #36	; 0x24
 8008e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f866 	bl	8008fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_UARTEx_ReceiveToIdle_DMA>:
=======
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009942:	2b01      	cmp	r3, #1
 8009944:	d101      	bne.n	800994a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009946:	2302      	movs	r3, #2
 8009948:	e02d      	b.n	80099a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2224      	movs	r2, #36	; 0x24
 8009956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0201 	bic.w	r2, r2, #1
 8009970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f866 	bl	8009a58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_UARTEx_ReceiveToIdle_DMA>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b08c      	sub	sp, #48	; 0x30
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	4613      	mov	r3, r2
 8008f02:	80fb      	strh	r3, [r7, #6]
=======
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b08c      	sub	sp, #48	; 0x30
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d142      	bne.n	8008f94 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008f14:	88fb      	ldrh	r3, [r7, #6]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e03b      	b.n	8008f96 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
=======
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d142      	bne.n	8009a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e03b      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
<<<<<<< HEAD
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7fe fd4b 	bl	80079cc <UART_Start_Receive_DMA>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d124      	bne.n	8008f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d11d      	bne.n	8008f88 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2210      	movs	r2, #16
 8008f52:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	617b      	str	r3, [r7, #20]
   return(result);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f043 0310 	orr.w	r3, r3, #16
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
 8008f74:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6a39      	ldr	r1, [r7, #32]
 8008f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008f86:	e002      	b.n	8008f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
=======
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fe fd4b 	bl	8008484 <UART_Start_Receive_DMA>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80099f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d124      	bne.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d11d      	bne.n	8009a40 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2210      	movs	r2, #16
 8009a0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	e853 3f00 	ldrex	r3, [r3]
 8009a18:	617b      	str	r3, [r7, #20]
   return(result);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f043 0310 	orr.w	r3, r3, #16
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2e:	6a39      	ldr	r1, [r7, #32]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e6      	bne.n	8009a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009a3e:	e002      	b.n	8009a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
<<<<<<< HEAD
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
    }

    return status;
<<<<<<< HEAD
 8008f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008f92:	e000      	b.n	8008f96 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
=======
 8009a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a4a:	e000      	b.n	8009a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8008f94:	2302      	movs	r3, #2
  }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3730      	adds	r7, #48	; 0x30
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <UARTEx_SetNbDataToProcess>:
=======
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3730      	adds	r7, #48	; 0x30
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <UARTEx_SetNbDataToProcess>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
=======
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d108      	bne.n	8008fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d108      	bne.n	8009a7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 8008fc0:	e031      	b.n	8009026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	0e5b      	lsrs	r3, r3, #25
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	0f5b      	lsrs	r3, r3, #29
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	7b3a      	ldrb	r2, [r7, #12]
 8008fee:	4911      	ldr	r1, [pc, #68]	; (8009034 <UARTEx_SetNbDataToProcess+0x94>)
 8008ff0:	5c8a      	ldrb	r2, [r1, r2]
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ff6:	7b3a      	ldrb	r2, [r7, #12]
 8008ff8:	490f      	ldr	r1, [pc, #60]	; (8009038 <UARTEx_SetNbDataToProcess+0x98>)
 8008ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	7b7a      	ldrb	r2, [r7, #13]
 800900c:	4909      	ldr	r1, [pc, #36]	; (8009034 <UARTEx_SetNbDataToProcess+0x94>)
 800900e:	5c8a      	ldrb	r2, [r1, r2]
 8009010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009014:	7b7a      	ldrb	r2, [r7, #13]
 8009016:	4908      	ldr	r1, [pc, #32]	; (8009038 <UARTEx_SetNbDataToProcess+0x98>)
 8009018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901a:	fb93 f3f2 	sdiv	r3, r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	0800e91c 	.word	0x0800e91c
 8009038:	0800e924 	.word	0x0800e924

0800903c <USB_DisableGlobalInt>:
=======
 8009a78:	e031      	b.n	8009ade <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a7e:	2308      	movs	r3, #8
 8009a80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	0e5b      	lsrs	r3, r3, #25
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	0f5b      	lsrs	r3, r3, #29
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	7b3a      	ldrb	r2, [r7, #12]
 8009aa6:	4911      	ldr	r1, [pc, #68]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009aa8:	5c8a      	ldrb	r2, [r1, r2]
 8009aaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aae:	7b3a      	ldrb	r2, [r7, #12]
 8009ab0:	490f      	ldr	r1, [pc, #60]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ab2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ab4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	7b7a      	ldrb	r2, [r7, #13]
 8009ac4:	4909      	ldr	r1, [pc, #36]	; (8009aec <UARTEx_SetNbDataToProcess+0x94>)
 8009ac6:	5c8a      	ldrb	r2, [r1, r2]
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009acc:	7b7a      	ldrb	r2, [r7, #13]
 8009ace:	4908      	ldr	r1, [pc, #32]	; (8009af0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ad0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	0800fa5c 	.word	0x0800fa5c
 8009af0:	0800fa64 	.word	0x0800fa64

08009af4 <USB_DisableGlobalInt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
=======
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 8009044:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009048:	60fb      	str	r3, [r7, #12]
=======
 8009afc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009b00:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	b29b      	uxth	r3, r3
 8009056:	43db      	mvns	r3, r3
 8009058:	b29b      	uxth	r3, r3
 800905a:	4013      	ands	r3, r2
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USB_DevInit>:
=======
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	43db      	mvns	r3, r3
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	4013      	ands	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USB_DevInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8009072:	b084      	sub	sp, #16
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	f107 0014 	add.w	r0, r7, #20
 8009080:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	f107 0014 	add.w	r0, r7, #20
 8009b38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	b004      	add	sp, #16
 80090b2:	4770      	bx	lr

080090b4 <__NVIC_SetPriority>:
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	db0a      	blt.n	80090de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	490c      	ldr	r1, [pc, #48]	; (8009100 <__NVIC_SetPriority+0x4c>)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	0112      	lsls	r2, r2, #4
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	440b      	add	r3, r1
 80090d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80090dc:	e00a      	b.n	80090f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4908      	ldr	r1, [pc, #32]	; (8009104 <__NVIC_SetPriority+0x50>)
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	3b04      	subs	r3, #4
 80090ec:	0112      	lsls	r2, r2, #4
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	440b      	add	r3, r1
 80090f2:	761a      	strb	r2, [r3, #24]
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	e000e100 	.word	0xe000e100
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <SysTick_Handler>:
=======
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	b004      	add	sp, #16
 8009b6a:	4770      	bx	lr

08009b6c <__NVIC_SetPriority>:
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db0a      	blt.n	8009b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <__NVIC_SetPriority+0x4c>)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	0112      	lsls	r2, r2, #4
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b94:	e00a      	b.n	8009bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4908      	ldr	r1, [pc, #32]	; (8009bbc <__NVIC_SetPriority+0x50>)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	0112      	lsls	r2, r2, #4
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	440b      	add	r3, r1
 8009baa:	761a      	strb	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000e100 	.word	0xe000e100
 8009bbc:	e000ed00 	.word	0xe000ed00

08009bc0 <SysTick_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
<<<<<<< HEAD
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <SysTick_Handler+0x1c>)
 800910e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009110:	f002 f982 	bl	800b418 <xTaskGetSchedulerState>
 8009114:	4603      	mov	r3, r0
 8009116:	2b01      	cmp	r3, #1
 8009118:	d001      	beq.n	800911e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800911a:	f003 fafd 	bl	800c718 <xPortSysTickHandler>
  }
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	e000e010 	.word	0xe000e010

08009128 <SVC_Setup>:
=======
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <SysTick_Handler+0x1c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009bc8:	f002 fb96 	bl	800c2f8 <xTaskGetSchedulerState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009bd2:	f003 fce9 	bl	800d5a8 <xPortSysTickHandler>
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	e000e010 	.word	0xe000e010

08009be0 <SVC_Setup>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
<<<<<<< HEAD
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
=======
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
<<<<<<< HEAD
 800912c:	2100      	movs	r1, #0
 800912e:	f06f 0004 	mvn.w	r0, #4
 8009132:	f7ff ffbf 	bl	80090b4 <__NVIC_SetPriority>
#endif
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <osKernelInitialize>:
=======
 8009be4:	2100      	movs	r1, #0
 8009be6:	f06f 0004 	mvn.w	r0, #4
 8009bea:	f7ff ffbf 	bl	8009b6c <__NVIC_SetPriority>
#endif
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <osKernelInitialize>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009142:	f3ef 8305 	mrs	r3, IPSR
 8009146:	603b      	str	r3, [r7, #0]
  return(result);
 8009148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800914e:	f06f 0305 	mvn.w	r3, #5
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e00c      	b.n	8009170 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009156:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <osKernelInitialize+0x44>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <osKernelInitialize+0x2e>
=======
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bfa:	f3ef 8305 	mrs	r3, IPSR
 8009bfe:	603b      	str	r3, [r7, #0]
  return(result);
 8009c00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009c06:	f06f 0305 	mvn.w	r3, #5
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	e00c      	b.n	8009c28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <osKernelInitialize+0x44>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <osKernelInitialize+0x2e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 800915e:	4b08      	ldr	r3, [pc, #32]	; (8009180 <osKernelInitialize+0x44>)
 8009160:	2201      	movs	r2, #1
 8009162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009164:	2300      	movs	r3, #0
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	e002      	b.n	8009170 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800916a:	f04f 33ff 	mov.w	r3, #4294967295
 800916e:	607b      	str	r3, [r7, #4]
=======
 8009c16:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <osKernelInitialize+0x44>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	607b      	str	r3, [r7, #4]
 8009c20:	e002      	b.n	8009c28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return (stat);
<<<<<<< HEAD
 8009170:	687b      	ldr	r3, [r7, #4]
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	20000764 	.word	0x20000764

08009184 <osKernelStart>:
=======
 8009c28:	687b      	ldr	r3, [r7, #4]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	200007c8 	.word	0x200007c8

08009c3c <osKernelStart>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918a:	f3ef 8305 	mrs	r3, IPSR
 800918e:	603b      	str	r3, [r7, #0]
  return(result);
 8009190:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009196:	f06f 0305 	mvn.w	r3, #5
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	e010      	b.n	80091c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <osKernelStart+0x48>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d109      	bne.n	80091ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091a6:	f7ff ffbf 	bl	8009128 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091aa:	4b08      	ldr	r3, [pc, #32]	; (80091cc <osKernelStart+0x48>)
 80091ac:	2202      	movs	r2, #2
 80091ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091b0:	f001 fcd8 	bl	800ab64 <vTaskStartScheduler>
      stat = osOK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	607b      	str	r3, [r7, #4]
 80091b8:	e002      	b.n	80091c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091ba:	f04f 33ff 	mov.w	r3, #4294967295
 80091be:	607b      	str	r3, [r7, #4]
=======
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c42:	f3ef 8305 	mrs	r3, IPSR
 8009c46:	603b      	str	r3, [r7, #0]
  return(result);
 8009c48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009c4e:	f06f 0305 	mvn.w	r3, #5
 8009c52:	607b      	str	r3, [r7, #4]
 8009c54:	e010      	b.n	8009c78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009c56:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <osKernelStart+0x48>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d109      	bne.n	8009c72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009c5e:	f7ff ffbf 	bl	8009be0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <osKernelStart+0x48>)
 8009c64:	2202      	movs	r2, #2
 8009c66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009c68:	f001 fe4e 	bl	800b908 <vTaskStartScheduler>
      stat = osOK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e002      	b.n	8009c78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return (stat);
<<<<<<< HEAD
 80091c0:	687b      	ldr	r3, [r7, #4]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20000764 	.word	0x20000764

080091d0 <osThreadNew>:
=======
 8009c78:	687b      	ldr	r3, [r7, #4]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200007c8 	.word	0x200007c8

08009c88 <osThreadNew>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08e      	sub	sp, #56	; 0x38
 80091d4:	af04      	add	r7, sp, #16
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
=======
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08e      	sub	sp, #56	; 0x38
 8009c8c:	af04      	add	r7, sp, #16
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091e0:	f3ef 8305 	mrs	r3, IPSR
 80091e4:	617b      	str	r3, [r7, #20]
  return(result);
 80091e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d17e      	bne.n	80092ea <osThreadNew+0x11a>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d07b      	beq.n	80092ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80091f2:	2380      	movs	r3, #128	; 0x80
 80091f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091f6:	2318      	movs	r3, #24
 80091f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d045      	beq.n	8009296 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <osThreadNew+0x48>
        name = attr->name;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <osThreadNew+0x6e>
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b38      	cmp	r3, #56	; 0x38
 8009230:	d805      	bhi.n	800923e <osThreadNew+0x6e>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <osThreadNew+0x72>
        return (NULL);
 800923e:	2300      	movs	r3, #0
 8009240:	e054      	b.n	80092ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	089b      	lsrs	r3, r3, #2
 8009250:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00e      	beq.n	8009278 <osThreadNew+0xa8>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	2b5b      	cmp	r3, #91	; 0x5b
 8009260:	d90a      	bls.n	8009278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <osThreadNew+0xa8>
        mem = 1;
 8009272:	2301      	movs	r3, #1
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	e010      	b.n	800929a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10c      	bne.n	800929a <osThreadNew+0xca>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d108      	bne.n	800929a <osThreadNew+0xca>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <osThreadNew+0xca>
          mem = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	e001      	b.n	800929a <osThreadNew+0xca>
=======
 8009c94:	2300      	movs	r3, #0
 8009c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c98:	f3ef 8305 	mrs	r3, IPSR
 8009c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d17e      	bne.n	8009da2 <osThreadNew+0x11a>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d07b      	beq.n	8009da2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009caa:	2380      	movs	r3, #128	; 0x80
 8009cac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009cae:	2318      	movs	r3, #24
 8009cb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d045      	beq.n	8009d4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <osThreadNew+0x48>
        name = attr->name;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d008      	beq.n	8009cf6 <osThreadNew+0x6e>
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b38      	cmp	r3, #56	; 0x38
 8009ce8:	d805      	bhi.n	8009cf6 <osThreadNew+0x6e>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <osThreadNew+0x72>
        return (NULL);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e054      	b.n	8009da4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	089b      	lsrs	r3, r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00e      	beq.n	8009d30 <osThreadNew+0xa8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	2b5b      	cmp	r3, #91	; 0x5b
 8009d18:	d90a      	bls.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <osThreadNew+0xa8>
        mem = 1;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	e010      	b.n	8009d52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10c      	bne.n	8009d52 <osThreadNew+0xca>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <osThreadNew+0xca>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <osThreadNew+0xca>
          mem = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61bb      	str	r3, [r7, #24]
 8009d4c:	e001      	b.n	8009d52 <osThreadNew+0xca>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009296:	2300      	movs	r3, #0
 8009298:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d110      	bne.n	80092c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092a8:	9202      	str	r2, [sp, #8]
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6a3a      	ldr	r2, [r7, #32]
 80092b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f001 fa7e 	bl	800a7b8 <xTaskCreateStatic>
 80092bc:	4603      	mov	r3, r0
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	e013      	b.n	80092ea <osThreadNew+0x11a>
=======
 8009d4e:	2300      	movs	r3, #0
 8009d50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d110      	bne.n	8009d7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	6a3a      	ldr	r2, [r7, #32]
 8009d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f001 fbf4 	bl	800b55c <xTaskCreateStatic>
 8009d74:	4603      	mov	r3, r0
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	e013      	b.n	8009da2 <osThreadNew+0x11a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d110      	bne.n	80092ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 fac9 	bl	800a872 <xTaskCreate>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d001      	beq.n	80092ea <osThreadNew+0x11a>
            hTask = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
=======
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d110      	bne.n	8009da2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	f107 0310 	add.w	r3, r7, #16
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f001 fc3f 	bl	800b616 <xTaskCreate>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osThreadNew+0x11a>
            hTask = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	613b      	str	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 80092ea:	693b      	ldr	r3, [r7, #16]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3728      	adds	r7, #40	; 0x28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <osThreadFlagsSet+0x1a>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	da03      	bge.n	8009316 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800930e:	f06f 0303 	mvn.w	r3, #3
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e035      	b.n	8009382 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800931c:	f3ef 8305 	mrs	r3, IPSR
 8009320:	613b      	str	r3, [r7, #16]
  return(result);
 8009322:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009324:	2b00      	cmp	r3, #0
 8009326:	d01f      	beq.n	8009368 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	2201      	movs	r2, #1
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6978      	ldr	r0, [r7, #20]
 800933a:	f002 fb51 	bl	800b9e0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	2200      	movs	r2, #0
 8009344:	9200      	str	r2, [sp, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f002 fb48 	bl	800b9e0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d015      	beq.n	8009382 <osThreadFlagsSet+0x8e>
 8009356:	4b0d      	ldr	r3, [pc, #52]	; (800938c <osThreadFlagsSet+0x98>)
 8009358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	e00c      	b.n	8009382 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009368:	2300      	movs	r3, #0
 800936a:	2201      	movs	r2, #1
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6978      	ldr	r0, [r7, #20]
 8009370:	f002 fa7e 	bl	800b870 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	2200      	movs	r2, #0
 800937a:	2100      	movs	r1, #0
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f002 fa77 	bl	800b870 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009382:	68fb      	ldr	r3, [r7, #12]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <osThreadFlagsWait>:
  }

=======
 8009da2:	693b      	ldr	r3, [r7, #16]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <osDelay>:
  /* Return flags before clearing */
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b08c      	sub	sp, #48	; 0x30
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800939c:	f3ef 8305 	mrs	r3, IPSR
 80093a0:	617b      	str	r3, [r7, #20]
  return(result);
 80093a2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80093a8:	f06f 0305 	mvn.w	r3, #5
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ae:	e06b      	b.n	8009488 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da03      	bge.n	80093be <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80093b6:	f06f 0303 	mvn.w	r3, #3
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093bc:	e064      	b.n	8009488 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <osThreadFlagsWait+0x3e>
      clear = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80093cc:	e001      	b.n	80093d2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80093da:	f001 fcd5 	bl	800ad88 <xTaskGetTickCount>
 80093de:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80093e0:	f107 0210 	add.w	r2, r7, #16
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093e8:	2000      	movs	r0, #0
 80093ea:	f002 f9e7 	bl	800b7bc <xTaskNotifyWait>
 80093ee:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d137      	bne.n	8009466 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80093f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4013      	ands	r3, r2
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009402:	4313      	orrs	r3, r2
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00c      	beq.n	800942a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	4013      	ands	r3, r2
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	429a      	cmp	r2, r3
 800941a:	d032      	beq.n	8009482 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10f      	bne.n	8009442 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009422:	f06f 0302 	mvn.w	r3, #2
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009428:	e02e      	b.n	8009488 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	4013      	ands	r3, r2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d128      	bne.n	8009486 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800943a:	f06f 0302 	mvn.w	r3, #2
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009440:	e022      	b.n	8009488 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009442:	f001 fca1 	bl	800ad88 <xTaskGetTickCount>
 8009446:	4602      	mov	r2, r0
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	429a      	cmp	r2, r3
 8009454:	d902      	bls.n	800945c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
 800945a:	e00e      	b.n	800947a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800945c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
 8009464:	e009      	b.n	800947a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800946c:	f06f 0302 	mvn.w	r3, #2
 8009470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009472:	e002      	b.n	800947a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009474:	f06f 0301 	mvn.w	r3, #1
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1af      	bne.n	80093e0 <osThreadFlagsWait+0x50>
 8009480:	e002      	b.n	8009488 <osThreadFlagsWait+0xf8>
            break;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <osThreadFlagsWait+0xf8>
            break;
 8009486:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800948a:	4618      	mov	r0, r3
 800948c:	3730      	adds	r7, #48	; 0x30
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800949a:	f3ef 8305 	mrs	r3, IPSR
 800949e:	60bb      	str	r3, [r7, #8]
  return(result);
 80094a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <osDelay+0x1c>
    stat = osErrorISR;
 80094a6:	f06f 0305 	mvn.w	r3, #5
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e007      	b.n	80094be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <osDelay+0x2c>
      vTaskDelay(ticks);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fb1f 	bl	800aafc <vTaskDelay>
=======
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db4:	f3ef 8305 	mrs	r3, IPSR
 8009db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009dba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <osDelay+0x1c>
    stat = osErrorISR;
 8009dc0:	f06f 0305 	mvn.w	r3, #5
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e007      	b.n	8009dd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fd64 	bl	800b8a0 <vTaskDelay>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
  }

  return (stat);
<<<<<<< HEAD
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <osEventFlagsNew>:
=======
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <osEventFlagsNew>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
<<<<<<< HEAD
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
=======
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b086      	sub	sp, #24
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
<<<<<<< HEAD
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094d4:	f3ef 8305 	mrs	r3, IPSR
 80094d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094da:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d12d      	bne.n	800953c <osEventFlagsNew+0x74>
    mem = -1;
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295
 80094e4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d015      	beq.n	8009518 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d006      	beq.n	8009502 <osEventFlagsNew+0x3a>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	2b1f      	cmp	r3, #31
 80094fa:	d902      	bls.n	8009502 <osEventFlagsNew+0x3a>
        mem = 1;
 80094fc:	2301      	movs	r3, #1
 80094fe:	613b      	str	r3, [r7, #16]
 8009500:	e00c      	b.n	800951c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d108      	bne.n	800951c <osEventFlagsNew+0x54>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d104      	bne.n	800951c <osEventFlagsNew+0x54>
          mem = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e001      	b.n	800951c <osEventFlagsNew+0x54>
=======
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dee:	f3ef 8305 	mrs	r3, IPSR
 8009df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009df4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d12d      	bne.n	8009e56 <osEventFlagsNew+0x74>
    mem = -1;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d015      	beq.n	8009e32 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d006      	beq.n	8009e1c <osEventFlagsNew+0x3a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	2b1f      	cmp	r3, #31
 8009e14:	d902      	bls.n	8009e1c <osEventFlagsNew+0x3a>
        mem = 1;
 8009e16:	2301      	movs	r3, #1
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	e00c      	b.n	8009e36 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d108      	bne.n	8009e36 <osEventFlagsNew+0x54>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <osEventFlagsNew+0x54>
          mem = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	613b      	str	r3, [r7, #16]
 8009e30:	e001      	b.n	8009e36 <osEventFlagsNew+0x54>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d106      	bne.n	8009530 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f93e 	bl	80097a8 <xEventGroupCreateStatic>
 800952c:	6178      	str	r0, [r7, #20]
 800952e:	e005      	b.n	800953c <osEventFlagsNew+0x74>
=======
 8009e32:	2300      	movs	r3, #0
 8009e34:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d106      	bne.n	8009e4a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f9e7 	bl	800a214 <xEventGroupCreateStatic>
 8009e46:	6178      	str	r0, [r7, #20]
 8009e48:	e005      	b.n	8009e56 <osEventFlagsNew+0x74>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009536:	f000 f96e 	bl	8009816 <xEventGroupCreate>
 800953a:	6178      	str	r0, [r7, #20]
=======
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009e50:	f000 fa17 	bl	800a282 <xEventGroupCreate>
 8009e54:	6178      	str	r0, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
<<<<<<< HEAD
 800953c:	697b      	ldr	r3, [r7, #20]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <osSemaphoreNew>:
=======
 8009e56:	697b      	ldr	r3, [r7, #20]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <osEventFlagsSet+0x1e>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009e7e:	f06f 0303 	mvn.w	r3, #3
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e028      	b.n	8009ed8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e86:	f3ef 8305 	mrs	r3, IPSR
 8009e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01d      	beq.n	8009ece <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6938      	ldr	r0, [r7, #16]
 8009ea0:	f000 fb92 	bl	800a5c8 <xEventGroupSetBitsFromISR>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8009eaa:	f06f 0302 	mvn.w	r3, #2
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e012      	b.n	8009ed8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00d      	beq.n	8009ed8 <osEventFlagsSet+0x78>
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <osEventFlagsSet+0x84>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	e004      	b.n	8009ed8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6938      	ldr	r0, [r7, #16]
 8009ed2:	f000 fabf 	bl	800a454 <xEventGroupSetBits>
 8009ed6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009ed8:	697b      	ldr	r3, [r7, #20]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	e000ed04 	.word	0xe000ed04

08009ee8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08c      	sub	sp, #48	; 0x30
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d004      	beq.n	8009f0a <osEventFlagsWait+0x22>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8009f0a:	f06f 0303 	mvn.w	r3, #3
 8009f0e:	61fb      	str	r3, [r7, #28]
 8009f10:	e04b      	b.n	8009faa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f12:	f3ef 8305 	mrs	r3, IPSR
 8009f16:	617b      	str	r3, [r7, #20]
  return(result);
 8009f18:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009f1e:	f06f 0305 	mvn.w	r3, #5
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	e041      	b.n	8009faa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
 8009f34:	e001      	b.n	8009f3a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f003 0302 	and.w	r3, r3, #2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	e001      	b.n	8009f4e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	6a3a      	ldr	r2, [r7, #32]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	69b8      	ldr	r0, [r7, #24]
 8009f5a:	f000 f9ad 	bl	800a2b8 <xEventGroupWaitBits>
 8009f5e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d010      	beq.n	8009f8c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d019      	beq.n	8009faa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009f7c:	f06f 0301 	mvn.w	r3, #1
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	e012      	b.n	8009faa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009f84:	f06f 0302 	mvn.w	r3, #2
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	e00e      	b.n	8009faa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4013      	ands	r3, r2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009f9c:	f06f 0301 	mvn.w	r3, #1
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	e002      	b.n	8009faa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009fa4:	f06f 0302 	mvn.w	r3, #2
 8009fa8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009faa:	69fb      	ldr	r3, [r7, #28]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3728      	adds	r7, #40	; 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <osSemaphoreNew>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
<<<<<<< HEAD
 8009546:	b580      	push	{r7, lr}
 8009548:	b08a      	sub	sp, #40	; 0x28
 800954a:	af02      	add	r7, sp, #8
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
=======
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
<<<<<<< HEAD
 8009552:	2300      	movs	r3, #0
 8009554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009556:	f3ef 8305 	mrs	r3, IPSR
 800955a:	613b      	str	r3, [r7, #16]
  return(result);
 800955c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800955e:	2b00      	cmp	r3, #0
 8009560:	d175      	bne.n	800964e <osSemaphoreNew+0x108>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d072      	beq.n	800964e <osSemaphoreNew+0x108>
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d86e      	bhi.n	800964e <osSemaphoreNew+0x108>
    mem = -1;
 8009570:	f04f 33ff 	mov.w	r3, #4294967295
 8009574:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d015      	beq.n	80095a8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <osSemaphoreNew+0x4c>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	2b4f      	cmp	r3, #79	; 0x4f
 800958a:	d902      	bls.n	8009592 <osSemaphoreNew+0x4c>
        mem = 1;
 800958c:	2301      	movs	r3, #1
 800958e:	61bb      	str	r3, [r7, #24]
 8009590:	e00c      	b.n	80095ac <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d108      	bne.n	80095ac <osSemaphoreNew+0x66>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <osSemaphoreNew+0x66>
          mem = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e001      	b.n	80095ac <osSemaphoreNew+0x66>
=======
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc4:	f3ef 8305 	mrs	r3, IPSR
 8009fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8009fca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d175      	bne.n	800a0bc <osSemaphoreNew+0x108>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d072      	beq.n	800a0bc <osSemaphoreNew+0x108>
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d86e      	bhi.n	800a0bc <osSemaphoreNew+0x108>
    mem = -1;
 8009fde:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d015      	beq.n	800a016 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d006      	beq.n	800a000 <osSemaphoreNew+0x4c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	2b4f      	cmp	r3, #79	; 0x4f
 8009ff8:	d902      	bls.n	800a000 <osSemaphoreNew+0x4c>
        mem = 1;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e00c      	b.n	800a01a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d108      	bne.n	800a01a <osSemaphoreNew+0x66>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <osSemaphoreNew+0x66>
          mem = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	61bb      	str	r3, [r7, #24]
 800a014:	e001      	b.n	800a01a <osSemaphoreNew+0x66>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 80095a8:	2300      	movs	r3, #0
 80095aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d04c      	beq.n	800964e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d128      	bne.n	800960c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10a      	bne.n	80095d6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2203      	movs	r2, #3
 80095c6:	9200      	str	r2, [sp, #0]
 80095c8:	2200      	movs	r2, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	2001      	movs	r0, #1
 80095ce:	f000 fa59 	bl	8009a84 <xQueueGenericCreateStatic>
 80095d2:	61f8      	str	r0, [r7, #28]
 80095d4:	e005      	b.n	80095e2 <osSemaphoreNew+0x9c>
=======
 800a016:	2300      	movs	r3, #0
 800a018:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d04c      	beq.n	800a0bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d128      	bne.n	800a07a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10a      	bne.n	800a044 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2203      	movs	r2, #3
 800a034:	9200      	str	r2, [sp, #0]
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	2001      	movs	r0, #1
 800a03c:	f000 fbf4 	bl	800a828 <xQueueGenericCreateStatic>
 800a040:	61f8      	str	r0, [r7, #28]
 800a042:	e005      	b.n	800a050 <osSemaphoreNew+0x9c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
<<<<<<< HEAD
 80095d6:	2203      	movs	r2, #3
 80095d8:	2100      	movs	r1, #0
 80095da:	2001      	movs	r0, #1
 80095dc:	f000 faca 	bl	8009b74 <xQueueGenericCreate>
 80095e0:	61f8      	str	r0, [r7, #28]
=======
 800a044:	2203      	movs	r2, #3
 800a046:	2100      	movs	r1, #0
 800a048:	2001      	movs	r0, #1
 800a04a:	f000 fc65 	bl	800a918 <xQueueGenericCreate>
 800a04e:	61f8      	str	r0, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
<<<<<<< HEAD
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d022      	beq.n	800962e <osSemaphoreNew+0xe8>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01f      	beq.n	800962e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095ee:	2300      	movs	r3, #0
 80095f0:	2200      	movs	r2, #0
 80095f2:	2100      	movs	r1, #0
 80095f4:	69f8      	ldr	r0, [r7, #28]
 80095f6:	f000 fb85 	bl	8009d04 <xQueueGenericSend>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d016      	beq.n	800962e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009600:	69f8      	ldr	r0, [r7, #28]
 8009602:	f000 ff05 	bl	800a410 <vQueueDelete>
            hSemaphore = NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e010      	b.n	800962e <osSemaphoreNew+0xe8>
=======
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d022      	beq.n	800a09c <osSemaphoreNew+0xe8>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01f      	beq.n	800a09c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	69f8      	ldr	r0, [r7, #28]
 800a064:	f000 fd20 	bl	800aaa8 <xQueueGenericSend>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d016      	beq.n	800a09c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a06e:	69f8      	ldr	r0, [r7, #28]
 800a070:	f001 f8a0 	bl	800b1b4 <vQueueDelete>
            hSemaphore = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	e010      	b.n	800a09c <osSemaphoreNew+0xe8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }
        }
      }
      else {
        if (mem == 1) {
<<<<<<< HEAD
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d108      	bne.n	8009624 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	461a      	mov	r2, r3
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 fb07 	bl	8009c2e <xQueueCreateCountingSemaphoreStatic>
 8009620:	61f8      	str	r0, [r7, #28]
 8009622:	e004      	b.n	800962e <osSemaphoreNew+0xe8>
=======
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d108      	bne.n	800a092 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	461a      	mov	r2, r3
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fca2 	bl	800a9d2 <xQueueCreateCountingSemaphoreStatic>
 800a08e:	61f8      	str	r0, [r7, #28]
 800a090:	e004      	b.n	800a09c <osSemaphoreNew+0xe8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
<<<<<<< HEAD
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fb38 	bl	8009c9c <xQueueCreateCountingSemaphore>
 800962c:	61f8      	str	r0, [r7, #28]
=======
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 fcd3 	bl	800aa40 <xQueueCreateCountingSemaphore>
 800a09a:	61f8      	str	r0, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
<<<<<<< HEAD
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00c      	beq.n	800964e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <osSemaphoreNew+0xfc>
          name = attr->name;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	617b      	str	r3, [r7, #20]
 8009640:	e001      	b.n	8009646 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	69f8      	ldr	r0, [r7, #28]
 800964a:	f001 f82d 	bl	800a6a8 <vQueueAddToRegistry>
=======
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e001      	b.n	800a0b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a0b4:	6979      	ldr	r1, [r7, #20]
 800a0b6:	69f8      	ldr	r0, [r7, #28]
 800a0b8:	f001 f9c8 	bl	800b44c <vQueueAddToRegistry>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
<<<<<<< HEAD
 800964e:	69fb      	ldr	r3, [r7, #28]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <osMessageQueueNew>:
=======
 800a0bc:	69fb      	ldr	r3, [r7, #28]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <osMessageQueueNew>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
<<<<<<< HEAD
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	; 0x28
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
=======
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b08a      	sub	sp, #40	; 0x28
 800a0ca:	af02      	add	r7, sp, #8
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
<<<<<<< HEAD
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009668:	f3ef 8305 	mrs	r3, IPSR
 800966c:	613b      	str	r3, [r7, #16]
  return(result);
 800966e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009670:	2b00      	cmp	r3, #0
 8009672:	d15f      	bne.n	8009734 <osMessageQueueNew+0xdc>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d05c      	beq.n	8009734 <osMessageQueueNew+0xdc>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d059      	beq.n	8009734 <osMessageQueueNew+0xdc>
    mem = -1;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d029      	beq.n	80096e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d012      	beq.n	80096ba <osMessageQueueNew+0x62>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2b4f      	cmp	r3, #79	; 0x4f
 800969a:	d90e      	bls.n	80096ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00a      	beq.n	80096ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	695a      	ldr	r2, [r3, #20]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	68b9      	ldr	r1, [r7, #8]
 80096ac:	fb01 f303 	mul.w	r3, r1, r3
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d302      	bcc.n	80096ba <osMessageQueueNew+0x62>
        mem = 1;
 80096b4:	2301      	movs	r3, #1
 80096b6:	61bb      	str	r3, [r7, #24]
 80096b8:	e014      	b.n	80096e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d110      	bne.n	80096e4 <osMessageQueueNew+0x8c>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10c      	bne.n	80096e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d108      	bne.n	80096e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d104      	bne.n	80096e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e001      	b.n	80096e4 <osMessageQueueNew+0x8c>
=======
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0d6:	f3ef 8305 	mrs	r3, IPSR
 800a0da:	613b      	str	r3, [r7, #16]
  return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d15f      	bne.n	800a1a2 <osMessageQueueNew+0xdc>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d05c      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d059      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
    mem = -1;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d029      	beq.n	800a14e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d012      	beq.n	800a128 <osMessageQueueNew+0x62>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b4f      	cmp	r3, #79	; 0x4f
 800a108:	d90e      	bls.n	800a128 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695a      	ldr	r2, [r3, #20]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	fb01 f303 	mul.w	r3, r1, r3
 800a11e:	429a      	cmp	r2, r3
 800a120:	d302      	bcc.n	800a128 <osMessageQueueNew+0x62>
        mem = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	61bb      	str	r3, [r7, #24]
 800a126:	e014      	b.n	800a152 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d110      	bne.n	800a152 <osMessageQueueNew+0x8c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10c      	bne.n	800a152 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d108      	bne.n	800a152 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <osMessageQueueNew+0x8c>
          mem = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	e001      	b.n	800a152 <osMessageQueueNew+0x8c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 80096e0:	2300      	movs	r3, #0
 80096e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d10b      	bne.n	8009702 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2100      	movs	r1, #0
 80096f4:	9100      	str	r1, [sp, #0]
 80096f6:	68b9      	ldr	r1, [r7, #8]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 f9c3 	bl	8009a84 <xQueueGenericCreateStatic>
 80096fe:	61f8      	str	r0, [r7, #28]
 8009700:	e008      	b.n	8009714 <osMessageQueueNew+0xbc>
=======
 800a14e:	2300      	movs	r3, #0
 800a150:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d10b      	bne.n	800a170 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691a      	ldr	r2, [r3, #16]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2100      	movs	r1, #0
 800a162:	9100      	str	r1, [sp, #0]
 800a164:	68b9      	ldr	r1, [r7, #8]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 fb5e 	bl	800a828 <xQueueGenericCreateStatic>
 800a16c:	61f8      	str	r0, [r7, #28]
 800a16e:	e008      	b.n	800a182 <osMessageQueueNew+0xbc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
      #endif
    }
    else {
      if (mem == 0) {
<<<<<<< HEAD
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009708:	2200      	movs	r2, #0
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fa31 	bl	8009b74 <xQueueGenericCreate>
 8009712:	61f8      	str	r0, [r7, #28]
=======
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a176:	2200      	movs	r2, #0
 800a178:	68b9      	ldr	r1, [r7, #8]
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fbcc 	bl	800a918 <xQueueGenericCreate>
 800a180:	61f8      	str	r0, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
<<<<<<< HEAD
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00c      	beq.n	8009734 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	e001      	b.n	800972c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800972c:	6979      	ldr	r1, [r7, #20]
 800972e:	69f8      	ldr	r0, [r7, #28]
 8009730:	f000 ffba 	bl	800a6a8 <vQueueAddToRegistry>
=======
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00c      	beq.n	800a1a2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e001      	b.n	800a19a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a19a:	6979      	ldr	r1, [r7, #20]
 800a19c:	69f8      	ldr	r0, [r7, #28]
 800a19e:	f001 f955 	bl	800b44c <vQueueAddToRegistry>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
<<<<<<< HEAD
 8009734:	69fb      	ldr	r3, [r7, #28]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <vApplicationGetIdleTaskMemory>:
=======
 800a1a2:	69fb      	ldr	r3, [r7, #28]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3720      	adds	r7, #32
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <vApplicationGetIdleTaskMemory>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
=======
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
<<<<<<< HEAD
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a07      	ldr	r2, [pc, #28]	; (800976c <vApplicationGetIdleTaskMemory+0x2c>)
 8009750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a06      	ldr	r2, [pc, #24]	; (8009770 <vApplicationGetIdleTaskMemory+0x30>)
 8009756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2280      	movs	r2, #128	; 0x80
 800975c:	601a      	str	r2, [r3, #0]
}
 800975e:	bf00      	nop
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000768 	.word	0x20000768
 8009770:	200007c4 	.word	0x200007c4

08009774 <vApplicationGetTimerTaskMemory>:
=======
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	4a07      	ldr	r2, [pc, #28]	; (800a1d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	4a06      	ldr	r2, [pc, #24]	; (800a1dc <vApplicationGetIdleTaskMemory+0x30>)
 800a1c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2280      	movs	r2, #128	; 0x80
 800a1c8:	601a      	str	r2, [r3, #0]
}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	200007cc 	.word	0x200007cc
 800a1dc:	20000828 	.word	0x20000828

0800a1e0 <vApplicationGetTimerTaskMemory>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
=======
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
<<<<<<< HEAD
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a07      	ldr	r2, [pc, #28]	; (80097a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a06      	ldr	r2, [pc, #24]	; (80097a4 <vApplicationGetTimerTaskMemory+0x30>)
 800978a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009792:	601a      	str	r2, [r3, #0]
}
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	200009c4 	.word	0x200009c4
 80097a4:	20000a20 	.word	0x20000a20

080097a8 <xEventGroupCreateStatic>:
=======
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <vApplicationGetTimerTaskMemory+0x2c>)
 800a1f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vApplicationGetTimerTaskMemory+0x30>)
 800a1f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1fe:	601a      	str	r2, [r3, #0]
}
 800a200:	bf00      	nop
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000a28 	.word	0x20000a28
 800a210:	20000a84 	.word	0x20000a84

0800a214 <xEventGroupCreateStatic>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
<<<<<<< HEAD
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
=======
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
<<<<<<< HEAD
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10a      	bne.n	80097cc <xEventGroupCreateStatic+0x24>
=======
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <xEventGroupCreateStatic+0x24>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	613b      	str	r3, [r7, #16]
=======
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	613b      	str	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
<<<<<<< HEAD
 80097c8:	bf00      	nop
 80097ca:	e7fe      	b.n	80097ca <xEventGroupCreateStatic+0x22>
=======
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xEventGroupCreateStatic+0x22>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
<<<<<<< HEAD
 80097cc:	2320      	movs	r3, #32
 80097ce:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d00a      	beq.n	80097ec <xEventGroupCreateStatic+0x44>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xEventGroupCreateStatic+0x42>
=======
 800a238:	2320      	movs	r3, #32
 800a23a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d00a      	beq.n	800a258 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xEventGroupCreateStatic+0x42>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
<<<<<<< HEAD
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	3304      	adds	r3, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f822 	bl	800984a <vListInitialise>
=======
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 f9bf 	bl	800a5f0 <vListInitialise>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2201      	movs	r2, #1
 800980a:	771a      	strb	r2, [r3, #28]
=======
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2201      	movs	r2, #1
 800a276:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
<<<<<<< HEAD
 800980c:	697b      	ldr	r3, [r7, #20]
	}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <xEventGroupCreate>:
=======
 800a278:	697b      	ldr	r3, [r7, #20]
	}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <xEventGroupCreate>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
<<<<<<< HEAD
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
=======
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 800981c:	2020      	movs	r0, #32
 800981e:	f003 f80b 	bl	800c838 <pvPortMalloc>
 8009822:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f000 f808 	bl	800984a <vListInitialise>
=======
 800a288:	2020      	movs	r0, #32
 800a28a:	f003 fa1d 	bl	800d6c8 <pvPortMalloc>
 800a28e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 f9a5 	bl	800a5f0 <vListInitialise>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	771a      	strb	r2, [r3, #28]
=======
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	771a      	strb	r2, [r3, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
<<<<<<< HEAD
 8009840:	687b      	ldr	r3, [r7, #4]
	}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <vListInitialise>:
=======
 800a2ac:	687b      	ldr	r3, [r7, #4]
	}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b090      	sub	sp, #64	; 0x40
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xEventGroupWaitBits+0x36>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	623b      	str	r3, [r7, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00a      	beq.n	800a30e <xEventGroupWaitBits+0x56>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61fb      	str	r3, [r7, #28]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <xEventGroupWaitBits+0x72>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61bb      	str	r3, [r7, #24]
}
 800a326:	bf00      	nop
 800a328:	e7fe      	b.n	800a328 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a32a:	f001 ffe5 	bl	800c2f8 <xTaskGetSchedulerState>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <xEventGroupWaitBits+0x82>
 800a334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <xEventGroupWaitBits+0x86>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <xEventGroupWaitBits+0x88>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10a      	bne.n	800a35a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	617b      	str	r3, [r7, #20]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a35a:	f001 fb3b 	bl	800b9d4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36a:	f000 f90b 	bl	800a584 <prvTestWaitCondition>
 800a36e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00e      	beq.n	800a394 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d028      	beq.n	800a3d6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	43db      	mvns	r3, r3
 800a38c:	401a      	ands	r2, r3
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	e020      	b.n	800a3d6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a3a2:	e018      	b.n	800a3d6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3b0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	1d18      	adds	r0, r3, #4
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	f001 fd0b 	bl	800bde8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a3d6:	f001 fb0b 	bl	800b9f0 <xTaskResumeAll>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d031      	beq.n	800a446 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d107      	bne.n	800a3f8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <xEventGroupWaitBits+0x198>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a3f8:	f002 f8f4 	bl	800c5e4 <uxTaskResetEventItemValue>
 800a3fc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a408:	f003 f83c 	bl	800d484 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	68b9      	ldr	r1, [r7, #8]
 800a416:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a418:	f000 f8b4 	bl	800a584 <prvTestWaitCondition>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d006      	beq.n	800a436 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	43db      	mvns	r3, r3
 800a430:	401a      	ands	r2, r3
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a436:	2301      	movs	r3, #1
 800a438:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a43a:	f003 f853 	bl	800d4e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3740      	adds	r7, #64	; 0x40
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a45e:	2300      	movs	r3, #0
 800a460:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <xEventGroupSetBits+0x32>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	613b      	str	r3, [r7, #16]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00a      	beq.n	800a4a6 <xEventGroupSetBits+0x52>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	60fb      	str	r3, [r7, #12]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a4b2:	f001 fa8f 	bl	800b9d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a4c8:	e03c      	b.n	800a544 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a4e0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4e8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d108      	bne.n	800a506 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a504:	e008      	b.n	800a518 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	4013      	ands	r3, r2
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	429a      	cmp	r2, r3
 800a512:	d101      	bne.n	800a518 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a538:	4619      	mov	r1, r3
 800a53a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a53c:	f001 fd20 	bl	800bf80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d1be      	bne.n	800a4ca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	43db      	mvns	r3, r3
 800a554:	401a      	ands	r2, r3
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a55a:	f001 fa49 	bl	800b9f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	681b      	ldr	r3, [r3, #0]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3738      	adds	r7, #56	; 0x38
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff ff6c 	bl	800a454 <xEventGroupSetBits>
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d107      	bne.n	800a5aa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00a      	beq.n	800a5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	e007      	b.n	800a5ba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d101      	bne.n	800a5ba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a5ba:	697b      	ldr	r3, [r7, #20]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4804      	ldr	r0, [pc, #16]	; (800a5ec <xEventGroupSetBitsFromISR+0x24>)
 800a5dc:	f002 fe08 	bl	800d1f0 <xTimerPendFunctionCallFromISR>
 800a5e0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800a5e2:	697b      	ldr	r3, [r7, #20]
	}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	0800a56b 	.word	0x0800a56b

0800a5f0 <vListInitialise>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
=======
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f103 0208 	add.w	r2, r3, #8
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	605a      	str	r2, [r3, #4]
=======
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f103 0208 	add.w	r2, r3, #8
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	609a      	str	r2, [r3, #8]
=======
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f04f 32ff 	mov.w	r2, #4294967295
 800a608:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f103 0208 	add.w	r2, r3, #8
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f103 0208 	add.w	r2, r3, #8
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
=======
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f103 0208 	add.w	r2, r3, #8
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f103 0208 	add.w	r2, r3, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <vListInitialiseItem>:
=======
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <vListInitialiseItem>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	611a      	str	r2, [r3, #16]
=======
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	611a      	str	r2, [r3, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <vListInsertEnd>:
=======
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <vListInsertEnd>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	60fb      	str	r3, [r7, #12]
=======
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	609a      	str	r2, [r3, #8]
=======
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689a      	ldr	r2, [r3, #8]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	601a      	str	r2, [r3, #0]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <vListInsert>:
=======
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	601a      	str	r2, [r3, #0]
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <vListInsert>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60bb      	str	r3, [r7, #8]
=======
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009902:	d103      	bne.n	800990c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e00c      	b.n	8009926 <vListInsert+0x3a>
=======
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d103      	bne.n	800a6b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e00c      	b.n	800a6cc <vListInsert+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3308      	adds	r3, #8
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	e002      	b.n	800991a <vListInsert+0x2e>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	d2f6      	bcs.n	8009914 <vListInsert+0x28>
=======
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	e002      	b.n	800a6c0 <vListInsert+0x2e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d2f6      	bcs.n	800a6ba <vListInsert+0x28>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	605a      	str	r2, [r3, #4]
=======
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	601a      	str	r2, [r3, #0]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <uxListRemove>:
=======
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <uxListRemove>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6892      	ldr	r2, [r2, #8]
 8009974:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6852      	ldr	r2, [r2, #4]
 800997e:	605a      	str	r2, [r3, #4]
=======
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6892      	ldr	r2, [r2, #8]
 800a71a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6852      	ldr	r2, [r2, #4]
 800a724:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d103      	bne.n	8009992 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	605a      	str	r2, [r3, #4]
=======
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d103      	bne.n	800a738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	1e5a      	subs	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
	...

080099b4 <xQueueGenericReset>:
=======
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1e5a      	subs	r2, r3, #1
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <xQueueGenericReset>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGenericReset+0x2a>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	60bb      	str	r3, [r7, #8]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099de:	f002 fe09 	bl	800c5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	68f9      	ldr	r1, [r7, #12]
 80099ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099ee:	fb01 f303 	mul.w	r3, r1, r3
 80099f2:	441a      	add	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	68f9      	ldr	r1, [r7, #12]
 8009a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a14:	fb01 f303 	mul.w	r3, r1, r3
 8009a18:	441a      	add	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	22ff      	movs	r2, #255	; 0xff
 8009a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	22ff      	movs	r2, #255	; 0xff
 8009a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d114      	bne.n	8009a5e <xQueueGenericReset+0xaa>
=======
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <xQueueGenericReset+0x2a>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	60bb      	str	r3, [r7, #8]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a782:	f002 fe7f 	bl	800d484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78e:	68f9      	ldr	r1, [r7, #12]
 800a790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	68f9      	ldr	r1, [r7, #12]
 800a7b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	441a      	add	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	22ff      	movs	r2, #255	; 0xff
 800a7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	22ff      	movs	r2, #255	; 0xff
 800a7ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d114      	bne.n	800a802 <xQueueGenericReset+0xaa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01a      	beq.n	8009a72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3310      	adds	r3, #16
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 fb2b 	bl	800b09c <xTaskRemoveFromEventList>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <xQueueGenericReset+0xcc>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	e009      	b.n	8009a72 <xQueueGenericReset+0xbe>
=======
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01a      	beq.n	800a816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3310      	adds	r3, #16
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fb67 	bl	800beb8 <xTaskRemoveFromEventList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d012      	beq.n	800a816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <xQueueGenericReset+0xcc>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e009      	b.n	800a816 <xQueueGenericReset+0xbe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3310      	adds	r3, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fef1 	bl	800984a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3324      	adds	r3, #36	; 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff feec 	bl	800984a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a72:	f002 fdef 	bl	800c654 <vPortExitCritical>
=======
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3310      	adds	r3, #16
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fef2 	bl	800a5f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3324      	adds	r3, #36	; 0x24
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff feed 	bl	800a5f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a816:	f002 fe65 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8009a76:	2301      	movs	r3, #1
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <xQueueGenericCreateStatic>:
=======
 800a81a:	2301      	movs	r3, #1
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	e000ed04 	.word	0xe000ed04

0800a828 <xQueueGenericCreateStatic>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aaa:	bf00      	nop
 8009aac:	e7fe      	b.n	8009aac <xQueueGenericCreateStatic+0x28>
=======
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08e      	sub	sp, #56	; 0x38
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xQueueGenericCreateStatic+0x28>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xQueueGenericCreateStatic+0x44>
=======
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueGenericCreateStatic+0x44>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <xQueueGenericCreateStatic+0x52>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <xQueueGenericCreateStatic+0x56>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <xQueueGenericCreateStatic+0x58>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	623b      	str	r3, [r7, #32]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <xQueueGenericCreateStatic+0x7e>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <xQueueGenericCreateStatic+0x82>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <xQueueGenericCreateStatic+0x84>
 8009b06:	2300      	movs	r3, #0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	61fb      	str	r3, [r7, #28]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <xQueueGenericCreateStatic+0x9c>
=======
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <xQueueGenericCreateStatic+0x52>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <xQueueGenericCreateStatic+0x56>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericCreateStatic+0x58>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d102      	bne.n	800a8a6 <xQueueGenericCreateStatic+0x7e>
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <xQueueGenericCreateStatic+0x82>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <xQueueGenericCreateStatic+0x84>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	61fb      	str	r3, [r7, #28]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGenericCreateStatic+0x9c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 8009b22:	2350      	movs	r3, #80	; 0x50
 8009b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b50      	cmp	r3, #80	; 0x50
 8009b2a:	d00a      	beq.n	8009b42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61bb      	str	r3, [r7, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b42:	697b      	ldr	r3, [r7, #20]
=======
 800a8c6:	2350      	movs	r3, #80	; 0x50
 800a8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b50      	cmp	r3, #80	; 0x50
 800a8ce:	d00a      	beq.n	800a8e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	61bb      	str	r3, [r7, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8e6:	697b      	ldr	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00d      	beq.n	8009b6a <xQueueGenericCreateStatic+0xe6>
=======
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <xQueueGenericCreateStatic+0xe6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8009b56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f83f 	bl	8009be8 <prvInitialiseNewQueue>
=======
 800a8fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f83f 	bl	800a98c <prvInitialiseNewQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3730      	adds	r7, #48	; 0x30
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <xQueueGenericCreate>:
=======
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a910:	4618      	mov	r0, r3
 800a912:	3730      	adds	r7, #48	; 0x30
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <xQueueGenericCreate>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	; 0x28
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	71fb      	strb	r3, [r7, #7]
=======
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	613b      	str	r3, [r7, #16]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueGenericCreate+0x28>
=======
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	613b      	str	r3, [r7, #16]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xQueueGenericCreate+0x28>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
 8009ba6:	61fb      	str	r3, [r7, #28]
=======
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	fb02 f303 	mul.w	r3, r2, r3
 800a94a:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	3350      	adds	r3, #80	; 0x50
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 fe43 	bl	800c838 <pvPortMalloc>
 8009bb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d011      	beq.n	8009bde <xQueueGenericCreate+0x6a>
=======
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	3350      	adds	r3, #80	; 0x50
 800a950:	4618      	mov	r0, r3
 800a952:	f002 feb9 	bl	800d6c8 <pvPortMalloc>
 800a956:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d011      	beq.n	800a982 <xQueueGenericCreate+0x6a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	3350      	adds	r3, #80	; 0x50
 8009bc2:	617b      	str	r3, [r7, #20]
=======
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3350      	adds	r3, #80	; 0x50
 800a966:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 8009bcc:	79fa      	ldrb	r2, [r7, #7]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f805 	bl	8009be8 <prvInitialiseNewQueue>
=======
 800a970:	79fa      	ldrb	r2, [r7, #7]
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	4613      	mov	r3, r2
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f805 	bl	800a98c <prvInitialiseNewQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 8009bde:	69bb      	ldr	r3, [r7, #24]
	}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3720      	adds	r7, #32
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvInitialiseNewQueue>:
=======
 800a982:	69bb      	ldr	r3, [r7, #24]
	}
 800a984:	4618      	mov	r0, r3
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <prvInitialiseNewQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	70fb      	strb	r3, [r7, #3]
=======
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	70fb      	strb	r3, [r7, #3]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <prvInitialiseNewQueue+0x1c>
=======
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d103      	bne.n	800a9a8 <prvInitialiseNewQueue+0x1c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	e002      	b.n	8009c0a <prvInitialiseNewQueue+0x22>
=======
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	e002      	b.n	800a9ae <prvInitialiseNewQueue+0x22>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]
=======
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c16:	2101      	movs	r1, #1
 8009c18:	69b8      	ldr	r0, [r7, #24]
 8009c1a:	f7ff fecb 	bl	80099b4 <xQueueGenericReset>
=======
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	69b8      	ldr	r0, [r7, #24]
 800a9be:	f7ff fecb 	bl	800a758 <xQueueGenericReset>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	78fa      	ldrb	r2, [r7, #3]
 8009c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <xQueueCreateCountingSemaphoreStatic>:
=======
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <xQueueCreateCountingSemaphoreStatic>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
<<<<<<< HEAD
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b08a      	sub	sp, #40	; 0x28
 8009c32:	af02      	add	r7, sp, #8
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10a      	bne.n	8009c56 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	61bb      	str	r3, [r7, #24]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d90a      	bls.n	8009c74 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	617b      	str	r3, [r7, #20]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c74:	2302      	movs	r3, #2
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff ff00 	bl	8009a84 <xQueueGenericCreateStatic>
 8009c84:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b08a      	sub	sp, #40	; 0x28
 800a9d6:	af02      	add	r7, sp, #8
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10a      	bne.n	800a9fa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	61bb      	str	r3, [r7, #24]
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d90a      	bls.n	800aa18 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	617b      	str	r3, [r7, #20]
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa18:	2302      	movs	r3, #2
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff ff00 	bl	800a828 <xQueueGenericCreateStatic>
 800aa28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 8009c92:	69fb      	ldr	r3, [r7, #28]
	}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xQueueCreateCountingSemaphore>:
=======
 800aa36:	69fb      	ldr	r3, [r7, #28]
	}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <xQueueCreateCountingSemaphore>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
<<<<<<< HEAD
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	613b      	str	r3, [r7, #16]
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d90a      	bls.n	8009ce0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60fb      	str	r3, [r7, #12]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff ff45 	bl	8009b74 <xQueueGenericCreate>
 8009cea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	613b      	str	r3, [r7, #16]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d90a      	bls.n	800aa84 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	60fb      	str	r3, [r7, #12]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aa84:	2202      	movs	r2, #2
 800aa86:	2100      	movs	r1, #0
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff ff45 	bl	800a918 <xQueueGenericCreate>
 800aa8e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
<<<<<<< HEAD
 8009cf8:	697b      	ldr	r3, [r7, #20]
	}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <xQueueGenericSend>:
=======
 800aa9c:	697b      	ldr	r3, [r7, #20]
	}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <xQueueGenericSend>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08e      	sub	sp, #56	; 0x38
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d12:	2300      	movs	r3, #0
 8009d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <xQueueGenericSend+0x32>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <xQueueGenericSend+0x40>
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <xQueueGenericSend+0x44>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <xQueueGenericSend+0x46>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <xQueueGenericSend+0x60>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d103      	bne.n	8009d72 <xQueueGenericSend+0x6e>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <xQueueGenericSend+0x72>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <xQueueGenericSend+0x74>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	623b      	str	r3, [r7, #32]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d92:	f001 fb41 	bl	800b418 <xTaskGetSchedulerState>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <xQueueGenericSend+0x9e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <xQueueGenericSend+0xa2>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <xQueueGenericSend+0xa4>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	61fb      	str	r3, [r7, #28]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xQueueGenericSend+0xbc>
=======
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08e      	sub	sp, #56	; 0x38
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aab6:	2300      	movs	r3, #0
 800aab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10a      	bne.n	800aada <xQueueGenericSend+0x32>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aad6:	bf00      	nop
 800aad8:	e7fe      	b.n	800aad8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <xQueueGenericSend+0x40>
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <xQueueGenericSend+0x44>
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <xQueueGenericSend+0x46>
 800aaec:	2300      	movs	r3, #0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <xQueueGenericSend+0x60>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d103      	bne.n	800ab16 <xQueueGenericSend+0x6e>
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d101      	bne.n	800ab1a <xQueueGenericSend+0x72>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e000      	b.n	800ab1c <xQueueGenericSend+0x74>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	623b      	str	r3, [r7, #32]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab36:	f001 fbdf 	bl	800c2f8 <xTaskGetSchedulerState>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <xQueueGenericSend+0x9e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <xQueueGenericSend+0xa2>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <xQueueGenericSend+0xa4>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	61fb      	str	r3, [r7, #28]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <xQueueGenericSend+0xbc>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8009dc2:	f002 fc17 	bl	800c5f4 <vPortEnterCritical>
=======
 800ab66:	f002 fc8d 	bl	800d484 <vPortEnterCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d302      	bcc.n	8009dd8 <xQueueGenericSend+0xd4>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d129      	bne.n	8009e2c <xQueueGenericSend+0x128>
=======
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <xQueueGenericSend+0xd4>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d129      	bne.n	800abd0 <xQueueGenericSend+0x128>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	68b9      	ldr	r1, [r7, #8]
 8009ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dde:	f000 fb52 	bl	800a486 <prvCopyDataToQueue>
 8009de2:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab82:	f000 fb52 	bl	800b22a <prvCopyDataToQueue>
 800ab86:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d010      	beq.n	8009e0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dee:	3324      	adds	r3, #36	; 0x24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 f953 	bl	800b09c <xTaskRemoveFromEventList>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d013      	beq.n	8009e24 <xQueueGenericSend+0x120>
=======
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d010      	beq.n	800abb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 f98f 	bl	800beb8 <xTaskRemoveFromEventList>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d013      	beq.n	800abc8 <xQueueGenericSend+0x120>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8009dfc:	4b3f      	ldr	r3, [pc, #252]	; (8009efc <xQueueGenericSend+0x1f8>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	e00a      	b.n	8009e24 <xQueueGenericSend+0x120>
=======
 800aba0:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	e00a      	b.n	800abc8 <xQueueGenericSend+0x120>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <xQueueGenericSend+0x120>
=======
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <xQueueGenericSend+0x120>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8009e14:	4b39      	ldr	r3, [pc, #228]	; (8009efc <xQueueGenericSend+0x1f8>)
 8009e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	f3bf 8f6f 	isb	sy
=======
 800abb8:	4b39      	ldr	r3, [pc, #228]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009e24:	f002 fc16 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e063      	b.n	8009ef4 <xQueueGenericSend+0x1f0>
=======
 800abc8:	f002 fc8c 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800abcc:	2301      	movs	r3, #1
 800abce:	e063      	b.n	800ac98 <xQueueGenericSend+0x1f0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d103      	bne.n	8009e3a <xQueueGenericSend+0x136>
=======
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <xQueueGenericSend+0x136>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009e32:	f002 fc0f 	bl	800c654 <vPortExitCritical>
=======
 800abd6:	f002 fc85 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8009e36:	2300      	movs	r3, #0
 8009e38:	e05c      	b.n	8009ef4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <xQueueGenericSend+0x14a>
=======
 800abda:	2300      	movs	r3, #0
 800abdc:	e05c      	b.n	800ac98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <xQueueGenericSend+0x14a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8009e40:	f107 0314 	add.w	r3, r7, #20
 8009e44:	4618      	mov	r0, r3
 8009e46:	f001 f98d 	bl	800b164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800abe4:	f107 0314 	add.w	r3, r7, #20
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 fa2b 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8009e4e:	f002 fc01 	bl	800c654 <vPortExitCritical>
=======
 800abf2:	f002 fc77 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8009e52:	f000 feed 	bl	800ac30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e56:	f002 fbcd 	bl	800c5f4 <vPortEnterCritical>
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e60:	b25b      	sxtb	r3, r3
 8009e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e66:	d103      	bne.n	8009e70 <xQueueGenericSend+0x16c>
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e76:	b25b      	sxtb	r3, r3
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d103      	bne.n	8009e86 <xQueueGenericSend+0x182>
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e86:	f002 fbe5 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e8a:	1d3a      	adds	r2, r7, #4
 8009e8c:	f107 0314 	add.w	r3, r7, #20
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 f97c 	bl	800b190 <xTaskCheckForTimeOut>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d124      	bne.n	8009ee8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea0:	f000 fbe9 	bl	800a676 <prvIsQueueFull>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d018      	beq.n	8009edc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	3310      	adds	r3, #16
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 f8a2 	bl	800affc <vTaskPlaceOnEventList>
=======
 800abf6:	f000 feed 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abfa:	f002 fc43 	bl	800d484 <vPortEnterCritical>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d103      	bne.n	800ac14 <xQueueGenericSend+0x16c>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac1a:	b25b      	sxtb	r3, r3
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d103      	bne.n	800ac2a <xQueueGenericSend+0x182>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac2a:	f002 fc5b 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac2e:	1d3a      	adds	r2, r7, #4
 800ac30:	f107 0314 	add.w	r3, r7, #20
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 fa1a 	bl	800c070 <xTaskCheckForTimeOut>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d124      	bne.n	800ac8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac44:	f000 fbe9 	bl	800b41a <prvIsQueueFull>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d018      	beq.n	800ac80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	3310      	adds	r3, #16
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 f8a2 	bl	800bda0 <vTaskPlaceOnEventList>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eba:	f000 fb74 	bl	800a5a6 <prvUnlockQueue>
=======
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	f000 fb74 	bl	800b34a <prvUnlockQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 8009ebe:	f000 fec5 	bl	800ac4c <xTaskResumeAll>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f47f af7c 	bne.w	8009dc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009eca:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <xQueueGenericSend+0x1f8>)
 8009ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	e772      	b.n	8009dc2 <xQueueGenericSend+0xbe>
=======
 800ac62:	f000 fec5 	bl	800b9f0 <xTaskResumeAll>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f47f af7c 	bne.w	800ab66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <xQueueGenericSend+0x1f8>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	e772      	b.n	800ab66 <xQueueGenericSend+0xbe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ede:	f000 fb62 	bl	800a5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ee2:	f000 feb3 	bl	800ac4c <xTaskResumeAll>
 8009ee6:	e76c      	b.n	8009dc2 <xQueueGenericSend+0xbe>
=======
 800ac80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac82:	f000 fb62 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac86:	f000 feb3 	bl	800b9f0 <xTaskResumeAll>
 800ac8a:	e76c      	b.n	800ab66 <xQueueGenericSend+0xbe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8009ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eea:	f000 fb5c 	bl	800a5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eee:	f000 fead 	bl	800ac4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3738      	adds	r7, #56	; 0x38
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	e000ed04 	.word	0xe000ed04

08009f00 <xQueueGenericSendFromISR>:
=======
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 fb5c 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac92:	f000 fead 	bl	800b9f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3738      	adds	r7, #56	; 0x38
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <xQueueGenericSendFromISR>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b090      	sub	sp, #64	; 0x40
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f2a:	bf00      	nop
 8009f2c:	e7fe      	b.n	8009f2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <xQueueGenericSendFromISR+0x3c>
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <xQueueGenericSendFromISR+0x40>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e000      	b.n	8009f42 <xQueueGenericSendFromISR+0x42>
 8009f40:	2300      	movs	r3, #0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d103      	bne.n	8009f6a <xQueueGenericSendFromISR+0x6a>
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <xQueueGenericSendFromISR+0x6e>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueGenericSendFromISR+0x70>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericSendFromISR+0x88>
=======
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b090      	sub	sp, #64	; 0x40
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <xQueueGenericSendFromISR+0x3c>
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <xQueueGenericSendFromISR+0x40>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e000      	b.n	800ace6 <xQueueGenericSendFromISR+0x42>
 800ace4:	2300      	movs	r3, #0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10a      	bne.n	800ad00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d103      	bne.n	800ad0e <xQueueGenericSendFromISR+0x6a>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d101      	bne.n	800ad12 <xQueueGenericSendFromISR+0x6e>
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e000      	b.n	800ad14 <xQueueGenericSendFromISR+0x70>
 800ad12:	2300      	movs	r3, #0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	623b      	str	r3, [r7, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xQueueGenericSendFromISR+0x88>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8009f8a:	f002 fc15 	bl	800c7b8 <vPortValidateInterruptPriority>
=======
 800ad2e:	f002 fc8b 	bl	800d648 <vPortValidateInterruptPriority>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8009f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	61fa      	str	r2, [r7, #28]
 8009fa4:	61bb      	str	r3, [r7, #24]
=======
 800ad32:	f3ef 8211 	mrs	r2, BASEPRI
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	61fa      	str	r2, [r7, #28]
 800ad48:	61bb      	str	r3, [r7, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8009fa6:	69fb      	ldr	r3, [r7, #28]
=======
 800ad4a:	69fb      	ldr	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d302      	bcc.n	8009fbc <xQueueGenericSendFromISR+0xbc>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d12f      	bne.n	800a01c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d302      	bcc.n	800ad60 <xQueueGenericSendFromISR+0xbc>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d12f      	bne.n	800adc0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fd2:	f000 fa58 	bl	800a486 <prvCopyDataToQueue>
=======
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ad76:	f000 fa58 	bl	800b22a <prvCopyDataToQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8009fd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fde:	d112      	bne.n	800a006 <xQueueGenericSendFromISR+0x106>
=======
 800ad7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad82:	d112      	bne.n	800adaa <xQueueGenericSendFromISR+0x106>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d016      	beq.n	800a016 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	3324      	adds	r3, #36	; 0x24
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 f855 	bl	800b09c <xTaskRemoveFromEventList>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00e      	beq.n	800a016 <xQueueGenericSendFromISR+0x116>
=======
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d016      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	3324      	adds	r3, #36	; 0x24
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 f891 	bl	800beb8 <xTaskRemoveFromEventList>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00e      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e007      	b.n	800a016 <xQueueGenericSendFromISR+0x116>
=======
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	e007      	b.n	800adba <xQueueGenericSendFromISR+0x116>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 800a006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a00a:	3301      	adds	r3, #1
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	b25a      	sxtb	r2, r3
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a016:	2301      	movs	r3, #1
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a01a:	e001      	b.n	800a020 <xQueueGenericSendFromISR+0x120>
=======
 800adaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adae:	3301      	adds	r3, #1
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	b25a      	sxtb	r2, r3
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adba:	2301      	movs	r3, #1
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adbe:	e001      	b.n	800adc4 <xQueueGenericSendFromISR+0x120>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800a01c:	2300      	movs	r3, #0
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	617b      	str	r3, [r7, #20]
=======
 800adc0:	2300      	movs	r3, #0
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc6:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f383 8811 	msr	BASEPRI, r3
=======
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 800a02a:	bf00      	nop
=======
 800adce:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800a02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3740      	adds	r7, #64	; 0x40
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <xQueueReceive>:
=======
 800add0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800add2:	4618      	mov	r0, r3
 800add4:	3740      	adds	r7, #64	; 0x40
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <xQueueReceive>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08c      	sub	sp, #48	; 0x30
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a044:	2300      	movs	r3, #0
 800a046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <xQueueReceive+0x30>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	623b      	str	r3, [r7, #32]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <xQueueReceive+0x2e>
=======
 800addc:	b580      	push	{r7, lr}
 800adde:	b08c      	sub	sp, #48	; 0x30
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ade8:	2300      	movs	r3, #0
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <xQueueReceive+0x30>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	623b      	str	r3, [r7, #32]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <xQueueReceive+0x2e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d103      	bne.n	800a076 <xQueueReceive+0x3e>
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <xQueueReceive+0x42>
 800a076:	2301      	movs	r3, #1
 800a078:	e000      	b.n	800a07c <xQueueReceive+0x44>
 800a07a:	2300      	movs	r3, #0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <xQueueReceive+0x5e>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	61fb      	str	r3, [r7, #28]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xQueueReceive+0x5c>
=======
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d103      	bne.n	800ae1a <xQueueReceive+0x3e>
 800ae12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <xQueueReceive+0x42>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <xQueueReceive+0x44>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xQueueReceive+0x5e>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	61fb      	str	r3, [r7, #28]
}
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xQueueReceive+0x5c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 800a096:	f001 f9bf 	bl	800b418 <xTaskGetSchedulerState>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d102      	bne.n	800a0a6 <xQueueReceive+0x6e>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <xQueueReceive+0x72>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e000      	b.n	800a0ac <xQueueReceive+0x74>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <xQueueReceive+0x8e>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	61bb      	str	r3, [r7, #24]
}
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <xQueueReceive+0x8c>
=======
 800ae3a:	f001 fa5d 	bl	800c2f8 <xTaskGetSchedulerState>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <xQueueReceive+0x6e>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <xQueueReceive+0x72>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <xQueueReceive+0x74>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xQueueReceive+0x8e>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	61bb      	str	r3, [r7, #24]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xQueueReceive+0x8c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a0c6:	f002 fa95 	bl	800c5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800ae6a:	f002 fb0b 	bl	800d484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01f      	beq.n	800a116 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0da:	f000 fa3e 	bl	800a55a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	1e5a      	subs	r2, r3, #1
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01f      	beq.n	800aeba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae7e:	f000 fa3e 	bl	800b2fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	1e5a      	subs	r2, r3, #1
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00f      	beq.n	800a10e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	3310      	adds	r3, #16
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 ffd2 	bl	800b09c <xTaskRemoveFromEventList>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0fe:	4b3d      	ldr	r3, [pc, #244]	; (800a1f4 <xQueueReceive+0x1bc>)
 800a100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	f3bf 8f6f 	isb	sy
=======
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	3310      	adds	r3, #16
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 f80e 	bl	800beb8 <xTaskRemoveFromEventList>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d007      	beq.n	800aeb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aea2:	4b3d      	ldr	r3, [pc, #244]	; (800af98 <xQueueReceive+0x1bc>)
 800aea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea8:	601a      	str	r2, [r3, #0]
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a10e:	f002 faa1 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a112:	2301      	movs	r3, #1
 800a114:	e069      	b.n	800a1ea <xQueueReceive+0x1b2>
=======
 800aeb2:	f002 fb17 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e069      	b.n	800af8e <xQueueReceive+0x1b2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d103      	bne.n	800a124 <xQueueReceive+0xec>
=======
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <xQueueReceive+0xec>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a11c:	f002 fa9a 	bl	800c654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a120:	2300      	movs	r3, #0
 800a122:	e062      	b.n	800a1ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <xQueueReceive+0x100>
=======
 800aec0:	f002 fb10 	bl	800d4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e062      	b.n	800af8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <xQueueReceive+0x100>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a12a:	f107 0310 	add.w	r3, r7, #16
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 f818 	bl	800b164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a134:	2301      	movs	r3, #1
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800aece:	f107 0310 	add.w	r3, r7, #16
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 f8b6 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a138:	f002 fa8c 	bl	800c654 <vPortExitCritical>
=======
 800aedc:	f002 fb02 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a13c:	f000 fd78 	bl	800ac30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a140:	f002 fa58 	bl	800c5f4 <vPortEnterCritical>
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a14a:	b25b      	sxtb	r3, r3
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d103      	bne.n	800a15a <xQueueReceive+0x122>
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a160:	b25b      	sxtb	r3, r3
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a166:	d103      	bne.n	800a170 <xQueueReceive+0x138>
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a170:	f002 fa70 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a174:	1d3a      	adds	r2, r7, #4
 800a176:	f107 0310 	add.w	r3, r7, #16
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 f807 	bl	800b190 <xTaskCheckForTimeOut>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d123      	bne.n	800a1d0 <xQueueReceive+0x198>
=======
 800aee0:	f000 fd78 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aee4:	f002 face 	bl	800d484 <vPortEnterCritical>
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeee:	b25b      	sxtb	r3, r3
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef4:	d103      	bne.n	800aefe <xQueueReceive+0x122>
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af04:	b25b      	sxtb	r3, r3
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d103      	bne.n	800af14 <xQueueReceive+0x138>
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af14:	f002 fae6 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af18:	1d3a      	adds	r2, r7, #4
 800af1a:	f107 0310 	add.w	r3, r7, #16
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f001 f8a5 	bl	800c070 <xTaskCheckForTimeOut>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d123      	bne.n	800af74 <xQueueReceive+0x198>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18a:	f000 fa5e 	bl	800a64a <prvIsQueueEmpty>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d017      	beq.n	800a1c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	3324      	adds	r3, #36	; 0x24
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	4611      	mov	r1, r2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 ff2d 	bl	800affc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a4:	f000 f9ff 	bl	800a5a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1a8:	f000 fd50 	bl	800ac4c <xTaskResumeAll>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d189      	bne.n	800a0c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1b2:	4b10      	ldr	r3, [pc, #64]	; (800a1f4 <xQueueReceive+0x1bc>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	e780      	b.n	800a0c6 <xQueueReceive+0x8e>
=======
 800af2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af2e:	f000 fa5e 	bl	800b3ee <prvIsQueueEmpty>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d017      	beq.n	800af68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	3324      	adds	r3, #36	; 0x24
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f000 ff2d 	bl	800bda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af48:	f000 f9ff 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af4c:	f000 fd50 	bl	800b9f0 <xTaskResumeAll>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d189      	bne.n	800ae6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800af56:	4b10      	ldr	r3, [pc, #64]	; (800af98 <xQueueReceive+0x1bc>)
 800af58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	e780      	b.n	800ae6a <xQueueReceive+0x8e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c6:	f000 f9ee 	bl	800a5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1ca:	f000 fd3f 	bl	800ac4c <xTaskResumeAll>
 800a1ce:	e77a      	b.n	800a0c6 <xQueueReceive+0x8e>
=======
 800af68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6a:	f000 f9ee 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af6e:	f000 fd3f 	bl	800b9f0 <xTaskResumeAll>
 800af72:	e77a      	b.n	800ae6a <xQueueReceive+0x8e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 f9e8 	bl	800a5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1d6:	f000 fd39 	bl	800ac4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1dc:	f000 fa35 	bl	800a64a <prvIsQueueEmpty>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f43f af6f 	beq.w	800a0c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1e8:	2300      	movs	r3, #0
=======
 800af74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af76:	f000 f9e8 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af7a:	f000 fd39 	bl	800b9f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af80:	f000 fa35 	bl	800b3ee <prvIsQueueEmpty>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	f43f af6f 	beq.w	800ae6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af8c:	2300      	movs	r3, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3730      	adds	r7, #48	; 0x30
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <xQueueSemaphoreTake>:
=======
 800af8e:	4618      	mov	r0, r3
 800af90:	3730      	adds	r7, #48	; 0x30
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <xQueueSemaphoreTake>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08e      	sub	sp, #56	; 0x38
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a20a:	2300      	movs	r3, #0
 800a20c:	633b      	str	r3, [r7, #48]	; 0x30
=======
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08e      	sub	sp, #56	; 0x38
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800afa6:	2300      	movs	r3, #0
 800afa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	633b      	str	r3, [r7, #48]	; 0x30
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10a      	bne.n	800a22a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	623b      	str	r3, [r7, #32]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <xQueueSemaphoreTake+0x30>
=======
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d10a      	bne.n	800afce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	623b      	str	r3, [r7, #32]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <xQueueSemaphoreTake+0x30>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
<<<<<<< HEAD
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	61fb      	str	r3, [r7, #28]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xQueueSemaphoreTake+0x4e>
=======
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	61fb      	str	r3, [r7, #28]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <xQueueSemaphoreTake+0x4e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 800a248:	f001 f8e6 	bl	800b418 <xTaskGetSchedulerState>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d102      	bne.n	800a258 <xQueueSemaphoreTake+0x60>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <xQueueSemaphoreTake+0x64>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <xQueueSemaphoreTake+0x66>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	61bb      	str	r3, [r7, #24]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <xQueueSemaphoreTake+0x7e>
=======
 800afec:	f001 f984 	bl	800c2f8 <xTaskGetSchedulerState>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <xQueueSemaphoreTake+0x60>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <xQueueSemaphoreTake+0x64>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <xQueueSemaphoreTake+0x66>
 800b000:	2300      	movs	r3, #0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10a      	bne.n	800b01c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	61bb      	str	r3, [r7, #24]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <xQueueSemaphoreTake+0x7e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800a278:	f002 f9bc 	bl	800c5f4 <vPortEnterCritical>
=======
 800b01c:	f002 fa32 	bl	800d484 <vPortEnterCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	2b00      	cmp	r3, #0
 800a286:	d024      	beq.n	800a2d2 <xQueueSemaphoreTake+0xda>
=======
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d024      	beq.n	800b076 <xQueueSemaphoreTake+0xda>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
<<<<<<< HEAD
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38
=======
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	1e5a      	subs	r2, r3, #1
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d104      	bne.n	800a2a2 <xQueueSemaphoreTake+0xaa>
=======
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <xQueueSemaphoreTake+0xaa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
<<<<<<< HEAD
 800a298:	f001 fa34 	bl	800b704 <pvTaskIncrementMutexHeldCount>
 800a29c:	4602      	mov	r2, r0
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	609a      	str	r2, [r3, #8]
=======
 800b03c:	f001 faea 	bl	800c614 <pvTaskIncrementMutexHeldCount>
 800b040:	4602      	mov	r2, r0
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	609a      	str	r2, [r3, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00f      	beq.n	800a2ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	3310      	adds	r3, #16
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fef4 	bl	800b09c <xTaskRemoveFromEventList>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2ba:	4b54      	ldr	r3, [pc, #336]	; (800a40c <xQueueSemaphoreTake+0x214>)
 800a2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	f3bf 8f6f 	isb	sy
=======
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00f      	beq.n	800b06e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	3310      	adds	r3, #16
 800b052:	4618      	mov	r0, r3
 800b054:	f000 ff30 	bl	800beb8 <xTaskRemoveFromEventList>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d007      	beq.n	800b06e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b05e:	4b54      	ldr	r3, [pc, #336]	; (800b1b0 <xQueueSemaphoreTake+0x214>)
 800b060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a2ca:	f002 f9c3 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e097      	b.n	800a402 <xQueueSemaphoreTake+0x20a>
=======
 800b06e:	f002 fa39 	bl	800d4e4 <vPortExitCritical>
				return pdPASS;
 800b072:	2301      	movs	r3, #1
 800b074:	e097      	b.n	800b1a6 <xQueueSemaphoreTake+0x20a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d111      	bne.n	800a2fc <xQueueSemaphoreTake+0x104>
=======
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d111      	bne.n	800b0a0 <xQueueSemaphoreTake+0x104>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
<<<<<<< HEAD
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	617b      	str	r3, [r7, #20]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xQueueSemaphoreTake+0xfa>
=======
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	617b      	str	r3, [r7, #20]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <xQueueSemaphoreTake+0xfa>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a2f4:	f002 f9ae 	bl	800c654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e082      	b.n	800a402 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <xQueueSemaphoreTake+0x118>
=======
 800b098:	f002 fa24 	bl	800d4e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b09c:	2300      	movs	r3, #0
 800b09e:	e082      	b.n	800b1a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <xQueueSemaphoreTake+0x118>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800a302:	f107 030c 	add.w	r3, r7, #12
 800a306:	4618      	mov	r0, r3
 800a308:	f000 ff2c 	bl	800b164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	637b      	str	r3, [r7, #52]	; 0x34
=======
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 ffca 	bl	800c044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a310:	f002 f9a0 	bl	800c654 <vPortExitCritical>
=======
 800b0b4:	f002 fa16 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800a314:	f000 fc8c 	bl	800ac30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a318:	f002 f96c 	bl	800c5f4 <vPortEnterCritical>
 800a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a322:	b25b      	sxtb	r3, r3
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d103      	bne.n	800a332 <xQueueSemaphoreTake+0x13a>
 800a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a338:	b25b      	sxtb	r3, r3
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d103      	bne.n	800a348 <xQueueSemaphoreTake+0x150>
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a348:	f002 f984 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a34c:	463a      	mov	r2, r7
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f000 ff1b 	bl	800b190 <xTaskCheckForTimeOut>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d132      	bne.n	800a3c6 <xQueueSemaphoreTake+0x1ce>
=======
 800b0b8:	f000 fc8c 	bl	800b9d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0bc:	f002 f9e2 	bl	800d484 <vPortEnterCritical>
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0c6:	b25b      	sxtb	r3, r3
 800b0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0cc:	d103      	bne.n	800b0d6 <xQueueSemaphoreTake+0x13a>
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0dc:	b25b      	sxtb	r3, r3
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d103      	bne.n	800b0ec <xQueueSemaphoreTake+0x150>
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0ec:	f002 f9fa 	bl	800d4e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0f0:	463a      	mov	r2, r7
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 ffb9 	bl	800c070 <xTaskCheckForTimeOut>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d132      	bne.n	800b16a <xQueueSemaphoreTake+0x1ce>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a362:	f000 f972 	bl	800a64a <prvIsQueueEmpty>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d026      	beq.n	800a3ba <xQueueSemaphoreTake+0x1c2>
=======
 800b104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b106:	f000 f972 	bl	800b3ee <prvIsQueueEmpty>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d026      	beq.n	800b15e <xQueueSemaphoreTake+0x1c2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a374:	f002 f93e 	bl	800c5f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f869 	bl	800b454 <xTaskPriorityInherit>
 800a382:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a384:	f002 f966 	bl	800c654 <vPortExitCritical>
=======
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d109      	bne.n	800b12c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b118:	f002 f9b4 	bl	800d484 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	4618      	mov	r0, r3
 800b122:	f001 f907 	bl	800c334 <xTaskPriorityInherit>
 800b126:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b128:	f002 f9dc 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	3324      	adds	r3, #36	; 0x24
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fe33 	bl	800affc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a398:	f000 f905 	bl	800a5a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a39c:	f000 fc56 	bl	800ac4c <xTaskResumeAll>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f47f af68 	bne.w	800a278 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a3a8:	4b18      	ldr	r3, [pc, #96]	; (800a40c <xQueueSemaphoreTake+0x214>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	e75e      	b.n	800a278 <xQueueSemaphoreTake+0x80>
=======
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fe33 	bl	800bda0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13c:	f000 f905 	bl	800b34a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b140:	f000 fc56 	bl	800b9f0 <xTaskResumeAll>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	f47f af68 	bne.w	800b01c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b14c:	4b18      	ldr	r3, [pc, #96]	; (800b1b0 <xQueueSemaphoreTake+0x214>)
 800b14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	e75e      	b.n	800b01c <xQueueSemaphoreTake+0x80>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a3ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3bc:	f000 f8f3 	bl	800a5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3c0:	f000 fc44 	bl	800ac4c <xTaskResumeAll>
 800a3c4:	e758      	b.n	800a278 <xQueueSemaphoreTake+0x80>
=======
 800b15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b160:	f000 f8f3 	bl	800b34a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b164:	f000 fc44 	bl	800b9f0 <xTaskResumeAll>
 800b168:	e758      	b.n	800b01c <xQueueSemaphoreTake+0x80>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3c8:	f000 f8ed 	bl	800a5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3cc:	f000 fc3e 	bl	800ac4c <xTaskResumeAll>
=======
 800b16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b16c:	f000 f8ed 	bl	800b34a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b170:	f000 fc3e 	bl	800b9f0 <xTaskResumeAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 800a3d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3d2:	f000 f93a 	bl	800a64a <prvIsQueueEmpty>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f43f af4d 	beq.w	800a278 <xQueueSemaphoreTake+0x80>
=======
 800b174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b176:	f000 f93a 	bl	800b3ee <prvIsQueueEmpty>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f43f af4d 	beq.w	800b01c <xQueueSemaphoreTake+0x80>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
<<<<<<< HEAD
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00d      	beq.n	800a400 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3e4:	f002 f906 	bl	800c5f4 <vPortEnterCritical>
=======
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00d      	beq.n	800b1a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b188:	f002 f97c 	bl	800d484 <vPortEnterCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
<<<<<<< HEAD
 800a3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3ea:	f000 f834 	bl	800a456 <prvGetDisinheritPriorityAfterTimeout>
 800a3ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f001 f902 	bl	800b600 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3fc:	f002 f92a 	bl	800c654 <vPortExitCritical>
=======
 800b18c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b18e:	f000 f834 	bl	800b1fa <prvGetDisinheritPriorityAfterTimeout>
 800b192:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f9a0 	bl	800c4e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b1a0:	f002 f9a0 	bl	800d4e4 <vPortExitCritical>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
<<<<<<< HEAD
 800a400:	2300      	movs	r3, #0
=======
 800b1a4:	2300      	movs	r3, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 800a402:	4618      	mov	r0, r3
 800a404:	3738      	adds	r7, #56	; 0x38
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <vQueueDelete>:
=======
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3738      	adds	r7, #56	; 0x38
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <vQueueDelete>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
<<<<<<< HEAD
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10a      	bne.n	800a438 <vQueueDelete+0x28>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	60bb      	str	r3, [r7, #8]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <vQueueDelete+0x26>
=======
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <vQueueDelete+0x28>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	60bb      	str	r3, [r7, #8]
}
 800b1d8:	bf00      	nop
 800b1da:	e7fe      	b.n	800b1da <vQueueDelete+0x26>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
<<<<<<< HEAD
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 f95f 	bl	800a6fc <vQueueUnregisterQueue>
=======
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 f95f 	bl	800b4a0 <vQueueUnregisterQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< HEAD
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a444:	2b00      	cmp	r3, #0
 800a446:	d102      	bne.n	800a44e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f002 fac1 	bl	800c9d0 <vPortFree>
=======
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f002 fb37 	bl	800d860 <vPortFree>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
<<<<<<< HEAD
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <prvGetDisinheritPriorityAfterTimeout>:
=======
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <prvGetDisinheritPriorityAfterTimeout>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
<<<<<<< HEAD
 800a456:	b480      	push	{r7}
 800a458:	b085      	sub	sp, #20
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
=======
 800b1fa:	b480      	push	{r7}
 800b1fc:	b085      	sub	sp, #20
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
<<<<<<< HEAD
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d006      	beq.n	800a474 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e001      	b.n	800a478 <prvGetDisinheritPriorityAfterTimeout+0x22>
=======
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e001      	b.n	800b21c <prvGetDisinheritPriorityAfterTimeout+0x22>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
<<<<<<< HEAD
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a478:	68fb      	ldr	r3, [r7, #12]
	}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <prvCopyDataToQueue>:
=======
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b21c:	68fb      	ldr	r3, [r7, #12]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr

0800b22a <prvCopyDataToQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 800a486:	b580      	push	{r7, lr}
 800a488:	b086      	sub	sp, #24
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
=======
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <prvCopyDataToQueue+0x3a>
=======
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10d      	bne.n	800b264 <prvCopyDataToQueue+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d14d      	bne.n	800a548 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f001 f837 	bl	800b524 <xTaskPriorityDisinherit>
 800a4b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	609a      	str	r2, [r3, #8]
 800a4be:	e043      	b.n	800a548 <prvCopyDataToQueue+0xc2>
=======
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d14d      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f001 f8d5 	bl	800c404 <xTaskPriorityDisinherit>
 800b25a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	609a      	str	r2, [r3, #8]
 800b262:	e043      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d119      	bne.n	800a4fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6858      	ldr	r0, [r3, #4]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	f004 f907 	bl	800e6e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	441a      	add	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d32b      	bcc.n	800a548 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	e026      	b.n	800a548 <prvCopyDataToQueue+0xc2>
=======
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6858      	ldr	r0, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b272:	461a      	mov	r2, r3
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	f004 fae7 	bl	800f848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d32b      	bcc.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	e026      	b.n	800b2ec <prvCopyDataToQueue+0xc2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68d8      	ldr	r0, [r3, #12]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	461a      	mov	r2, r3
 800a504:	68b9      	ldr	r1, [r7, #8]
 800a506:	f004 f8ed 	bl	800e6e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68da      	ldr	r2, [r3, #12]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	425b      	negs	r3, r3
 800a514:	441a      	add	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	429a      	cmp	r2, r3
 800a524:	d207      	bcs.n	800a536 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	425b      	negs	r3, r3
 800a530:	441a      	add	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	60da      	str	r2, [r3, #12]
=======
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	68d8      	ldr	r0, [r3, #12]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	f004 facd 	bl	800f848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	425b      	negs	r3, r3
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d207      	bcs.n	800b2da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d2:	425b      	negs	r3, r3
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d105      	bne.n	800a548 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <prvCopyDataToQueue+0xc2>
=======
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d105      	bne.n	800b2ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <prvCopyDataToQueue+0xc2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	3b01      	subs	r3, #1
 800a546:	613b      	str	r3, [r7, #16]
=======
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	613b      	str	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a550:	697b      	ldr	r3, [r7, #20]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <prvCopyDataFromQueue>:
=======
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <prvCopyDataFromQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d018      	beq.n	800a59e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68da      	ldr	r2, [r3, #12]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	441a      	add	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	429a      	cmp	r2, r3
 800a584:	d303      	bcc.n	800a58e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60da      	str	r2, [r3, #12]
=======
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d018      	beq.n	800b342 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	441a      	add	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	429a      	cmp	r2, r3
 800b328:	d303      	bcc.n	800b332 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	60da      	str	r2, [r3, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68d9      	ldr	r1, [r3, #12]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	461a      	mov	r2, r3
 800a598:	6838      	ldr	r0, [r7, #0]
 800a59a:	f004 f8a3 	bl	800e6e4 <memcpy>
	}
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <prvUnlockQueue>:
=======
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68d9      	ldr	r1, [r3, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	461a      	mov	r2, r3
 800b33c:	6838      	ldr	r0, [r7, #0]
 800b33e:	f004 fa83 	bl	800f848 <memcpy>
	}
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <prvUnlockQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
=======
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a5ae:	f002 f821 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5ba:	e011      	b.n	800a5e0 <prvUnlockQueue+0x3a>
=======
 800b352:	f002 f897 	bl	800d484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b35e:	e011      	b.n	800b384 <prvUnlockQueue+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d012      	beq.n	800a5ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3324      	adds	r3, #36	; 0x24
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fd67 	bl	800b09c <xTaskRemoveFromEventList>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <prvUnlockQueue+0x32>
=======
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d012      	beq.n	800b38e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	3324      	adds	r3, #36	; 0x24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fda3 	bl	800beb8 <xTaskRemoveFromEventList>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <prvUnlockQueue+0x32>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 800a5d4:	f000 fe3e 	bl	800b254 <vTaskMissedYield>
=======
 800b378:	f000 fedc 	bl	800c134 <vTaskMissedYield>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dce9      	bgt.n	800a5bc <prvUnlockQueue+0x16>
 800a5e8:	e000      	b.n	800a5ec <prvUnlockQueue+0x46>
					break;
 800a5ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	22ff      	movs	r2, #255	; 0xff
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5f4:	f002 f82e 	bl	800c654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5f8:	f001 fffc 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a602:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a604:	e011      	b.n	800a62a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d012      	beq.n	800a634 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3310      	adds	r3, #16
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fd42 	bl	800b09c <xTaskRemoveFromEventList>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a61e:	f000 fe19 	bl	800b254 <vTaskMissedYield>
=======
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	3b01      	subs	r3, #1
 800b380:	b2db      	uxtb	r3, r3
 800b382:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	dce9      	bgt.n	800b360 <prvUnlockQueue+0x16>
 800b38c:	e000      	b.n	800b390 <prvUnlockQueue+0x46>
					break;
 800b38e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	22ff      	movs	r2, #255	; 0xff
 800b394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b398:	f002 f8a4 	bl	800d4e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b39c:	f002 f872 	bl	800d484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3a8:	e011      	b.n	800b3ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fd7e 	bl	800beb8 <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3c2:	f000 feb7 	bl	800c134 <vTaskMissedYield>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	3b01      	subs	r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a62a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	dce9      	bgt.n	800a606 <prvUnlockQueue+0x60>
 800a632:	e000      	b.n	800a636 <prvUnlockQueue+0x90>
=======
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dce9      	bgt.n	800b3aa <prvUnlockQueue+0x60>
 800b3d6:	e000      	b.n	800b3da <prvUnlockQueue+0x90>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				break;
<<<<<<< HEAD
 800a634:	bf00      	nop
=======
 800b3d8:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	22ff      	movs	r2, #255	; 0xff
 800a63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a63e:	f002 f809 	bl	800c654 <vPortExitCritical>
}
 800a642:	bf00      	nop
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <prvIsQueueEmpty>:
=======
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	; 0xff
 800b3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3e2:	f002 f87f 	bl	800d4e4 <vPortExitCritical>
}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <prvIsQueueEmpty>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b084      	sub	sp, #16
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a652:	f001 ffcf 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d102      	bne.n	800a664 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a65e:	2301      	movs	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e001      	b.n	800a668 <prvIsQueueEmpty+0x1e>
=======
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3f6:	f002 f845 	bl	800d484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e001      	b.n	800b40c <prvIsQueueEmpty+0x1e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a668:	f001 fff4 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800a66c:	68fb      	ldr	r3, [r7, #12]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <prvIsQueueFull>:
=======
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b40c:	f002 f86a 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800b410:	68fb      	ldr	r3, [r7, #12]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <prvIsQueueFull>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a67e:	f001 ffb9 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d102      	bne.n	800a694 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a68e:	2301      	movs	r3, #1
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e001      	b.n	800a698 <prvIsQueueFull+0x22>
=======
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b422:	f002 f82f 	bl	800d484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d102      	bne.n	800b438 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b432:	2301      	movs	r3, #1
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	e001      	b.n	800b43c <prvIsQueueFull+0x22>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a698:	f001 ffdc 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800a69c:	68fb      	ldr	r3, [r7, #12]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
	...

0800a6a8 <vQueueAddToRegistry>:
=======
 800b438:	2300      	movs	r3, #0
 800b43a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b43c:	f002 f852 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <vQueueAddToRegistry>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
=======
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	e014      	b.n	800a6e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a6b8:	4a0f      	ldr	r2, [pc, #60]	; (800a6f8 <vQueueAddToRegistry+0x50>)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6c4:	490c      	ldr	r1, [pc, #48]	; (800a6f8 <vQueueAddToRegistry+0x50>)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6ce:	4a0a      	ldr	r2, [pc, #40]	; (800a6f8 <vQueueAddToRegistry+0x50>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6da:	e006      	b.n	800a6ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	60fb      	str	r3, [r7, #12]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b07      	cmp	r3, #7
 800a6e6:	d9e7      	bls.n	800a6b8 <vQueueAddToRegistry+0x10>
=======
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e014      	b.n	800b486 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b45c:	4a0f      	ldr	r2, [pc, #60]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b468:	490c      	ldr	r1, [pc, #48]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b472:	4a0a      	ldr	r2, [pc, #40]	; (800b49c <vQueueAddToRegistry+0x50>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	4413      	add	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b47e:	e006      	b.n	800b48e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3301      	adds	r3, #1
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	d9e7      	bls.n	800b45c <vQueueAddToRegistry+0x10>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20000e20 	.word	0x20000e20

0800a6fc <vQueueUnregisterQueue>:
=======
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000e84 	.word	0x20000e84

0800b4a0 <vQueueUnregisterQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
<<<<<<< HEAD
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
=======
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	e016      	b.n	800a738 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a70a:	4a10      	ldr	r2, [pc, #64]	; (800a74c <vQueueUnregisterQueue+0x50>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	4413      	add	r3, r2
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d10b      	bne.n	800a732 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a71a:	4a0c      	ldr	r2, [pc, #48]	; (800a74c <vQueueUnregisterQueue+0x50>)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2100      	movs	r1, #0
 800a720:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
=======
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e016      	b.n	800b4dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d10b      	bne.n	800b4d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b4be:	4a0c      	ldr	r2, [pc, #48]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
<<<<<<< HEAD
 800a724:	4a09      	ldr	r2, [pc, #36]	; (800a74c <vQueueUnregisterQueue+0x50>)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	4413      	add	r3, r2
 800a72c:	2200      	movs	r2, #0
 800a72e:	605a      	str	r2, [r3, #4]
				break;
 800a730:	e006      	b.n	800a740 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	3301      	adds	r3, #1
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b07      	cmp	r3, #7
 800a73c:	d9e5      	bls.n	800a70a <vQueueUnregisterQueue+0xe>
=======
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <vQueueUnregisterQueue+0x50>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
				break;
 800b4d4:	e006      	b.n	800b4e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	d9e5      	bls.n	800b4ae <vQueueUnregisterQueue+0xe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
<<<<<<< HEAD
 800a73e:	bf00      	nop
 800a740:	bf00      	nop
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000e20 	.word	0x20000e20

0800a750 <vQueueWaitForMessageRestricted>:
=======
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20000e84 	.word	0x20000e84

0800b4f4 <vQueueWaitForMessageRestricted>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	617b      	str	r3, [r7, #20]
=======
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 800a760:	f001 ff48 	bl	800c5f4 <vPortEnterCritical>
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a76a:	b25b      	sxtb	r3, r3
 800a76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a770:	d103      	bne.n	800a77a <vQueueWaitForMessageRestricted+0x2a>
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a780:	b25b      	sxtb	r3, r3
 800a782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a786:	d103      	bne.n	800a790 <vQueueWaitForMessageRestricted+0x40>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a790:	f001 ff60 	bl	800c654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	3324      	adds	r3, #36	; 0x24
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	68b9      	ldr	r1, [r7, #8]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fc4d 	bl	800b044 <vTaskPlaceOnEventListRestricted>
=======
 800b504:	f001 ffbe 	bl	800d484 <vPortEnterCritical>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d103      	bne.n	800b51e <vQueueWaitForMessageRestricted+0x2a>
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b524:	b25b      	sxtb	r3, r3
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d103      	bne.n	800b534 <vQueueWaitForMessageRestricted+0x40>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b534:	f001 ffd6 	bl	800d4e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3324      	adds	r3, #36	; 0x24
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fc89 	bl	800be60 <vTaskPlaceOnEventListRestricted>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	f7ff fefb 	bl	800a5a6 <prvUnlockQueue>
	}
 800a7b0:	bf00      	nop
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <xTaskCreateStatic>:
=======
 800b54e:	6978      	ldr	r0, [r7, #20]
 800b550:	f7ff fefb 	bl	800b34a <prvUnlockQueue>
	}
 800b554:	bf00      	nop
 800b556:	3718      	adds	r7, #24
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <xTaskCreateStatic>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08e      	sub	sp, #56	; 0x38
 800a7bc:	af04      	add	r7, sp, #16
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]
=======
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	; 0x38
 800b560:	af04      	add	r7, sp, #16
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	623b      	str	r3, [r7, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <xTaskCreateStatic+0x46>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61fb      	str	r3, [r7, #28]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xTaskCreateStatic+0x44>
=======
 800b56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	623b      	str	r3, [r7, #32]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	61fb      	str	r3, [r7, #28]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xTaskCreateStatic+0x44>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800a7fe:	235c      	movs	r3, #92	; 0x5c
 800a800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b5c      	cmp	r3, #92	; 0x5c
 800a806:	d00a      	beq.n	800a81e <xTaskCreateStatic+0x66>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	61bb      	str	r3, [r7, #24]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a81e:	693b      	ldr	r3, [r7, #16]
=======
 800b5a2:	235c      	movs	r3, #92	; 0x5c
 800b5a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5aa:	d00a      	beq.n	800b5c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61bb      	str	r3, [r7, #24]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5c2:	693b      	ldr	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01e      	beq.n	800a864 <xTaskCreateStatic+0xac>
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01b      	beq.n	800a864 <xTaskCreateStatic+0xac>
=======
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d01e      	beq.n	800b608 <xTaskCreateStatic+0xac>
 800b5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01b      	beq.n	800b608 <xTaskCreateStatic+0xac>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d8:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	2202      	movs	r2, #2
 800a83a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	2202      	movs	r2, #2
 800b5de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 800a83e:	2300      	movs	r3, #0
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	f107 0314 	add.w	r3, r7, #20
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 f850 	bl	800a8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a85e:	f000 f8dd 	bl	800aa1c <prvAddNewTaskToReadyList>
 800a862:	e001      	b.n	800a868 <xTaskCreateStatic+0xb0>
=======
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 f850 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b602:	f000 f8dd 	bl	800b7c0 <prvAddNewTaskToReadyList>
 800b606:	e001      	b.n	800b60c <xTaskCreateStatic+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a868:	697b      	ldr	r3, [r7, #20]
	}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3728      	adds	r7, #40	; 0x28
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <xTaskCreate>:
=======
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b60c:	697b      	ldr	r3, [r7, #20]
	}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <xTaskCreate>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 800a872:	b580      	push	{r7, lr}
 800a874:	b08c      	sub	sp, #48	; 0x30
 800a876:	af04      	add	r7, sp, #16
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	603b      	str	r3, [r7, #0]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
=======
 800b616:	b580      	push	{r7, lr}
 800b618:	b08c      	sub	sp, #48	; 0x30
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	4613      	mov	r3, r2
 800b624:	80fb      	strh	r3, [r7, #6]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4618      	mov	r0, r3
 800a888:	f001 ffd6 	bl	800c838 <pvPortMalloc>
 800a88c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00e      	beq.n	800a8b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a894:	205c      	movs	r0, #92	; 0x5c
 800a896:	f001 ffcf 	bl	800c838 <pvPortMalloc>
 800a89a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30
 800a8a8:	e005      	b.n	800a8b6 <xTaskCreate+0x44>
=======
 800b626:	88fb      	ldrh	r3, [r7, #6]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f002 f84c 	bl	800d6c8 <pvPortMalloc>
 800b630:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00e      	beq.n	800b656 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b638:	205c      	movs	r0, #92	; 0x5c
 800b63a:	f002 f845 	bl	800d6c8 <pvPortMalloc>
 800b63e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	631a      	str	r2, [r3, #48]	; 0x30
 800b64c:	e005      	b.n	800b65a <xTaskCreate+0x44>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800a8aa:	6978      	ldr	r0, [r7, #20]
 800a8ac:	f002 f890 	bl	800c9d0 <vPortFree>
 800a8b0:	e001      	b.n	800a8b6 <xTaskCreate+0x44>
=======
 800b64e:	6978      	ldr	r0, [r7, #20]
 800b650:	f002 f906 	bl	800d860 <vPortFree>
 800b654:	e001      	b.n	800b65a <xTaskCreate+0x44>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]
=======
 800b656:	2300      	movs	r3, #0
 800b658:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d017      	beq.n	800a8ec <xTaskCreate+0x7a>
=======
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d017      	beq.n	800b690 <xTaskCreate+0x7a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800a8c4:	88fa      	ldrh	r2, [r7, #6]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9303      	str	r3, [sp, #12]
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	9302      	str	r3, [sp, #8]
 800a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f80e 	bl	800a8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8e0:	69f8      	ldr	r0, [r7, #28]
 800a8e2:	f000 f89b 	bl	800aa1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	61bb      	str	r3, [r7, #24]
 800a8ea:	e002      	b.n	800a8f2 <xTaskCreate+0x80>
=======
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	9302      	str	r3, [sp, #8]
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 f80e 	bl	800b6a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b684:	69f8      	ldr	r0, [r7, #28]
 800b686:	f000 f89b 	bl	800b7c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b68a:	2301      	movs	r3, #1
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	e002      	b.n	800b696 <xTaskCreate+0x80>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3720      	adds	r7, #32
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvInitialiseNewTask>:
=======
 800b690:	f04f 33ff 	mov.w	r3, #4294967295
 800b694:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b696:	69bb      	ldr	r3, [r7, #24]
	}
 800b698:	4618      	mov	r0, r3
 800b69a:	3720      	adds	r7, #32
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvInitialiseNewTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
=======
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	461a      	mov	r2, r3
 800a914:	21a5      	movs	r1, #165	; 0xa5
 800a916:	f003 feb9 	bl	800e68c <memset>
=======
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	21a5      	movs	r1, #165	; 0xa5
 800b6ba:	f004 f899 	bl	800f7f0 <memset>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a924:	3b01      	subs	r3, #1
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	f023 0307 	bic.w	r3, r3, #7
 800a932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	617b      	str	r3, [r7, #20]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <prvInitialiseNewTask+0x56>
=======
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0307 	and.w	r3, r3, #7
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	617b      	str	r3, [r7, #20]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <prvInitialiseNewTask+0x56>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d01f      	beq.n	800a99a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
 800a95e:	e012      	b.n	800a986 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	4413      	add	r3, r2
 800a966:	7819      	ldrb	r1, [r3, #0]
 800a968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	4413      	add	r3, r2
 800a96e:	3334      	adds	r3, #52	; 0x34
 800a970:	460a      	mov	r2, r1
 800a972:	701a      	strb	r2, [r3, #0]
=======
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d01f      	beq.n	800b73e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
 800b702:	e012      	b.n	800b72a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	7819      	ldrb	r1, [r3, #0]
 800b70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	3334      	adds	r3, #52	; 0x34
 800b714:	460a      	mov	r2, r1
 800b716:	701a      	strb	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	4413      	add	r3, r2
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d006      	beq.n	800a98e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2b0f      	cmp	r3, #15
 800a98a:	d9e9      	bls.n	800a960 <prvInitialiseNewTask+0x64>
 800a98c:	e000      	b.n	800a990 <prvInitialiseNewTask+0x94>
			{
				break;
 800a98e:	bf00      	nop
=======
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	4413      	add	r3, r2
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	3301      	adds	r3, #1
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	2b0f      	cmp	r3, #15
 800b72e:	d9e9      	bls.n	800b704 <prvInitialiseNewTask+0x64>
 800b730:	e000      	b.n	800b734 <prvInitialiseNewTask+0x94>
			{
				break;
 800b732:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a998:	e003      	b.n	800a9a2 <prvInitialiseNewTask+0xa6>
=======
 800b734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b73c:	e003      	b.n	800b746 <prvInitialiseNewTask+0xa6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	2b37      	cmp	r3, #55	; 0x37
 800a9a6:	d901      	bls.n	800a9ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9a8:	2337      	movs	r3, #55	; 0x37
 800a9aa:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2b37      	cmp	r3, #55	; 0x37
 800b74a:	d901      	bls.n	800b750 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b74c:	2337      	movs	r3, #55	; 0x37
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b754:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe ff61 	bl	800988a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	3318      	adds	r3, #24
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fe ff5c 	bl	800988a <vListInitialiseItem>
=======
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3304      	adds	r3, #4
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe ff62 	bl	800a630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	3318      	adds	r3, #24
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe ff5d 	bl	800a630 <vListInitialiseItem>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e6:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
=======
 800b78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78e:	2200      	movs	r2, #0
 800b790:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	68f9      	ldr	r1, [r7, #12]
 800a9fa:	69b8      	ldr	r0, [r7, #24]
 800a9fc:	f001 fcca 	bl	800c394 <pxPortInitialiseStack>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	601a      	str	r2, [r3, #0]
=======
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	68f9      	ldr	r1, [r7, #12]
 800b79e:	69b8      	ldr	r0, [r7, #24]
 800b7a0:	f001 fd46 	bl	800d230 <pxPortInitialiseStack>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <prvInitialiseNewTask+0x116>
=======
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <prvInitialiseNewTask+0x116>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa10:	601a      	str	r2, [r3, #0]
=======
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b4:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800aa12:	bf00      	nop
 800aa14:	3720      	adds	r7, #32
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <prvAddNewTaskToReadyList>:
=======
 800b7b6:	bf00      	nop
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <prvAddNewTaskToReadyList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa24:	f001 fde6 	bl	800c5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa28:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <prvAddNewTaskToReadyList+0xc4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	4a2c      	ldr	r2, [pc, #176]	; (800aae0 <prvAddNewTaskToReadyList+0xc4>)
 800aa30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa32:	4b2c      	ldr	r3, [pc, #176]	; (800aae4 <prvAddNewTaskToReadyList+0xc8>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <prvAddNewTaskToReadyList+0x32>
=======
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7c8:	f001 fe5c 	bl	800d484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7cc:	4b2d      	ldr	r3, [pc, #180]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	4a2c      	ldr	r2, [pc, #176]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7d6:	4b2c      	ldr	r3, [pc, #176]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <prvAddNewTaskToReadyList+0x32>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800aa3a:	4a2a      	ldr	r2, [pc, #168]	; (800aae4 <prvAddNewTaskToReadyList+0xc8>)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <prvAddNewTaskToReadyList+0xc4>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d110      	bne.n	800aa6a <prvAddNewTaskToReadyList+0x4e>
=======
 800b7de:	4a2a      	ldr	r2, [pc, #168]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <prvAddNewTaskToReadyList+0xc4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d110      	bne.n	800b80e <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800aa48:	f000 fc28 	bl	800b29c <prvInitialiseTaskLists>
 800aa4c:	e00d      	b.n	800aa6a <prvAddNewTaskToReadyList+0x4e>
=======
 800b7ec:	f000 fcc6 	bl	800c17c <prvInitialiseTaskLists>
 800b7f0:	e00d      	b.n	800b80e <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800aa4e:	4b26      	ldr	r3, [pc, #152]	; (800aae8 <prvAddNewTaskToReadyList+0xcc>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa56:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <prvAddNewTaskToReadyList+0xc8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d802      	bhi.n	800aa6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa64:	4a1f      	ldr	r2, [pc, #124]	; (800aae4 <prvAddNewTaskToReadyList+0xc8>)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6013      	str	r3, [r2, #0]
=======
 800b7f2:	4b26      	ldr	r3, [pc, #152]	; (800b88c <prvAddNewTaskToReadyList+0xcc>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7fa:	4b23      	ldr	r3, [pc, #140]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	429a      	cmp	r2, r3
 800b806:	d802      	bhi.n	800b80e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b808:	4a1f      	ldr	r2, [pc, #124]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800aa6a:	4b20      	ldr	r3, [pc, #128]	; (800aaec <prvAddNewTaskToReadyList+0xd0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	4a1e      	ldr	r2, [pc, #120]	; (800aaec <prvAddNewTaskToReadyList+0xd0>)
 800aa72:	6013      	str	r3, [r2, #0]
=======
 800b80e:	4b20      	ldr	r3, [pc, #128]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	4a1e      	ldr	r2, [pc, #120]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b816:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 800aa74:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <prvAddNewTaskToReadyList+0xd0>)
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800b818:	4b1d      	ldr	r3, [pc, #116]	; (800b890 <prvAddNewTaskToReadyList+0xd0>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa80:	4b1b      	ldr	r3, [pc, #108]	; (800aaf0 <prvAddNewTaskToReadyList+0xd4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d903      	bls.n	800aa90 <prvAddNewTaskToReadyList+0x74>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	4a18      	ldr	r2, [pc, #96]	; (800aaf0 <prvAddNewTaskToReadyList+0xd4>)
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <prvAddNewTaskToReadyList+0xd8>)
 800aa9e:	441a      	add	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fe fefc 	bl	80098a4 <vListInsertEnd>
=======
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	4b1b      	ldr	r3, [pc, #108]	; (800b894 <prvAddNewTaskToReadyList+0xd4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d903      	bls.n	800b834 <prvAddNewTaskToReadyList+0x74>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	4a18      	ldr	r2, [pc, #96]	; (800b894 <prvAddNewTaskToReadyList+0xd4>)
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4a15      	ldr	r2, [pc, #84]	; (800b898 <prvAddNewTaskToReadyList+0xd8>)
 800b842:	441a      	add	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f7fe fefd 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800aaac:	f001 fdd2 	bl	800c654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <prvAddNewTaskToReadyList+0xcc>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00e      	beq.n	800aad6 <prvAddNewTaskToReadyList+0xba>
=======
 800b850:	f001 fe48 	bl	800d4e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b854:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <prvAddNewTaskToReadyList+0xcc>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00e      	beq.n	800b87a <prvAddNewTaskToReadyList+0xba>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <prvAddNewTaskToReadyList+0xc8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d207      	bcs.n	800aad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aac6:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <prvAddNewTaskToReadyList+0xdc>)
 800aac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	f3bf 8f6f 	isb	sy
=======
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <prvAddNewTaskToReadyList+0xc8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	429a      	cmp	r2, r3
 800b868:	d207      	bcs.n	800b87a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b86a:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <prvAddNewTaskToReadyList+0xdc>)
 800b86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20001334 	.word	0x20001334
 800aae4:	20000e60 	.word	0x20000e60
 800aae8:	20001340 	.word	0x20001340
 800aaec:	20001350 	.word	0x20001350
 800aaf0:	2000133c 	.word	0x2000133c
 800aaf4:	20000e64 	.word	0x20000e64
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vTaskDelay>:
=======
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20001398 	.word	0x20001398
 800b888:	20000ec4 	.word	0x20000ec4
 800b88c:	200013a4 	.word	0x200013a4
 800b890:	200013b4 	.word	0x200013b4
 800b894:	200013a0 	.word	0x200013a0
 800b898:	20000ec8 	.word	0x20000ec8
 800b89c:	e000ed04 	.word	0xe000ed04

0800b8a0 <vTaskDelay>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d017      	beq.n	800ab3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab0e:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <vTaskDelay+0x60>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <vTaskDelay+0x30>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab2c:	f000 f880 	bl	800ac30 <vTaskSuspendAll>
=======
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d017      	beq.n	800b8e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <vTaskDelay+0x60>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <vTaskDelay+0x30>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60bb      	str	r3, [r7, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8d0:	f000 f880 	bl	800b9d4 <vTaskSuspendAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800ab30:	2100      	movs	r1, #0
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f830 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab38:	f000 f888 	bl	800ac4c <xTaskResumeAll>
 800ab3c:	60f8      	str	r0, [r7, #12]
=======
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 f88c 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8dc:	f000 f888 	bl	800b9f0 <xTaskResumeAll>
 800b8e0:	60f8      	str	r0, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d107      	bne.n	800ab54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab44:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <vTaskDelay+0x64>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
=======
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d107      	bne.n	800b8f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8e8:	4b06      	ldr	r3, [pc, #24]	; (800b904 <vTaskDelay+0x64>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800ab54:	bf00      	nop
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	2000135c 	.word	0x2000135c
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vTaskStartScheduler>:
=======
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	200013c0 	.word	0x200013c0
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <vTaskStartScheduler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	; 0x28
 800ab68:	af04      	add	r7, sp, #16
=======
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	; 0x28
 800b90c:	af04      	add	r7, sp, #16
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	607b      	str	r3, [r7, #4]
=======
 800b90e:	2300      	movs	r3, #0
 800b910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800ab72:	463a      	mov	r2, r7
 800ab74:	1d39      	adds	r1, r7, #4
 800ab76:	f107 0308 	add.w	r3, r7, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fe fde0 	bl	8009740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	9202      	str	r2, [sp, #8]
 800ab88:	9301      	str	r3, [sp, #4]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	460a      	mov	r2, r1
 800ab92:	4921      	ldr	r1, [pc, #132]	; (800ac18 <vTaskStartScheduler+0xb4>)
 800ab94:	4821      	ldr	r0, [pc, #132]	; (800ac1c <vTaskStartScheduler+0xb8>)
 800ab96:	f7ff fe0f 	bl	800a7b8 <xTaskCreateStatic>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <vTaskStartScheduler+0xbc>)
 800ab9e:	6013      	str	r3, [r2, #0]
=======
 800b916:	463a      	mov	r2, r7
 800b918:	1d39      	adds	r1, r7, #4
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fc44 	bl	800a1ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	9202      	str	r2, [sp, #8]
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	2300      	movs	r3, #0
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	2300      	movs	r3, #0
 800b934:	460a      	mov	r2, r1
 800b936:	4921      	ldr	r1, [pc, #132]	; (800b9bc <vTaskStartScheduler+0xb4>)
 800b938:	4821      	ldr	r0, [pc, #132]	; (800b9c0 <vTaskStartScheduler+0xb8>)
 800b93a:	f7ff fe0f 	bl	800b55c <xTaskCreateStatic>
 800b93e:	4603      	mov	r3, r0
 800b940:	4a20      	ldr	r2, [pc, #128]	; (800b9c4 <vTaskStartScheduler+0xbc>)
 800b942:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 800aba0:	4b1f      	ldr	r3, [pc, #124]	; (800ac20 <vTaskStartScheduler+0xbc>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aba8:	2301      	movs	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	e001      	b.n	800abb2 <vTaskStartScheduler+0x4e>
=======
 800b944:	4b1f      	ldr	r3, [pc, #124]	; (800b9c4 <vTaskStartScheduler+0xbc>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b94c:	2301      	movs	r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	e001      	b.n	800b956 <vTaskStartScheduler+0x4e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
=======
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d102      	bne.n	800abbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800abb8:	f001 f842 	bl	800bc40 <xTimerCreateTimerTask>
 800abbc:	6178      	str	r0, [r7, #20]
=======
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d102      	bne.n	800b962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b95c:	f001 f89e 	bl	800ca9c <xTimerCreateTimerTask>
 800b960:	6178      	str	r0, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d116      	bne.n	800abf2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	613b      	str	r3, [r7, #16]
}
 800abd6:	bf00      	nop
=======
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d116      	bne.n	800b996 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	613b      	str	r3, [r7, #16]
}
 800b97a:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <vTaskStartScheduler+0xc0>)
 800abda:	f04f 32ff 	mov.w	r2, #4294967295
 800abde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abe0:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <vTaskStartScheduler+0xc4>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <vTaskStartScheduler+0xc8>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
=======
 800b97c:	4b12      	ldr	r3, [pc, #72]	; (800b9c8 <vTaskStartScheduler+0xc0>)
 800b97e:	f04f 32ff 	mov.w	r2, #4294967295
 800b982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <vTaskStartScheduler+0xc4>)
 800b986:	2201      	movs	r2, #1
 800b988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b98a:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <vTaskStartScheduler+0xc8>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800abec:	f001 fc60 	bl	800c4b0 <xPortStartScheduler>
=======
 800b990:	f001 fcd6 	bl	800d340 <xPortStartScheduler>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800abf0:	e00e      	b.n	800ac10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf8:	d10a      	bne.n	800ac10 <vTaskStartScheduler+0xac>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60fb      	str	r3, [r7, #12]
}
 800ac0c:	bf00      	nop
 800ac0e:	e7fe      	b.n	800ac0e <vTaskStartScheduler+0xaa>
}
 800ac10:	bf00      	nop
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	0800e770 	.word	0x0800e770
 800ac1c:	0800b26d 	.word	0x0800b26d
 800ac20:	20001358 	.word	0x20001358
 800ac24:	20001354 	.word	0x20001354
 800ac28:	20001340 	.word	0x20001340
 800ac2c:	20001338 	.word	0x20001338

0800ac30 <vTaskSuspendAll>:
=======
 800b994:	e00e      	b.n	800b9b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d10a      	bne.n	800b9b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	60fb      	str	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <vTaskStartScheduler+0xaa>
}
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0800f8d4 	.word	0x0800f8d4
 800b9c0:	0800c14d 	.word	0x0800c14d
 800b9c4:	200013bc 	.word	0x200013bc
 800b9c8:	200013b8 	.word	0x200013b8
 800b9cc:	200013a4 	.word	0x200013a4
 800b9d0:	2000139c 	.word	0x2000139c

0800b9d4 <vTaskSuspendAll>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
=======
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <vTaskSuspendAll+0x18>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	4a03      	ldr	r2, [pc, #12]	; (800ac48 <vTaskSuspendAll+0x18>)
 800ac3c:	6013      	str	r3, [r2, #0]
=======
 800b9d8:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <vTaskSuspendAll+0x18>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	4a03      	ldr	r2, [pc, #12]	; (800b9ec <vTaskSuspendAll+0x18>)
 800b9e0:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800ac3e:	bf00      	nop
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	2000135c 	.word	0x2000135c

0800ac4c <xTaskResumeAll>:
=======
 800b9e2:	bf00      	nop
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	200013c0 	.word	0x200013c0

0800b9f0 <xTaskResumeAll>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60bb      	str	r3, [r7, #8]
=======
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800ac5a:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <xTaskResumeAll+0x2c>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	603b      	str	r3, [r7, #0]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <xTaskResumeAll+0x2a>
=======
 800b9fe:	4b42      	ldr	r3, [pc, #264]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xTaskResumeAll+0x2c>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	603b      	str	r3, [r7, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <xTaskResumeAll+0x2a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800ac78:	f001 fcbc 	bl	800c5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac7c:	4b39      	ldr	r3, [pc, #228]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4a38      	ldr	r2, [pc, #224]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac86:	4b37      	ldr	r3, [pc, #220]	; (800ad64 <xTaskResumeAll+0x118>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d162      	bne.n	800ad54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <xTaskResumeAll+0x11c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d05e      	beq.n	800ad54 <xTaskResumeAll+0x108>
=======
 800ba1c:	f001 fd32 	bl	800d484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba20:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	4a38      	ldr	r2, [pc, #224]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba2a:	4b37      	ldr	r3, [pc, #220]	; (800bb08 <xTaskResumeAll+0x118>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d162      	bne.n	800baf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba32:	4b36      	ldr	r3, [pc, #216]	; (800bb0c <xTaskResumeAll+0x11c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d05e      	beq.n	800baf8 <xTaskResumeAll+0x108>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800ac96:	e02f      	b.n	800acf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac98:	4b34      	ldr	r3, [pc, #208]	; (800ad6c <xTaskResumeAll+0x120>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3318      	adds	r3, #24
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe fe5a 	bl	800995e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3304      	adds	r3, #4
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fe55 	bl	800995e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <xTaskResumeAll+0x124>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d903      	bls.n	800acc8 <xTaskResumeAll+0x7c>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc4:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <xTaskResumeAll+0x124>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <xTaskResumeAll+0x128>)
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3304      	adds	r3, #4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fe fde0 	bl	80098a4 <vListInsertEnd>
=======
 800ba3a:	e02f      	b.n	800ba9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba3c:	4b34      	ldr	r3, [pc, #208]	; (800bb10 <xTaskResumeAll+0x120>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3318      	adds	r3, #24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe fe5b 	bl	800a704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3304      	adds	r3, #4
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fe56 	bl	800a704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5c:	4b2d      	ldr	r3, [pc, #180]	; (800bb14 <xTaskResumeAll+0x124>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d903      	bls.n	800ba6c <xTaskResumeAll+0x7c>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	4a2a      	ldr	r2, [pc, #168]	; (800bb14 <xTaskResumeAll+0x124>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4a27      	ldr	r2, [pc, #156]	; (800bb18 <xTaskResumeAll+0x128>)
 800ba7a:	441a      	add	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fe fde1 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace8:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <xTaskResumeAll+0x12c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	429a      	cmp	r2, r3
 800acf0:	d302      	bcc.n	800acf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800acf2:	4b22      	ldr	r3, [pc, #136]	; (800ad7c <xTaskResumeAll+0x130>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acf8:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <xTaskResumeAll+0x120>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1cb      	bne.n	800ac98 <xTaskResumeAll+0x4c>
=======
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <xTaskResumeAll+0x12c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d302      	bcc.n	800ba9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba96:	4b22      	ldr	r3, [pc, #136]	; (800bb20 <xTaskResumeAll+0x130>)
 800ba98:	2201      	movs	r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba9c:	4b1c      	ldr	r3, [pc, #112]	; (800bb10 <xTaskResumeAll+0x120>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1cb      	bne.n	800ba3c <xTaskResumeAll+0x4c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <xTaskResumeAll+0xbe>
=======
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <xTaskResumeAll+0xbe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800ad06:	f000 fb67 	bl	800b3d8 <prvResetNextTaskUnblockTime>
=======
 800baaa:	f000 fc05 	bl	800c2b8 <prvResetNextTaskUnblockTime>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800ad0a:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <xTaskResumeAll+0x134>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d010      	beq.n	800ad38 <xTaskResumeAll+0xec>
=======
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <xTaskResumeAll+0x134>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d010      	beq.n	800badc <xTaskResumeAll+0xec>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800ad16:	f000 f859 	bl	800adcc <xTaskIncrementTick>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d002      	beq.n	800ad26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad20:	4b16      	ldr	r3, [pc, #88]	; (800ad7c <xTaskResumeAll+0x130>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
=======
 800baba:	f000 f859 	bl	800bb70 <xTaskIncrementTick>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bac4:	4b16      	ldr	r3, [pc, #88]	; (800bb20 <xTaskResumeAll+0x130>)
 800bac6:	2201      	movs	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f1      	bne.n	800ad16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ad32:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <xTaskResumeAll+0x134>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
=======
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3b01      	subs	r3, #1
 800bace:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f1      	bne.n	800baba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bad6:	4b13      	ldr	r3, [pc, #76]	; (800bb24 <xTaskResumeAll+0x134>)
 800bad8:	2200      	movs	r2, #0
 800bada:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800ad38:	4b10      	ldr	r3, [pc, #64]	; (800ad7c <xTaskResumeAll+0x130>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <xTaskResumeAll+0x108>
=======
 800badc:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <xTaskResumeAll+0x130>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <xTaskResumeAll+0x108>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800ad40:	2301      	movs	r3, #1
 800ad42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad44:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <xTaskResumeAll+0x138>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
=======
 800bae4:	2301      	movs	r3, #1
 800bae6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bae8:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTaskResumeAll+0x138>)
 800baea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800ad54:	f001 fc7e 	bl	800c654 <vPortExitCritical>

	return xAlreadyYielded;
 800ad58:	68bb      	ldr	r3, [r7, #8]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	2000135c 	.word	0x2000135c
 800ad68:	20001334 	.word	0x20001334
 800ad6c:	200012f4 	.word	0x200012f4
 800ad70:	2000133c 	.word	0x2000133c
 800ad74:	20000e64 	.word	0x20000e64
 800ad78:	20000e60 	.word	0x20000e60
 800ad7c:	20001348 	.word	0x20001348
 800ad80:	20001344 	.word	0x20001344
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <xTaskGetTickCount>:
=======
 800baf8:	f001 fcf4 	bl	800d4e4 <vPortExitCritical>

	return xAlreadyYielded;
 800bafc:	68bb      	ldr	r3, [r7, #8]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	200013c0 	.word	0x200013c0
 800bb0c:	20001398 	.word	0x20001398
 800bb10:	20001358 	.word	0x20001358
 800bb14:	200013a0 	.word	0x200013a0
 800bb18:	20000ec8 	.word	0x20000ec8
 800bb1c:	20000ec4 	.word	0x20000ec4
 800bb20:	200013ac 	.word	0x200013ac
 800bb24:	200013a8 	.word	0x200013a8
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <xTaskGetTickCount>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
=======
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <xTaskGetTickCount+0x1c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]
=======
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <xTaskGetTickCount+0x1c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 800ad94:	687b      	ldr	r3, [r7, #4]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20001338 	.word	0x20001338

0800ada8 <xTaskGetTickCountFromISR>:
=======
 800bb38:	687b      	ldr	r3, [r7, #4]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	2000139c 	.word	0x2000139c

0800bb4c <xTaskGetTickCountFromISR>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
<<<<<<< HEAD
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
=======
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800adae:	f001 fd03 	bl	800c7b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800adb2:	2300      	movs	r3, #0
 800adb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800adb6:	4b04      	ldr	r3, [pc, #16]	; (800adc8 <xTaskGetTickCountFromISR+0x20>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	603b      	str	r3, [r7, #0]
=======
 800bb52:	f001 fd79 	bl	800d648 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb56:	2300      	movs	r3, #0
 800bb58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb5a:	4b04      	ldr	r3, [pc, #16]	; (800bb6c <xTaskGetTickCountFromISR+0x20>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	603b      	str	r3, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800adbc:	683b      	ldr	r3, [r7, #0]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20001338 	.word	0x20001338

0800adcc <xTaskIncrementTick>:
=======
 800bb60:	683b      	ldr	r3, [r7, #0]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	2000139c 	.word	0x2000139c

0800bb70 <xTaskIncrementTick>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
=======
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800add6:	4b4f      	ldr	r3, [pc, #316]	; (800af14 <xTaskIncrementTick+0x148>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	f040 808f 	bne.w	800aefe <xTaskIncrementTick+0x132>
=======
 800bb7a:	4b4f      	ldr	r3, [pc, #316]	; (800bcb8 <xTaskIncrementTick+0x148>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f040 808f 	bne.w	800bca2 <xTaskIncrementTick+0x132>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 800ade0:	4b4d      	ldr	r3, [pc, #308]	; (800af18 <xTaskIncrementTick+0x14c>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	613b      	str	r3, [r7, #16]
=======
 800bb84:	4b4d      	ldr	r3, [pc, #308]	; (800bcbc <xTaskIncrementTick+0x14c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800ade8:	4a4b      	ldr	r2, [pc, #300]	; (800af18 <xTaskIncrementTick+0x14c>)
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d120      	bne.n	800ae36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800adf4:	4b49      	ldr	r3, [pc, #292]	; (800af1c <xTaskIncrementTick+0x150>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <xTaskIncrementTick+0x48>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	603b      	str	r3, [r7, #0]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <xTaskIncrementTick+0x46>
 800ae14:	4b41      	ldr	r3, [pc, #260]	; (800af1c <xTaskIncrementTick+0x150>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	4b41      	ldr	r3, [pc, #260]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a3f      	ldr	r2, [pc, #252]	; (800af1c <xTaskIncrementTick+0x150>)
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	4a3f      	ldr	r2, [pc, #252]	; (800af20 <xTaskIncrementTick+0x154>)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6013      	str	r3, [r2, #0]
 800ae28:	4b3e      	ldr	r3, [pc, #248]	; (800af24 <xTaskIncrementTick+0x158>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4a3d      	ldr	r2, [pc, #244]	; (800af24 <xTaskIncrementTick+0x158>)
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	f000 fad1 	bl	800b3d8 <prvResetNextTaskUnblockTime>
=======
 800bb8c:	4a4b      	ldr	r2, [pc, #300]	; (800bcbc <xTaskIncrementTick+0x14c>)
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d120      	bne.n	800bbda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb98:	4b49      	ldr	r3, [pc, #292]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00a      	beq.n	800bbb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	603b      	str	r3, [r7, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <xTaskIncrementTick+0x46>
 800bbb8:	4b41      	ldr	r3, [pc, #260]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	4b41      	ldr	r3, [pc, #260]	; (800bcc4 <xTaskIncrementTick+0x154>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a3f      	ldr	r2, [pc, #252]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	4a3f      	ldr	r2, [pc, #252]	; (800bcc4 <xTaskIncrementTick+0x154>)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	4b3e      	ldr	r3, [pc, #248]	; (800bcc8 <xTaskIncrementTick+0x158>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	4a3d      	ldr	r2, [pc, #244]	; (800bcc8 <xTaskIncrementTick+0x158>)
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	f000 fb6f 	bl	800c2b8 <prvResetNextTaskUnblockTime>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800ae36:	4b3c      	ldr	r3, [pc, #240]	; (800af28 <xTaskIncrementTick+0x15c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d349      	bcc.n	800aed4 <xTaskIncrementTick+0x108>
=======
 800bbda:	4b3c      	ldr	r3, [pc, #240]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d349      	bcc.n	800bc78 <xTaskIncrementTick+0x108>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800ae40:	4b36      	ldr	r3, [pc, #216]	; (800af1c <xTaskIncrementTick+0x150>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d104      	bne.n	800ae54 <xTaskIncrementTick+0x88>
=======
 800bbe4:	4b36      	ldr	r3, [pc, #216]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d104      	bne.n	800bbf8 <xTaskIncrementTick+0x88>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800ae4a:	4b37      	ldr	r3, [pc, #220]	; (800af28 <xTaskIncrementTick+0x15c>)
 800ae4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae50:	601a      	str	r2, [r3, #0]
					break;
 800ae52:	e03f      	b.n	800aed4 <xTaskIncrementTick+0x108>
=======
 800bbee:	4b37      	ldr	r3, [pc, #220]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf4:	601a      	str	r2, [r3, #0]
					break;
 800bbf6:	e03f      	b.n	800bc78 <xTaskIncrementTick+0x108>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800ae54:	4b31      	ldr	r3, [pc, #196]	; (800af1c <xTaskIncrementTick+0x150>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d203      	bcs.n	800ae74 <xTaskIncrementTick+0xa8>
=======
 800bbf8:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <xTaskIncrementTick+0x150>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d203      	bcs.n	800bc18 <xTaskIncrementTick+0xa8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800ae6c:	4a2e      	ldr	r2, [pc, #184]	; (800af28 <xTaskIncrementTick+0x15c>)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae72:	e02f      	b.n	800aed4 <xTaskIncrementTick+0x108>
=======
 800bc10:	4a2e      	ldr	r2, [pc, #184]	; (800bccc <xTaskIncrementTick+0x15c>)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc16:	e02f      	b.n	800bc78 <xTaskIncrementTick+0x108>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe fd70 	bl	800995e <uxListRemove>
=======
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fe fd71 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d004      	beq.n	800ae90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	3318      	adds	r3, #24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fd67 	bl	800995e <uxListRemove>
=======
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d004      	beq.n	800bc34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	3318      	adds	r3, #24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fe fd68 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <xTaskIncrementTick+0x160>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d903      	bls.n	800aea4 <xTaskIncrementTick+0xd8>
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	4a22      	ldr	r2, [pc, #136]	; (800af2c <xTaskIncrementTick+0x160>)
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4a1f      	ldr	r2, [pc, #124]	; (800af30 <xTaskIncrementTick+0x164>)
 800aeb2:	441a      	add	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7fe fcf2 	bl	80098a4 <vListInsertEnd>
=======
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc38:	4b25      	ldr	r3, [pc, #148]	; (800bcd0 <xTaskIncrementTick+0x160>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d903      	bls.n	800bc48 <xTaskIncrementTick+0xd8>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	4a22      	ldr	r2, [pc, #136]	; (800bcd0 <xTaskIncrementTick+0x160>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4a1f      	ldr	r2, [pc, #124]	; (800bcd4 <xTaskIncrementTick+0x164>)
 800bc56:	441a      	add	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fe fcf3 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <xTaskIncrementTick+0x168>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3b8      	bcc.n	800ae40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aece:	2301      	movs	r3, #1
 800aed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed2:	e7b5      	b.n	800ae40 <xTaskIncrementTick+0x74>
=======
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc68:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <xTaskIncrementTick+0x168>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3b8      	bcc.n	800bbe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc72:	2301      	movs	r3, #1
 800bc74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc76:	e7b5      	b.n	800bbe4 <xTaskIncrementTick+0x74>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800aed4:	4b17      	ldr	r3, [pc, #92]	; (800af34 <xTaskIncrementTick+0x168>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	4915      	ldr	r1, [pc, #84]	; (800af30 <xTaskIncrementTick+0x164>)
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	440b      	add	r3, r1
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d901      	bls.n	800aef0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
=======
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <xTaskIncrementTick+0x168>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7e:	4915      	ldr	r1, [pc, #84]	; (800bcd4 <xTaskIncrementTick+0x164>)
 800bc80:	4613      	mov	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4413      	add	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	440b      	add	r3, r1
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d901      	bls.n	800bc94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc90:	2301      	movs	r3, #1
 800bc92:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800aef0:	4b11      	ldr	r3, [pc, #68]	; (800af38 <xTaskIncrementTick+0x16c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aef8:	2301      	movs	r3, #1
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e004      	b.n	800af08 <xTaskIncrementTick+0x13c>
=======
 800bc94:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <xTaskIncrementTick+0x16c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	e004      	b.n	800bcac <xTaskIncrementTick+0x13c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <xTaskIncrementTick+0x170>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	4a0d      	ldr	r2, [pc, #52]	; (800af3c <xTaskIncrementTick+0x170>)
 800af06:	6013      	str	r3, [r2, #0]
=======
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <xTaskIncrementTick+0x170>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	4a0d      	ldr	r2, [pc, #52]	; (800bce0 <xTaskIncrementTick+0x170>)
 800bcaa:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 800af08:	697b      	ldr	r3, [r7, #20]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000135c 	.word	0x2000135c
 800af18:	20001338 	.word	0x20001338
 800af1c:	200012ec 	.word	0x200012ec
 800af20:	200012f0 	.word	0x200012f0
 800af24:	2000134c 	.word	0x2000134c
 800af28:	20001354 	.word	0x20001354
 800af2c:	2000133c 	.word	0x2000133c
 800af30:	20000e64 	.word	0x20000e64
 800af34:	20000e60 	.word	0x20000e60
 800af38:	20001348 	.word	0x20001348
 800af3c:	20001344 	.word	0x20001344

0800af40 <vTaskSwitchContext>:
=======
 800bcac:	697b      	ldr	r3, [r7, #20]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200013c0 	.word	0x200013c0
 800bcbc:	2000139c 	.word	0x2000139c
 800bcc0:	20001350 	.word	0x20001350
 800bcc4:	20001354 	.word	0x20001354
 800bcc8:	200013b0 	.word	0x200013b0
 800bccc:	200013b8 	.word	0x200013b8
 800bcd0:	200013a0 	.word	0x200013a0
 800bcd4:	20000ec8 	.word	0x20000ec8
 800bcd8:	20000ec4 	.word	0x20000ec4
 800bcdc:	200013ac 	.word	0x200013ac
 800bce0:	200013a8 	.word	0x200013a8

0800bce4 <vTaskSwitchContext>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af46:	4b28      	ldr	r3, [pc, #160]	; (800afe8 <vTaskSwitchContext+0xa8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <vTaskSwitchContext+0x16>
=======
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcea:	4b28      	ldr	r3, [pc, #160]	; (800bd8c <vTaskSwitchContext+0xa8>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <vTaskSwitchContext+0x16>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800af4e:	4b27      	ldr	r3, [pc, #156]	; (800afec <vTaskSwitchContext+0xac>)
 800af50:	2201      	movs	r2, #1
 800af52:	601a      	str	r2, [r3, #0]
=======
 800bcf2:	4b27      	ldr	r3, [pc, #156]	; (800bd90 <vTaskSwitchContext+0xac>)
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800af54:	e041      	b.n	800afda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800af56:	4b25      	ldr	r3, [pc, #148]	; (800afec <vTaskSwitchContext+0xac>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5c:	4b24      	ldr	r3, [pc, #144]	; (800aff0 <vTaskSwitchContext+0xb0>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e010      	b.n	800af86 <vTaskSwitchContext+0x46>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <vTaskSwitchContext+0x40>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	607b      	str	r3, [r7, #4]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <vTaskSwitchContext+0x3e>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3b01      	subs	r3, #1
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	491b      	ldr	r1, [pc, #108]	; (800aff4 <vTaskSwitchContext+0xb4>)
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4613      	mov	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	440b      	add	r3, r1
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d0e4      	beq.n	800af64 <vTaskSwitchContext+0x24>
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <vTaskSwitchContext+0xb4>)
 800afa6:	4413      	add	r3, r2
 800afa8:	60bb      	str	r3, [r7, #8]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	605a      	str	r2, [r3, #4]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3308      	adds	r3, #8
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d104      	bne.n	800afca <vTaskSwitchContext+0x8a>
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	4a09      	ldr	r2, [pc, #36]	; (800aff8 <vTaskSwitchContext+0xb8>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	4a06      	ldr	r2, [pc, #24]	; (800aff0 <vTaskSwitchContext+0xb0>)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6013      	str	r3, [r2, #0]
}
 800afda:	bf00      	nop
 800afdc:	3714      	adds	r7, #20
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	2000135c 	.word	0x2000135c
 800afec:	20001348 	.word	0x20001348
 800aff0:	2000133c 	.word	0x2000133c
 800aff4:	20000e64 	.word	0x20000e64
 800aff8:	20000e60 	.word	0x20000e60

0800affc <vTaskPlaceOnEventList>:
=======
 800bcf8:	e041      	b.n	800bd7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bcfa:	4b25      	ldr	r3, [pc, #148]	; (800bd90 <vTaskSwitchContext+0xac>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <vTaskSwitchContext+0xb0>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	e010      	b.n	800bd2a <vTaskSwitchContext+0x46>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <vTaskSwitchContext+0x40>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	607b      	str	r3, [r7, #4]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vTaskSwitchContext+0x3e>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	491b      	ldr	r1, [pc, #108]	; (800bd98 <vTaskSwitchContext+0xb4>)
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	440b      	add	r3, r1
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0e4      	beq.n	800bd08 <vTaskSwitchContext+0x24>
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <vTaskSwitchContext+0xb4>)
 800bd4a:	4413      	add	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	605a      	str	r2, [r3, #4]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d104      	bne.n	800bd6e <vTaskSwitchContext+0x8a>
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <vTaskSwitchContext+0xb8>)
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <vTaskSwitchContext+0xb0>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6013      	str	r3, [r2, #0]
}
 800bd7e:	bf00      	nop
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	200013c0 	.word	0x200013c0
 800bd90:	200013ac 	.word	0x200013ac
 800bd94:	200013a0 	.word	0x200013a0
 800bd98:	20000ec8 	.word	0x20000ec8
 800bd9c:	20000ec4 	.word	0x20000ec4

0800bda0 <vTaskPlaceOnEventList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	60fb      	str	r3, [r7, #12]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <vTaskPlaceOnEventList+0x24>
=======
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	60fb      	str	r3, [r7, #12]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <vTaskPlaceOnEventList+0x24>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b022:	4b07      	ldr	r3, [pc, #28]	; (800b040 <vTaskPlaceOnEventList+0x44>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3318      	adds	r3, #24
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7fe fc5e 	bl	80098ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b030:	2101      	movs	r1, #1
 800b032:	6838      	ldr	r0, [r7, #0]
 800b034:	f000 fdb0 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
}
 800b038:	bf00      	nop
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	20000e60 	.word	0x20000e60

0800b044 <vTaskPlaceOnEventListRestricted>:
=======
 800bdc6:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <vTaskPlaceOnEventList+0x44>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3318      	adds	r3, #24
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f7fe fc5f 	bl	800a692 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	6838      	ldr	r0, [r7, #0]
 800bdd8:	f000 fe0c 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000ec4 	.word	0x20000ec4

0800bde8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	617b      	str	r3, [r7, #20]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800be10:	4b11      	ldr	r3, [pc, #68]	; (800be58 <vTaskPlaceOnUnorderedEventList+0x70>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	613b      	str	r3, [r7, #16]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800be2e:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <vTaskPlaceOnUnorderedEventList+0x74>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800be38:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be3a:	4b08      	ldr	r3, [pc, #32]	; (800be5c <vTaskPlaceOnUnorderedEventList+0x74>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3318      	adds	r3, #24
 800be40:	4619      	mov	r1, r3
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7fe fc01 	bl	800a64a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be48:	2101      	movs	r1, #1
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fdd2 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
}
 800be50:	bf00      	nop
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	200013c0 	.word	0x200013c0
 800be5c:	20000ec4 	.word	0x20000ec4

0800be60 <vTaskPlaceOnEventListRestricted>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	617b      	str	r3, [r7, #20]
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <vTaskPlaceOnEventListRestricted+0x26>
=======
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10a      	bne.n	800be88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	f383 8811 	msr	BASEPRI, r3
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	617b      	str	r3, [r7, #20]
}
 800be84:	bf00      	nop
 800be86:	e7fe      	b.n	800be86 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <vTaskPlaceOnEventListRestricted+0x54>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3318      	adds	r3, #24
 800b072:	4619      	mov	r1, r3
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7fe fc15 	bl	80098a4 <vListInsertEnd>
=======
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3318      	adds	r3, #24
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7fe fbda 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	60bb      	str	r3, [r7, #8]
=======
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bea0:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	68b8      	ldr	r0, [r7, #8]
 800b08a:	f000 fd85 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
	}
 800b08e:	bf00      	nop
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20000e60 	.word	0x20000e60

0800b09c <xTaskRemoveFromEventList>:
=======
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	68b8      	ldr	r0, [r7, #8]
 800bea6:	f000 fda5 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
	}
 800beaa:	bf00      	nop
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000ec4 	.word	0x20000ec4

0800beb8 <xTaskRemoveFromEventList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
=======
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10a      	bne.n	800b0c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60fb      	str	r3, [r7, #12]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3318      	adds	r3, #24
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe fc46 	bl	800995e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d2:	4b1e      	ldr	r3, [pc, #120]	; (800b14c <xTaskRemoveFromEventList+0xb0>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d11d      	bne.n	800b116 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fc3d 	bl	800995e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4b19      	ldr	r3, [pc, #100]	; (800b150 <xTaskRemoveFromEventList+0xb4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d903      	bls.n	800b0f8 <xTaskRemoveFromEventList+0x5c>
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	4a16      	ldr	r2, [pc, #88]	; (800b150 <xTaskRemoveFromEventList+0xb4>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4a13      	ldr	r2, [pc, #76]	; (800b154 <xTaskRemoveFromEventList+0xb8>)
 800b106:	441a      	add	r2, r3
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fe fbc8 	bl	80098a4 <vListInsertEnd>
 800b114:	e005      	b.n	800b122 <xTaskRemoveFromEventList+0x86>
=======
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10a      	bne.n	800bee4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	60fb      	str	r3, [r7, #12]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3318      	adds	r3, #24
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fe fc0b 	bl	800a704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beee:	4b1e      	ldr	r3, [pc, #120]	; (800bf68 <xTaskRemoveFromEventList+0xb0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d11d      	bne.n	800bf32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	3304      	adds	r3, #4
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe fc02 	bl	800a704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4b19      	ldr	r3, [pc, #100]	; (800bf6c <xTaskRemoveFromEventList+0xb4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d903      	bls.n	800bf14 <xTaskRemoveFromEventList+0x5c>
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	4a16      	ldr	r2, [pc, #88]	; (800bf6c <xTaskRemoveFromEventList+0xb4>)
 800bf12:	6013      	str	r3, [r2, #0]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4a13      	ldr	r2, [pc, #76]	; (800bf70 <xTaskRemoveFromEventList+0xb8>)
 800bf22:	441a      	add	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fe fb8d 	bl	800a64a <vListInsertEnd>
 800bf30:	e005      	b.n	800bf3e <xTaskRemoveFromEventList+0x86>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	3318      	adds	r3, #24
 800b11a:	4619      	mov	r1, r3
 800b11c:	480e      	ldr	r0, [pc, #56]	; (800b158 <xTaskRemoveFromEventList+0xbc>)
 800b11e:	f7fe fbc1 	bl	80098a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <xTaskRemoveFromEventList+0xc0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d905      	bls.n	800b13c <xTaskRemoveFromEventList+0xa0>
=======
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	3318      	adds	r3, #24
 800bf36:	4619      	mov	r1, r3
 800bf38:	480e      	ldr	r0, [pc, #56]	; (800bf74 <xTaskRemoveFromEventList+0xbc>)
 800bf3a:	f7fe fb86 	bl	800a64a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <xTaskRemoveFromEventList+0xc0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d905      	bls.n	800bf58 <xTaskRemoveFromEventList+0xa0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
=======
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800b134:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <xTaskRemoveFromEventList+0xc4>)
 800b136:	2201      	movs	r2, #1
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e001      	b.n	800b140 <xTaskRemoveFromEventList+0xa4>
=======
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <xTaskRemoveFromEventList+0xc4>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	e001      	b.n	800bf5c <xTaskRemoveFromEventList+0xa4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800b13c:	2300      	movs	r3, #0
 800b13e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b140:	697b      	ldr	r3, [r7, #20]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	2000135c 	.word	0x2000135c
 800b150:	2000133c 	.word	0x2000133c
 800b154:	20000e64 	.word	0x20000e64
 800b158:	200012f4 	.word	0x200012f4
 800b15c:	20000e60 	.word	0x20000e60
 800b160:	20001348 	.word	0x20001348

0800b164 <vTaskInternalSetTimeOutState>:
=======
 800bf58:	2300      	movs	r3, #0
 800bf5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf5c:	697b      	ldr	r3, [r7, #20]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200013c0 	.word	0x200013c0
 800bf6c:	200013a0 	.word	0x200013a0
 800bf70:	20000ec8 	.word	0x20000ec8
 800bf74:	20001358 	.word	0x20001358
 800bf78:	20000ec4 	.word	0x20000ec4
 800bf7c:	200013ac 	.word	0x200013ac

0800bf80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800bf8a:	4b29      	ldr	r3, [pc, #164]	; (800c030 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	613b      	str	r3, [r7, #16]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d10a      	bne.n	800bfd4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60fb      	str	r3, [r7, #12]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7fe fb95 	bl	800a704 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fb90 	bl	800a704 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4b12      	ldr	r3, [pc, #72]	; (800c034 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d903      	bls.n	800bff8 <vTaskRemoveFromUnorderedEventList+0x78>
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	4a0f      	ldr	r2, [pc, #60]	; (800c034 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	4613      	mov	r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4a0c      	ldr	r2, [pc, #48]	; (800c038 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c006:	441a      	add	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f7fe fb1b 	bl	800a64a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	4b08      	ldr	r3, [pc, #32]	; (800c03c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	429a      	cmp	r2, r3
 800c020:	d902      	bls.n	800c028 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c022:	4b07      	ldr	r3, [pc, #28]	; (800c040 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c024:	2201      	movs	r2, #1
 800c026:	601a      	str	r2, [r3, #0]
	}
}
 800c028:	bf00      	nop
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	200013c0 	.word	0x200013c0
 800c034:	200013a0 	.word	0x200013a0
 800c038:	20000ec8 	.word	0x20000ec8
 800c03c:	20000ec4 	.word	0x20000ec4
 800c040:	200013ac 	.word	0x200013ac

0800c044 <vTaskInternalSetTimeOutState>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <vTaskInternalSetTimeOutState+0x24>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <vTaskInternalSetTimeOutState+0x28>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	605a      	str	r2, [r3, #4]
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	2000134c 	.word	0x2000134c
 800b18c:	20001338 	.word	0x20001338

0800b190 <xTaskCheckForTimeOut>:
=======
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <vTaskInternalSetTimeOutState+0x24>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <vTaskInternalSetTimeOutState+0x28>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	605a      	str	r2, [r3, #4]
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	200013b0 	.word	0x200013b0
 800c06c:	2000139c 	.word	0x2000139c

0800c070 <xTaskCheckForTimeOut>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10a      	bne.n	800b1d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60fb      	str	r3, [r7, #12]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b1d2:	f001 fa0f 	bl	800c5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1d6:	4b1d      	ldr	r3, [pc, #116]	; (800b24c <xTaskCheckForTimeOut+0xbc>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	617b      	str	r3, [r7, #20]
=======
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10a      	bne.n	800c096 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	613b      	str	r3, [r7, #16]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60fb      	str	r3, [r7, #12]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c0b2:	f001 f9e7 	bl	800d484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	; (800c12c <xTaskCheckForTimeOut+0xbc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ee:	d102      	bne.n	800b1f6 <xTaskCheckForTimeOut+0x66>
=======
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d102      	bne.n	800c0d6 <xTaskCheckForTimeOut+0x66>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e023      	b.n	800b23e <xTaskCheckForTimeOut+0xae>
=======
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]
 800c0d4:	e023      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	4b15      	ldr	r3, [pc, #84]	; (800b250 <xTaskCheckForTimeOut+0xc0>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d007      	beq.n	800b212 <xTaskCheckForTimeOut+0x82>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d302      	bcc.n	800b212 <xTaskCheckForTimeOut+0x82>
=======
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b15      	ldr	r3, [pc, #84]	; (800c130 <xTaskCheckForTimeOut+0xc0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d007      	beq.n	800c0f2 <xTaskCheckForTimeOut+0x82>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d302      	bcc.n	800c0f2 <xTaskCheckForTimeOut+0x82>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 800b20c:	2301      	movs	r3, #1
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e015      	b.n	800b23e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d20b      	bcs.n	800b234 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	1ad2      	subs	r2, r2, r3
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff ff9b 	bl	800b164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	e004      	b.n	800b23e <xTaskCheckForTimeOut+0xae>
=======
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	e015      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d20b      	bcs.n	800c114 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ff9b 	bl	800c044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	e004      	b.n	800c11e <xTaskCheckForTimeOut+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b23a:	2301      	movs	r3, #1
 800b23c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b23e:	f001 fa09 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800b242:	69fb      	ldr	r3, [r7, #28]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3720      	adds	r7, #32
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20001338 	.word	0x20001338
 800b250:	2000134c 	.word	0x2000134c

0800b254 <vTaskMissedYield>:
=======
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c11a:	2301      	movs	r3, #1
 800c11c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c11e:	f001 f9e1 	bl	800d4e4 <vPortExitCritical>

	return xReturn;
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	2000139c 	.word	0x2000139c
 800c130:	200013b0 	.word	0x200013b0

0800c134 <vTaskMissedYield>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b258:	4b03      	ldr	r3, [pc, #12]	; (800b268 <vTaskMissedYield+0x14>)
 800b25a:	2201      	movs	r2, #1
 800b25c:	601a      	str	r2, [r3, #0]
}
 800b25e:	bf00      	nop
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	20001348 	.word	0x20001348

0800b26c <prvIdleTask>:
=======
 800c134:	b480      	push	{r7}
 800c136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c138:	4b03      	ldr	r3, [pc, #12]	; (800c148 <vTaskMissedYield+0x14>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	601a      	str	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	200013ac 	.word	0x200013ac

0800c14c <prvIdleTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
=======
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800b274:	f000 f852 	bl	800b31c <prvCheckTasksWaitingTermination>
=======
 800c154:	f000 f852 	bl	800c1fc <prvCheckTasksWaitingTermination>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800b278:	4b06      	ldr	r3, [pc, #24]	; (800b294 <prvIdleTask+0x28>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d9f9      	bls.n	800b274 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b280:	4b05      	ldr	r3, [pc, #20]	; (800b298 <prvIdleTask+0x2c>)
 800b282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b290:	e7f0      	b.n	800b274 <prvIdleTask+0x8>
 800b292:	bf00      	nop
 800b294:	20000e64 	.word	0x20000e64
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <prvInitialiseTaskLists>:
=======
 800c158:	4b06      	ldr	r3, [pc, #24]	; (800c174 <prvIdleTask+0x28>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d9f9      	bls.n	800c154 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <prvIdleTask+0x2c>)
 800c162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c170:	e7f0      	b.n	800c154 <prvIdleTask+0x8>
 800c172:	bf00      	nop
 800c174:	20000ec8 	.word	0x20000ec8
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <prvInitialiseTaskLists>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
 800b2a6:	e00c      	b.n	800b2c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	4413      	add	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4a12      	ldr	r2, [pc, #72]	; (800b2fc <prvInitialiseTaskLists+0x60>)
 800b2b4:	4413      	add	r3, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fac7 	bl	800984a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b37      	cmp	r3, #55	; 0x37
 800b2c6:	d9ef      	bls.n	800b2a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2c8:	480d      	ldr	r0, [pc, #52]	; (800b300 <prvInitialiseTaskLists+0x64>)
 800b2ca:	f7fe fabe 	bl	800984a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2ce:	480d      	ldr	r0, [pc, #52]	; (800b304 <prvInitialiseTaskLists+0x68>)
 800b2d0:	f7fe fabb 	bl	800984a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2d4:	480c      	ldr	r0, [pc, #48]	; (800b308 <prvInitialiseTaskLists+0x6c>)
 800b2d6:	f7fe fab8 	bl	800984a <vListInitialise>
=======
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c182:	2300      	movs	r3, #0
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00c      	b.n	800c1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a12      	ldr	r2, [pc, #72]	; (800c1dc <prvInitialiseTaskLists+0x60>)
 800c194:	4413      	add	r3, r2
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fa2a 	bl	800a5f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	607b      	str	r3, [r7, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b37      	cmp	r3, #55	; 0x37
 800c1a6:	d9ef      	bls.n	800c188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1a8:	480d      	ldr	r0, [pc, #52]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1aa:	f7fe fa21 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1ae:	480d      	ldr	r0, [pc, #52]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1b0:	f7fe fa1e 	bl	800a5f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1b4:	480c      	ldr	r0, [pc, #48]	; (800c1e8 <prvInitialiseTaskLists+0x6c>)
 800c1b6:	f7fe fa1b 	bl	800a5f0 <vListInitialise>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800b2da:	480c      	ldr	r0, [pc, #48]	; (800b30c <prvInitialiseTaskLists+0x70>)
 800b2dc:	f7fe fab5 	bl	800984a <vListInitialise>
=======
 800c1ba:	480c      	ldr	r0, [pc, #48]	; (800c1ec <prvInitialiseTaskLists+0x70>)
 800c1bc:	f7fe fa18 	bl	800a5f0 <vListInitialise>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800b2e0:	480b      	ldr	r0, [pc, #44]	; (800b310 <prvInitialiseTaskLists+0x74>)
 800b2e2:	f7fe fab2 	bl	800984a <vListInitialise>
=======
 800c1c0:	480b      	ldr	r0, [pc, #44]	; (800c1f0 <prvInitialiseTaskLists+0x74>)
 800c1c2:	f7fe fa15 	bl	800a5f0 <vListInitialise>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800b2e6:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <prvInitialiseTaskLists+0x78>)
 800b2e8:	4a05      	ldr	r2, [pc, #20]	; (800b300 <prvInitialiseTaskLists+0x64>)
 800b2ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2ec:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <prvInitialiseTaskLists+0x7c>)
 800b2ee:	4a05      	ldr	r2, [pc, #20]	; (800b304 <prvInitialiseTaskLists+0x68>)
 800b2f0:	601a      	str	r2, [r3, #0]
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000e64 	.word	0x20000e64
 800b300:	200012c4 	.word	0x200012c4
 800b304:	200012d8 	.word	0x200012d8
 800b308:	200012f4 	.word	0x200012f4
 800b30c:	20001308 	.word	0x20001308
 800b310:	20001320 	.word	0x20001320
 800b314:	200012ec 	.word	0x200012ec
 800b318:	200012f0 	.word	0x200012f0

0800b31c <prvCheckTasksWaitingTermination>:
=======
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <prvInitialiseTaskLists+0x78>)
 800c1c8:	4a05      	ldr	r2, [pc, #20]	; (800c1e0 <prvInitialiseTaskLists+0x64>)
 800c1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <prvInitialiseTaskLists+0x7c>)
 800c1ce:	4a05      	ldr	r2, [pc, #20]	; (800c1e4 <prvInitialiseTaskLists+0x68>)
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000ec8 	.word	0x20000ec8
 800c1e0:	20001328 	.word	0x20001328
 800c1e4:	2000133c 	.word	0x2000133c
 800c1e8:	20001358 	.word	0x20001358
 800c1ec:	2000136c 	.word	0x2000136c
 800c1f0:	20001384 	.word	0x20001384
 800c1f4:	20001350 	.word	0x20001350
 800c1f8:	20001354 	.word	0x20001354

0800c1fc <prvCheckTasksWaitingTermination>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
=======
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800b322:	e019      	b.n	800b358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b324:	f001 f966 	bl	800c5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b328:	4b10      	ldr	r3, [pc, #64]	; (800b36c <prvCheckTasksWaitingTermination+0x50>)
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe fb12 	bl	800995e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <prvCheckTasksWaitingTermination+0x54>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3b01      	subs	r3, #1
 800b340:	4a0b      	ldr	r2, [pc, #44]	; (800b370 <prvCheckTasksWaitingTermination+0x54>)
 800b342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b344:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3b01      	subs	r3, #1
 800b34a:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b34c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b34e:	f001 f981 	bl	800c654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f810 	bl	800b378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <prvCheckTasksWaitingTermination+0x58>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e1      	bne.n	800b324 <prvCheckTasksWaitingTermination+0x8>
=======
 800c202:	e019      	b.n	800c238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c204:	f001 f93e 	bl	800d484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c208:	4b10      	ldr	r3, [pc, #64]	; (800c24c <prvCheckTasksWaitingTermination+0x50>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe fa75 	bl	800a704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c21a:	4b0d      	ldr	r3, [pc, #52]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3b01      	subs	r3, #1
 800c220:	4a0b      	ldr	r2, [pc, #44]	; (800c250 <prvCheckTasksWaitingTermination+0x54>)
 800c222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c224:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3b01      	subs	r3, #1
 800c22a:	4a0a      	ldr	r2, [pc, #40]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c22e:	f001 f959 	bl	800d4e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f810 	bl	800c258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <prvCheckTasksWaitingTermination+0x58>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e1      	bne.n	800c204 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20001308 	.word	0x20001308
 800b370:	20001334 	.word	0x20001334
 800b374:	2000131c 	.word	0x2000131c

0800b378 <prvDeleteTCB>:
=======
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	2000136c 	.word	0x2000136c
 800c250:	20001398 	.word	0x20001398
 800c254:	20001380 	.word	0x20001380

0800c258 <prvDeleteTCB>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
=======
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b386:	2b00      	cmp	r3, #0
 800b388:	d108      	bne.n	800b39c <prvDeleteTCB+0x24>
=======
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c266:	2b00      	cmp	r3, #0
 800c268:	d108      	bne.n	800c27c <prvDeleteTCB+0x24>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	4618      	mov	r0, r3
 800b390:	f001 fb1e 	bl	800c9d0 <vPortFree>
				vPortFree( pxTCB );
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fb1b 	bl	800c9d0 <vPortFree>
=======
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 faf6 	bl	800d860 <vPortFree>
				vPortFree( pxTCB );
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f001 faf3 	bl	800d860 <vPortFree>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800b39a:	e018      	b.n	800b3ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d103      	bne.n	800b3ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fb12 	bl	800c9d0 <vPortFree>
	}
 800b3ac:	e00f      	b.n	800b3ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d00a      	beq.n	800b3ce <prvDeleteTCB+0x56>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	60fb      	str	r3, [r7, #12]
}
 800b3ca:	bf00      	nop
 800b3cc:	e7fe      	b.n	800b3cc <prvDeleteTCB+0x54>
	}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <prvResetNextTaskUnblockTime>:
=======
 800c27a:	e018      	b.n	800c2ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c282:	2b01      	cmp	r3, #1
 800c284:	d103      	bne.n	800c28e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 faea 	bl	800d860 <vPortFree>
	}
 800c28c:	e00f      	b.n	800c2ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c294:	2b02      	cmp	r3, #2
 800c296:	d00a      	beq.n	800c2ae <prvDeleteTCB+0x56>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	60fb      	str	r3, [r7, #12]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <prvDeleteTCB+0x54>
	}
 800c2ae:	bf00      	nop
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <prvResetNextTaskUnblockTime>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3de:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <prvResetNextTaskUnblockTime+0x38>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d104      	bne.n	800b3f2 <prvResetNextTaskUnblockTime+0x1a>
=======
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <prvResetNextTaskUnblockTime+0x38>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d104      	bne.n	800c2d2 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ee:	601a      	str	r2, [r3, #0]
=======
 800c2c8:	4b0a      	ldr	r3, [pc, #40]	; (800c2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ce:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800b3f0:	e008      	b.n	800b404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f2:	4b07      	ldr	r3, [pc, #28]	; (800b410 <prvResetNextTaskUnblockTime+0x38>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	4a04      	ldr	r2, [pc, #16]	; (800b414 <prvResetNextTaskUnblockTime+0x3c>)
 800b402:	6013      	str	r3, [r2, #0]
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	200012ec 	.word	0x200012ec
 800b414:	20001354 	.word	0x20001354

0800b418 <xTaskGetSchedulerState>:
=======
 800c2d0:	e008      	b.n	800c2e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d2:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <prvResetNextTaskUnblockTime+0x38>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4a04      	ldr	r2, [pc, #16]	; (800c2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	20001350 	.word	0x20001350
 800c2f4:	200013b8 	.word	0x200013b8

0800c2f8 <xTaskGetSchedulerState>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b41e:	4b0b      	ldr	r3, [pc, #44]	; (800b44c <xTaskGetSchedulerState+0x34>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b426:	2301      	movs	r3, #1
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	e008      	b.n	800b43e <xTaskGetSchedulerState+0x26>
=======
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	; (800c32c <xTaskGetSchedulerState+0x34>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c306:	2301      	movs	r3, #1
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	e008      	b.n	800c31e <xTaskGetSchedulerState+0x26>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800b42c:	4b08      	ldr	r3, [pc, #32]	; (800b450 <xTaskGetSchedulerState+0x38>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b434:	2302      	movs	r3, #2
 800b436:	607b      	str	r3, [r7, #4]
 800b438:	e001      	b.n	800b43e <xTaskGetSchedulerState+0x26>
=======
 800c30c:	4b08      	ldr	r3, [pc, #32]	; (800c330 <xTaskGetSchedulerState+0x38>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d102      	bne.n	800c31a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c314:	2302      	movs	r3, #2
 800c316:	607b      	str	r3, [r7, #4]
 800c318:	e001      	b.n	800c31e <xTaskGetSchedulerState+0x26>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 800b43a:	2300      	movs	r3, #0
 800b43c:	607b      	str	r3, [r7, #4]
=======
 800c31a:	2300      	movs	r3, #0
 800c31c:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}

		return xReturn;
<<<<<<< HEAD
 800b43e:	687b      	ldr	r3, [r7, #4]
	}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20001340 	.word	0x20001340
 800b450:	2000135c 	.word	0x2000135c

0800b454 <xTaskPriorityInherit>:
=======
 800c31e:	687b      	ldr	r3, [r7, #4]
	}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	200013a4 	.word	0x200013a4
 800c330:	200013c0 	.word	0x200013c0

0800c334 <xTaskPriorityInherit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]
=======
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d051      	beq.n	800b50e <xTaskPriorityInherit+0xba>
=======
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d051      	beq.n	800c3ee <xTaskPriorityInherit+0xba>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46e:	4b2a      	ldr	r3, [pc, #168]	; (800b518 <xTaskPriorityInherit+0xc4>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	429a      	cmp	r2, r3
 800b476:	d241      	bcs.n	800b4fc <xTaskPriorityInherit+0xa8>
=======
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	4b2a      	ldr	r3, [pc, #168]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	429a      	cmp	r2, r3
 800c356:	d241      	bcs.n	800c3dc <xTaskPriorityInherit+0xa8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	db06      	blt.n	800b48e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b480:	4b25      	ldr	r3, [pc, #148]	; (800b518 <xTaskPriorityInherit+0xc4>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	619a      	str	r2, [r3, #24]
=======
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	db06      	blt.n	800c36e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	619a      	str	r2, [r3, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	6959      	ldr	r1, [r3, #20]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	4a1f      	ldr	r2, [pc, #124]	; (800b51c <xTaskPriorityInherit+0xc8>)
 800b4a0:	4413      	add	r3, r2
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	d122      	bne.n	800b4ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fe fa57 	bl	800995e <uxListRemove>
=======
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	6959      	ldr	r1, [r3, #20]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4a1f      	ldr	r2, [pc, #124]	; (800c3fc <xTaskPriorityInherit+0xc8>)
 800c380:	4413      	add	r3, r2
 800c382:	4299      	cmp	r1, r3
 800c384:	d122      	bne.n	800c3cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	3304      	adds	r3, #4
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe f9ba 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800b4b0:	4b19      	ldr	r3, [pc, #100]	; (800b518 <xTaskPriorityInherit+0xc4>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4be:	4b18      	ldr	r3, [pc, #96]	; (800b520 <xTaskPriorityInherit+0xcc>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d903      	bls.n	800b4ce <xTaskPriorityInherit+0x7a>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	4a15      	ldr	r2, [pc, #84]	; (800b520 <xTaskPriorityInherit+0xcc>)
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4a10      	ldr	r2, [pc, #64]	; (800b51c <xTaskPriorityInherit+0xc8>)
 800b4dc:	441a      	add	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f7fe f9dd 	bl	80098a4 <vListInsertEnd>
 800b4ea:	e004      	b.n	800b4f6 <xTaskPriorityInherit+0xa2>
=======
 800c390:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39e:	4b18      	ldr	r3, [pc, #96]	; (800c400 <xTaskPriorityInherit+0xcc>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d903      	bls.n	800c3ae <xTaskPriorityInherit+0x7a>
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	4a15      	ldr	r2, [pc, #84]	; (800c400 <xTaskPriorityInherit+0xcc>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <xTaskPriorityInherit+0xc8>)
 800c3bc:	441a      	add	r2, r3
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f7fe f940 	bl	800a64a <vListInsertEnd>
 800c3ca:	e004      	b.n	800c3d6 <xTaskPriorityInherit+0xa2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <xTaskPriorityInherit+0xc4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
<<<<<<< HEAD
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e008      	b.n	800b50e <xTaskPriorityInherit+0xba>
=======
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e008      	b.n	800c3ee <xTaskPriorityInherit+0xba>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b500:	4b05      	ldr	r3, [pc, #20]	; (800b518 <xTaskPriorityInherit+0xc4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	429a      	cmp	r2, r3
 800b508:	d201      	bcs.n	800b50e <xTaskPriorityInherit+0xba>
=======
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <xTaskPriorityInherit+0xc4>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d201      	bcs.n	800c3ee <xTaskPriorityInherit+0xba>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800b50a:	2301      	movs	r3, #1
 800b50c:	60fb      	str	r3, [r7, #12]
=======
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800b50e:	68fb      	ldr	r3, [r7, #12]
	}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000e60 	.word	0x20000e60
 800b51c:	20000e64 	.word	0x20000e64
 800b520:	2000133c 	.word	0x2000133c

0800b524 <xTaskPriorityDisinherit>:
=======
 800c3ee:	68fb      	ldr	r3, [r7, #12]
	}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000ec4 	.word	0x20000ec4
 800c3fc:	20000ec8 	.word	0x20000ec8
 800c400:	200013a0 	.word	0x200013a0

0800c404 <xTaskPriorityDisinherit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d056      	beq.n	800b5e8 <xTaskPriorityDisinherit+0xc4>
=======
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d056      	beq.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 800b53a:	4b2e      	ldr	r3, [pc, #184]	; (800b5f4 <xTaskPriorityDisinherit+0xd0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	429a      	cmp	r2, r3
 800b542:	d00a      	beq.n	800b55a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	60fb      	str	r3, [r7, #12]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	60bb      	str	r3, [r7, #8]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b57c:	1e5a      	subs	r2, r3, #1
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800c41a:	4b2e      	ldr	r3, [pc, #184]	; (800c4d4 <xTaskPriorityDisinherit+0xd0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00a      	beq.n	800c43a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60bb      	str	r3, [r7, #8]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45c:	1e5a      	subs	r2, r3, #1
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d02c      	beq.n	800b5e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b592:	2b00      	cmp	r3, #0
 800b594:	d128      	bne.n	800b5e8 <xTaskPriorityDisinherit+0xc4>
=======
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d02c      	beq.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c472:	2b00      	cmp	r3, #0
 800c474:	d128      	bne.n	800c4c8 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	3304      	adds	r3, #4
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe f9df 	bl	800995e <uxListRemove>
=======
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	3304      	adds	r3, #4
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe f942 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	; (800b5f8 <xTaskPriorityDisinherit+0xd4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d903      	bls.n	800b5c8 <xTaskPriorityDisinherit+0xa4>
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a0c      	ldr	r2, [pc, #48]	; (800b5f8 <xTaskPriorityDisinherit+0xd4>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a09      	ldr	r2, [pc, #36]	; (800b5fc <xTaskPriorityDisinherit+0xd8>)
 800b5d6:	441a      	add	r2, r3
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7fe f960 	bl	80098a4 <vListInsertEnd>
=======
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c48c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	4b0f      	ldr	r3, [pc, #60]	; (800c4d8 <xTaskPriorityDisinherit+0xd4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d903      	bls.n	800c4a8 <xTaskPriorityDisinherit+0xa4>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a0c      	ldr	r2, [pc, #48]	; (800c4d8 <xTaskPriorityDisinherit+0xd4>)
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4a09      	ldr	r2, [pc, #36]	; (800c4dc <xTaskPriorityDisinherit+0xd8>)
 800c4b6:	441a      	add	r2, r3
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7fe f8c3 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	617b      	str	r3, [r7, #20]
=======
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 800b5e8:	697b      	ldr	r3, [r7, #20]
	}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000e60 	.word	0x20000e60
 800b5f8:	2000133c 	.word	0x2000133c
 800b5fc:	20000e64 	.word	0x20000e64

0800b600 <vTaskPriorityDisinheritAfterTimeout>:
=======
 800c4c8:	697b      	ldr	r3, [r7, #20]
	}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000ec4 	.word	0x20000ec4
 800c4d8:	200013a0 	.word	0x200013a0
 800c4dc:	20000ec8 	.word	0x20000ec8

0800c4e0 <vTaskPriorityDisinheritAfterTimeout>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
<<<<<<< HEAD
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b60e:	2301      	movs	r3, #1
 800b610:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d06a      	beq.n	800b6ee <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d06a      	beq.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
<<<<<<< HEAD
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10a      	bne.n	800b636 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	60fb      	str	r3, [r7, #12]
}
 800b632:	bf00      	nop
 800b634:	e7fe      	b.n	800b634 <vTaskPriorityDisinheritAfterTimeout+0x34>
=======
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	e7fe      	b.n	800c514 <vTaskPriorityDisinheritAfterTimeout+0x34>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
<<<<<<< HEAD
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d902      	bls.n	800b646 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	e002      	b.n	800b64c <vTaskPriorityDisinheritAfterTimeout+0x4c>
=======
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d902      	bls.n	800c526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	61fb      	str	r3, [r7, #28]
 800c524:	e002      	b.n	800c52c <vTaskPriorityDisinheritAfterTimeout+0x4c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
<<<<<<< HEAD
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64a:	61fb      	str	r3, [r7, #28]
=======
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c52a:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
<<<<<<< HEAD
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	69fa      	ldr	r2, [r7, #28]
 800b652:	429a      	cmp	r2, r3
 800b654:	d04b      	beq.n	800b6ee <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d04b      	beq.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
<<<<<<< HEAD
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b65a:	697a      	ldr	r2, [r7, #20]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d146      	bne.n	800b6ee <vTaskPriorityDisinheritAfterTimeout+0xee>
=======
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d146      	bne.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
<<<<<<< HEAD
 800b660:	4b25      	ldr	r3, [pc, #148]	; (800b6f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	429a      	cmp	r2, r3
 800b668:	d10a      	bne.n	800b680 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	60bb      	str	r3, [r7, #8]
}
 800b67c:	bf00      	nop
 800b67e:	e7fe      	b.n	800b67e <vTaskPriorityDisinheritAfterTimeout+0x7e>
=======
 800c540:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	429a      	cmp	r2, r3
 800c548:	d10a      	bne.n	800c560 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	60bb      	str	r3, [r7, #8]
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <vTaskPriorityDisinheritAfterTimeout+0x7e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
<<<<<<< HEAD
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	69fa      	ldr	r2, [r7, #28]
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	69fa      	ldr	r2, [r7, #28]
 800c56a:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	db04      	blt.n	800b69e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	619a      	str	r2, [r3, #24]
=======
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	db04      	blt.n	800c57e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	619a      	str	r2, [r3, #24]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
<<<<<<< HEAD
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	6959      	ldr	r1, [r3, #20]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4a13      	ldr	r2, [pc, #76]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b6ae:	4413      	add	r3, r2
 800b6b0:	4299      	cmp	r1, r3
 800b6b2:	d11c      	bne.n	800b6ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe f950 	bl	800995e <uxListRemove>
=======
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	6959      	ldr	r1, [r3, #20]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4a13      	ldr	r2, [pc, #76]	; (800c5dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c58e:	4413      	add	r3, r2
 800c590:	4299      	cmp	r1, r3
 800c592:	d11c      	bne.n	800c5ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe f8b3 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d903      	bls.n	800b6d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ce:	4a0c      	ldr	r2, [pc, #48]	; (800b700 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a07      	ldr	r2, [pc, #28]	; (800b6fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b6e0:	441a      	add	r2, r3
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7fe f8db 	bl	80098a4 <vListInsertEnd>
=======
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d903      	bls.n	800c5b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ae:	4a0c      	ldr	r2, [pc, #48]	; (800c5e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4a07      	ldr	r2, [pc, #28]	; (800c5dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c5c0:	441a      	add	r2, r3
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7fe f83e 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800b6ee:	bf00      	nop
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000e60 	.word	0x20000e60
 800b6fc:	20000e64 	.word	0x20000e64
 800b700:	2000133c 	.word	0x2000133c

0800b704 <pvTaskIncrementMutexHeldCount>:
=======
 800c5ce:	bf00      	nop
 800c5d0:	3720      	adds	r7, #32
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000ec4 	.word	0x20000ec4
 800c5dc:	20000ec8 	.word	0x20000ec8
 800c5e0:	200013a0 	.word	0x200013a0

0800c5e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f2:	4b07      	ldr	r3, [pc, #28]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <uxTaskResetEventItemValue+0x2c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c600:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c602:	687b      	ldr	r3, [r7, #4]
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20000ec4 	.word	0x20000ec4

0800c614 <pvTaskIncrementMutexHeldCount>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
<<<<<<< HEAD
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b708:	4b07      	ldr	r3, [pc, #28]	; (800b728 <pvTaskIncrementMutexHeldCount+0x24>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d004      	beq.n	800b71a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <pvTaskIncrementMutexHeldCount+0x24>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b716:	3201      	adds	r2, #1
 800b718:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b71a:	4b03      	ldr	r3, [pc, #12]	; (800b728 <pvTaskIncrementMutexHeldCount+0x24>)
 800b71c:	681b      	ldr	r3, [r3, #0]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	20000e60 	.word	0x20000e60

0800b72c <ulTaskNotifyTake>:
=======
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c626:	3201      	adds	r2, #1
 800c628:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c62a:	4b03      	ldr	r3, [pc, #12]	; (800c638 <pvTaskIncrementMutexHeldCount+0x24>)
 800c62c:	681b      	ldr	r3, [r3, #0]
	}
 800c62e:	4618      	mov	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	20000ec4 	.word	0x20000ec4

0800c63c <ulTaskNotifyTake>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b736:	f000 ff5d 	bl	800c5f4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b73a:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b740:	2b00      	cmp	r3, #0
 800b742:	d113      	bne.n	800b76c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b744:	4b1b      	ldr	r3, [pc, #108]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b754:	2101      	movs	r1, #1
 800b756:	6838      	ldr	r0, [r7, #0]
 800b758:	f000 fa1e 	bl	800bb98 <prvAddCurrentTaskToDelayedList>
=======
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c646:	f000 ff1d 	bl	800d484 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c64a:	4b1e      	ldr	r3, [pc, #120]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c650:	2b00      	cmp	r3, #0
 800c652:	d113      	bne.n	800c67c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c654:	4b1b      	ldr	r3, [pc, #108]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c664:	2101      	movs	r1, #1
 800c666:	6838      	ldr	r0, [r7, #0]
 800c668:	f000 f9c4 	bl	800c9f4 <prvAddCurrentTaskToDelayedList>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
<<<<<<< HEAD
 800b75c:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <ulTaskNotifyTake+0x8c>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
=======
 800c66c:	4b16      	ldr	r3, [pc, #88]	; (800c6c8 <ulTaskNotifyTake+0x8c>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800b76c:	f000 ff72 	bl	800c654 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b770:	f000 ff40 	bl	800c5f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00c      	beq.n	800b79c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2200      	movs	r2, #0
 800b78e:	655a      	str	r2, [r3, #84]	; 0x54
 800b790:	e004      	b.n	800b79c <ulTaskNotifyTake+0x70>
=======
 800c67c:	f000 ff32 	bl	800d4e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c680:	f000 ff00 	bl	800d484 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c684:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c68a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00c      	beq.n	800c6ac <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c698:	4b0a      	ldr	r3, [pc, #40]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2200      	movs	r2, #0
 800c69e:	655a      	str	r2, [r3, #84]	; 0x54
 800c6a0:	e004      	b.n	800c6ac <ulTaskNotifyTake+0x70>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
<<<<<<< HEAD
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	3a01      	subs	r2, #1
 800b79a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c6a2:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	3a01      	subs	r2, #1
 800c6aa:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
<<<<<<< HEAD
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <ulTaskNotifyTake+0x88>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b7a6:	f000 ff55 	bl	800c654 <vPortExitCritical>

		return ulReturn;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20000e60 	.word	0x20000e60
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b7ca:	f000 ff13 	bl	800c5f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b7ce:	4b26      	ldr	r3, [pc, #152]	; (800b868 <xTaskNotifyWait+0xac>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d01a      	beq.n	800b812 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b7dc:	4b22      	ldr	r3, [pc, #136]	; (800b868 <xTaskNotifyWait+0xac>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	43d2      	mvns	r2, r2
 800b7e6:	400a      	ands	r2, r1
 800b7e8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b7ea:	4b1f      	ldr	r3, [pc, #124]	; (800b868 <xTaskNotifyWait+0xac>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00b      	beq.n	800b812 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	6838      	ldr	r0, [r7, #0]
 800b7fe:	f000 f9cb 	bl	800bb98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b802:	4b1a      	ldr	r3, [pc, #104]	; (800b86c <xTaskNotifyWait+0xb0>)
 800b804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b812:	f000 ff1f 	bl	800c654 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b816:	f000 feed 	bl	800c5f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b820:	4b11      	ldr	r3, [pc, #68]	; (800b868 <xTaskNotifyWait+0xac>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b82a:	4b0f      	ldr	r3, [pc, #60]	; (800b868 <xTaskNotifyWait+0xac>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b02      	cmp	r3, #2
 800b836:	d002      	beq.n	800b83e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e008      	b.n	800b850 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b83e:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <xTaskNotifyWait+0xac>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	43d2      	mvns	r2, r2
 800b848:	400a      	ands	r2, r1
 800b84a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b850:	4b05      	ldr	r3, [pc, #20]	; (800b868 <xTaskNotifyWait+0xac>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b85a:	f000 fefb 	bl	800c654 <vPortExitCritical>

		return xReturn;
 800b85e:	697b      	ldr	r3, [r7, #20]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20000e60 	.word	0x20000e60
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <xTaskGenericNotify>:
=======
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <ulTaskNotifyTake+0x88>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c6b6:	f000 ff15 	bl	800d4e4 <vPortExitCritical>

		return ulReturn;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
	}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20000ec4 	.word	0x20000ec4
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <xTaskGenericNotify>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
<<<<<<< HEAD
 800b870:	b580      	push	{r7, lr}
 800b872:	b08a      	sub	sp, #40	; 0x28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	603b      	str	r3, [r7, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b880:	2301      	movs	r3, #1
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10a      	bne.n	800b8a0 <xTaskGenericNotify+0x30>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	61bb      	str	r3, [r7, #24]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b8a4:	f000 fea6 	bl	800c5f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b8ae:	6a3b      	ldr	r3, [r7, #32]
 800b8b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b8bc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b8c6:	79fb      	ldrb	r3, [r7, #7]
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d828      	bhi.n	800b91e <xTaskGenericNotify+0xae>
 800b8cc:	a201      	add	r2, pc, #4	; (adr r2, 800b8d4 <xTaskGenericNotify+0x64>)
 800b8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d2:	bf00      	nop
 800b8d4:	0800b93f 	.word	0x0800b93f
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b8f7 	.word	0x0800b8f7
 800b8e0:	0800b903 	.word	0x0800b903
 800b8e4:	0800b90b 	.word	0x0800b90b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	431a      	orrs	r2, r3
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b8f4:	e026      	b.n	800b944 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b900:	e020      	b.n	800b944 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b908:	e01c      	b.n	800b944 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b90a:	7ffb      	ldrb	r3, [r7, #31]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d003      	beq.n	800b918 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	; 0x28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <xTaskGenericNotify+0x30>
	__asm volatile
 800c6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ea:	f383 8811 	msr	BASEPRI, r3
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f3bf 8f4f 	dsb	sy
 800c6f6:	61bb      	str	r3, [r7, #24]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c700:	f000 fec0 	bl	800d484 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c718:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	2202      	movs	r2, #2
 800c71e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	2b04      	cmp	r3, #4
 800c726:	d828      	bhi.n	800c77a <xTaskGenericNotify+0xae>
 800c728:	a201      	add	r2, pc, #4	; (adr r2, 800c730 <xTaskGenericNotify+0x64>)
 800c72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72e:	bf00      	nop
 800c730:	0800c79b 	.word	0x0800c79b
 800c734:	0800c745 	.word	0x0800c745
 800c738:	0800c753 	.word	0x0800c753
 800c73c:	0800c75f 	.word	0x0800c75f
 800c740:	0800c767 	.word	0x0800c767
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	431a      	orrs	r2, r3
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c750:	e026      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c75c:	e020      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c764:	e01c      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c766:	7ffb      	ldrb	r3, [r7, #31]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d003      	beq.n	800c774 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 800b916:	e015      	b.n	800b944 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800b918:	2300      	movs	r3, #0
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b91c:	e012      	b.n	800b944 <xTaskGenericNotify+0xd4>
=======
 800c772:	e015      	b.n	800c7a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c774:	2300      	movs	r3, #0
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c778:	e012      	b.n	800c7a0 <xTaskGenericNotify+0xd4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d00c      	beq.n	800b942 <xTaskGenericNotify+0xd2>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	617b      	str	r3, [r7, #20]
}
 800b93a:	bf00      	nop
 800b93c:	e7fe      	b.n	800b93c <xTaskGenericNotify+0xcc>
					break;
 800b93e:	bf00      	nop
 800b940:	e000      	b.n	800b944 <xTaskGenericNotify+0xd4>

					break;
 800b942:	bf00      	nop
=======
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c782:	d00c      	beq.n	800c79e <xTaskGenericNotify+0xd2>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	617b      	str	r3, [r7, #20]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <xTaskGenericNotify+0xcc>
					break;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <xTaskGenericNotify+0xd4>

					break;
 800c79e:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800b944:	7ffb      	ldrb	r3, [r7, #31]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d13a      	bne.n	800b9c0 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe f805 	bl	800995e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4b1d      	ldr	r3, [pc, #116]	; (800b9d0 <xTaskGenericNotify+0x160>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d903      	bls.n	800b968 <xTaskGenericNotify+0xf8>
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b964:	4a1a      	ldr	r2, [pc, #104]	; (800b9d0 <xTaskGenericNotify+0x160>)
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4a17      	ldr	r2, [pc, #92]	; (800b9d4 <xTaskGenericNotify+0x164>)
 800b976:	441a      	add	r2, r3
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fd ff90 	bl	80098a4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <xTaskGenericNotify+0x132>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	613b      	str	r3, [r7, #16]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xTaskGenericNotify+0x130>
=======
 800c7a0:	7ffb      	ldrb	r3, [r7, #31]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d13a      	bne.n	800c81c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd ffaa 	bl	800a704 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <xTaskGenericNotify+0x160>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d903      	bls.n	800c7c4 <xTaskGenericNotify+0xf8>
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	4a1a      	ldr	r2, [pc, #104]	; (800c82c <xTaskGenericNotify+0x160>)
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4a17      	ldr	r2, [pc, #92]	; (800c830 <xTaskGenericNotify+0x164>)
 800c7d2:	441a      	add	r2, r3
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fd ff35 	bl	800a64a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <xTaskGenericNotify+0x132>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	613b      	str	r3, [r7, #16]
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xTaskGenericNotify+0x130>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <xTaskGenericNotify+0x168>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d907      	bls.n	800b9c0 <xTaskGenericNotify+0x150>
=======
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <xTaskGenericNotify+0x168>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d907      	bls.n	800c81c <xTaskGenericNotify+0x150>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <xTaskGenericNotify+0x16c>)
 800b9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
=======
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <xTaskGenericNotify+0x16c>)
 800c80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800b9c0:	f000 fe48 	bl	800c654 <vPortExitCritical>

		return xReturn;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3728      	adds	r7, #40	; 0x28
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	2000133c 	.word	0x2000133c
 800b9d4:	20000e64 	.word	0x20000e64
 800b9d8:	20000e60 	.word	0x20000e60
 800b9dc:	e000ed04 	.word	0xe000ed04

0800b9e0 <xTaskGenericNotifyFromISR>:
=======
 800c81c:	f000 fe62 	bl	800d4e4 <vPortExitCritical>

		return xReturn;
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c822:	4618      	mov	r0, r3
 800c824:	3728      	adds	r7, #40	; 0x28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200013a0 	.word	0x200013a0
 800c830:	20000ec8 	.word	0x20000ec8
 800c834:	20000ec4 	.word	0x20000ec4
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <xTaskGenericNotifyFromISR>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
<<<<<<< HEAD
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08e      	sub	sp, #56	; 0x38
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <xTaskGenericNotifyFromISR+0x2e>
=======
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08e      	sub	sp, #56	; 0x38
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c84c:	2301      	movs	r3, #1
 800c84e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <xTaskGenericNotifyFromISR+0x2e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 800ba10:	f000 fed2 	bl	800c7b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ba18:	f3ef 8211 	mrs	r2, BASEPRI
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	623a      	str	r2, [r7, #32]
 800ba2e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ba30:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba32:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ba48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b04      	cmp	r3, #4
 800ba58:	d828      	bhi.n	800baac <xTaskGenericNotifyFromISR+0xcc>
 800ba5a:	a201      	add	r2, pc, #4	; (adr r2, 800ba60 <xTaskGenericNotifyFromISR+0x80>)
 800ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba60:	0800bacd 	.word	0x0800bacd
 800ba64:	0800ba75 	.word	0x0800ba75
 800ba68:	0800ba83 	.word	0x0800ba83
 800ba6c:	0800ba8f 	.word	0x0800ba8f
 800ba70:	0800ba97 	.word	0x0800ba97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ba80:	e027      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ba8c:	e021      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800ba94:	e01d      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ba96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d003      	beq.n	800baa6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800c86c:	f000 feec 	bl	800d648 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c874:	f3ef 8211 	mrs	r2, BASEPRI
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	623a      	str	r2, [r7, #32]
 800c88a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c88c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	d828      	bhi.n	800c908 <xTaskGenericNotifyFromISR+0xcc>
 800c8b6:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <xTaskGenericNotifyFromISR+0x80>)
 800c8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8bc:	0800c929 	.word	0x0800c929
 800c8c0:	0800c8d1 	.word	0x0800c8d1
 800c8c4:	0800c8df 	.word	0x0800c8df
 800c8c8:	0800c8eb 	.word	0x0800c8eb
 800c8cc:	0800c8f3 	.word	0x0800c8f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8dc:	e027      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8e8:	e021      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c8f0:	e01d      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c8f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d003      	beq.n	800c902 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
<<<<<<< HEAD
 800baa4:	e015      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800baaa:	e012      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>
=======
 800c900:	e015      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c902:	2300      	movs	r3, #0
 800c904:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c906:	e012      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
<<<<<<< HEAD
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab4:	d00c      	beq.n	800bad0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	61bb      	str	r3, [r7, #24]
}
 800bac8:	bf00      	nop
 800baca:	e7fe      	b.n	800baca <xTaskGenericNotifyFromISR+0xea>
					break;
 800bacc:	bf00      	nop
 800bace:	e000      	b.n	800bad2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800bad0:	bf00      	nop
=======
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d00c      	beq.n	800c92c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	61bb      	str	r3, [r7, #24]
}
 800c924:	bf00      	nop
 800c926:	e7fe      	b.n	800c926 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c928:	bf00      	nop
 800c92a:	e000      	b.n	800c92e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c92c:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
<<<<<<< HEAD
 800bad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d146      	bne.n	800bb68 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617b      	str	r3, [r7, #20]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf8:	4b21      	ldr	r3, [pc, #132]	; (800bb80 <xTaskGenericNotifyFromISR+0x1a0>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d11d      	bne.n	800bb3c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	3304      	adds	r3, #4
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fd ff2a 	bl	800995e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0e:	4b1d      	ldr	r3, [pc, #116]	; (800bb84 <xTaskGenericNotifyFromISR+0x1a4>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d903      	bls.n	800bb1e <xTaskGenericNotifyFromISR+0x13e>
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1a:	4a1a      	ldr	r2, [pc, #104]	; (800bb84 <xTaskGenericNotifyFromISR+0x1a4>)
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4a17      	ldr	r2, [pc, #92]	; (800bb88 <xTaskGenericNotifyFromISR+0x1a8>)
 800bb2c:	441a      	add	r2, r3
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	3304      	adds	r3, #4
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7fd feb5 	bl	80098a4 <vListInsertEnd>
 800bb3a:	e005      	b.n	800bb48 <xTaskGenericNotifyFromISR+0x168>
=======
 800c92e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c932:	2b01      	cmp	r3, #1
 800c934:	d146      	bne.n	800c9c4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	617b      	str	r3, [r7, #20]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c954:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <xTaskGenericNotifyFromISR+0x1a0>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d11d      	bne.n	800c998 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	3304      	adds	r3, #4
 800c960:	4618      	mov	r0, r3
 800c962:	f7fd fecf 	bl	800a704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96a:	4b1d      	ldr	r3, [pc, #116]	; (800c9e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d903      	bls.n	800c97a <xTaskGenericNotifyFromISR+0x13e>
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c976:	4a1a      	ldr	r2, [pc, #104]	; (800c9e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c978:	6013      	str	r3, [r2, #0]
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <xTaskGenericNotifyFromISR+0x1a8>)
 800c988:	441a      	add	r2, r3
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	3304      	adds	r3, #4
 800c98e:	4619      	mov	r1, r3
 800c990:	4610      	mov	r0, r2
 800c992:	f7fd fe5a 	bl	800a64a <vListInsertEnd>
 800c996:	e005      	b.n	800c9a4 <xTaskGenericNotifyFromISR+0x168>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	3318      	adds	r3, #24
 800bb40:	4619      	mov	r1, r3
 800bb42:	4812      	ldr	r0, [pc, #72]	; (800bb8c <xTaskGenericNotifyFromISR+0x1ac>)
 800bb44:	f7fd feae 	bl	80098a4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <xTaskGenericNotifyFromISR+0x1b0>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d908      	bls.n	800bb68 <xTaskGenericNotifyFromISR+0x188>
=======
 800c998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99a:	3318      	adds	r3, #24
 800c99c:	4619      	mov	r1, r3
 800c99e:	4812      	ldr	r0, [pc, #72]	; (800c9e8 <xTaskGenericNotifyFromISR+0x1ac>)
 800c9a0:	f7fd fe53 	bl	800a64a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a8:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <xTaskGenericNotifyFromISR+0x1b0>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d908      	bls.n	800c9c4 <xTaskGenericNotifyFromISR+0x188>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 800bb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb5e:	2201      	movs	r2, #1
 800bb60:	601a      	str	r2, [r3, #0]
=======
 800c9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
<<<<<<< HEAD
 800bb62:	4b0c      	ldr	r3, [pc, #48]	; (800bb94 <xTaskGenericNotifyFromISR+0x1b4>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	f383 8811 	msr	BASEPRI, r3
}
 800bb72:	bf00      	nop
=======
 800c9be:	4b0c      	ldr	r3, [pc, #48]	; (800c9f0 <xTaskGenericNotifyFromISR+0x1b4>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
<<<<<<< HEAD
 800bb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3738      	adds	r7, #56	; 0x38
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000135c 	.word	0x2000135c
 800bb84:	2000133c 	.word	0x2000133c
 800bb88:	20000e64 	.word	0x20000e64
 800bb8c:	200012f4 	.word	0x200012f4
 800bb90:	20000e60 	.word	0x20000e60
 800bb94:	20001348 	.word	0x20001348

0800bb98 <prvAddCurrentTaskToDelayedList>:
=======
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3738      	adds	r7, #56	; 0x38
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200013c0 	.word	0x200013c0
 800c9e0:	200013a0 	.word	0x200013a0
 800c9e4:	20000ec8 	.word	0x20000ec8
 800c9e8:	20001358 	.word	0x20001358
 800c9ec:	20000ec4 	.word	0x20000ec4
 800c9f0:	200013ac 	.word	0x200013ac

0800c9f4 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bba2:	4b21      	ldr	r3, [pc, #132]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x90>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60fb      	str	r3, [r7, #12]
=======
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9fe:	4b21      	ldr	r3, [pc, #132]	; (800ca84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800bba8:	4b20      	ldr	r3, [pc, #128]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3304      	adds	r3, #4
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fd fed5 	bl	800995e <uxListRemove>
=======
 800ca04:	4b20      	ldr	r3, [pc, #128]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fd fe7a 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d10a      	bne.n	800bbd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d007      	beq.n	800bbd2 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d10a      	bne.n	800ca2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d007      	beq.n	800ca2e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800bbc2:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4819      	ldr	r0, [pc, #100]	; (800bc30 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbcc:	f7fd fe6a 	bl	80098a4 <vListInsertEnd>
=======
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4619      	mov	r1, r3
 800ca26:	4819      	ldr	r0, [pc, #100]	; (800ca8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ca28:	f7fd fe0f 	bl	800a64a <vListInsertEnd>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800bbd0:	e026      	b.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbda:	4b14      	ldr	r3, [pc, #80]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d209      	bcs.n	800bbfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	f7fd fe78 	bl	80098ec <vListInsert>
}
 800bbfc:	e010      	b.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbfe:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3304      	adds	r3, #4
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fd fe6e 	bl	80098ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68ba      	ldr	r2, [r7, #8]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d202      	bcs.n	800bc20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc1a:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6013      	str	r3, [r2, #0]
}
 800bc20:	bf00      	nop
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	20001338 	.word	0x20001338
 800bc2c:	20000e60 	.word	0x20000e60
 800bc30:	20001320 	.word	0x20001320
 800bc34:	200012f0 	.word	0x200012f0
 800bc38:	200012ec 	.word	0x200012ec
 800bc3c:	20001354 	.word	0x20001354

0800bc40 <xTimerCreateTimerTask>:
=======
 800ca2c:	e026      	b.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4413      	add	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d209      	bcs.n	800ca5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca46:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f7fd fe1d 	bl	800a692 <vListInsert>
}
 800ca58:	e010      	b.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca5a:	4b0e      	ldr	r3, [pc, #56]	; (800ca94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	4b0a      	ldr	r3, [pc, #40]	; (800ca88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3304      	adds	r3, #4
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f7fd fe13 	bl	800a692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d202      	bcs.n	800ca7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ca76:	4a08      	ldr	r2, [pc, #32]	; (800ca98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	6013      	str	r3, [r2, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	2000139c 	.word	0x2000139c
 800ca88:	20000ec4 	.word	0x20000ec4
 800ca8c:	20001384 	.word	0x20001384
 800ca90:	20001354 	.word	0x20001354
 800ca94:	20001350 	.word	0x20001350
 800ca98:	200013b8 	.word	0x200013b8

0800ca9c <xTimerCreateTimerTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08a      	sub	sp, #40	; 0x28
 800bc44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
=======
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	; 0x28
 800caa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800bc4a:	f000 fb63 	bl	800c314 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc4e:	4b1c      	ldr	r3, [pc, #112]	; (800bcc0 <xTimerCreateTimerTask+0x80>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d021      	beq.n	800bc9a <xTimerCreateTimerTask+0x5a>
=======
 800caa6:	f000 fb63 	bl	800d170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800caaa:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <xTimerCreateTimerTask+0x80>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d021      	beq.n	800caf6 <xTimerCreateTimerTask+0x5a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800bc56:	2300      	movs	r3, #0
 800bc58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc5e:	1d3a      	adds	r2, r7, #4
 800bc60:	f107 0108 	add.w	r1, r7, #8
 800bc64:	f107 030c 	add.w	r3, r7, #12
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fd fd83 	bl	8009774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	9202      	str	r2, [sp, #8]
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	2302      	movs	r3, #2
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	460a      	mov	r2, r1
 800bc80:	4910      	ldr	r1, [pc, #64]	; (800bcc4 <xTimerCreateTimerTask+0x84>)
 800bc82:	4811      	ldr	r0, [pc, #68]	; (800bcc8 <xTimerCreateTimerTask+0x88>)
 800bc84:	f7fe fd98 	bl	800a7b8 <xTaskCreateStatic>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	4a10      	ldr	r2, [pc, #64]	; (800bccc <xTimerCreateTimerTask+0x8c>)
 800bc8c:	6013      	str	r3, [r2, #0]
=======
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800caba:	1d3a      	adds	r2, r7, #4
 800cabc:	f107 0108 	add.w	r1, r7, #8
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fd fb8b 	bl	800a1e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800caca:	6879      	ldr	r1, [r7, #4]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	9202      	str	r2, [sp, #8]
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	2302      	movs	r3, #2
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	2300      	movs	r3, #0
 800cada:	460a      	mov	r2, r1
 800cadc:	4910      	ldr	r1, [pc, #64]	; (800cb20 <xTimerCreateTimerTask+0x84>)
 800cade:	4811      	ldr	r0, [pc, #68]	; (800cb24 <xTimerCreateTimerTask+0x88>)
 800cae0:	f7fe fd3c 	bl	800b55c <xTaskCreateStatic>
 800cae4:	4603      	mov	r3, r0
 800cae6:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <xTimerCreateTimerTask+0x8c>)
 800cae8:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <xTimerCreateTimerTask+0x8c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc96:	2301      	movs	r3, #1
 800bc98:	617b      	str	r3, [r7, #20]
=======
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <xTimerCreateTimerTask+0x8c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800caf2:	2301      	movs	r3, #1
 800caf4:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	613b      	str	r3, [r7, #16]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcb6:	697b      	ldr	r3, [r7, #20]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20001390 	.word	0x20001390
 800bcc4:	0800e778 	.word	0x0800e778
 800bcc8:	0800bebd 	.word	0x0800bebd
 800bccc:	20001394 	.word	0x20001394

0800bcd0 <xTimerCreate>:
=======
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	613b      	str	r3, [r7, #16]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cb12:	697b      	ldr	r3, [r7, #20]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	200013f4 	.word	0x200013f4
 800cb20:	0800f8dc 	.word	0x0800f8dc
 800cb24:	0800cd19 	.word	0x0800cd19
 800cb28:	200013f8 	.word	0x200013f8

0800cb2c <xTimerCreate>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
<<<<<<< HEAD
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bcde:	202c      	movs	r0, #44	; 0x2c
 800bce0:	f000 fdaa 	bl	800c838 <pvPortMalloc>
 800bce4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00d      	beq.n	800bd08 <xTimerCreate+0x38>
=======
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b088      	sub	sp, #32
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
 800cb38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cb3a:	202c      	movs	r0, #44	; 0x2c
 800cb3c:	f000 fdc4 	bl	800d6c8 <pvPortMalloc>
 800cb40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00d      	beq.n	800cb64 <xTimerCreate+0x38>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
<<<<<<< HEAD
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	9301      	str	r3, [sp, #4]
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 f805 	bl	800bd12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bd08:	697b      	ldr	r3, [r7, #20]
	}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <prvInitialiseNewTimer>:
=======
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 f805 	bl	800cb6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cb64:	697b      	ldr	r3, [r7, #20]
	}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <prvInitialiseNewTimer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
<<<<<<< HEAD
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
 800bd1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	617b      	str	r3, [r7, #20]
}
 800bd38:	bf00      	nop
 800bd3a:	e7fe      	b.n	800bd3a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d01e      	beq.n	800bd80 <prvInitialiseNewTimer+0x6e>
=======
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b086      	sub	sp, #24
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	607a      	str	r2, [r7, #4]
 800cb7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	617b      	str	r3, [r7, #20]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01e      	beq.n	800cbdc <prvInitialiseNewTimer+0x6e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
<<<<<<< HEAD
 800bd42:	f000 fae7 	bl	800c314 <prvCheckForValidListAndQueue>
=======
 800cb9e:	f000 fae7 	bl	800d170 <prvCheckForValidListAndQueue>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
<<<<<<< HEAD
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	6a3a      	ldr	r2, [r7, #32]
 800bd5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	3304      	adds	r3, #4
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fd fd91 	bl	800988a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d008      	beq.n	800bd80 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd74:	f043 0304 	orr.w	r3, r3, #4
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	6a3a      	ldr	r2, [r7, #32]
 800cbb8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd fd36 	bl	800a630 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d008      	beq.n	800cbdc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbd0:	f043 0304 	orr.w	r3, r3, #4
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
<<<<<<< HEAD
 800bd80:	bf00      	nop
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <xTimerGenericCommand>:
=======
 800cbdc:	bf00      	nop
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <xTimerGenericCommand>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08a      	sub	sp, #40	; 0x28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
 800bd94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd96:	2300      	movs	r3, #0
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	623b      	str	r3, [r7, #32]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xTimerGenericCommand+0x2c>
=======
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08a      	sub	sp, #40	; 0x28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	623b      	str	r3, [r7, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xTimerGenericCommand+0x2c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 800bdb6:	4b1a      	ldr	r3, [pc, #104]	; (800be20 <xTimerGenericCommand+0x98>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d02a      	beq.n	800be14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	dc18      	bgt.n	800be02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdd0:	f7ff fb22 	bl	800b418 <xTaskGetSchedulerState>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d109      	bne.n	800bdee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdda:	4b11      	ldr	r3, [pc, #68]	; (800be20 <xTimerGenericCommand+0x98>)
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	f107 0110 	add.w	r1, r7, #16
 800bde2:	2300      	movs	r3, #0
 800bde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde6:	f7fd ff8d 	bl	8009d04 <xQueueGenericSend>
 800bdea:	6278      	str	r0, [r7, #36]	; 0x24
 800bdec:	e012      	b.n	800be14 <xTimerGenericCommand+0x8c>
=======
 800cc12:	4b1a      	ldr	r3, [pc, #104]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d02a      	beq.n	800cc70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b05      	cmp	r3, #5
 800cc2a:	dc18      	bgt.n	800cc5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc2c:	f7ff fb64 	bl	800c2f8 <xTaskGetSchedulerState>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d109      	bne.n	800cc4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc36:	4b11      	ldr	r3, [pc, #68]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	f107 0110 	add.w	r1, r7, #16
 800cc3e:	2300      	movs	r3, #0
 800cc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc42:	f7fd ff31 	bl	800aaa8 <xQueueGenericSend>
 800cc46:	6278      	str	r0, [r7, #36]	; 0x24
 800cc48:	e012      	b.n	800cc70 <xTimerGenericCommand+0x8c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 800bdee:	4b0c      	ldr	r3, [pc, #48]	; (800be20 <xTimerGenericCommand+0x98>)
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f107 0110 	add.w	r1, r7, #16
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f7fd ff83 	bl	8009d04 <xQueueGenericSend>
 800bdfe:	6278      	str	r0, [r7, #36]	; 0x24
 800be00:	e008      	b.n	800be14 <xTimerGenericCommand+0x8c>
=======
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f107 0110 	add.w	r1, r7, #16
 800cc52:	2300      	movs	r3, #0
 800cc54:	2200      	movs	r2, #0
 800cc56:	f7fd ff27 	bl	800aaa8 <xQueueGenericSend>
 800cc5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cc5c:	e008      	b.n	800cc70 <xTimerGenericCommand+0x8c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <xTimerGenericCommand+0x98>)
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	f107 0110 	add.w	r1, r7, #16
 800be0a:	2300      	movs	r3, #0
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	f7fe f877 	bl	8009f00 <xQueueGenericSendFromISR>
 800be12:	6278      	str	r0, [r7, #36]	; 0x24
=======
 800cc5e:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <xTimerGenericCommand+0x98>)
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f107 0110 	add.w	r1, r7, #16
 800cc66:	2300      	movs	r3, #0
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	f7fe f81b 	bl	800aca4 <xQueueGenericSendFromISR>
 800cc6e:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be16:	4618      	mov	r0, r3
 800be18:	3728      	adds	r7, #40	; 0x28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20001390 	.word	0x20001390

0800be24 <prvProcessExpiredTimer>:
=======
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3728      	adds	r7, #40	; 0x28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	200013f4 	.word	0x200013f4

0800cc80 <prvProcessExpiredTimer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af02      	add	r7, sp, #8
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be2e:	4b22      	ldr	r3, [pc, #136]	; (800beb8 <prvProcessExpiredTimer+0x94>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	617b      	str	r3, [r7, #20]
=======
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8a:	4b22      	ldr	r3, [pc, #136]	; (800cd14 <prvProcessExpiredTimer+0x94>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	3304      	adds	r3, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fd fd8e 	bl	800995e <uxListRemove>
=======
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	3304      	adds	r3, #4
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fd fd33 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d022      	beq.n	800be96 <prvProcessExpiredTimer+0x72>
=======
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d022      	beq.n	800ccf2 <prvProcessExpiredTimer+0x72>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	699a      	ldr	r2, [r3, #24]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	18d1      	adds	r1, r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	6978      	ldr	r0, [r7, #20]
 800be5e:	f000 f8d1 	bl	800c004 <prvInsertTimerInActiveList>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01f      	beq.n	800bea8 <prvProcessExpiredTimer+0x84>
=======
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	699a      	ldr	r2, [r3, #24]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	18d1      	adds	r1, r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	6978      	ldr	r0, [r7, #20]
 800ccba:	f000 f8d1 	bl	800ce60 <prvInsertTimerInActiveList>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d01f      	beq.n	800cd04 <prvProcessExpiredTimer+0x84>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800be68:	2300      	movs	r3, #0
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2300      	movs	r3, #0
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	2100      	movs	r1, #0
 800be72:	6978      	ldr	r0, [r7, #20]
 800be74:	f7ff ff88 	bl	800bd88 <xTimerGenericCommand>
 800be78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d113      	bne.n	800bea8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	60fb      	str	r3, [r7, #12]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <prvProcessExpiredTimer+0x70>
=======
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	2100      	movs	r1, #0
 800ccce:	6978      	ldr	r0, [r7, #20]
 800ccd0:	f7ff ff88 	bl	800cbe4 <xTimerGenericCommand>
 800ccd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d113      	bne.n	800cd04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	60fb      	str	r3, [r7, #12]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <prvProcessExpiredTimer+0x70>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be9c:	f023 0301 	bic.w	r3, r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccf8:	f023 0301 	bic.w	r3, r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	6978      	ldr	r0, [r7, #20]
 800beae:	4798      	blx	r3
}
 800beb0:	bf00      	nop
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	20001388 	.word	0x20001388

0800bebc <prvTimerTask>:
=======
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	6978      	ldr	r0, [r7, #20]
 800cd0a:	4798      	blx	r3
}
 800cd0c:	bf00      	nop
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	200013ec 	.word	0x200013ec

0800cd18 <prvTimerTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
=======
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 800bec4:	f107 0308 	add.w	r3, r7, #8
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 f857 	bl	800bf7c <prvGetNextExpireTime>
 800bece:	60f8      	str	r0, [r7, #12]
=======
 800cd20:	f107 0308 	add.w	r3, r7, #8
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f857 	bl	800cdd8 <prvGetNextExpireTime>
 800cd2a:	60f8      	str	r0, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	4619      	mov	r1, r3
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f803 	bl	800bee0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beda:	f000 f8d5 	bl	800c088 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bede:	e7f1      	b.n	800bec4 <prvTimerTask+0x8>

0800bee0 <prvProcessTimerOrBlockTask>:
=======
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 f803 	bl	800cd3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd36:	f000 f8d5 	bl	800cee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd3a:	e7f1      	b.n	800cd20 <prvTimerTask+0x8>

0800cd3c <prvProcessTimerOrBlockTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
=======
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 800beea:	f7fe fea1 	bl	800ac30 <vTaskSuspendAll>
=======
 800cd46:	f7fe fe45 	bl	800b9d4 <vTaskSuspendAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f866 	bl	800bfc4 <prvSampleTimeNow>
 800bef8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d130      	bne.n	800bf62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <prvProcessTimerOrBlockTask+0x3c>
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d806      	bhi.n	800bf1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf0e:	f7fe fe9d 	bl	800ac4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf12:	68f9      	ldr	r1, [r7, #12]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ff85 	bl	800be24 <prvProcessExpiredTimer>
=======
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f866 	bl	800ce20 <prvSampleTimeNow>
 800cd54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d130      	bne.n	800cdbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <prvProcessTimerOrBlockTask+0x3c>
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d806      	bhi.n	800cd78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd6a:	f7fe fe41 	bl	800b9f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd6e:	68f9      	ldr	r1, [r7, #12]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff ff85 	bl	800cc80 <prvProcessExpiredTimer>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 800bf1a:	e024      	b.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf22:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <prvProcessTimerOrBlockTask+0x90>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <prvProcessTimerOrBlockTask+0x50>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <prvProcessTimerOrBlockTask+0x52>
 800bf30:	2300      	movs	r3, #0
 800bf32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf34:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <prvProcessTimerOrBlockTask+0x94>)
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	683a      	ldr	r2, [r7, #0]
 800bf40:	4619      	mov	r1, r3
 800bf42:	f7fe fc05 	bl	800a750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf46:	f7fe fe81 	bl	800ac4c <xTaskResumeAll>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf50:	4b09      	ldr	r3, [pc, #36]	; (800bf78 <prvProcessTimerOrBlockTask+0x98>)
 800bf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	f3bf 8f6f 	isb	sy
}
 800bf60:	e001      	b.n	800bf66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf62:	f7fe fe73 	bl	800ac4c <xTaskResumeAll>
}
 800bf66:	bf00      	nop
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	2000138c 	.word	0x2000138c
 800bf74:	20001390 	.word	0x20001390
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <prvGetNextExpireTime>:
=======
 800cd76:	e024      	b.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d008      	beq.n	800cd90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd7e:	4b13      	ldr	r3, [pc, #76]	; (800cdcc <prvProcessTimerOrBlockTask+0x90>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <prvProcessTimerOrBlockTask+0x50>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e000      	b.n	800cd8e <prvProcessTimerOrBlockTask+0x52>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd90:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <prvProcessTimerOrBlockTask+0x94>)
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f7fe fba9 	bl	800b4f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cda2:	f7fe fe25 	bl	800b9f0 <xTaskResumeAll>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10a      	bne.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <prvProcessTimerOrBlockTask+0x98>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	f3bf 8f4f 	dsb	sy
 800cdb8:	f3bf 8f6f 	isb	sy
}
 800cdbc:	e001      	b.n	800cdc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdbe:	f7fe fe17 	bl	800b9f0 <xTaskResumeAll>
}
 800cdc2:	bf00      	nop
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	200013f0 	.word	0x200013f0
 800cdd0:	200013f4 	.word	0x200013f4
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <prvGetNextExpireTime>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
=======
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 800bf84:	4b0e      	ldr	r3, [pc, #56]	; (800bfc0 <prvGetNextExpireTime+0x44>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <prvGetNextExpireTime+0x16>
 800bf8e:	2201      	movs	r2, #1
 800bf90:	e000      	b.n	800bf94 <prvGetNextExpireTime+0x18>
 800bf92:	2200      	movs	r2, #0
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d105      	bne.n	800bfac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <prvGetNextExpireTime+0x44>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e001      	b.n	800bfb0 <prvGetNextExpireTime+0x34>
=======
 800cde0:	4b0e      	ldr	r3, [pc, #56]	; (800ce1c <prvGetNextExpireTime+0x44>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <prvGetNextExpireTime+0x16>
 800cdea:	2201      	movs	r2, #1
 800cdec:	e000      	b.n	800cdf0 <prvGetNextExpireTime+0x18>
 800cdee:	2200      	movs	r2, #0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d105      	bne.n	800ce08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdfc:	4b07      	ldr	r3, [pc, #28]	; (800ce1c <prvGetNextExpireTime+0x44>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68db      	ldr	r3, [r3, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e001      	b.n	800ce0c <prvGetNextExpireTime+0x34>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20001388 	.word	0x20001388

0800bfc4 <prvSampleTimeNow>:
=======
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	200013ec 	.word	0x200013ec

0800ce20 <prvSampleTimeNow>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
=======
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 800bfcc:	f7fe fedc 	bl	800ad88 <xTaskGetTickCount>
 800bfd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfd2:	4b0b      	ldr	r3, [pc, #44]	; (800c000 <prvSampleTimeNow+0x3c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d205      	bcs.n	800bfe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfdc:	f000 f936 	bl	800c24c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	e002      	b.n	800bfee <prvSampleTimeNow+0x2a>
=======
 800ce28:	f7fe fe80 	bl	800bb2c <xTaskGetTickCount>
 800ce2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <prvSampleTimeNow+0x3c>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d205      	bcs.n	800ce44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce38:	f000 f936 	bl	800d0a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	e002      	b.n	800ce4a <prvSampleTimeNow+0x2a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfee:	4a04      	ldr	r2, [pc, #16]	; (800c000 <prvSampleTimeNow+0x3c>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bff4:	68fb      	ldr	r3, [r7, #12]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20001398 	.word	0x20001398

0800c004 <prvInsertTimerInActiveList>:
=======
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce4a:	4a04      	ldr	r2, [pc, #16]	; (800ce5c <prvSampleTimeNow+0x3c>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce50:	68fb      	ldr	r3, [r7, #12]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200013fc 	.word	0x200013fc

0800ce60 <prvInsertTimerInActiveList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d812      	bhi.n	800c050 <prvInsertTimerInActiveList+0x4c>
=======
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d812      	bhi.n	800ceac <prvInsertTimerInActiveList+0x4c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	429a      	cmp	r2, r3
 800c036:	d302      	bcc.n	800c03e <prvInsertTimerInActiveList+0x3a>
=======
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	1ad2      	subs	r2, r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d302      	bcc.n	800ce9a <prvInsertTimerInActiveList+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800c038:	2301      	movs	r3, #1
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	e01b      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
=======
 800ce94:	2301      	movs	r3, #1
 800ce96:	617b      	str	r3, [r7, #20]
 800ce98:	e01b      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800c03e:	4b10      	ldr	r3, [pc, #64]	; (800c080 <prvInsertTimerInActiveList+0x7c>)
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3304      	adds	r3, #4
 800c046:	4619      	mov	r1, r3
 800c048:	4610      	mov	r0, r2
 800c04a:	f7fd fc4f 	bl	80098ec <vListInsert>
 800c04e:	e012      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
=======
 800ce9a:	4b10      	ldr	r3, [pc, #64]	; (800cedc <prvInsertTimerInActiveList+0x7c>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	3304      	adds	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f7fd fbf4 	bl	800a692 <vListInsert>
 800ceaa:	e012      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d206      	bcs.n	800c066 <prvInsertTimerInActiveList+0x62>
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d302      	bcc.n	800c066 <prvInsertTimerInActiveList+0x62>
=======
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d206      	bcs.n	800cec2 <prvInsertTimerInActiveList+0x62>
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d302      	bcc.n	800cec2 <prvInsertTimerInActiveList+0x62>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 800c060:	2301      	movs	r3, #1
 800c062:	617b      	str	r3, [r7, #20]
 800c064:	e007      	b.n	800c076 <prvInsertTimerInActiveList+0x72>
=======
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e007      	b.n	800ced2 <prvInsertTimerInActiveList+0x72>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 800c066:	4b07      	ldr	r3, [pc, #28]	; (800c084 <prvInsertTimerInActiveList+0x80>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f7fd fc3b 	bl	80098ec <vListInsert>
=======
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <prvInsertTimerInActiveList+0x80>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3304      	adds	r3, #4
 800ceca:	4619      	mov	r1, r3
 800cecc:	4610      	mov	r0, r2
 800cece:	f7fd fbe0 	bl	800a692 <vListInsert>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	2000138c 	.word	0x2000138c
 800c084:	20001388 	.word	0x20001388

0800c088 <prvProcessReceivedCommands>:
=======
 800ced2:	697b      	ldr	r3, [r7, #20]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	200013f0 	.word	0x200013f0
 800cee0:	200013ec 	.word	0x200013ec

0800cee4 <prvProcessReceivedCommands>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08e      	sub	sp, #56	; 0x38
 800c08c:	af02      	add	r7, sp, #8
=======
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08e      	sub	sp, #56	; 0x38
 800cee8:	af02      	add	r7, sp, #8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 800c08e:	e0ca      	b.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800ceea:	e0ca      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	da18      	bge.n	800c0c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c096:	1d3b      	adds	r3, r7, #4
 800c098:	3304      	adds	r3, #4
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da18      	bge.n	800cf24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cef2:	1d3b      	adds	r3, r7, #4
 800cef4:	3304      	adds	r3, #4
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10a      	bne.n	800c0b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	61fb      	str	r3, [r7, #28]
}
 800c0b4:	bf00      	nop
 800c0b6:	e7fe      	b.n	800c0b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0be:	6850      	ldr	r0, [r2, #4]
 800c0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c2:	6892      	ldr	r2, [r2, #8]
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4798      	blx	r3
=======
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10a      	bne.n	800cf14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	61fb      	str	r3, [r7, #28]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1a:	6850      	ldr	r0, [r2, #4]
 800cf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1e:	6892      	ldr	r2, [r2, #8]
 800cf20:	4611      	mov	r1, r2
 800cf22:	4798      	blx	r3
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f2c0 80ab 	blt.w	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f2c0 80ab 	blt.w	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	3304      	adds	r3, #4
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fd fc3c 	bl	800995e <uxListRemove>
=======
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d004      	beq.n	800cf42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fd fbe1 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff ff6b 	bl	800bfc4 <prvSampleTimeNow>
 800c0ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b09      	cmp	r3, #9
 800c0f4:	f200 8096 	bhi.w	800c224 <prvProcessReceivedCommands+0x19c>
 800c0f8:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <prvProcessReceivedCommands+0x78>)
 800c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fe:	bf00      	nop
 800c100:	0800c129 	.word	0x0800c129
 800c104:	0800c129 	.word	0x0800c129
 800c108:	0800c129 	.word	0x0800c129
 800c10c:	0800c19d 	.word	0x0800c19d
 800c110:	0800c1b1 	.word	0x0800c1b1
 800c114:	0800c1fb 	.word	0x0800c1fb
 800c118:	0800c129 	.word	0x0800c129
 800c11c:	0800c129 	.word	0x0800c129
 800c120:	0800c19d 	.word	0x0800c19d
 800c124:	0800c1b1 	.word	0x0800c1b1
=======
 800cf42:	463b      	mov	r3, r7
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ff6b 	bl	800ce20 <prvSampleTimeNow>
 800cf4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b09      	cmp	r3, #9
 800cf50:	f200 8096 	bhi.w	800d080 <prvProcessReceivedCommands+0x19c>
 800cf54:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <prvProcessReceivedCommands+0x78>)
 800cf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5a:	bf00      	nop
 800cf5c:	0800cf85 	.word	0x0800cf85
 800cf60:	0800cf85 	.word	0x0800cf85
 800cf64:	0800cf85 	.word	0x0800cf85
 800cf68:	0800cff9 	.word	0x0800cff9
 800cf6c:	0800d00d 	.word	0x0800d00d
 800cf70:	0800d057 	.word	0x0800d057
 800cf74:	0800cf85 	.word	0x0800cf85
 800cf78:	0800cf85 	.word	0x0800cf85
 800cf7c:	0800cff9 	.word	0x0800cff9
 800cf80:	0800d00d 	.word	0x0800d00d
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c12e:	f043 0301 	orr.w	r3, r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	18d1      	adds	r1, r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c148:	f7ff ff5c 	bl	800c004 <prvInsertTimerInActiveList>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d069      	beq.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800cf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	18d1      	adds	r1, r2, r3
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa4:	f7ff ff5c 	bl	800ce60 <prvInsertTimerInActiveList>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d069      	beq.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05e      	beq.n	800c226 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	441a      	add	r2, r3
 800c170:	2300      	movs	r3, #0
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	2300      	movs	r3, #0
 800c176:	2100      	movs	r1, #0
 800c178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c17a:	f7ff fe05 	bl	800bd88 <xTimerGenericCommand>
 800c17e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c180:	6a3b      	ldr	r3, [r7, #32]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d14f      	bne.n	800c226 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	61bb      	str	r3, [r7, #24]
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <prvProcessReceivedCommands+0x112>
=======
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d05e      	beq.n	800d082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	699b      	ldr	r3, [r3, #24]
 800cfca:	441a      	add	r2, r3
 800cfcc:	2300      	movs	r3, #0
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd6:	f7ff fe05 	bl	800cbe4 <xTimerGenericCommand>
 800cfda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d14f      	bne.n	800d082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	61bb      	str	r3, [r7, #24]
}
 800cff4:	bf00      	nop
 800cff6:	e7fe      	b.n	800cff6 <prvProcessReceivedCommands+0x112>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1a2:	f023 0301 	bic.w	r3, r3, #1
 800c1a6:	b2da      	uxtb	r2, r3
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1ae:	e03a      	b.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cffe:	f023 0301 	bic.w	r3, r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d00a:	e03a      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b6:	f043 0301 	orr.w	r3, r3, #1
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	617b      	str	r3, [r7, #20]
}
 800c1e2:	bf00      	nop
 800c1e4:	e7fe      	b.n	800c1e4 <prvProcessReceivedCommands+0x15c>
=======
 800d00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10a      	bne.n	800d042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d030:	f383 8811 	msr	BASEPRI, r3
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	617b      	str	r3, [r7, #20]
}
 800d03e:	bf00      	nop
 800d040:	e7fe      	b.n	800d040 <prvProcessReceivedCommands+0x15c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	699a      	ldr	r2, [r3, #24]
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	18d1      	adds	r1, r2, r3
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1f4:	f7ff ff06 	bl	800c004 <prvInsertTimerInActiveList>
					break;
 800c1f8:	e015      	b.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	699a      	ldr	r2, [r3, #24]
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	18d1      	adds	r1, r2, r3
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d050:	f7ff ff06 	bl	800ce60 <prvInsertTimerInActiveList>
					break;
 800d054:	e015      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c200:	f003 0302 	and.w	r3, r3, #2
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20a:	f000 fbe1 	bl	800c9d0 <vPortFree>
 800c20e:	e00a      	b.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d066:	f000 fbfb 	bl	800d860 <vPortFree>
 800d06a:	e00a      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c216:	f023 0301 	bic.w	r3, r3, #1
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d072:	f023 0301 	bic.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 800c222:	e000      	b.n	800c226 <prvProcessReceivedCommands+0x19e>
=======
 800d07e:	e000      	b.n	800d082 <prvProcessReceivedCommands+0x19e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				default	:
					/* Don't expect to get here. */
					break;
<<<<<<< HEAD
 800c224:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c226:	4b08      	ldr	r3, [pc, #32]	; (800c248 <prvProcessReceivedCommands+0x1c0>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	1d39      	adds	r1, r7, #4
 800c22c:	2200      	movs	r2, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fd ff02 	bl	800a038 <xQueueReceive>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	f47f af2a 	bne.w	800c090 <prvProcessReceivedCommands+0x8>
=======
 800d080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d082:	4b08      	ldr	r3, [pc, #32]	; (800d0a4 <prvProcessReceivedCommands+0x1c0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	1d39      	adds	r1, r7, #4
 800d088:	2200      	movs	r2, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd fea6 	bl	800addc <xQueueReceive>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	f47f af2a 	bne.w	800ceec <prvProcessReceivedCommands+0x8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
		}
	}
}
<<<<<<< HEAD
 800c23c:	bf00      	nop
 800c23e:	bf00      	nop
 800c240:	3730      	adds	r7, #48	; 0x30
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	20001390 	.word	0x20001390

0800c24c <prvSwitchTimerLists>:
=======
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	3730      	adds	r7, #48	; 0x30
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200013f4 	.word	0x200013f4

0800d0a8 <prvSwitchTimerLists>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af02      	add	r7, sp, #8
=======
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af02      	add	r7, sp, #8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 800c252:	e048      	b.n	800c2e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c254:	4b2d      	ldr	r3, [pc, #180]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c25e:	4b2b      	ldr	r3, [pc, #172]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fd fb76 	bl	800995e <uxListRemove>
=======
 800d0ae:	e048      	b.n	800d142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0b0:	4b2d      	ldr	r3, [pc, #180]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ba:	4b2b      	ldr	r3, [pc, #172]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fd fb1b 	bl	800a704 <uxListRemove>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b00      	cmp	r3, #0
 800c286:	d02e      	beq.n	800c2e6 <prvSwitchTimerLists+0x9a>
=======
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6a1b      	ldr	r3, [r3, #32]
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d02e      	beq.n	800d142 <prvSwitchTimerLists+0x9a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	4413      	add	r3, r2
 800c290:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	429a      	cmp	r2, r3
 800c298:	d90e      	bls.n	800c2b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2a6:	4b19      	ldr	r3, [pc, #100]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f7fd fb1b 	bl	80098ec <vListInsert>
 800c2b6:	e016      	b.n	800c2e6 <prvSwitchTimerLists+0x9a>
=======
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	693a      	ldr	r2, [r7, #16]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d90e      	bls.n	800d114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3304      	adds	r3, #4
 800d10a:	4619      	mov	r1, r3
 800d10c:	4610      	mov	r0, r2
 800d10e:	f7fd fac0 	bl	800a692 <vListInsert>
 800d112:	e016      	b.n	800d142 <prvSwitchTimerLists+0x9a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff fd60 	bl	800bd88 <xTimerGenericCommand>
 800c2c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	603b      	str	r3, [r7, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2e6:	4b09      	ldr	r3, [pc, #36]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1b1      	bne.n	800c254 <prvSwitchTimerLists+0x8>
=======
 800d114:	2300      	movs	r3, #0
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	2300      	movs	r3, #0
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	2100      	movs	r1, #0
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f7ff fd60 	bl	800cbe4 <xTimerGenericCommand>
 800d124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10a      	bne.n	800d142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	603b      	str	r3, [r7, #0]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1b1      	bne.n	800d0b0 <prvSwitchTimerLists+0x8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800c2f0:	4b06      	ldr	r3, [pc, #24]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2f6:	4b06      	ldr	r3, [pc, #24]	; (800c310 <prvSwitchTimerLists+0xc4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a04      	ldr	r2, [pc, #16]	; (800c30c <prvSwitchTimerLists+0xc0>)
 800c2fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2fe:	4a04      	ldr	r2, [pc, #16]	; (800c310 <prvSwitchTimerLists+0xc4>)
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	6013      	str	r3, [r2, #0]
}
 800c304:	bf00      	nop
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20001388 	.word	0x20001388
 800c310:	2000138c 	.word	0x2000138c

0800c314 <prvCheckForValidListAndQueue>:
=======
 800d14c:	4b06      	ldr	r3, [pc, #24]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d152:	4b06      	ldr	r3, [pc, #24]	; (800d16c <prvSwitchTimerLists+0xc4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a04      	ldr	r2, [pc, #16]	; (800d168 <prvSwitchTimerLists+0xc0>)
 800d158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d15a:	4a04      	ldr	r2, [pc, #16]	; (800d16c <prvSwitchTimerLists+0xc4>)
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	6013      	str	r3, [r2, #0]
}
 800d160:	bf00      	nop
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	200013ec 	.word	0x200013ec
 800d16c:	200013f0 	.word	0x200013f0

0800d170 <prvCheckForValidListAndQueue>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af02      	add	r7, sp, #8
=======
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af02      	add	r7, sp, #8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800c31a:	f000 f96b 	bl	800c5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c31e:	4b15      	ldr	r3, [pc, #84]	; (800c374 <prvCheckForValidListAndQueue+0x60>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d120      	bne.n	800c368 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c326:	4814      	ldr	r0, [pc, #80]	; (800c378 <prvCheckForValidListAndQueue+0x64>)
 800c328:	f7fd fa8f 	bl	800984a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c32c:	4813      	ldr	r0, [pc, #76]	; (800c37c <prvCheckForValidListAndQueue+0x68>)
 800c32e:	f7fd fa8c 	bl	800984a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c332:	4b13      	ldr	r3, [pc, #76]	; (800c380 <prvCheckForValidListAndQueue+0x6c>)
 800c334:	4a10      	ldr	r2, [pc, #64]	; (800c378 <prvCheckForValidListAndQueue+0x64>)
 800c336:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c338:	4b12      	ldr	r3, [pc, #72]	; (800c384 <prvCheckForValidListAndQueue+0x70>)
 800c33a:	4a10      	ldr	r2, [pc, #64]	; (800c37c <prvCheckForValidListAndQueue+0x68>)
 800c33c:	601a      	str	r2, [r3, #0]
=======
 800d176:	f000 f985 	bl	800d484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d120      	bne.n	800d1c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d182:	4814      	ldr	r0, [pc, #80]	; (800d1d4 <prvCheckForValidListAndQueue+0x64>)
 800d184:	f7fd fa34 	bl	800a5f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d188:	4813      	ldr	r0, [pc, #76]	; (800d1d8 <prvCheckForValidListAndQueue+0x68>)
 800d18a:	f7fd fa31 	bl	800a5f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <prvCheckForValidListAndQueue+0x6c>)
 800d190:	4a10      	ldr	r2, [pc, #64]	; (800d1d4 <prvCheckForValidListAndQueue+0x64>)
 800d192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d194:	4b12      	ldr	r3, [pc, #72]	; (800d1e0 <prvCheckForValidListAndQueue+0x70>)
 800d196:	4a10      	ldr	r2, [pc, #64]	; (800d1d8 <prvCheckForValidListAndQueue+0x68>)
 800d198:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800c33e:	2300      	movs	r3, #0
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	4b11      	ldr	r3, [pc, #68]	; (800c388 <prvCheckForValidListAndQueue+0x74>)
 800c344:	4a11      	ldr	r2, [pc, #68]	; (800c38c <prvCheckForValidListAndQueue+0x78>)
 800c346:	2110      	movs	r1, #16
 800c348:	200a      	movs	r0, #10
 800c34a:	f7fd fb9b 	bl	8009a84 <xQueueGenericCreateStatic>
 800c34e:	4603      	mov	r3, r0
 800c350:	4a08      	ldr	r2, [pc, #32]	; (800c374 <prvCheckForValidListAndQueue+0x60>)
 800c352:	6013      	str	r3, [r2, #0]
=======
 800d19a:	2300      	movs	r3, #0
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4b11      	ldr	r3, [pc, #68]	; (800d1e4 <prvCheckForValidListAndQueue+0x74>)
 800d1a0:	4a11      	ldr	r2, [pc, #68]	; (800d1e8 <prvCheckForValidListAndQueue+0x78>)
 800d1a2:	2110      	movs	r1, #16
 800d1a4:	200a      	movs	r0, #10
 800d1a6:	f7fd fb3f 	bl	800a828 <xQueueGenericCreateStatic>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	4a08      	ldr	r2, [pc, #32]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1ae:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 800c354:	4b07      	ldr	r3, [pc, #28]	; (800c374 <prvCheckForValidListAndQueue+0x60>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d005      	beq.n	800c368 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c35c:	4b05      	ldr	r3, [pc, #20]	; (800c374 <prvCheckForValidListAndQueue+0x60>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	490b      	ldr	r1, [pc, #44]	; (800c390 <prvCheckForValidListAndQueue+0x7c>)
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe f9a0 	bl	800a6a8 <vQueueAddToRegistry>
=======
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d005      	beq.n	800d1c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1b8:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <prvCheckForValidListAndQueue+0x60>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	490b      	ldr	r1, [pc, #44]	; (800d1ec <prvCheckForValidListAndQueue+0x7c>)
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe f944 	bl	800b44c <vQueueAddToRegistry>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800c368:	f000 f974 	bl	800c654 <vPortExitCritical>
}
 800c36c:	bf00      	nop
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20001390 	.word	0x20001390
 800c378:	20001360 	.word	0x20001360
 800c37c:	20001374 	.word	0x20001374
 800c380:	20001388 	.word	0x20001388
 800c384:	2000138c 	.word	0x2000138c
 800c388:	2000143c 	.word	0x2000143c
 800c38c:	2000139c 	.word	0x2000139c
 800c390:	0800e780 	.word	0x0800e780

0800c394 <pxPortInitialiseStack>:
=======
 800d1c4:	f000 f98e 	bl	800d4e4 <vPortExitCritical>
}
 800d1c8:	bf00      	nop
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	200013f4 	.word	0x200013f4
 800d1d4:	200013c4 	.word	0x200013c4
 800d1d8:	200013d8 	.word	0x200013d8
 800d1dc:	200013ec 	.word	0x200013ec
 800d1e0:	200013f0 	.word	0x200013f0
 800d1e4:	200014a0 	.word	0x200014a0
 800d1e8:	20001400 	.word	0x20001400
 800d1ec:	0800f8e4 	.word	0x0800f8e4

0800d1f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d1fe:	f06f 0301 	mvn.w	r3, #1
 800d202:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d210:	4b06      	ldr	r3, [pc, #24]	; (800d22c <xTimerPendFunctionCallFromISR+0x3c>)
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	f107 0114 	add.w	r1, r7, #20
 800d218:	2300      	movs	r3, #0
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	f7fd fd42 	bl	800aca4 <xQueueGenericSendFromISR>
 800d220:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d224:	4618      	mov	r0, r3
 800d226:	3728      	adds	r7, #40	; 0x28
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	200013f4 	.word	0x200013f4

0800d230 <pxPortInitialiseStack>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
=======
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3b04      	subs	r3, #4
 800c3a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3b04      	subs	r3, #4
 800c3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f023 0201 	bic.w	r2, r3, #1
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3b04      	subs	r3, #4
 800c3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3c4:	4a0c      	ldr	r2, [pc, #48]	; (800c3f8 <pxPortInitialiseStack+0x64>)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3b14      	subs	r3, #20
 800c3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	601a      	str	r2, [r3, #0]
=======
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3b04      	subs	r3, #4
 800d240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3b04      	subs	r3, #4
 800d24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f023 0201 	bic.w	r2, r3, #1
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3b04      	subs	r3, #4
 800d25e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d260:	4a0c      	ldr	r2, [pc, #48]	; (800d294 <pxPortInitialiseStack+0x64>)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	3b14      	subs	r3, #20
 800d26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3b04      	subs	r3, #4
 800c3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f06f 0202 	mvn.w	r2, #2
 800c3e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3b20      	subs	r3, #32
 800c3e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	0800c3fd 	.word	0x0800c3fd

0800c3fc <prvTaskExitError>:
=======
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	3b04      	subs	r3, #4
 800d276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f06f 0202 	mvn.w	r2, #2
 800d27e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3b20      	subs	r3, #32
 800d284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d286:	68fb      	ldr	r3, [r7, #12]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	0800d299 	.word	0x0800d299

0800d298 <prvTaskExitError>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	607b      	str	r3, [r7, #4]
=======
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <prvTaskExitError+0x54>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40e:	d00a      	beq.n	800c426 <prvTaskExitError+0x2a>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	60fb      	str	r3, [r7, #12]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <prvTaskExitError+0x28>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	60bb      	str	r3, [r7, #8]
}
 800c438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c43a:	bf00      	nop
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0fc      	beq.n	800c43c <prvTaskExitError+0x40>
=======
 800d2a2:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <prvTaskExitError+0x54>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d00a      	beq.n	800d2c2 <prvTaskExitError+0x2a>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	60fb      	str	r3, [r7, #12]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <prvTaskExitError+0x28>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	60bb      	str	r3, [r7, #8]
}
 800d2d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2d6:	bf00      	nop
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0fc      	beq.n	800d2d8 <prvTaskExitError+0x40>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	20000078 	.word	0x20000078
	...

0800c460 <SVC_Handler>:
=======
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20000078 	.word	0x20000078

0800d2f0 <SVC_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <pxCurrentTCBConst2>)
 800c462:	6819      	ldr	r1, [r3, #0]
 800c464:	6808      	ldr	r0, [r1, #0]
 800c466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	f380 8809 	msr	PSP, r0
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	4770      	bx	lr
 800c47c:	f3af 8000 	nop.w

0800c480 <pxCurrentTCBConst2>:
 800c480:	20000e60 	.word	0x20000e60
=======
 800d2f0:	4b07      	ldr	r3, [pc, #28]	; (800d310 <pxCurrentTCBConst2>)
 800d2f2:	6819      	ldr	r1, [r3, #0]
 800d2f4:	6808      	ldr	r0, [r1, #0]
 800d2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fa:	f380 8809 	msr	PSP, r0
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8811 	msr	BASEPRI, r0
 800d30a:	4770      	bx	lr
 800d30c:	f3af 8000 	nop.w

0800d310 <pxCurrentTCBConst2>:
 800d310:	20000ec4 	.word	0x20000ec4
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800c484:	bf00      	nop
 800c486:	bf00      	nop

0800c488 <prvPortStartFirstTask>:
=======
 800d314:	bf00      	nop
 800d316:	bf00      	nop

0800d318 <prvPortStartFirstTask>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 800c488:	4808      	ldr	r0, [pc, #32]	; (800c4ac <prvPortStartFirstTask+0x24>)
 800c48a:	6800      	ldr	r0, [r0, #0]
 800c48c:	6800      	ldr	r0, [r0, #0]
 800c48e:	f380 8808 	msr	MSP, r0
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8814 	msr	CONTROL, r0
 800c49a:	b662      	cpsie	i
 800c49c:	b661      	cpsie	f
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	df00      	svc	0
 800c4a8:	bf00      	nop
=======
 800d318:	4808      	ldr	r0, [pc, #32]	; (800d33c <prvPortStartFirstTask+0x24>)
 800d31a:	6800      	ldr	r0, [r0, #0]
 800d31c:	6800      	ldr	r0, [r0, #0]
 800d31e:	f380 8808 	msr	MSP, r0
 800d322:	f04f 0000 	mov.w	r0, #0
 800d326:	f380 8814 	msr	CONTROL, r0
 800d32a:	b662      	cpsie	i
 800d32c:	b661      	cpsie	f
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	df00      	svc	0
 800d338:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800c4aa:	bf00      	nop
 800c4ac:	e000ed08 	.word	0xe000ed08

0800c4b0 <xPortStartScheduler>:
=======
 800d33a:	bf00      	nop
 800d33c:	e000ed08 	.word	0xe000ed08

0800d340 <xPortStartScheduler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
=======
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 800c4b6:	4b46      	ldr	r3, [pc, #280]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a46      	ldr	r2, [pc, #280]	; (800c5d4 <xPortStartScheduler+0x124>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10a      	bne.n	800c4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4d6:	4b3e      	ldr	r3, [pc, #248]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a3f      	ldr	r2, [pc, #252]	; (800c5d8 <xPortStartScheduler+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10a      	bne.n	800c4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xPortStartScheduler+0x44>
=======
 800d346:	4b46      	ldr	r3, [pc, #280]	; (800d460 <xPortStartScheduler+0x120>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a46      	ldr	r2, [pc, #280]	; (800d464 <xPortStartScheduler+0x124>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d10a      	bne.n	800d366 <xPortStartScheduler+0x26>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	613b      	str	r3, [r7, #16]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d366:	4b3e      	ldr	r3, [pc, #248]	; (800d460 <xPortStartScheduler+0x120>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a3f      	ldr	r2, [pc, #252]	; (800d468 <xPortStartScheduler+0x128>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d10a      	bne.n	800d386 <xPortStartScheduler+0x46>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	60fb      	str	r3, [r7, #12]
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xPortStartScheduler+0x44>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800c4f6:	4b39      	ldr	r3, [pc, #228]	; (800c5dc <xPortStartScheduler+0x12c>)
 800c4f8:	617b      	str	r3, [r7, #20]
=======
 800d386:	4b39      	ldr	r3, [pc, #228]	; (800d46c <xPortStartScheduler+0x12c>)
 800d388:	617b      	str	r3, [r7, #20]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	607b      	str	r3, [r7, #4]
=======
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	22ff      	movs	r2, #255	; 0xff
 800c506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <xPortStartScheduler+0x130>)
 800c51c:	701a      	strb	r2, [r3, #0]
=======
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	22ff      	movs	r2, #255	; 0xff
 800d396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	4b31      	ldr	r3, [pc, #196]	; (800d470 <xPortStartScheduler+0x130>)
 800d3ac:	701a      	strb	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800c51e:	4b31      	ldr	r3, [pc, #196]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c524:	e009      	b.n	800c53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c526:	4b2f      	ldr	r3, [pc, #188]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4a2d      	ldr	r2, [pc, #180]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b80      	cmp	r3, #128	; 0x80
 800c544:	d0ef      	beq.n	800c526 <xPortStartScheduler+0x76>
=======
 800d3ae:	4b31      	ldr	r3, [pc, #196]	; (800d474 <xPortStartScheduler+0x134>)
 800d3b0:	2207      	movs	r2, #7
 800d3b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3b4:	e009      	b.n	800d3ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d3b6:	4b2f      	ldr	r3, [pc, #188]	; (800d474 <xPortStartScheduler+0x134>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <xPortStartScheduler+0x134>)
 800d3be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3ca:	78fb      	ldrb	r3, [r7, #3]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d2:	2b80      	cmp	r3, #128	; 0x80
 800d3d4:	d0ef      	beq.n	800d3b6 <xPortStartScheduler+0x76>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800c546:	4b27      	ldr	r3, [pc, #156]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1c3 0307 	rsb	r3, r3, #7
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d00a      	beq.n	800c568 <xPortStartScheduler+0xb8>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	60bb      	str	r3, [r7, #8]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xPortStartScheduler+0xb6>
=======
 800d3d6:	4b27      	ldr	r3, [pc, #156]	; (800d474 <xPortStartScheduler+0x134>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f1c3 0307 	rsb	r3, r3, #7
 800d3de:	2b04      	cmp	r3, #4
 800d3e0:	d00a      	beq.n	800d3f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	60bb      	str	r3, [r7, #8]
}
 800d3f4:	bf00      	nop
 800d3f6:	e7fe      	b.n	800d3f6 <xPortStartScheduler+0xb6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c572:	4b1c      	ldr	r3, [pc, #112]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c57c:	6013      	str	r3, [r2, #0]
=======
 800d3f8:	4b1e      	ldr	r3, [pc, #120]	; (800d474 <xPortStartScheduler+0x134>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	021b      	lsls	r3, r3, #8
 800d3fe:	4a1d      	ldr	r2, [pc, #116]	; (800d474 <xPortStartScheduler+0x134>)
 800d400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d402:	4b1c      	ldr	r3, [pc, #112]	; (800d474 <xPortStartScheduler+0x134>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d40a:	4a1a      	ldr	r2, [pc, #104]	; (800d474 <xPortStartScheduler+0x134>)
 800d40c:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	b2da      	uxtb	r2, r3
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	701a      	strb	r2, [r3, #0]
=======
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	b2da      	uxtb	r2, r3
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	701a      	strb	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800c586:	4b18      	ldr	r3, [pc, #96]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a14      	ldr	r2, [pc, #80]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c59c:	6013      	str	r3, [r2, #0]
=======
 800d416:	4b18      	ldr	r3, [pc, #96]	; (800d478 <xPortStartScheduler+0x138>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a17      	ldr	r2, [pc, #92]	; (800d478 <xPortStartScheduler+0x138>)
 800d41c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d422:	4b15      	ldr	r3, [pc, #84]	; (800d478 <xPortStartScheduler+0x138>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a14      	ldr	r2, [pc, #80]	; (800d478 <xPortStartScheduler+0x138>)
 800d428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d42c:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800c59e:	f000 f8dd 	bl	800c75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <xPortStartScheduler+0x13c>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5a8:	f000 f8fc 	bl	800c7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5b8:	f7ff ff66 	bl	800c488 <prvPortStartFirstTask>
=======
 800d42e:	f000 f8dd 	bl	800d5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d432:	4b12      	ldr	r3, [pc, #72]	; (800d47c <xPortStartScheduler+0x13c>)
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d438:	f000 f8fc 	bl	800d634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d43c:	4b10      	ldr	r3, [pc, #64]	; (800d480 <xPortStartScheduler+0x140>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a0f      	ldr	r2, [pc, #60]	; (800d480 <xPortStartScheduler+0x140>)
 800d442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d448:	f7ff ff66 	bl	800d318 <prvPortStartFirstTask>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800c5bc:	f7fe fcc0 	bl	800af40 <vTaskSwitchContext>
	prvTaskExitError();
 800c5c0:	f7ff ff1c 	bl	800c3fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	e000ed00 	.word	0xe000ed00
 800c5d4:	410fc271 	.word	0x410fc271
 800c5d8:	410fc270 	.word	0x410fc270
 800c5dc:	e000e400 	.word	0xe000e400
 800c5e0:	2000148c 	.word	0x2000148c
 800c5e4:	20001490 	.word	0x20001490
 800c5e8:	e000ed20 	.word	0xe000ed20
 800c5ec:	20000078 	.word	0x20000078
 800c5f0:	e000ef34 	.word	0xe000ef34

0800c5f4 <vPortEnterCritical>:
=======
 800d44c:	f7fe fc4a 	bl	800bce4 <vTaskSwitchContext>
	prvTaskExitError();
 800d450:	f7ff ff22 	bl	800d298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	e000ed00 	.word	0xe000ed00
 800d464:	410fc271 	.word	0x410fc271
 800d468:	410fc270 	.word	0x410fc270
 800d46c:	e000e400 	.word	0xe000e400
 800d470:	200014f0 	.word	0x200014f0
 800d474:	200014f4 	.word	0x200014f4
 800d478:	e000ed20 	.word	0xe000ed20
 800d47c:	20000078 	.word	0x20000078
 800d480:	e000ef34 	.word	0xe000ef34

0800d484 <vPortEnterCritical>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	607b      	str	r3, [r7, #4]
}
 800c60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c60e:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <vPortEnterCritical+0x58>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <vPortEnterCritical+0x58>)
 800c616:	6013      	str	r3, [r2, #0]
=======
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
	__asm volatile
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	607b      	str	r3, [r7, #4]
}
 800d49c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d49e:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	4a0d      	ldr	r2, [pc, #52]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4a6:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <vPortEnterCritical+0x58>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d10f      	bne.n	800c640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortEnterCritical+0x5c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <vPortEnterCritical+0x4c>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	603b      	str	r3, [r7, #0]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <vPortEnterCritical+0x4a>
	}
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	20000078 	.word	0x20000078
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <vPortExitCritical>:
=======
 800d4a8:	4b0c      	ldr	r3, [pc, #48]	; (800d4dc <vPortEnterCritical+0x58>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d10f      	bne.n	800d4d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <vPortEnterCritical+0x5c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	603b      	str	r3, [r7, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vPortEnterCritical+0x4a>
	}
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20000078 	.word	0x20000078
 800d4e0:	e000ed04 	.word	0xe000ed04

0800d4e4 <vPortExitCritical>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c65a:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <vPortExitCritical+0x50>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <vPortExitCritical+0x24>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	607b      	str	r3, [r7, #4]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <vPortExitCritical+0x50>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <vPortExitCritical+0x50>)
 800c680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d105      	bne.n	800c696 <vPortExitCritical+0x42>
 800c68a:	2300      	movs	r3, #0
 800c68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	f383 8811 	msr	BASEPRI, r3
}
 800c694:	bf00      	nop
=======
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <vPortExitCritical+0x50>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <vPortExitCritical+0x24>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	607b      	str	r3, [r7, #4]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d508:	4b0a      	ldr	r3, [pc, #40]	; (800d534 <vPortExitCritical+0x50>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	4a09      	ldr	r2, [pc, #36]	; (800d534 <vPortExitCritical+0x50>)
 800d510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d512:	4b08      	ldr	r3, [pc, #32]	; (800d534 <vPortExitCritical+0x50>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d105      	bne.n	800d526 <vPortExitCritical+0x42>
 800d51a:	2300      	movs	r3, #0
 800d51c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	f383 8811 	msr	BASEPRI, r3
}
 800d524:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	20000078 	.word	0x20000078
	...

0800c6b0 <PendSV_Handler>:
=======
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	20000078 	.word	0x20000078
	...

0800d540 <PendSV_Handler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6d4:	f380 8811 	msr	BASEPRI, r0
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f7fe fc2e 	bl	800af40 <vTaskSwitchContext>
 800c6e4:	f04f 0000 	mov.w	r0, #0
 800c6e8:	f380 8811 	msr	BASEPRI, r0
 800c6ec:	bc09      	pop	{r0, r3}
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6808      	ldr	r0, [r1, #0]
 800c6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f6:	f01e 0f10 	tst.w	lr, #16
 800c6fa:	bf08      	it	eq
 800c6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c700:	f380 8809 	msr	PSP, r0
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst>:
 800c710:	20000e60 	.word	0x20000e60
=======
 800d540:	f3ef 8009 	mrs	r0, PSP
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	4b15      	ldr	r3, [pc, #84]	; (800d5a0 <pxCurrentTCBConst>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	f01e 0f10 	tst.w	lr, #16
 800d550:	bf08      	it	eq
 800d552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	6010      	str	r0, [r2, #0]
 800d55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d564:	f380 8811 	msr	BASEPRI, r0
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f7fe fbb8 	bl	800bce4 <vTaskSwitchContext>
 800d574:	f04f 0000 	mov.w	r0, #0
 800d578:	f380 8811 	msr	BASEPRI, r0
 800d57c:	bc09      	pop	{r0, r3}
 800d57e:	6819      	ldr	r1, [r3, #0]
 800d580:	6808      	ldr	r0, [r1, #0]
 800d582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d586:	f01e 0f10 	tst.w	lr, #16
 800d58a:	bf08      	it	eq
 800d58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d590:	f380 8809 	msr	PSP, r0
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	f3af 8000 	nop.w

0800d5a0 <pxCurrentTCBConst>:
 800d5a0:	20000ec4 	.word	0x20000ec4
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <xPortSysTickHandler>:
=======
 800d5a4:	bf00      	nop
 800d5a6:	bf00      	nop

0800d5a8 <xPortSysTickHandler>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
=======
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	607b      	str	r3, [r7, #4]
}
 800d5c0:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800c732:	f7fe fb4b 	bl	800adcc <xTaskIncrementTick>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <xPortSysTickHandler+0x2c>
=======
 800d5c2:	f7fe fad5 	bl	800bb70 <xTaskIncrementTick>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <xPortSysTickHandler+0x2c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <xPortSysTickHandler+0x40>)
 800c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f383 8811 	msr	BASEPRI, r3
}
 800c74e:	bf00      	nop
=======
 800d5cc:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <xPortSysTickHandler+0x40>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	f383 8811 	msr	BASEPRI, r3
}
 800d5de:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vPortSetupTimerInterrupt>:
=======
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	e000ed04 	.word	0xe000ed04

0800d5ec <vPortSetupTimerInterrupt>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
=======
 800d5ec:	b480      	push	{r7}
 800d5ee:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800c760:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <vPortSetupTimerInterrupt+0x38>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <vPortSetupTimerInterrupt+0x3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a0a      	ldr	r2, [pc, #40]	; (800c79c <vPortSetupTimerInterrupt+0x40>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <vPortSetupTimerInterrupt+0x44>)
 800c77a:	3b01      	subs	r3, #1
 800c77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c77e:	4b04      	ldr	r3, [pc, #16]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	e000e010 	.word	0xe000e010
 800c794:	e000e018 	.word	0xe000e018
 800c798:	2000006c 	.word	0x2000006c
 800c79c:	10624dd3 	.word	0x10624dd3
 800c7a0:	e000e014 	.word	0xe000e014

0800c7a4 <vPortEnableVFP>:
=======
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	; (800d620 <vPortSetupTimerInterrupt+0x34>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d5f6:	4b0b      	ldr	r3, [pc, #44]	; (800d624 <vPortSetupTimerInterrupt+0x38>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	; (800d628 <vPortSetupTimerInterrupt+0x3c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a0a      	ldr	r2, [pc, #40]	; (800d62c <vPortSetupTimerInterrupt+0x40>)
 800d602:	fba2 2303 	umull	r2, r3, r2, r3
 800d606:	099b      	lsrs	r3, r3, #6
 800d608:	4a09      	ldr	r2, [pc, #36]	; (800d630 <vPortSetupTimerInterrupt+0x44>)
 800d60a:	3b01      	subs	r3, #1
 800d60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d60e:	4b04      	ldr	r3, [pc, #16]	; (800d620 <vPortSetupTimerInterrupt+0x34>)
 800d610:	2207      	movs	r2, #7
 800d612:	601a      	str	r2, [r3, #0]
}
 800d614:	bf00      	nop
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	e000e010 	.word	0xe000e010
 800d624:	e000e018 	.word	0xe000e018
 800d628:	2000006c 	.word	0x2000006c
 800d62c:	10624dd3 	.word	0x10624dd3
 800d630:	e000e014 	.word	0xe000e014

0800d634 <vPortEnableVFP>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 800c7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7b4 <vPortEnableVFP+0x10>
 800c7a8:	6801      	ldr	r1, [r0, #0]
 800c7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ae:	6001      	str	r1, [r0, #0]
 800c7b0:	4770      	bx	lr
=======
 800d634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d644 <vPortEnableVFP+0x10>
 800d638:	6801      	ldr	r1, [r0, #0]
 800d63a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d63e:	6001      	str	r1, [r0, #0]
 800d640:	4770      	bx	lr
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800c7b2:	bf00      	nop
 800c7b4:	e000ed88 	.word	0xe000ed88

0800c7b8 <vPortValidateInterruptPriority>:
=======
 800d642:	bf00      	nop
 800d644:	e000ed88 	.word	0xe000ed88

0800d648 <vPortValidateInterruptPriority>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
=======
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800c7be:	f3ef 8305 	mrs	r3, IPSR
 800c7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b0f      	cmp	r3, #15
 800c7c8:	d914      	bls.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <vPortValidateInterruptPriority+0x70>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	72fb      	strb	r3, [r7, #11]
=======
 800d64e:	f3ef 8305 	mrs	r3, IPSR
 800d652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b0f      	cmp	r3, #15
 800d658:	d914      	bls.n	800d684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d65a:	4a17      	ldr	r2, [pc, #92]	; (800d6b8 <vPortValidateInterruptPriority+0x70>)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	72fb      	strb	r3, [r7, #11]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 800c7d4:	4b15      	ldr	r3, [pc, #84]	; (800c82c <vPortValidateInterruptPriority+0x74>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7afa      	ldrb	r2, [r7, #11]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d20a      	bcs.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortValidateInterruptPriority+0x3a>
=======
 800d664:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <vPortValidateInterruptPriority+0x74>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	7afa      	ldrb	r2, [r7, #11]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d20a      	bcs.n	800d684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	607b      	str	r3, [r7, #4]
}
 800d680:	bf00      	nop
 800d682:	e7fe      	b.n	800d682 <vPortValidateInterruptPriority+0x3a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800c7f4:	4b0e      	ldr	r3, [pc, #56]	; (800c830 <vPortValidateInterruptPriority+0x78>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <vPortValidateInterruptPriority+0x7c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d90a      	bls.n	800c81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	603b      	str	r3, [r7, #0]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <vPortValidateInterruptPriority+0x60>
	}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	e000e3f0 	.word	0xe000e3f0
 800c82c:	2000148c 	.word	0x2000148c
 800c830:	e000ed0c 	.word	0xe000ed0c
 800c834:	20001490 	.word	0x20001490

0800c838 <pvPortMalloc>:
=======
 800d684:	4b0e      	ldr	r3, [pc, #56]	; (800d6c0 <vPortValidateInterruptPriority+0x78>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d68c:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <vPortValidateInterruptPriority+0x7c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	429a      	cmp	r2, r3
 800d692:	d90a      	bls.n	800d6aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	603b      	str	r3, [r7, #0]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <vPortValidateInterruptPriority+0x60>
	}
 800d6aa:	bf00      	nop
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	e000e3f0 	.word	0xe000e3f0
 800d6bc:	200014f0 	.word	0x200014f0
 800d6c0:	e000ed0c 	.word	0xe000ed0c
 800d6c4:	200014f4 	.word	0x200014f4

0800d6c8 <pvPortMalloc>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c844:	f7fe f9f4 	bl	800ac30 <vTaskSuspendAll>
=======
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b08a      	sub	sp, #40	; 0x28
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6d4:	f7fe f97e 	bl	800b9d4 <vTaskSuspendAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800c848:	4b5b      	ldr	r3, [pc, #364]	; (800c9b8 <pvPortMalloc+0x180>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c850:	f000 f920 	bl	800ca94 <prvHeapInit>
=======
 800d6d8:	4b5b      	ldr	r3, [pc, #364]	; (800d848 <pvPortMalloc+0x180>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d6e0:	f000 f920 	bl	800d924 <prvHeapInit>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800c854:	4b59      	ldr	r3, [pc, #356]	; (800c9bc <pvPortMalloc+0x184>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4013      	ands	r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f040 8093 	bne.w	800c988 <pvPortMalloc+0x150>
=======
 800d6e4:	4b59      	ldr	r3, [pc, #356]	; (800d84c <pvPortMalloc+0x184>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f040 8093 	bne.w	800d818 <pvPortMalloc+0x150>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01d      	beq.n	800c8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c868:	2208      	movs	r2, #8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	607b      	str	r3, [r7, #4]
=======
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d01d      	beq.n	800d734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d6f8:	2208      	movs	r2, #8
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d014      	beq.n	800c8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	617b      	str	r3, [r7, #20]
}
 800c8a0:	bf00      	nop
 800c8a2:	e7fe      	b.n	800c8a2 <pvPortMalloc+0x6a>
=======
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	2b00      	cmp	r3, #0
 800d708:	d014      	beq.n	800d734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <pvPortMalloc+0x6c>
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	617b      	str	r3, [r7, #20]
}
 800d730:	bf00      	nop
 800d732:	e7fe      	b.n	800d732 <pvPortMalloc+0x6a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d06e      	beq.n	800c988 <pvPortMalloc+0x150>
 800c8aa:	4b45      	ldr	r3, [pc, #276]	; (800c9c0 <pvPortMalloc+0x188>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d869      	bhi.n	800c988 <pvPortMalloc+0x150>
=======
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d06e      	beq.n	800d818 <pvPortMalloc+0x150>
 800d73a:	4b45      	ldr	r3, [pc, #276]	; (800d850 <pvPortMalloc+0x188>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d869      	bhi.n	800d818 <pvPortMalloc+0x150>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800c8b4:	4b43      	ldr	r3, [pc, #268]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8b8:	4b42      	ldr	r3, [pc, #264]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8be:	e004      	b.n	800c8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d903      	bls.n	800c8dc <pvPortMalloc+0xa4>
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1f1      	bne.n	800c8c0 <pvPortMalloc+0x88>
=======
 800d744:	4b43      	ldr	r3, [pc, #268]	; (800d854 <pvPortMalloc+0x18c>)
 800d746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d748:	4b42      	ldr	r3, [pc, #264]	; (800d854 <pvPortMalloc+0x18c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d74e:	e004      	b.n	800d75a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	429a      	cmp	r2, r3
 800d762:	d903      	bls.n	800d76c <pvPortMalloc+0xa4>
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f1      	bne.n	800d750 <pvPortMalloc+0x88>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800c8dc:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <pvPortMalloc+0x180>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d050      	beq.n	800c988 <pvPortMalloc+0x150>
=======
 800d76c:	4b36      	ldr	r3, [pc, #216]	; (800d848 <pvPortMalloc+0x180>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d772:	429a      	cmp	r2, r3
 800d774:	d050      	beq.n	800d818 <pvPortMalloc+0x150>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2208      	movs	r2, #8
 800c8ec:	4413      	add	r3, r2
 800c8ee:	61fb      	str	r3, [r7, #28]
=======
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2208      	movs	r2, #8
 800d77c:	4413      	add	r3, r2
 800d77e:	61fb      	str	r3, [r7, #28]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	601a      	str	r2, [r3, #0]
=======
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	2308      	movs	r3, #8
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	429a      	cmp	r2, r3
 800c906:	d91f      	bls.n	800c948 <pvPortMalloc+0x110>
=======
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	1ad2      	subs	r2, r2, r3
 800d790:	2308      	movs	r3, #8
 800d792:	005b      	lsls	r3, r3, #1
 800d794:	429a      	cmp	r2, r3
 800d796:	d91f      	bls.n	800d7d8 <pvPortMalloc+0x110>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800c908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <pvPortMalloc+0xf8>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	613b      	str	r3, [r7, #16]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <pvPortMalloc+0xf6>
=======
 800d798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d00a      	beq.n	800d7c0 <pvPortMalloc+0xf8>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	613b      	str	r3, [r7, #16]
}
 800d7bc:	bf00      	nop
 800d7be:	e7fe      	b.n	800d7be <pvPortMalloc+0xf6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c942:	69b8      	ldr	r0, [r7, #24]
 800c944:	f000 f908 	bl	800cb58 <prvInsertBlockIntoFreeList>
=======
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1ad2      	subs	r2, r2, r3
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7d2:	69b8      	ldr	r0, [r7, #24]
 800d7d4:	f000 f908 	bl	800d9e8 <prvInsertBlockIntoFreeList>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800c948:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <pvPortMalloc+0x188>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	4a1b      	ldr	r2, [pc, #108]	; (800c9c0 <pvPortMalloc+0x188>)
 800c954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <pvPortMalloc+0x188>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <pvPortMalloc+0x190>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d203      	bcs.n	800c96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c962:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <pvPortMalloc+0x188>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <pvPortMalloc+0x190>)
 800c968:	6013      	str	r3, [r2, #0]
=======
 800d7d8:	4b1d      	ldr	r3, [pc, #116]	; (800d850 <pvPortMalloc+0x188>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	4a1b      	ldr	r2, [pc, #108]	; (800d850 <pvPortMalloc+0x188>)
 800d7e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	; (800d850 <pvPortMalloc+0x188>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	4b1b      	ldr	r3, [pc, #108]	; (800d858 <pvPortMalloc+0x190>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d203      	bcs.n	800d7fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7f2:	4b17      	ldr	r3, [pc, #92]	; (800d850 <pvPortMalloc+0x188>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a18      	ldr	r2, [pc, #96]	; (800d858 <pvPortMalloc+0x190>)
 800d7f8:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <pvPortMalloc+0x184>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	431a      	orrs	r2, r3
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <pvPortMalloc+0x194>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <pvPortMalloc+0x194>)
 800c986:	6013      	str	r3, [r2, #0]
=======
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	4b13      	ldr	r3, [pc, #76]	; (800d84c <pvPortMalloc+0x184>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	431a      	orrs	r2, r3
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d80e:	4b13      	ldr	r3, [pc, #76]	; (800d85c <pvPortMalloc+0x194>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	4a11      	ldr	r2, [pc, #68]	; (800d85c <pvPortMalloc+0x194>)
 800d816:	6013      	str	r3, [r2, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800c988:	f7fe f960 	bl	800ac4c <xTaskResumeAll>
=======
 800d818:	f7fe f8ea 	bl	800b9f0 <xTaskResumeAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <pvPortMalloc+0x174>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60fb      	str	r3, [r7, #12]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <pvPortMalloc+0x172>
	return pvReturn;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3728      	adds	r7, #40	; 0x28
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	2000209c 	.word	0x2000209c
 800c9bc:	200020b0 	.word	0x200020b0
 800c9c0:	200020a0 	.word	0x200020a0
 800c9c4:	20002094 	.word	0x20002094
 800c9c8:	200020a4 	.word	0x200020a4
 800c9cc:	200020a8 	.word	0x200020a8

0800c9d0 <vPortFree>:
=======
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	f003 0307 	and.w	r3, r3, #7
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00a      	beq.n	800d83c <pvPortMalloc+0x174>
	__asm volatile
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	60fb      	str	r3, [r7, #12]
}
 800d838:	bf00      	nop
 800d83a:	e7fe      	b.n	800d83a <pvPortMalloc+0x172>
	return pvReturn;
 800d83c:	69fb      	ldr	r3, [r7, #28]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3728      	adds	r7, #40	; 0x28
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20002100 	.word	0x20002100
 800d84c:	20002114 	.word	0x20002114
 800d850:	20002104 	.word	0x20002104
 800d854:	200020f8 	.word	0x200020f8
 800d858:	20002108 	.word	0x20002108
 800d85c:	2000210c 	.word	0x2000210c

0800d860 <vPortFree>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d04d      	beq.n	800ca7e <vPortFree+0xae>
=======
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d04d      	beq.n	800d90e <vPortFree+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	4b24      	ldr	r3, [pc, #144]	; (800ca88 <vPortFree+0xb8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <vPortFree+0x44>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	60fb      	str	r3, [r7, #12]
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <vPortFree+0x62>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60bb      	str	r3, [r7, #8]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <vPortFree+0xb8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01e      	beq.n	800ca7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <vPortFree+0xae>
=======
 800d872:	2308      	movs	r3, #8
 800d874:	425b      	negs	r3, r3
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	4413      	add	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	4b24      	ldr	r3, [pc, #144]	; (800d918 <vPortFree+0xb8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4013      	ands	r3, r2
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10a      	bne.n	800d8a4 <vPortFree+0x44>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60fb      	str	r3, [r7, #12]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00a      	beq.n	800d8c2 <vPortFree+0x62>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	60bb      	str	r3, [r7, #8]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	4b14      	ldr	r3, [pc, #80]	; (800d918 <vPortFree+0xb8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d01e      	beq.n	800d90e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d11a      	bne.n	800d90e <vPortFree+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <vPortFree+0xb8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	43db      	mvns	r3, r3
 800ca52:	401a      	ands	r2, r3
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca58:	f7fe f8ea 	bl	800ac30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <vPortFree+0xbc>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <vPortFree+0xbc>)
 800ca68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca6a:	6938      	ldr	r0, [r7, #16]
 800ca6c:	f000 f874 	bl	800cb58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <vPortFree+0xc0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <vPortFree+0xc0>)
 800ca78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca7a:	f7fe f8e7 	bl	800ac4c <xTaskResumeAll>
=======
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <vPortFree+0xb8>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	401a      	ands	r2, r3
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8e8:	f7fe f874 	bl	800b9d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <vPortFree+0xbc>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	4a09      	ldr	r2, [pc, #36]	; (800d91c <vPortFree+0xbc>)
 800d8f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8fa:	6938      	ldr	r0, [r7, #16]
 800d8fc:	f000 f874 	bl	800d9e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d900:	4b07      	ldr	r3, [pc, #28]	; (800d920 <vPortFree+0xc0>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3301      	adds	r3, #1
 800d906:	4a06      	ldr	r2, [pc, #24]	; (800d920 <vPortFree+0xc0>)
 800d908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d90a:	f7fe f871 	bl	800b9f0 <xTaskResumeAll>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800ca7e:	bf00      	nop
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	200020b0 	.word	0x200020b0
 800ca8c:	200020a0 	.word	0x200020a0
 800ca90:	200020ac 	.word	0x200020ac

0800ca94 <prvHeapInit>:
=======
 800d90e:	bf00      	nop
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20002114 	.word	0x20002114
 800d91c:	20002104 	.word	0x20002104
 800d920:	20002110 	.word	0x20002110

0800d924 <prvHeapInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
=======
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800ca9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ca9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <prvHeapInit+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <prvHeapInit+0xac>)
 800cac4:	4413      	add	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	607b      	str	r3, [r7, #4]
=======
 800d92a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d930:	4b27      	ldr	r3, [pc, #156]	; (800d9d0 <prvHeapInit+0xac>)
 800d932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f003 0307 	and.w	r3, r3, #7
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00c      	beq.n	800d958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3307      	adds	r3, #7
 800d942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f023 0307 	bic.w	r3, r3, #7
 800d94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	4a1f      	ldr	r2, [pc, #124]	; (800d9d0 <prvHeapInit+0xac>)
 800d954:	4413      	add	r3, r2
 800d956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800cacc:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <prvHeapInit+0xb0>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <prvHeapInit+0xb0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]
=======
 800d95c:	4a1d      	ldr	r2, [pc, #116]	; (800d9d4 <prvHeapInit+0xb0>)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d962:	4b1c      	ldr	r3, [pc, #112]	; (800d9d4 <prvHeapInit+0xb0>)
 800d964:	2200      	movs	r2, #0
 800d966:	605a      	str	r2, [r3, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae0:	2208      	movs	r2, #8
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0307 	bic.w	r3, r3, #7
 800caee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <prvHeapInit+0xb4>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvHeapInit+0xb4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]
=======
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	4413      	add	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d970:	2208      	movs	r2, #8
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	1a9b      	subs	r3, r3, r2
 800d976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 0307 	bic.w	r3, r3, #7
 800d97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	4a15      	ldr	r2, [pc, #84]	; (800d9d8 <prvHeapInit+0xb4>)
 800d984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d986:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <prvHeapInit+0xb4>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2200      	movs	r2, #0
 800d98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d98e:	4b12      	ldr	r3, [pc, #72]	; (800d9d8 <prvHeapInit+0xb4>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvHeapInit+0xb4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <prvHeapInit+0xb8>)
 800cb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <prvHeapInit+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <prvHeapInit+0xc0>)
 800cb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20001494 	.word	0x20001494
 800cb44:	20002094 	.word	0x20002094
 800cb48:	2000209c 	.word	0x2000209c
 800cb4c:	200020a4 	.word	0x200020a4
 800cb50:	200020a0 	.word	0x200020a0
 800cb54:	200020b0 	.word	0x200020b0

0800cb58 <prvInsertBlockIntoFreeList>:
=======
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <prvHeapInit+0xb4>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <prvHeapInit+0xb8>)
 800d9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	4a09      	ldr	r2, [pc, #36]	; (800d9e0 <prvHeapInit+0xbc>)
 800d9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9bc:	4b09      	ldr	r3, [pc, #36]	; (800d9e4 <prvHeapInit+0xc0>)
 800d9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9c2:	601a      	str	r2, [r3, #0]
}
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	200014f8 	.word	0x200014f8
 800d9d4:	200020f8 	.word	0x200020f8
 800d9d8:	20002100 	.word	0x20002100
 800d9dc:	20002108 	.word	0x20002108
 800d9e0:	20002104 	.word	0x20002104
 800d9e4:	20002114 	.word	0x20002114

0800d9e8 <prvInsertBlockIntoFreeList>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
=======
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <prvInsertBlockIntoFreeList+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e002      	b.n	800cb6c <prvInsertBlockIntoFreeList+0x14>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f7      	bhi.n	800cb66 <prvInsertBlockIntoFreeList+0xe>
=======
 800d9f0:	4b28      	ldr	r3, [pc, #160]	; (800da94 <prvInsertBlockIntoFreeList+0xac>)
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e002      	b.n	800d9fc <prvInsertBlockIntoFreeList+0x14>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	429a      	cmp	r2, r3
 800da04:	d8f7      	bhi.n	800d9f6 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d108      	bne.n	800cb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	607b      	str	r3, [r7, #4]
=======
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	4413      	add	r3, r2
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d108      	bne.n	800da2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	441a      	add	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	607b      	str	r3, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d00d      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e008      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
=======
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	441a      	add	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d118      	bne.n	800da70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	4b15      	ldr	r3, [pc, #84]	; (800da98 <prvInsertBlockIntoFreeList+0xb0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d00d      	beq.n	800da66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	441a      	add	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	e008      	b.n	800da78 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e003      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
=======
 800da66:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <prvInsertBlockIntoFreeList+0xb0>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	e003      	b.n	800da78 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]
=======
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
=======
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d002      	beq.n	800da86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20002094 	.word	0x20002094
 800cc08:	2000209c 	.word	0x2000209c

0800cc0c <RingAdd>:
=======
 800da86:	bf00      	nop
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	200020f8 	.word	0x200020f8
 800da98:	20002100 	.word	0x20002100

0800da9c <RingAdd>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
<<<<<<< HEAD
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc1e:	4619      	mov	r1, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	78fa      	ldrb	r2, [r7, #3]
 800cc24:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	425a      	negs	r2, r3
 800cc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc38:	bf58      	it	pl
 800cc3a:	4253      	negpl	r3, r2
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cc4a:	2b80      	cmp	r3, #128	; 0x80
 800cc4c:	d113      	bne.n	800cc76 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	425a      	negs	r2, r3
 800cc60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc68:	bf58      	it	pl
 800cc6a:	4253      	negpl	r3, r2
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
=======
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daae:	4619      	mov	r1, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	78fa      	ldrb	r2, [r7, #3]
 800dab4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dabc:	3301      	adds	r3, #1
 800dabe:	425a      	negs	r2, r3
 800dac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dac8:	bf58      	it	pl
 800daca:	4253      	negpl	r3, r2
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800dada:	2b80      	cmp	r3, #128	; 0x80
 800dadc:	d113      	bne.n	800db06 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daec:	3301      	adds	r3, #1
 800daee:	425a      	negs	r2, r3
 800daf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800daf8:	bf58      	it	pl
 800dafa:	4253      	negpl	r3, r2
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
<<<<<<< HEAD
 800cc74:	e00b      	b.n	800cc8e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cc84:	3301      	adds	r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800cc8e:	bf00      	nop
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <RingGetAllBytes>:
=======
 800db04:	e00b      	b.n	800db1e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db14:	3301      	adds	r3, #1
 800db16:	b2da      	uxtb	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800db1e:	bf00      	nop
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <RingGetAllBytes>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
<<<<<<< HEAD
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ccaa:	461a      	mov	r2, r3
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f805 	bl	800ccbe <RingGetNBytes>
 800ccb4:	4603      	mov	r3, r0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <RingGetNBytes>:
=======
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db3a:	461a      	mov	r2, r3
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f805 	bl	800db4e <RingGetNBytes>
 800db44:	4603      	mov	r3, r0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <RingGetNBytes>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
<<<<<<< HEAD
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b086      	sub	sp, #24
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	60f8      	str	r0, [r7, #12]
 800ccc6:	60b9      	str	r1, [r7, #8]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d002      	beq.n	800ccdc <RingGetNBytes+0x1e>
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <RingGetNBytes+0x22>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e03e      	b.n	800cd5e <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	2b80      	cmp	r3, #128	; 0x80
 800cce4:	d901      	bls.n	800ccea <RingGetNBytes+0x2c>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e039      	b.n	800cd5e <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800ccea:	2300      	movs	r3, #0
 800ccec:	75fb      	strb	r3, [r7, #23]
 800ccee:	e01b      	b.n	800cd28 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	5c52      	ldrb	r2, [r2, r1]
 800cd02:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	425a      	negs	r2, r3
 800cd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cd16:	bf58      	it	pl
 800cd18:	4253      	negpl	r3, r2
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
 800cd24:	3301      	adds	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]
 800cd28:	7dfa      	ldrb	r2, [r7, #23]
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d205      	bcs.n	800cd3c <RingGetNBytes+0x7e>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cd36:	7dfa      	ldrb	r2, [r7, #23]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3d9      	bcc.n	800ccf0 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f000 f805 	bl	800cd66 <RingClear>

	return uCounter;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <RingClear>:
=======
 800db4e:	b580      	push	{r7, lr}
 800db50:	b086      	sub	sp, #24
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	4613      	mov	r3, r2
 800db5a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <RingGetNBytes+0x1e>
 800db66:	79fb      	ldrb	r3, [r7, #7]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <RingGetNBytes+0x22>
 800db6c:	2300      	movs	r3, #0
 800db6e:	e03e      	b.n	800dbee <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b80      	cmp	r3, #128	; 0x80
 800db74:	d901      	bls.n	800db7a <RingGetNBytes+0x2c>
 800db76:	2300      	movs	r3, #0
 800db78:	e039      	b.n	800dbee <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
 800db7e:	e01b      	b.n	800dbb8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db86:	4619      	mov	r1, r3
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	4413      	add	r3, r2
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	5c52      	ldrb	r2, [r2, r1]
 800db92:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db9a:	3301      	adds	r3, #1
 800db9c:	425a      	negs	r2, r3
 800db9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dba6:	bf58      	it	pl
 800dba8:	4253      	negpl	r3, r2
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	75fb      	strb	r3, [r7, #23]
 800dbb8:	7dfa      	ldrb	r2, [r7, #23]
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d205      	bcs.n	800dbcc <RingGetNBytes+0x7e>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800dbc6:	7dfa      	ldrb	r2, [r7, #23]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d3d9      	bcc.n	800db80 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f805 	bl	800dbf6 <RingClear>

	return uCounter;
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3718      	adds	r7, #24
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <RingClear>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
<<<<<<< HEAD
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <ModbusInit>:
=======
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800dc1e:	bf00      	nop
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
	...

0800dc2c <ModbusInit>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
<<<<<<< HEAD
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af02      	add	r7, sp, #8
 800cda2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800cda4:	4b42      	ldr	r3, [pc, #264]	; (800ceb0 <ModbusInit+0x114>)
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d87d      	bhi.n	800cea8 <ModbusInit+0x10c>
=======
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800dc34:	4b42      	ldr	r3, [pc, #264]	; (800dd40 <ModbusInit+0x114>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d87d      	bhi.n	800dd38 <ModbusInit+0x10c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
<<<<<<< HEAD
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	33bc      	adds	r3, #188	; 0xbc
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff ffd8 	bl	800cd66 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d109      	bne.n	800cdd2 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800cdbe:	4a3d      	ldr	r2, [pc, #244]	; (800ceb4 <ModbusInit+0x118>)
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	483d      	ldr	r0, [pc, #244]	; (800ceb8 <ModbusInit+0x11c>)
 800cdc4:	f7fc fa04 	bl	80091d0 <osThreadNew>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800cdd0:	e033      	b.n	800ce3a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	2b04      	cmp	r3, #4
 800cdd8:	d12e      	bne.n	800ce38 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800cdda:	4a38      	ldr	r2, [pc, #224]	; (800cebc <ModbusInit+0x120>)
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	4838      	ldr	r0, [pc, #224]	; (800cec0 <ModbusInit+0x124>)
 800cde0:	f7fc f9f6 	bl	80091d0 <osThreadNew>
 800cde4:	4602      	mov	r2, r0
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
=======
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	33d0      	adds	r3, #208	; 0xd0
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff ffd8 	bl	800dbf6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d109      	bne.n	800dc62 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800dc4e:	4a3d      	ldr	r2, [pc, #244]	; (800dd44 <ModbusInit+0x118>)
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	483d      	ldr	r0, [pc, #244]	; (800dd48 <ModbusInit+0x11c>)
 800dc54:	f7fc f818 	bl	8009c88 <osThreadNew>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800dc60:	e033      	b.n	800dcca <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d12e      	bne.n	800dcc8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800dc6a:	4a38      	ldr	r2, [pc, #224]	; (800dd4c <ModbusInit+0x120>)
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	4838      	ldr	r0, [pc, #224]	; (800dd50 <ModbusInit+0x124>)
 800dc70:	f7fc f80a 	bl	8009c88 <osThreadNew>
 800dc74:	4602      	mov	r2, r0
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
<<<<<<< HEAD
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800cdf2:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800cdfa:	4a32      	ldr	r2, [pc, #200]	; (800cec4 <ModbusInit+0x128>)
 800cdfc:	9200      	str	r2, [sp, #0]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	4831      	ldr	r0, [pc, #196]	; (800cec8 <ModbusInit+0x12c>)
 800ce02:	f7fe ff65 	bl	800bcd0 <xTimerCreate>
 800ce06:	4602      	mov	r2, r0
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
=======
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800dc82:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800dc8a:	4a32      	ldr	r2, [pc, #200]	; (800dd54 <ModbusInit+0x128>)
 800dc8c:	9200      	str	r2, [sp, #0]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4831      	ldr	r0, [pc, #196]	; (800dd58 <ModbusInit+0x12c>)
 800dc92:	f7fe ff4b 	bl	800cb2c <xTimerCreate>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
<<<<<<< HEAD
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d100      	bne.n	800ce1a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800ce18:	e7fe      	b.n	800ce18 <ModbusInit+0x7c>
=======
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d100      	bne.n	800dcaa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800dca8:	e7fe      	b.n	800dca8 <ModbusInit+0x7c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
<<<<<<< HEAD
 800ce1a:	4a2c      	ldr	r2, [pc, #176]	; (800cecc <ModbusInit+0x130>)
 800ce1c:	2110      	movs	r1, #16
 800ce1e:	2002      	movs	r0, #2
 800ce20:	f7fc fc1a 	bl	8009658 <osMessageQueueNew>
 800ce24:	4602      	mov	r2, r0
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800ce36:	e7fe      	b.n	800ce36 <ModbusInit+0x9a>
=======
 800dcaa:	4a2c      	ldr	r2, [pc, #176]	; (800dd5c <ModbusInit+0x130>)
 800dcac:	2110      	movs	r1, #16
 800dcae:	2002      	movs	r0, #2
 800dcb0:	f7fc fa09 	bl	800a0c6 <osMessageQueueNew>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800dcc6:	e7fe      	b.n	800dcc6 <ModbusInit+0x9a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
<<<<<<< HEAD
 800ce38:	e7fe      	b.n	800ce38 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d100      	bne.n	800ce46 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800ce44:	e7fe      	b.n	800ce44 <ModbusInit+0xa8>
=======
 800dcc8:	e7fe      	b.n	800dcc8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d100      	bne.n	800dcd6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800dcd4:	e7fe      	b.n	800dcd4 <ModbusInit+0xa8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
<<<<<<< HEAD
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800ce4c:	4a20      	ldr	r2, [pc, #128]	; (800ced0 <ModbusInit+0x134>)
 800ce4e:	9200      	str	r2, [sp, #0]
 800ce50:	2200      	movs	r2, #0
 800ce52:	2105      	movs	r1, #5
 800ce54:	481f      	ldr	r0, [pc, #124]	; (800ced4 <ModbusInit+0x138>)
 800ce56:	f7fe ff3b 	bl	800bcd0 <xTimerCreate>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d100      	bne.n	800ce6e <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800ce6c:	e7fe      	b.n	800ce6c <ModbusInit+0xd0>
=======
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800dcdc:	4a20      	ldr	r2, [pc, #128]	; (800dd60 <ModbusInit+0x134>)
 800dcde:	9200      	str	r2, [sp, #0]
 800dce0:	2200      	movs	r2, #0
 800dce2:	2105      	movs	r1, #5
 800dce4:	481f      	ldr	r0, [pc, #124]	; (800dd64 <ModbusInit+0x138>)
 800dce6:	f7fe ff21 	bl	800cb2c <xTimerCreate>
 800dcea:	4602      	mov	r2, r0
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d100      	bne.n	800dcfe <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800dcfc:	e7fe      	b.n	800dcfc <ModbusInit+0xd0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
<<<<<<< HEAD
 800ce6e:	4a1a      	ldr	r2, [pc, #104]	; (800ced8 <ModbusInit+0x13c>)
 800ce70:	2101      	movs	r1, #1
 800ce72:	2001      	movs	r0, #1
 800ce74:	f7fc fb67 	bl	8009546 <osSemaphoreNew>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d100      	bne.n	800ce8c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800ce8a:	e7fe      	b.n	800ce8a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800ce8c:	4b08      	ldr	r3, [pc, #32]	; (800ceb0 <ModbusInit+0x114>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	4619      	mov	r1, r3
 800ce92:	4a12      	ldr	r2, [pc, #72]	; (800cedc <ModbusInit+0x140>)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800ce9a:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <ModbusInit+0x114>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b03      	ldr	r3, [pc, #12]	; (800ceb0 <ModbusInit+0x114>)
 800cea4:	701a      	strb	r2, [r3, #0]
=======
 800dcfe:	4a1a      	ldr	r2, [pc, #104]	; (800dd68 <ModbusInit+0x13c>)
 800dd00:	2101      	movs	r1, #1
 800dd02:	2001      	movs	r0, #1
 800dd04:	f7fc f956 	bl	8009fb4 <osSemaphoreNew>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d100      	bne.n	800dd1c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800dd1a:	e7fe      	b.n	800dd1a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800dd1c:	4b08      	ldr	r3, [pc, #32]	; (800dd40 <ModbusInit+0x114>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	4619      	mov	r1, r3
 800dd22:	4a12      	ldr	r2, [pc, #72]	; (800dd6c <ModbusInit+0x140>)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <ModbusInit+0x114>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b03      	ldr	r3, [pc, #12]	; (800dd40 <ModbusInit+0x114>)
 800dd34:	701a      	strb	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
<<<<<<< HEAD
 800cea6:	e000      	b.n	800ceaa <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800cea8:	e7fe      	b.n	800cea8 <ModbusInit+0x10c>
}
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	200020bc 	.word	0x200020bc
 800ceb4:	0800e944 	.word	0x0800e944
 800ceb8:	0800d0e9 	.word	0x0800d0e9
 800cebc:	0800e968 	.word	0x0800e968
 800cec0:	0800d55d 	.word	0x0800d55d
 800cec4:	0800d08d 	.word	0x0800d08d
 800cec8:	0800e7cc 	.word	0x0800e7cc
 800cecc:	0800e92c 	.word	0x0800e92c
 800ced0:	0800d009 	.word	0x0800d009
 800ced4:	0800e7dc 	.word	0x0800e7dc
 800ced8:	0800e98c 	.word	0x0800e98c
 800cedc:	200020b4 	.word	0x200020b4

0800cee0 <ModbusStart>:
=======
 800dd36:	e000      	b.n	800dd3a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800dd38:	e7fe      	b.n	800dd38 <ModbusInit+0x10c>
}
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20002120 	.word	0x20002120
 800dd44:	0800fa84 	.word	0x0800fa84
 800dd48:	0800df79 	.word	0x0800df79
 800dd4c:	0800faa8 	.word	0x0800faa8
 800dd50:	0800e455 	.word	0x0800e455
 800dd54:	0800df1d 	.word	0x0800df1d
 800dd58:	0800f930 	.word	0x0800f930
 800dd5c:	0800fa6c 	.word	0x0800fa6c
 800dd60:	0800de99 	.word	0x0800de99
 800dd64:	0800f940 	.word	0x0800f940
 800dd68:	0800facc 	.word	0x0800facc
 800dd6c:	20002118 	.word	0x20002118

0800dd70 <ModbusStart>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
<<<<<<< HEAD
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d005      	beq.n	800cefe <ModbusStart+0x1e>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d000      	beq.n	800cefe <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800cefc:	e7fe      	b.n	800cefc <ModbusStart+0x1c>
=======
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d005      	beq.n	800dd8e <ModbusStart+0x1e>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d000      	beq.n	800dd8e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800dd8c:	e7fe      	b.n	800dd8c <ModbusStart+0x1c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
<<<<<<< HEAD
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d004      	beq.n	800cf12 <ModbusStart+0x32>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	d15c      	bne.n	800cfcc <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d007      	beq.n	800cf2a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68d8      	ldr	r0, [r3, #12]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	8a1b      	ldrh	r3, [r3, #16]
 800cf22:	2200      	movs	r2, #0
 800cf24:	4619      	mov	r1, r3
 800cf26:	f7f6 ff89 	bl	8003e3c <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d105      	bne.n	800cf3e <ModbusStart+0x5e>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d100      	bne.n	800cf3e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800cf3c:	e7fe      	b.n	800cf3c <ModbusStart+0x5c>
=======
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d004      	beq.n	800dda2 <ModbusStart+0x32>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dd9e:	2b04      	cmp	r3, #4
 800dda0:	d15c      	bne.n	800de5c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68d8      	ldr	r0, [r3, #12]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8a1b      	ldrh	r3, [r3, #16]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f7f6 f8f3 	bl	8003fa0 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	2b03      	cmp	r3, #3
 800ddc0:	d105      	bne.n	800ddce <ModbusStart+0x5e>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d100      	bne.n	800ddce <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800ddcc:	e7fe      	b.n	800ddcc <ModbusStart+0x5c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
<<<<<<< HEAD
 800cf3e:	bf00      	nop
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fa f82d 	bl	8006fa4 <HAL_UART_GetState>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b20      	cmp	r3, #32
 800cf4e:	d1f7      	bne.n	800cf40 <ModbusStart+0x60>
=======
 800ddce:	bf00      	nop
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f9 fe41 	bl	8007a5c <HAL_UART_GetState>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b20      	cmp	r3, #32
 800ddde:	d1f7      	bne.n	800ddd0 <ModbusStart+0x60>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
<<<<<<< HEAD
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d11a      	bne.n	800cf90 <ModbusStart+0xb0>
=======
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dde6:	2b04      	cmp	r3, #4
 800dde8:	d11a      	bne.n	800de20 <ModbusStart+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
<<<<<<< HEAD
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6858      	ldr	r0, [r3, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	33bc      	adds	r3, #188	; 0xbc
 800cf62:	2280      	movs	r2, #128	; 0x80
 800cf64:	4619      	mov	r1, r3
 800cf66:	f7fb ffc6 	bl	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d000      	beq.n	800cf72 <ModbusStart+0x92>
        	   {
        	         while(1)
 800cf70:	e7fe      	b.n	800cf70 <ModbusStart+0x90>
=======
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6858      	ldr	r0, [r3, #4]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	33d0      	adds	r3, #208	; 0xd0
 800ddf2:	2280      	movs	r2, #128	; 0x80
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f7fb fdda 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d000      	beq.n	800de02 <ModbusStart+0x92>
        	   {
        	         while(1)
 800de00:	e7fe      	b.n	800de00 <ModbusStart+0x90>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
<<<<<<< HEAD
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f022 0204 	bic.w	r2, r2, #4
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	e00b      	b.n	800cfa8 <ModbusStart+0xc8>
=======
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f022 0204 	bic.w	r2, r2, #4
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e00b      	b.n	800de38 <ModbusStart+0xc8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
<<<<<<< HEAD
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6858      	ldr	r0, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	33a6      	adds	r3, #166	; 0xa6
 800cf98:	2201      	movs	r2, #1
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f7f9 f9e8 	bl	8006370 <HAL_UART_Receive_IT>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d000      	beq.n	800cfa8 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800cfa6:	e7fe      	b.n	800cfa6 <ModbusStart+0xc6>
=======
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6858      	ldr	r0, [r3, #4]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	33b8      	adds	r3, #184	; 0xb8
 800de28:	2201      	movs	r2, #1
 800de2a:	4619      	mov	r1, r3
 800de2c:	f7f8 fffc 	bl	8006e28 <HAL_UART_Receive_IT>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d000      	beq.n	800de38 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800de36:	e7fe      	b.n	800de36 <ModbusStart+0xc6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
<<<<<<< HEAD
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7a1b      	ldrb	r3, [r3, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <ModbusStart+0xda>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d100      	bne.n	800cfba <ModbusStart+0xda>
          {
        	  while(1)
 800cfb8:	e7fe      	b.n	800cfb8 <ModbusStart+0xd8>
=======
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7a1b      	ldrb	r3, [r3, #8]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d004      	beq.n	800de4a <ModbusStart+0xda>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b04      	cmp	r3, #4
 800de46:	d100      	bne.n	800de4a <ModbusStart+0xda>
          {
        	  while(1)
 800de48:	e7fe      	b.n	800de48 <ModbusStart+0xd8>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
<<<<<<< HEAD
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7a1b      	ldrb	r3, [r3, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d104      	bne.n	800cfcc <ModbusStart+0xec>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b03      	cmp	r3, #3
 800cfc8:	d100      	bne.n	800cfcc <ModbusStart+0xec>
          {
             	  while(1)
 800cfca:	e7fe      	b.n	800cfca <ModbusStart+0xea>
=======
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7a1b      	ldrb	r3, [r3, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d104      	bne.n	800de5c <ModbusStart+0xec>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d100      	bne.n	800de5c <ModbusStart+0xec>
          {
             	  while(1)
 800de5a:	e7fe      	b.n	800de5a <ModbusStart+0xea>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
<<<<<<< HEAD
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	6078      	str	r0, [r7, #4]
=======
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800de90:	bf00      	nop
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b086      	sub	sp, #24
 800de9c:	af02      	add	r7, sp, #8
 800de9e:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
<<<<<<< HEAD
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e02a      	b.n	800d06c <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d016:	4a1b      	ldr	r2, [pc, #108]	; (800d084 <vTimerCallbackT35+0x7c>)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	429a      	cmp	r2, r3
 800d026:	d11e      	bne.n	800d066 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d028:	4a16      	ldr	r2, [pc, #88]	; (800d084 <vTimerCallbackT35+0x7c>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	2b04      	cmp	r3, #4
 800d034:	d10c      	bne.n	800d050 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d036:	4a13      	ldr	r2, [pc, #76]	; (800d084 <vTimerCallbackT35+0x7c>)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d03e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d042:	2300      	movs	r3, #0
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	2300      	movs	r3, #0
 800d048:	2200      	movs	r2, #0
 800d04a:	2103      	movs	r1, #3
 800d04c:	f7fe fe9c 	bl	800bd88 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d050:	4a0c      	ldr	r2, [pc, #48]	; (800d084 <vTimerCallbackT35+0x7c>)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d058:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d05c:	2300      	movs	r3, #0
 800d05e:	2203      	movs	r2, #3
 800d060:	2100      	movs	r1, #0
 800d062:	f7fe fc05 	bl	800b870 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3301      	adds	r3, #1
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	4b06      	ldr	r3, [pc, #24]	; (800d088 <vTimerCallbackT35+0x80>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	461a      	mov	r2, r3
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4293      	cmp	r3, r2
 800d076:	dbce      	blt.n	800d016 <vTimerCallbackT35+0xe>
=======
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e02a      	b.n	800defc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800dea6:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d11e      	bne.n	800def6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800deb8:	4a16      	ldr	r2, [pc, #88]	; (800df14 <vTimerCallbackT35+0x7c>)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	2b04      	cmp	r3, #4
 800dec4:	d10c      	bne.n	800dee0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800dec6:	4a13      	ldr	r2, [pc, #76]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dece:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800ded2:	2300      	movs	r3, #0
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	2300      	movs	r3, #0
 800ded8:	2200      	movs	r2, #0
 800deda:	2103      	movs	r1, #3
 800dedc:	f7fe fe82 	bl	800cbe4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800dee0:	4a0c      	ldr	r2, [pc, #48]	; (800df14 <vTimerCallbackT35+0x7c>)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800deec:	2300      	movs	r3, #0
 800deee:	2203      	movs	r2, #3
 800def0:	2100      	movs	r1, #0
 800def2:	f7fe fbeb 	bl	800c6cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3301      	adds	r3, #1
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	4b06      	ldr	r3, [pc, #24]	; (800df18 <vTimerCallbackT35+0x80>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4293      	cmp	r3, r2
 800df06:	dbce      	blt.n	800dea6 <vTimerCallbackT35+0xe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}

	}
}
<<<<<<< HEAD
 800d078:	bf00      	nop
 800d07a:	bf00      	nop
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	200020b4 	.word	0x200020b4
 800d088:	200020bc 	.word	0x200020bc

0800d08c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
=======
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20002118 	.word	0x20002118
 800df18:	20002120 	.word	0x20002120

0800df1c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
<<<<<<< HEAD
 800d094:	2300      	movs	r3, #0
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	e017      	b.n	800d0ca <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d09a:	4a11      	ldr	r2, [pc, #68]	; (800d0e0 <vTimerCallbackTimeout+0x54>)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d10b      	bne.n	800d0c4 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d0ac:	4a0c      	ldr	r2, [pc, #48]	; (800d0e0 <vTimerCallbackTimeout+0x54>)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b4:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	2203      	movs	r2, #3
 800d0bc:	f06f 0107 	mvn.w	r1, #7
 800d0c0:	f7fe fbd6 	bl	800b870 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <vTimerCallbackTimeout+0x58>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	dbe1      	blt.n	800d09a <vTimerCallbackTimeout+0xe>
=======
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e017      	b.n	800df5a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800df2a:	4a11      	ldr	r2, [pc, #68]	; (800df70 <vTimerCallbackTimeout+0x54>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d10b      	bne.n	800df54 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800df3c:	4a0c      	ldr	r2, [pc, #48]	; (800df70 <vTimerCallbackTimeout+0x54>)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df44:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800df48:	2300      	movs	r3, #0
 800df4a:	2203      	movs	r2, #3
 800df4c:	f06f 0107 	mvn.w	r1, #7
 800df50:	f7fe fbbc 	bl	800c6cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3301      	adds	r3, #1
 800df58:	60fb      	str	r3, [r7, #12]
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <vTimerCallbackTimeout+0x58>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	4293      	cmp	r3, r2
 800df64:	dbe1      	blt.n	800df2a <vTimerCallbackTimeout+0xe>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
		}

	}

}
<<<<<<< HEAD
 800d0d6:	bf00      	nop
 800d0d8:	bf00      	nop
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	200020b4 	.word	0x200020b4
 800d0e4:	200020bc 	.word	0x200020bc

0800d0e8 <StartTaskModbusSlave>:
=======
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20002118 	.word	0x20002118
 800df74:	20002120 	.word	0x20002120

0800df78 <StartTaskModbusSlave>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


void StartTaskModbusSlave(void *argument)
{
<<<<<<< HEAD
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	60fb      	str	r3, [r7, #12]
=======
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	60fb      	str	r3, [r7, #12]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
<<<<<<< HEAD
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d100:	2b01      	cmp	r3, #1
 800d102:	d004      	beq.n	800d10e <StartTaskModbusSlave+0x26>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	d117      	bne.n	800d13e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d10e:	f04f 31ff 	mov.w	r1, #4294967295
 800d112:	2001      	movs	r0, #1
 800d114:	f7fe fb0a 	bl	800b72c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 fbed 	bl	800d8f8 <getRxBuffer>
 800d11e:	4603      	mov	r3, r0
 800d120:	f113 0f03 	cmn.w	r3, #3
 800d124:	d10b      	bne.n	800d13e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	22fd      	movs	r2, #253	; 0xfd
 800d12a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d132:	3301      	adds	r3, #1
 800d134:	b29a      	uxth	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800d13c:	e0a1      	b.n	800d282 <StartTaskModbusSlave+0x19a>
=======
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2200      	movs	r2, #0
 800df88:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800df90:	2b01      	cmp	r3, #1
 800df92:	d004      	beq.n	800df9e <StartTaskModbusSlave+0x26>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800df9a:	2b04      	cmp	r3, #4
 800df9c:	d117      	bne.n	800dfce <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800df9e:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	f7fe fb4a 	bl	800c63c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 fc21 	bl	800e7f0 <getRxBuffer>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f113 0f03 	cmn.w	r3, #3
 800dfb4:	d10b      	bne.n	800dfce <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	22fd      	movs	r2, #253	; 0xfd
 800dfba:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800dfcc:	e0b7      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  }
   }

   if (modH->u8BufferSize < 7)
<<<<<<< HEAD
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d144:	2b06      	cmp	r3, #6
 800d146:	d80b      	bhi.n	800d160 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	22fa      	movs	r2, #250	; 0xfa
 800d14c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d154:	3301      	adds	r3, #1
 800d156:	b29a      	uxth	r2, r3
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 800d15e:	e090      	b.n	800d282 <StartTaskModbusSlave+0x19a>
=======
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfd4:	2b06      	cmp	r3, #6
 800dfd6:	d80b      	bhi.n	800dff0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	22fa      	movs	r2, #250	; 0xfa
 800dfdc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800dfee:	e0a6      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
<<<<<<< HEAD
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	7cda      	ldrb	r2, [r3, #19]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	7a1b      	ldrb	r3, [r3, #8]
 800d168:	429a      	cmp	r2, r3
 800d16a:	f040 8089 	bne.w	800d280 <StartTaskModbusSlave+0x198>
=======
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	7cda      	ldrb	r2, [r3, #19]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	7a1b      	ldrb	r3, [r3, #8]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	f040 809f 	bne.w	800e13c <StartTaskModbusSlave+0x1c4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
<<<<<<< HEAD
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f000 fc0c 	bl	800d98c <validateRequest>
 800d174:	4603      	mov	r3, r0
 800d176:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00c      	beq.n	800d198 <StartTaskModbusSlave+0xb0>
=======
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f000 fc40 	bl	800e884 <validateRequest>
 800e004:	4603      	mov	r3, r0
 800e006:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00c      	beq.n	800e028 <StartTaskModbusSlave+0xb0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
<<<<<<< HEAD
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	68f9      	ldr	r1, [r7, #12]
 800d182:	4618      	mov	r0, r3
 800d184:	f000 fda6 	bl	800dcd4 <buildException>
			sendTxBuffer(modH);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 fdc2 	bl	800dd12 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d18e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d196:	e074      	b.n	800d282 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d1a4:	f04f 31ff 	mov.w	r1, #4294967295
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fd f825 	bl	800a1f8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	7d1b      	ldrb	r3, [r3, #20]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	2b0f      	cmp	r3, #15
 800d1b6:	d859      	bhi.n	800d26c <StartTaskModbusSlave+0x184>
 800d1b8:	a201      	add	r2, pc, #4	; (adr r2, 800d1c0 <StartTaskModbusSlave+0xd8>)
 800d1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1be:	bf00      	nop
 800d1c0:	0800d201 	.word	0x0800d201
 800d1c4:	0800d201 	.word	0x0800d201
 800d1c8:	0800d213 	.word	0x0800d213
 800d1cc:	0800d213 	.word	0x0800d213
 800d1d0:	0800d225 	.word	0x0800d225
 800d1d4:	0800d237 	.word	0x0800d237
 800d1d8:	0800d26d 	.word	0x0800d26d
 800d1dc:	0800d26d 	.word	0x0800d26d
 800d1e0:	0800d26d 	.word	0x0800d26d
 800d1e4:	0800d26d 	.word	0x0800d26d
 800d1e8:	0800d26d 	.word	0x0800d26d
 800d1ec:	0800d26d 	.word	0x0800d26d
 800d1f0:	0800d26d 	.word	0x0800d26d
 800d1f4:	0800d26d 	.word	0x0800d26d
 800d1f8:	0800d249 	.word	0x0800d249
 800d1fc:	0800d25b 	.word	0x0800d25b
=======
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	68f9      	ldr	r1, [r7, #12]
 800e012:	4618      	mov	r0, r3
 800e014:	f000 fdda 	bl	800ebcc <buildException>
			sendTxBuffer(modH);
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f000 fdf6 	bl	800ec0a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800e01e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800e026:	e08a      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e034:	f04f 31ff 	mov.w	r1, #4294967295
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fc ffaf 	bl	800af9c <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	7d1b      	ldrb	r3, [r3, #20]
 800e042:	3b01      	subs	r3, #1
 800e044:	2b0f      	cmp	r3, #15
 800e046:	d86f      	bhi.n	800e128 <StartTaskModbusSlave+0x1b0>
 800e048:	a201      	add	r2, pc, #4	; (adr r2, 800e050 <StartTaskModbusSlave+0xd8>)
 800e04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04e:	bf00      	nop
 800e050:	0800e091 	.word	0x0800e091
 800e054:	0800e0a5 	.word	0x0800e0a5
 800e058:	0800e0b9 	.word	0x0800e0b9
 800e05c:	0800e0cd 	.word	0x0800e0cd
 800e060:	0800e0e1 	.word	0x0800e0e1
 800e064:	0800e0f3 	.word	0x0800e0f3
 800e068:	0800e129 	.word	0x0800e129
 800e06c:	0800e129 	.word	0x0800e129
 800e070:	0800e129 	.word	0x0800e129
 800e074:	0800e129 	.word	0x0800e129
 800e078:	0800e129 	.word	0x0800e129
 800e07c:	0800e129 	.word	0x0800e129
 800e080:	0800e129 	.word	0x0800e129
 800e084:	0800e129 	.word	0x0800e129
 800e088:	0800e105 	.word	0x0800e105
 800e08c:	0800e117 	.word	0x0800e117
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800e090:	2101      	movs	r1, #1
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f000 fe5b 	bl	800ed4e <process_FC1>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0a2:	e042      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
<<<<<<< HEAD
				modH->i8state = process_FC1(modH);
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 fe28 	bl	800de56 <process_FC1>
 800d206:	4603      	mov	r3, r0
 800d208:	461a      	mov	r2, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d210:	e02d      	b.n	800d26e <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 fed4 	bl	800dfc0 <process_FC3>
 800d218:	4603      	mov	r3, r0
 800d21a:	461a      	mov	r2, r3
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d222:	e024      	b.n	800d26e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f000 ff36 	bl	800e096 <process_FC5>
 800d22a:	4603      	mov	r3, r0
 800d22c:	461a      	mov	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d234:	e01b      	b.n	800d26e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 ff86 	bl	800e148 <process_FC6>
 800d23c:	4603      	mov	r3, r0
 800d23e:	461a      	mov	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d246:	e012      	b.n	800d26e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 ffaf 	bl	800e1ac <process_FC15>
 800d24e:	4603      	mov	r3, r0
 800d250:	461a      	mov	r2, r3
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d258:	e009      	b.n	800d26e <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	f001 f834 	bl	800e2c8 <process_FC16>
 800d260:	4603      	mov	r3, r0
 800d262:	461a      	mov	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800d26a:	e000      	b.n	800d26e <StartTaskModbusSlave+0x186>
			default:
				break;
 800d26c:	bf00      	nop
=======
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800e0a4:	2102      	movs	r1, #2
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 fe51 	bl	800ed4e <process_FC1>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0b6:	e038      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800e0b8:	2103      	movs	r1, #3
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 ff03 	bl	800eec6 <process_FC3>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0ca:	e02e      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800e0cc:	2104      	movs	r1, #4
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 fef9 	bl	800eec6 <process_FC3>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0de:	e024      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f000 ff68 	bl	800efb6 <process_FC5>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e0f0:	e01b      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f000 ffb8 	bl	800f068 <process_FC6>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e102:	e012      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 ffe1 	bl	800f0cc <process_FC15>
 800e10a:	4603      	mov	r3, r0
 800e10c:	461a      	mov	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e114:	e009      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f001 f866 	bl	800f1e8 <process_FC16>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461a      	mov	r2, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800e126:	e000      	b.n	800e12a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800e128:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
<<<<<<< HEAD
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d274:	2300      	movs	r3, #0
 800d276:	2200      	movs	r2, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	f7fc fd43 	bl	8009d04 <xQueueGenericSend>

	 continue;
 800d27e:	e000      	b.n	800d282 <StartTaskModbusSlave+0x19a>
    	continue;
 800d280:	bf00      	nop
  {
 800d282:	e737      	b.n	800d0f4 <StartTaskModbusSlave+0xc>

0800d284 <SendQuery>:
=======
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e130:	2300      	movs	r3, #0
 800e132:	2200      	movs	r2, #0
 800e134:	2100      	movs	r1, #0
 800e136:	f7fc fcb7 	bl	800aaa8 <xQueueGenericSend>

	 continue;
 800e13a:	e000      	b.n	800e13e <StartTaskModbusSlave+0x1c6>
    	continue;
 800e13c:	bf00      	nop
  {
 800e13e:	e721      	b.n	800df84 <StartTaskModbusSlave+0xc>

0800e140 <SendQuery>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
<<<<<<< HEAD
 800d284:	b084      	sub	sp, #16
 800d286:	b580      	push	{r7, lr}
 800d288:	b084      	sub	sp, #16
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	f107 001c 	add.w	r0, r7, #28
 800d292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 800e140:	b084      	sub	sp, #16
 800e142:	b580      	push	{r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	f107 001c 	add.w	r0, r7, #28
 800e14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
<<<<<<< HEAD
 800d296:	2300      	movs	r3, #0
 800d298:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fc ffa7 	bl	800a1f8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	7a1b      	ldrb	r3, [r3, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <SendQuery+0x32>
 800d2b2:	23ff      	movs	r3, #255	; 0xff
 800d2b4:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d001      	beq.n	800d2c4 <SendQuery+0x40>
 800d2c0:	23fe      	movs	r3, #254	; 0xfe
 800d2c2:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d2c4:	7f3b      	ldrb	r3, [r7, #28]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <SendQuery+0x4c>
 800d2ca:	7f3b      	ldrb	r3, [r7, #28]
 800d2cc:	2bf7      	cmp	r3, #247	; 0xf7
 800d2ce:	d901      	bls.n	800d2d4 <SendQuery+0x50>
 800d2d0:	23f7      	movs	r3, #247	; 0xf7
 800d2d2:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d2d4:	7bbb      	ldrb	r3, [r7, #14]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d2da:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	f7fc fd09 	bl	8009d04 <xQueueGenericSend>
		 return error;
 800d2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2f6:	e129      	b.n	800d54c <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800d2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800d300:	7f3a      	ldrb	r2, [r7, #28]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d306:	7f7a      	ldrb	r2, [r7, #29]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800d30c:	8bfb      	ldrh	r3, [r7, #30]
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	b29b      	uxth	r3, r3
 800d312:	b2da      	uxtb	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800d318:	8bfb      	ldrh	r3, [r7, #30]
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800d320:	7f7b      	ldrb	r3, [r7, #29]
 800d322:	3b01      	subs	r3, #1
 800d324:	2b0f      	cmp	r3, #15
 800d326:	f200 80fe 	bhi.w	800d526 <SendQuery+0x2a2>
 800d32a:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <SendQuery+0xac>)
 800d32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d330:	0800d371 	.word	0x0800d371
 800d334:	0800d371 	.word	0x0800d371
 800d338:	0800d371 	.word	0x0800d371
 800d33c:	0800d371 	.word	0x0800d371
 800d340:	0800d38f 	.word	0x0800d38f
 800d344:	0800d3b1 	.word	0x0800d3b1
 800d348:	0800d527 	.word	0x0800d527
 800d34c:	0800d527 	.word	0x0800d527
 800d350:	0800d527 	.word	0x0800d527
 800d354:	0800d527 	.word	0x0800d527
 800d358:	0800d527 	.word	0x0800d527
 800d35c:	0800d527 	.word	0x0800d527
 800d360:	0800d527 	.word	0x0800d527
 800d364:	0800d527 	.word	0x0800d527
 800d368:	0800d3d3 	.word	0x0800d3d3
 800d36c:	0800d491 	.word	0x0800d491
=======
 800e152:	2300      	movs	r3, #0
 800e154:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e15c:	f04f 31ff 	mov.w	r1, #4294967295
 800e160:	4618      	mov	r0, r3
 800e162:	f7fc ff1b 	bl	800af9c <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7a1b      	ldrb	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <SendQuery+0x32>
 800e16e:	23ff      	movs	r3, #255	; 0xff
 800e170:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <SendQuery+0x40>
 800e17c:	23fe      	movs	r3, #254	; 0xfe
 800e17e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800e180:	7f3b      	ldrb	r3, [r7, #28]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <SendQuery+0x4c>
 800e186:	7f3b      	ldrb	r3, [r7, #28]
 800e188:	2bf7      	cmp	r3, #247	; 0xf7
 800e18a:	d901      	bls.n	800e190 <SendQuery+0x50>
 800e18c:	23f7      	movs	r3, #247	; 0xf7
 800e18e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800e190:	7bbb      	ldrb	r3, [r7, #14]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00e      	beq.n	800e1b4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800e196:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	f7fc fc7d 	bl	800aaa8 <xQueueGenericSend>
		 return error;
 800e1ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1b2:	e147      	b.n	800e444 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800e1b4:	7f7b      	ldrb	r3, [r7, #29]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d008      	beq.n	800e1cc <SendQuery+0x8c>
 800e1ba:	7f7b      	ldrb	r3, [r7, #29]
 800e1bc:	2b02      	cmp	r3, #2
 800e1be:	d005      	beq.n	800e1cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800e1c0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800e1c2:	2b05      	cmp	r3, #5
 800e1c4:	d002      	beq.n	800e1cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800e1c6:	7f7b      	ldrb	r3, [r7, #29]
 800e1c8:	2b0f      	cmp	r3, #15
 800e1ca:	d104      	bne.n	800e1d6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800e1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800e1d4:	e00f      	b.n	800e1f6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800e1d6:	7f7b      	ldrb	r3, [r7, #29]
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d008      	beq.n	800e1ee <SendQuery+0xae>
 800e1dc:	7f7b      	ldrb	r3, [r7, #29]
 800e1de:	2b04      	cmp	r3, #4
 800e1e0:	d005      	beq.n	800e1ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800e1e2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800e1e4:	2b06      	cmp	r3, #6
 800e1e6:	d002      	beq.n	800e1ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800e1e8:	7f7b      	ldrb	r3, [r7, #29]
 800e1ea:	2b10      	cmp	r3, #16
 800e1ec:	d103      	bne.n	800e1f6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800e1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800e1f6:	7f3a      	ldrb	r2, [r7, #28]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800e1fc:	7f7a      	ldrb	r2, [r7, #29]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800e202:	8bfb      	ldrh	r3, [r7, #30]
 800e204:	0a1b      	lsrs	r3, r3, #8
 800e206:	b29b      	uxth	r3, r3
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800e20e:	8bfb      	ldrh	r3, [r7, #30]
 800e210:	b2da      	uxtb	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800e216:	7f7b      	ldrb	r3, [r7, #29]
 800e218:	3b01      	subs	r3, #1
 800e21a:	2b0f      	cmp	r3, #15
 800e21c:	f200 80ff 	bhi.w	800e41e <SendQuery+0x2de>
 800e220:	a201      	add	r2, pc, #4	; (adr r2, 800e228 <SendQuery+0xe8>)
 800e222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e226:	bf00      	nop
 800e228:	0800e269 	.word	0x0800e269
 800e22c:	0800e269 	.word	0x0800e269
 800e230:	0800e269 	.word	0x0800e269
 800e234:	0800e269 	.word	0x0800e269
 800e238:	0800e287 	.word	0x0800e287
 800e23c:	0800e2a9 	.word	0x0800e2a9
 800e240:	0800e41f 	.word	0x0800e41f
 800e244:	0800e41f 	.word	0x0800e41f
 800e248:	0800e41f 	.word	0x0800e41f
 800e24c:	0800e41f 	.word	0x0800e41f
 800e250:	0800e41f 	.word	0x0800e41f
 800e254:	0800e41f 	.word	0x0800e41f
 800e258:	0800e41f 	.word	0x0800e41f
 800e25c:	0800e41f 	.word	0x0800e41f
 800e260:	0800e2cb 	.word	0x0800e2cb
 800e264:	0800e389 	.word	0x0800e389
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
<<<<<<< HEAD
 800d370:	8c3b      	ldrh	r3, [r7, #32]
 800d372:	0a1b      	lsrs	r3, r3, #8
 800d374:	b29b      	uxth	r3, r3
 800d376:	b2da      	uxtb	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d37c:	8c3b      	ldrh	r3, [r7, #32]
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2206      	movs	r2, #6
 800d388:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d38c:	e0cb      	b.n	800d526 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <SendQuery+0x116>
 800d396:	22ff      	movs	r2, #255	; 0xff
 800d398:	e000      	b.n	800d39c <SendQuery+0x118>
 800d39a:	2200      	movs	r2, #0
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2206      	movs	r2, #6
 800d3aa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d3ae:	e0ba      	b.n	800d526 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	0a1b      	lsrs	r3, r3, #8
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2206      	movs	r2, #6
 800d3cc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800d3d0:	e0a9      	b.n	800d526 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800d3d2:	8c3b      	ldrh	r3, [r7, #32]
 800d3d4:	091b      	lsrs	r3, r3, #4
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800d3da:	7a7b      	ldrb	r3, [r7, #9]
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800d3e0:	8c3b      	ldrh	r3, [r7, #32]
 800d3e2:	f003 030f 	and.w	r3, r3, #15
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d005      	beq.n	800d3f8 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800d3f2:	7a7b      	ldrb	r3, [r7, #9]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d3f8:	8c3b      	ldrh	r3, [r7, #32]
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d404:	8c3b      	ldrh	r3, [r7, #32]
 800d406:	b2da      	uxtb	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7bfa      	ldrb	r2, [r7, #15]
 800d410:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2207      	movs	r2, #7
 800d416:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d41a:	2300      	movs	r3, #0
 800d41c:	81bb      	strh	r3, [r7, #12]
 800d41e:	e031      	b.n	800d484 <SendQuery+0x200>
	    {
	        if(i%2)
 800d420:	89bb      	ldrh	r3, [r7, #12]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	b29b      	uxth	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00f      	beq.n	800d44c <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800d42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42e:	89bb      	ldrh	r3, [r7, #12]
 800d430:	085b      	lsrs	r3, r3, #1
 800d432:	b29b      	uxth	r3, r3
 800d434:	005b      	lsls	r3, r3, #1
 800d436:	4413      	add	r3, r2
 800d438:	881a      	ldrh	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d440:	4619      	mov	r1, r3
 800d442:	b2d2      	uxtb	r2, r2
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	440b      	add	r3, r1
 800d448:	74da      	strb	r2, [r3, #19]
 800d44a:	e010      	b.n	800d46e <SendQuery+0x1ea>
=======
 800e268:	8c3b      	ldrh	r3, [r7, #32]
 800e26a:	0a1b      	lsrs	r3, r3, #8
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e274:	8c3b      	ldrh	r3, [r7, #32]
 800e276:	b2da      	uxtb	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2206      	movs	r2, #6
 800e280:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e284:	e0cb      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <SendQuery+0x152>
 800e28e:	22ff      	movs	r2, #255	; 0xff
 800e290:	e000      	b.n	800e294 <SendQuery+0x154>
 800e292:	2200      	movs	r2, #0
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2206      	movs	r2, #6
 800e2a2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e2a6:	e0ba      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800e2c8:	e0a9      	b.n	800e41e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800e2ca:	8c3b      	ldrh	r3, [r7, #32]
 800e2cc:	091b      	lsrs	r3, r3, #4
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800e2d2:	7a7b      	ldrb	r3, [r7, #9]
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800e2d8:	8c3b      	ldrh	r3, [r7, #32]
 800e2da:	f003 030f 	and.w	r3, r3, #15
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800e2ea:	7a7b      	ldrb	r3, [r7, #9]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e2f0:	8c3b      	ldrh	r3, [r7, #32]
 800e2f2:	0a1b      	lsrs	r3, r3, #8
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e2fc:	8c3b      	ldrh	r3, [r7, #32]
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7bfa      	ldrb	r2, [r7, #15]
 800e308:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2207      	movs	r2, #7
 800e30e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800e312:	2300      	movs	r3, #0
 800e314:	81bb      	strh	r3, [r7, #12]
 800e316:	e031      	b.n	800e37c <SendQuery+0x23c>
	    {
	        if(i%2)
 800e318:	89bb      	ldrh	r3, [r7, #12]
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	b29b      	uxth	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00f      	beq.n	800e344 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800e324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e326:	89bb      	ldrh	r3, [r7, #12]
 800e328:	085b      	lsrs	r3, r3, #1
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	881a      	ldrh	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e338:	4619      	mov	r1, r3
 800e33a:	b2d2      	uxtb	r2, r2
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	440b      	add	r3, r1
 800e340:	74da      	strb	r2, [r3, #19]
 800e342:	e010      	b.n	800e366 <SendQuery+0x226>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
<<<<<<< HEAD
 800d44c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d44e:	89bb      	ldrh	r3, [r7, #12]
 800d450:	085b      	lsrs	r3, r3, #1
 800d452:	b29b      	uxth	r3, r3
 800d454:	005b      	lsls	r3, r3, #1
 800d456:	4413      	add	r3, r2
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	0a1b      	lsrs	r3, r3, #8
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d464:	4619      	mov	r1, r3
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	440b      	add	r3, r1
 800d46c:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d474:	3301      	adds	r3, #1
 800d476:	b2da      	uxtb	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800d47e:	89bb      	ldrh	r3, [r7, #12]
 800d480:	3301      	adds	r3, #1
 800d482:	81bb      	strh	r3, [r7, #12]
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	b29b      	uxth	r3, r3
 800d488:	89ba      	ldrh	r2, [r7, #12]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d3c8      	bcc.n	800d420 <SendQuery+0x19c>
	    }
	    break;
 800d48e:	e04a      	b.n	800d526 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800d490:	8c3b      	ldrh	r3, [r7, #32]
 800d492:	0a1b      	lsrs	r3, r3, #8
 800d494:	b29b      	uxth	r3, r3
 800d496:	b2da      	uxtb	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800d49c:	8c3b      	ldrh	r3, [r7, #32]
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800d4a4:	8c3b      	ldrh	r3, [r7, #32]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2207      	movs	r2, #7
 800d4b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	817b      	strh	r3, [r7, #10]
 800d4bc:	e02e      	b.n	800d51c <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800d4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c0:	897b      	ldrh	r3, [r7, #10]
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	0a1b      	lsrs	r3, r3, #8
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	b2d2      	uxtb	r2, r2
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	440b      	add	r3, r1
 800d4da:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800d4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ee:	897b      	ldrh	r3, [r7, #10]
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	4413      	add	r3, r2
 800d4f4:	881a      	ldrh	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	b2d2      	uxtb	r2, r2
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	440b      	add	r3, r1
 800d504:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800d516:	897b      	ldrh	r3, [r7, #10]
 800d518:	3301      	adds	r3, #1
 800d51a:	817b      	strh	r3, [r7, #10]
 800d51c:	8c3b      	ldrh	r3, [r7, #32]
 800d51e:	897a      	ldrh	r2, [r7, #10]
 800d520:	429a      	cmp	r2, r3
 800d522:	d3cc      	bcc.n	800d4be <SendQuery+0x23a>
	    }
	    break;
 800d524:	bf00      	nop
=======
 800e344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e346:	89bb      	ldrh	r3, [r7, #12]
 800e348:	085b      	lsrs	r3, r3, #1
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	4413      	add	r3, r2
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	0a1b      	lsrs	r3, r3, #8
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e35c:	4619      	mov	r1, r3
 800e35e:	b2d2      	uxtb	r2, r2
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	440b      	add	r3, r1
 800e364:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e36c:	3301      	adds	r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800e376:	89bb      	ldrh	r3, [r7, #12]
 800e378:	3301      	adds	r3, #1
 800e37a:	81bb      	strh	r3, [r7, #12]
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	b29b      	uxth	r3, r3
 800e380:	89ba      	ldrh	r2, [r7, #12]
 800e382:	429a      	cmp	r2, r3
 800e384:	d3c8      	bcc.n	800e318 <SendQuery+0x1d8>
	    }
	    break;
 800e386:	e04a      	b.n	800e41e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e388:	8c3b      	ldrh	r3, [r7, #32]
 800e38a:	0a1b      	lsrs	r3, r3, #8
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e394:	8c3b      	ldrh	r3, [r7, #32]
 800e396:	b2da      	uxtb	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800e39c:	8c3b      	ldrh	r3, [r7, #32]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2207      	movs	r2, #7
 800e3ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	817b      	strh	r3, [r7, #10]
 800e3b4:	e02e      	b.n	800e414 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800e3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b8:	897b      	ldrh	r3, [r7, #10]
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	4413      	add	r3, r2
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	0a1b      	lsrs	r3, r3, #8
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	b2d2      	uxtb	r2, r2
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	440b      	add	r3, r1
 800e3d2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3da:	3301      	adds	r3, #1
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800e3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e6:	897b      	ldrh	r3, [r7, #10]
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	4413      	add	r3, r2
 800e3ec:	881a      	ldrh	r2, [r3, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	440b      	add	r3, r1
 800e3fc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e404:	3301      	adds	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e40e:	897b      	ldrh	r3, [r7, #10]
 800e410:	3301      	adds	r3, #1
 800e412:	817b      	strh	r3, [r7, #10]
 800e414:	8c3b      	ldrh	r3, [r7, #32]
 800e416:	897a      	ldrh	r2, [r7, #10]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d3cc      	bcc.n	800e3b6 <SendQuery+0x276>
	    }
	    break;
 800e41c:	bf00      	nop
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	}


	sendTxBuffer(modH);
<<<<<<< HEAD
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fbf3 	bl	800dd12 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d532:	2300      	movs	r3, #0
 800d534:	2200      	movs	r2, #0
 800d536:	2100      	movs	r1, #0
 800d538:	f7fc fbe4 	bl	8009d04 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	749a      	strb	r2, [r3, #18]
	return 0;
 800d54a:	2300      	movs	r3, #0


}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d556:	b004      	add	sp, #16
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop

0800d55c <StartTaskModbusMaster>:
=======
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 fbf3 	bl	800ec0a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e42a:	2300      	movs	r3, #0
 800e42c:	2200      	movs	r2, #0
 800e42e:	2100      	movs	r1, #0
 800e430:	f7fc fb3a 	bl	800aaa8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	749a      	strb	r2, [r3, #18]
	return 0;
 800e442:	2300      	movs	r3, #0


}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e44e:	b004      	add	sp, #16
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop

0800e454 <StartTaskModbusMaster>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


void StartTaskModbusMaster(void *argument)
{
<<<<<<< HEAD
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08c      	sub	sp, #48	; 0x30
 800d560:	af02      	add	r7, sp, #8
 800d562:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800e454:	b580      	push	{r7, lr}
 800e456:	b08c      	sub	sp, #48	; 0x30
 800e458:	af02      	add	r7, sp, #8
 800e45a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
<<<<<<< HEAD
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d56e:	f107 010c 	add.w	r1, r7, #12
 800d572:	f04f 32ff 	mov.w	r2, #4294967295
 800d576:	4618      	mov	r0, r3
 800d578:	f7fc fd5e 	bl	800a038 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	f107 030c 	add.w	r3, r7, #12
 800d584:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d588:	f7ff fe7c 	bl	800d284 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800d58c:	f04f 31ff 	mov.w	r1, #4294967295
 800d590:	2001      	movs	r0, #1
 800d592:	f7fe f8cb 	bl	800b72c <ulTaskNotifyTake>
 800d596:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	2200      	movs	r2, #0
 800d59c:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d018      	beq.n	800d5d6 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	22f8      	movs	r2, #248	; 0xf8
 800d5b0:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d5c2:	69b8      	ldr	r0, [r7, #24]
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	2203      	movs	r2, #3
 800d5d0:	f7fe f94e 	bl	800b870 <xTaskGenericNotify>
    	  continue;
 800d5d4:	e09a      	b.n	800d70c <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800d5d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5d8:	f000 f98e 	bl	800d8f8 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	d818      	bhi.n	800d618 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	22fa      	movs	r2, #250	; 0xfa
 800d5f2:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d604:	69b8      	ldr	r0, [r7, #24]
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d60c:	4619      	mov	r1, r3
 800d60e:	2300      	movs	r3, #0
 800d610:	2203      	movs	r2, #3
 800d612:	f7fe f92d 	bl	800b870 <xTaskGenericNotify>
		  continue;
 800d616:	e079      	b.n	800d70c <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800d61e:	2300      	movs	r3, #0
 800d620:	9300      	str	r3, [sp, #0]
 800d622:	2300      	movs	r3, #0
 800d624:	2200      	movs	r2, #0
 800d626:	2103      	movs	r1, #3
 800d628:	f7fe fbae 	bl	800bd88 <xTimerGenericCommand>
=======
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e466:	f107 010c 	add.w	r1, r7, #12
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fc fcb4 	bl	800addc <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	f107 030c 	add.w	r3, r7, #12
 800e47c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e480:	f7ff fe5e 	bl	800e140 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800e484:	f04f 31ff 	mov.w	r1, #4294967295
 800e488:	2001      	movs	r0, #1
 800e48a:	f7fe f8d7 	bl	800c63c <ulTaskNotifyTake>
 800e48e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	2200      	movs	r2, #0
 800e494:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d018      	beq.n	800e4ce <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	22f8      	movs	r2, #248	; 0xf8
 800e4a8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e4ba:	69b8      	ldr	r0, [r7, #24]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	f7fe f900 	bl	800c6cc <xTaskGenericNotify>
    	  continue;
 800e4cc:	e09a      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800e4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4d0:	f000 f98e 	bl	800e7f0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4da:	2b05      	cmp	r3, #5
 800e4dc:	d818      	bhi.n	800e510 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	22fa      	movs	r2, #250	; 0xfa
 800e4ea:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e4fc:	69b8      	ldr	r0, [r7, #24]
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e504:	4619      	mov	r1, r3
 800e506:	2300      	movs	r3, #0
 800e508:	2203      	movs	r2, #3
 800e50a:	f7fe f8df 	bl	800c6cc <xTaskGenericNotify>
		  continue;
 800e50e:	e079      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800e516:	2300      	movs	r3, #0
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2300      	movs	r3, #0
 800e51c:	2200      	movs	r2, #0
 800e51e:	2103      	movs	r1, #3
 800e520:	f7fe fb60 	bl	800cbe4 <xTimerGenericCommand>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
<<<<<<< HEAD
 800d62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d62e:	f000 f8f5 	bl	800d81c <validateAnswer>
 800d632:	4603      	mov	r3, r0
 800d634:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800d636:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d010      	beq.n	800d660 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d640:	2200      	movs	r2, #0
 800d642:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	7ffa      	ldrb	r2, [r7, #31]
 800d64a:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800d64c:	69b8      	ldr	r0, [r7, #24]
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d654:	4619      	mov	r1, r3
 800d656:	2300      	movs	r3, #0
 800d658:	2203      	movs	r2, #3
 800d65a:	f7fe f909 	bl	800b870 <xTaskGenericNotify>
	     continue;
 800d65e:	e055      	b.n	800d70c <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	7ffa      	ldrb	r2, [r7, #31]
 800d664:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d66c:	f04f 31ff 	mov.w	r1, #4294967295
 800d670:	4618      	mov	r0, r3
 800d672:	f7fc fdc1 	bl	800a1f8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	7d1b      	ldrb	r3, [r3, #20]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	2b0f      	cmp	r3, #15
 800d67e:	d82b      	bhi.n	800d6d8 <StartTaskModbusMaster+0x17c>
 800d680:	a201      	add	r2, pc, #4	; (adr r2, 800d688 <StartTaskModbusMaster+0x12c>)
 800d682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d686:	bf00      	nop
 800d688:	0800d6c9 	.word	0x0800d6c9
 800d68c:	0800d6c9 	.word	0x0800d6c9
 800d690:	0800d6d1 	.word	0x0800d6d1
 800d694:	0800d6d1 	.word	0x0800d6d1
 800d698:	0800d6d9 	.word	0x0800d6d9
 800d69c:	0800d6d9 	.word	0x0800d6d9
 800d6a0:	0800d6d9 	.word	0x0800d6d9
 800d6a4:	0800d6d9 	.word	0x0800d6d9
 800d6a8:	0800d6d9 	.word	0x0800d6d9
 800d6ac:	0800d6d9 	.word	0x0800d6d9
 800d6b0:	0800d6d9 	.word	0x0800d6d9
 800d6b4:	0800d6d9 	.word	0x0800d6d9
 800d6b8:	0800d6d9 	.word	0x0800d6d9
 800d6bc:	0800d6d9 	.word	0x0800d6d9
 800d6c0:	0800d6d9 	.word	0x0800d6d9
 800d6c4:	0800d6d9 	.word	0x0800d6d9
=======
 800e524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e526:	f000 f8f5 	bl	800e714 <validateAnswer>
 800e52a:	4603      	mov	r3, r0
 800e52c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800e52e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d010      	beq.n	800e558 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	7ffa      	ldrb	r2, [r7, #31]
 800e542:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e544:	69b8      	ldr	r0, [r7, #24]
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e54c:	4619      	mov	r1, r3
 800e54e:	2300      	movs	r3, #0
 800e550:	2203      	movs	r2, #3
 800e552:	f7fe f8bb 	bl	800c6cc <xTaskGenericNotify>
	     continue;
 800e556:	e055      	b.n	800e604 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	7ffa      	ldrb	r2, [r7, #31]
 800e55c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e564:	f04f 31ff 	mov.w	r1, #4294967295
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fc fd17 	bl	800af9c <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	7d1b      	ldrb	r3, [r3, #20]
 800e572:	3b01      	subs	r3, #1
 800e574:	2b0f      	cmp	r3, #15
 800e576:	d82b      	bhi.n	800e5d0 <StartTaskModbusMaster+0x17c>
 800e578:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <StartTaskModbusMaster+0x12c>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c9 	.word	0x0800e5c9
 800e58c:	0800e5c9 	.word	0x0800e5c9
 800e590:	0800e5d1 	.word	0x0800e5d1
 800e594:	0800e5d1 	.word	0x0800e5d1
 800e598:	0800e5d1 	.word	0x0800e5d1
 800e59c:	0800e5d1 	.word	0x0800e5d1
 800e5a0:	0800e5d1 	.word	0x0800e5d1
 800e5a4:	0800e5d1 	.word	0x0800e5d1
 800e5a8:	0800e5d1 	.word	0x0800e5d1
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e5d1 	.word	0x0800e5d1
 800e5b4:	0800e5d1 	.word	0x0800e5d1
 800e5b8:	0800e5d1 	.word	0x0800e5d1
 800e5bc:	0800e5d1 	.word	0x0800e5d1
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
<<<<<<< HEAD
 800d6c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6ca:	f000 f821 	bl	800d710 <get_FC1>
	      break;
 800d6ce:	e004      	b.n	800d6da <StartTaskModbusMaster+0x17e>
=======
 800e5c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c2:	f000 f821 	bl	800e608 <get_FC1>
	      break;
 800e5c6:	e004      	b.n	800e5d2 <StartTaskModbusMaster+0x17e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
<<<<<<< HEAD
 800d6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6d2:	f000 f874 	bl	800d7be <get_FC3>
	      break;
 800d6d6:	e000      	b.n	800d6da <StartTaskModbusMaster+0x17e>
=======
 800e5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5ca:	f000 f874 	bl	800e6b6 <get_FC3>
	      break;
 800e5ce:	e000      	b.n	800e5d2 <StartTaskModbusMaster+0x17e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
<<<<<<< HEAD
 800d6d8:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10e      	bne.n	800d70a <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	f7fc fb04 	bl	8009d04 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800d6fc:	69b8      	ldr	r0, [r7, #24]
 800d6fe:	2300      	movs	r3, #0
 800d700:	2203      	movs	r2, #3
 800d702:	f06f 010a 	mvn.w	r1, #10
 800d706:	f7fe f8b3 	bl	800b870 <xTaskGenericNotify>
=======
 800e5d0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10e      	bne.n	800e602 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	f7fc fa5a 	bl	800aaa8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800e5f4:	69b8      	ldr	r0, [r7, #24]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	f06f 010a 	mvn.w	r1, #10
 800e5fe:	f7fe f865 	bl	800c6cc <xTaskGenericNotify>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	  }


	  continue;
<<<<<<< HEAD
 800d70a:	bf00      	nop
  {
 800d70c:	e72c      	b.n	800d568 <StartTaskModbusMaster+0xc>
 800d70e:	bf00      	nop

0800d710 <get_FC1>:
=======
 800e602:	bf00      	nop
  {
 800e604:	e72c      	b.n	800e460 <StartTaskModbusMaster+0xc>
 800e606:	bf00      	nop

0800e608 <get_FC1>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800d718:	2303      	movs	r3, #3
 800d71a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800d71c:	2300      	movs	r3, #0
 800d71e:	73fb      	strb	r3, [r7, #15]
 800d720:	e043      	b.n	800d7aa <get_FC1+0x9a>

        if(i%2)
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d01c      	beq.n	800d768 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 800d72e:	7bfa      	ldrb	r2, [r7, #15]
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	4413      	add	r3, r2
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	4413      	add	r3, r2
 800d738:	7cd8      	ldrb	r0, [r3, #19]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	085b      	lsrs	r3, r3, #1
 800d744:	b2db      	uxtb	r3, r3
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	4413      	add	r3, r2
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	b2d9      	uxtb	r1, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	085b      	lsrs	r3, r3, #1
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	18d4      	adds	r4, r2, r3
 800d75e:	f000 fa5f 	bl	800dc20 <word>
 800d762:	4603      	mov	r3, r0
 800d764:	8023      	strh	r3, [r4, #0]
 800d766:	e01d      	b.n	800d7a4 <get_FC1+0x94>
=======
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e610:	2303      	movs	r3, #3
 800e612:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
 800e618:	e043      	b.n	800e6a2 <get_FC1+0x9a>

        if(i%2)
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	b2db      	uxtb	r3, r3
 800e622:	2b00      	cmp	r3, #0
 800e624:	d01c      	beq.n	800e660 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800e626:	7bfa      	ldrb	r2, [r7, #15]
 800e628:	7bbb      	ldrb	r3, [r7, #14]
 800e62a:	4413      	add	r3, r2
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	4413      	add	r3, r2
 800e630:	7cd8      	ldrb	r0, [r3, #19]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e638:	7bfb      	ldrb	r3, [r7, #15]
 800e63a:	085b      	lsrs	r3, r3, #1
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	b2d9      	uxtb	r1, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	085b      	lsrs	r3, r3, #1
 800e650:	b2db      	uxtb	r3, r3
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	18d4      	adds	r4, r2, r3
 800e656:	f000 fa5f 	bl	800eb18 <word>
 800e65a:	4603      	mov	r3, r0
 800e65c:	8023      	strh	r3, [r4, #0]
 800e65e:	e01d      	b.n	800e69c <get_FC1+0x94>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
        else
        {

<<<<<<< HEAD
        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
 800d770:	085b      	lsrs	r3, r3, #1
 800d772:	b2db      	uxtb	r3, r3
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	4413      	add	r3, r2
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	0a1b      	lsrs	r3, r3, #8
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	b2d8      	uxtb	r0, r3
 800d780:	7bfa      	ldrb	r2, [r7, #15]
 800d782:	7bbb      	ldrb	r3, [r7, #14]
 800d784:	4413      	add	r3, r2
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	4413      	add	r3, r2
 800d78a:	7cd9      	ldrb	r1, [r3, #19]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d792:	7bfb      	ldrb	r3, [r7, #15]
 800d794:	085b      	lsrs	r3, r3, #1
 800d796:	b2db      	uxtb	r3, r3
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	18d4      	adds	r4, r2, r3
 800d79c:	f000 fa40 	bl	800dc20 <word>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	73fb      	strb	r3, [r7, #15]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	7d5b      	ldrb	r3, [r3, #21]
 800d7ae:	7bfa      	ldrb	r2, [r7, #15]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d3b6      	bcc.n	800d722 <get_FC1+0x12>
=======
        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	085b      	lsrs	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	005b      	lsls	r3, r3, #1
 800e66e:	4413      	add	r3, r2
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	0a1b      	lsrs	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	b2d8      	uxtb	r0, r3
 800e678:	7bfa      	ldrb	r2, [r7, #15]
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	4413      	add	r3, r2
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	4413      	add	r3, r2
 800e682:	7cd9      	ldrb	r1, [r3, #19]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e68a:	7bfb      	ldrb	r3, [r7, #15]
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	18d4      	adds	r4, r2, r3
 800e694:	f000 fa40 	bl	800eb18 <word>
 800e698:	4603      	mov	r3, r0
 800e69a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	73fb      	strb	r3, [r7, #15]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	7d5b      	ldrb	r3, [r3, #21]
 800e6a6:	7bfa      	ldrb	r2, [r7, #15]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d3b6      	bcc.n	800e61a <get_FC1+0x12>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

     }
}
<<<<<<< HEAD
 800d7b4:	bf00      	nop
 800d7b6:	bf00      	nop
 800d7b8:	3714      	adds	r7, #20
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd90      	pop	{r4, r7, pc}

0800d7be <get_FC3>:
=======
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd90      	pop	{r4, r7, pc}

0800e6b6 <get_FC3>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800d7be:	b590      	push	{r4, r7, lr}
 800d7c0:	b085      	sub	sp, #20
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73bb      	strb	r3, [r7, #14]
 800d7ce:	e018      	b.n	800d802 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	7cd8      	ldrb	r0, [r3, #19]
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	4413      	add	r3, r2
 800d7e0:	7cd9      	ldrb	r1, [r3, #19]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	18d4      	adds	r4, r2, r3
 800d7ee:	f000 fa17 	bl	800dc20 <word>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
 800d7f8:	3302      	adds	r3, #2
 800d7fa:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
 800d7fe:	3301      	adds	r3, #1
 800d800:	73bb      	strb	r3, [r7, #14]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7d5b      	ldrb	r3, [r3, #21]
 800d806:	085b      	lsrs	r3, r3, #1
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	7bba      	ldrb	r2, [r7, #14]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d3df      	bcc.n	800d7d0 <get_FC3+0x12>
    }
}
 800d810:	bf00      	nop
 800d812:	bf00      	nop
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	bd90      	pop	{r4, r7, pc}
	...

0800d81c <validateAnswer>:
=======
 800e6b6:	b590      	push	{r4, r7, lr}
 800e6b8:	b085      	sub	sp, #20
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73bb      	strb	r3, [r7, #14]
 800e6c6:	e018      	b.n	800e6fa <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	7cd8      	ldrb	r0, [r3, #19]
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	7cd9      	ldrb	r1, [r3, #19]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e6e0:	7bbb      	ldrb	r3, [r7, #14]
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	18d4      	adds	r4, r2, r3
 800e6e6:	f000 fa17 	bl	800eb18 <word>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	3302      	adds	r3, #2
 800e6f2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	73bb      	strb	r3, [r7, #14]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d5b      	ldrb	r3, [r3, #21]
 800e6fe:	085b      	lsrs	r3, r3, #1
 800e700:	b2db      	uxtb	r3, r3
 800e702:	7bba      	ldrb	r2, [r7, #14]
 800e704:	429a      	cmp	r2, r3
 800e706:	d3df      	bcc.n	800e6c8 <get_FC3+0x12>
    }
}
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd90      	pop	{r4, r7, pc}
	...

0800e714 <validateAnswer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
=======
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
<<<<<<< HEAD
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d82a:	3b02      	subs	r3, #2
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	4413      	add	r3, r2
 800d830:	7cdb      	ldrb	r3, [r3, #19]
 800d832:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800d834:	b21a      	sxth	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d83c:	3b01      	subs	r3, #1
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	440b      	add	r3, r1
 800d842:	7cdb      	ldrb	r3, [r3, #19]
 800d844:	b21b      	sxth	r3, r3
 800d846:	4313      	orrs	r3, r2
 800d848:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800d84a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f103 0213 	add.w	r2, r3, #19
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d858:	3b02      	subs	r3, #2
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	4619      	mov	r1, r3
 800d85e:	4610      	mov	r0, r2
 800d860:	f000 f9f1 	bl	800dc46 <calcCRC>
 800d864:	4603      	mov	r3, r0
 800d866:	461a      	mov	r2, r3
 800d868:	89bb      	ldrh	r3, [r7, #12]
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d009      	beq.n	800d882 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d874:	3301      	adds	r3, #1
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800d87e:	23fc      	movs	r3, #252	; 0xfc
 800d880:	e034      	b.n	800d8ec <validateAnswer+0xd0>
=======
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e722:	3b02      	subs	r3, #2
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	4413      	add	r3, r2
 800e728:	7cdb      	ldrb	r3, [r3, #19]
 800e72a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e72c:	b21a      	sxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e734:	3b01      	subs	r3, #1
 800e736:	6879      	ldr	r1, [r7, #4]
 800e738:	440b      	add	r3, r1
 800e73a:	7cdb      	ldrb	r3, [r3, #19]
 800e73c:	b21b      	sxth	r3, r3
 800e73e:	4313      	orrs	r3, r2
 800e740:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e742:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f103 0213 	add.w	r2, r3, #19
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e750:	3b02      	subs	r3, #2
 800e752:	b2db      	uxtb	r3, r3
 800e754:	4619      	mov	r1, r3
 800e756:	4610      	mov	r0, r2
 800e758:	f000 f9f1 	bl	800eb3e <calcCRC>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	89bb      	ldrh	r3, [r7, #12]
 800e762:	4293      	cmp	r3, r2
 800e764:	d009      	beq.n	800e77a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e76c:	3301      	adds	r3, #1
 800e76e:	b29a      	uxth	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e776:	23fc      	movs	r3, #252	; 0xfc
 800e778:	e034      	b.n	800e7e4 <validateAnswer+0xd0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
<<<<<<< HEAD
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	7d1b      	ldrb	r3, [r3, #20]
 800d886:	b25b      	sxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	da09      	bge.n	800d8a0 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d892:	3301      	adds	r3, #1
 800d894:	b29a      	uxth	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800d89c:	23fb      	movs	r3, #251	; 0xfb
 800d89e:	e025      	b.n	800d8ec <validateAnswer+0xd0>
=======
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7d1b      	ldrb	r3, [r3, #20]
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	da09      	bge.n	800e798 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e78a:	3301      	adds	r3, #1
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e794:	23fb      	movs	r3, #251	; 0xfb
 800e796:	e025      	b.n	800e7e4 <validateAnswer+0xd0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }

    // check fct code
    bool isSupported = false;
<<<<<<< HEAD
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73bb      	strb	r3, [r7, #14]
 800d8a8:	e00c      	b.n	800d8c4 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	4a11      	ldr	r2, [pc, #68]	; (800d8f4 <validateAnswer+0xd8>)
 800d8ae:	5cd2      	ldrb	r2, [r2, r3]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	7d1b      	ldrb	r3, [r3, #20]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d102      	bne.n	800d8be <validateAnswer+0xa2>
        {
            isSupported = 1;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	73fb      	strb	r3, [r7, #15]
            break;
 800d8bc:	e005      	b.n	800d8ca <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	73bb      	strb	r3, [r7, #14]
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
 800d8c6:	2b07      	cmp	r3, #7
 800d8c8:	d9ef      	bls.n	800d8aa <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	f083 0301 	eor.w	r3, r3, #1
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d009      	beq.n	800d8ea <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d8dc:	3301      	adds	r3, #1
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e000      	b.n	800d8ec <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800d8ea:	2300      	movs	r3, #0
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	0800e99c 	.word	0x0800e99c

0800d8f8 <getRxBuffer>:
=======
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e79c:	2300      	movs	r3, #0
 800e79e:	73bb      	strb	r3, [r7, #14]
 800e7a0:	e00c      	b.n	800e7bc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e7a2:	7bbb      	ldrb	r3, [r7, #14]
 800e7a4:	4a11      	ldr	r2, [pc, #68]	; (800e7ec <validateAnswer+0xd8>)
 800e7a6:	5cd2      	ldrb	r2, [r2, r3]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	7d1b      	ldrb	r3, [r3, #20]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d102      	bne.n	800e7b6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	73fb      	strb	r3, [r7, #15]
            break;
 800e7b4:	e005      	b.n	800e7c2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e7b6:	7bbb      	ldrb	r3, [r7, #14]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	73bb      	strb	r3, [r7, #14]
 800e7bc:	7bbb      	ldrb	r3, [r7, #14]
 800e7be:	2b07      	cmp	r3, #7
 800e7c0:	d9ef      	bls.n	800e7a2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	f083 0301 	eor.w	r3, r3, #1
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d009      	beq.n	800e7e2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e000      	b.n	800e7e4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}
 800e7ec:	0800fadc 	.word	0x0800fadc

0800e7f0 <getRxBuffer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
=======
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
<<<<<<< HEAD
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d906:	2b01      	cmp	r3, #1
 800d908:	d104      	bne.n	800d914 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f8 fe90 	bl	8006634 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d008      	beq.n	800d930 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	33bc      	adds	r3, #188	; 0xbc
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff fa1f 	bl	800cd66 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800d928:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800d92c:	81fb      	strh	r3, [r7, #14]
 800d92e:	e019      	b.n	800d964 <getRxBuffer+0x6c>
=======
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d104      	bne.n	800e80c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	f7f8 fc70 	bl	80070ec <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e812:	2b00      	cmp	r3, #0
 800e814:	d008      	beq.n	800e828 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	33d0      	adds	r3, #208	; 0xd0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff f9eb 	bl	800dbf6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e820:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e824:	81fb      	strh	r3, [r7, #14]
 800e826:	e019      	b.n	800e85c <getRxBuffer+0x6c>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
<<<<<<< HEAD
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	3313      	adds	r3, #19
 800d93a:	4619      	mov	r1, r3
 800d93c:	4610      	mov	r0, r2
 800d93e:	f7ff f9ac 	bl	800cc9a <RingGetAllBytes>
 800d942:	4603      	mov	r3, r0
 800d944:	461a      	mov	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d952:	3301      	adds	r3, #1
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d962:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d107      	bne.n	800d97e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6858      	ldr	r0, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	33a6      	adds	r3, #166	; 0xa6
 800d976:	2201      	movs	r2, #1
 800d978:	4619      	mov	r1, r3
 800d97a:	f7f8 fcf9 	bl	8006370 <HAL_UART_Receive_IT>
	}

    return i16result;
 800d97e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <validateRequest>:
=======
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3313      	adds	r3, #19
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f7ff f978 	bl	800db2a <RingGetAllBytes>
 800e83a:	4603      	mov	r3, r0
 800e83c:	461a      	mov	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e84a:	3301      	adds	r3, #1
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e85a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e862:	2b01      	cmp	r3, #1
 800e864:	d107      	bne.n	800e876 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6858      	ldr	r0, [r3, #4]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	33b8      	adds	r3, #184	; 0xb8
 800e86e:	2201      	movs	r2, #1
 800e870:	4619      	mov	r1, r3
 800e872:	f7f8 fad9 	bl	8006e28 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <validateRequest>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
=======
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
<<<<<<< HEAD
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d99a:	3b02      	subs	r3, #2
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	4413      	add	r3, r2
 800d9a0:	7cdb      	ldrb	r3, [r3, #19]
 800d9a2:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800d9a4:	b21a      	sxth	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	440b      	add	r3, r1
 800d9b2:	7cdb      	ldrb	r3, [r3, #19]
 800d9b4:	b21b      	sxth	r3, r3
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800d9ba:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f103 0213 	add.w	r2, r3, #19
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d9c8:	3b02      	subs	r3, #2
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	f000 f939 	bl	800dc46 <calcCRC>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	893b      	ldrh	r3, [r7, #8]
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d009      	beq.n	800d9f2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 800d9ee:	23fc      	movs	r3, #252	; 0xfc
 800d9f0:	e10f      	b.n	800dc12 <validateRequest+0x286>
=======
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e892:	3b02      	subs	r3, #2
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	4413      	add	r3, r2
 800e898:	7cdb      	ldrb	r3, [r3, #19]
 800e89a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e89c:	b21a      	sxth	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	440b      	add	r3, r1
 800e8aa:	7cdb      	ldrb	r3, [r3, #19]
 800e8ac:	b21b      	sxth	r3, r3
 800e8ae:	4313      	orrs	r3, r2
 800e8b0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e8b2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f103 0213 	add.w	r2, r3, #19
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8c0:	3b02      	subs	r3, #2
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f000 f939 	bl	800eb3e <calcCRC>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	893b      	ldrh	r3, [r7, #8]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d009      	beq.n	800e8ea <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e8dc:	3301      	adds	r3, #1
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e8e6:	23fc      	movs	r3, #252	; 0xfc
 800e8e8:	e10f      	b.n	800eb0a <validateRequest+0x286>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	    }



	    // check fct code
	    bool isSupported = false;
<<<<<<< HEAD
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73bb      	strb	r3, [r7, #14]
 800d9fa:	e00c      	b.n	800da16 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800d9fc:	7bbb      	ldrb	r3, [r7, #14]
 800d9fe:	4a87      	ldr	r2, [pc, #540]	; (800dc1c <validateRequest+0x290>)
 800da00:	5cd2      	ldrb	r2, [r2, r3]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	7d1b      	ldrb	r3, [r3, #20]
 800da06:	429a      	cmp	r2, r3
 800da08:	d102      	bne.n	800da10 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800da0a:	2301      	movs	r3, #1
 800da0c:	73fb      	strb	r3, [r7, #15]
	            break;
 800da0e:	e005      	b.n	800da1c <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800da10:	7bbb      	ldrb	r3, [r7, #14]
 800da12:	3301      	adds	r3, #1
 800da14:	73bb      	strb	r3, [r7, #14]
 800da16:	7bbb      	ldrb	r3, [r7, #14]
 800da18:	2b07      	cmp	r3, #7
 800da1a:	d9ef      	bls.n	800d9fc <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	f083 0301 	eor.w	r3, r3, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d009      	beq.n	800da3c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800da2e:	3301      	adds	r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800da38:	2301      	movs	r3, #1
 800da3a:	e0ea      	b.n	800dc12 <validateRequest+0x286>
=======
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	73bb      	strb	r3, [r7, #14]
 800e8f2:	e00c      	b.n	800e90e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e8f4:	7bbb      	ldrb	r3, [r7, #14]
 800e8f6:	4a87      	ldr	r2, [pc, #540]	; (800eb14 <validateRequest+0x290>)
 800e8f8:	5cd2      	ldrb	r2, [r2, r3]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	7d1b      	ldrb	r3, [r3, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d102      	bne.n	800e908 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e902:	2301      	movs	r3, #1
 800e904:	73fb      	strb	r3, [r7, #15]
	            break;
 800e906:	e005      	b.n	800e914 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e908:	7bbb      	ldrb	r3, [r7, #14]
 800e90a:	3301      	adds	r3, #1
 800e90c:	73bb      	strb	r3, [r7, #14]
 800e90e:	7bbb      	ldrb	r3, [r7, #14]
 800e910:	2b07      	cmp	r3, #7
 800e912:	d9ef      	bls.n	800e8f4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	f083 0301 	eor.w	r3, r3, #1
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d009      	beq.n	800e934 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e926:	3301      	adds	r3, #1
 800e928:	b29a      	uxth	r2, r3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e930:	2301      	movs	r3, #1
 800e932:	e0ea      	b.n	800eb0a <validateRequest+0x286>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
<<<<<<< HEAD
 800da3c:	2300      	movs	r3, #0
 800da3e:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800da40:	2300      	movs	r3, #0
 800da42:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	7d1b      	ldrb	r3, [r3, #20]
 800da48:	3b01      	subs	r3, #1
 800da4a:	2b0f      	cmp	r3, #15
 800da4c:	f200 80e0 	bhi.w	800dc10 <validateRequest+0x284>
 800da50:	a201      	add	r2, pc, #4	; (adr r2, 800da58 <validateRequest+0xcc>)
 800da52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da56:	bf00      	nop
 800da58:	0800da99 	.word	0x0800da99
 800da5c:	0800da99 	.word	0x0800da99
 800da60:	0800dbb1 	.word	0x0800dbb1
 800da64:	0800dbb1 	.word	0x0800dbb1
 800da68:	0800db45 	.word	0x0800db45
 800da6c:	0800db8d 	.word	0x0800db8d
 800da70:	0800dc11 	.word	0x0800dc11
 800da74:	0800dc11 	.word	0x0800dc11
 800da78:	0800dc11 	.word	0x0800dc11
 800da7c:	0800dc11 	.word	0x0800dc11
 800da80:	0800dc11 	.word	0x0800dc11
 800da84:	0800dc11 	.word	0x0800dc11
 800da88:	0800dc11 	.word	0x0800dc11
 800da8c:	0800dc11 	.word	0x0800dc11
 800da90:	0800da99 	.word	0x0800da99
 800da94:	0800dbb1 	.word	0x0800dbb1
=======
 800e934:	2300      	movs	r3, #0
 800e936:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	3b01      	subs	r3, #1
 800e942:	2b0f      	cmp	r3, #15
 800e944:	f200 80e0 	bhi.w	800eb08 <validateRequest+0x284>
 800e948:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <validateRequest+0xcc>)
 800e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94e:	bf00      	nop
 800e950:	0800e991 	.word	0x0800e991
 800e954:	0800e991 	.word	0x0800e991
 800e958:	0800eaa9 	.word	0x0800eaa9
 800e95c:	0800eaa9 	.word	0x0800eaa9
 800e960:	0800ea3d 	.word	0x0800ea3d
 800e964:	0800ea85 	.word	0x0800ea85
 800e968:	0800eb09 	.word	0x0800eb09
 800e96c:	0800eb09 	.word	0x0800eb09
 800e970:	0800eb09 	.word	0x0800eb09
 800e974:	0800eb09 	.word	0x0800eb09
 800e978:	0800eb09 	.word	0x0800eb09
 800e97c:	0800eb09 	.word	0x0800eb09
 800e980:	0800eb09 	.word	0x0800eb09
 800e984:	0800eb09 	.word	0x0800eb09
 800e988:	0800e991 	.word	0x0800e991
 800e98c:	0800eaa9 	.word	0x0800eaa9
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
<<<<<<< HEAD
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	7d5a      	ldrb	r2, [r3, #21]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	7d9b      	ldrb	r3, [r3, #22]
 800daa0:	4619      	mov	r1, r3
 800daa2:	4610      	mov	r0, r2
 800daa4:	f000 f8bc 	bl	800dc20 <word>
 800daa8:	4603      	mov	r3, r0
 800daaa:	091b      	lsrs	r3, r3, #4
 800daac:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7dda      	ldrb	r2, [r3, #23]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7e1b      	ldrb	r3, [r3, #24]
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f000 f8b1 	bl	800dc20 <word>
 800dabe:	4603      	mov	r3, r0
 800dac0:	091b      	lsrs	r3, r3, #4
 800dac2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7dda      	ldrb	r2, [r3, #23]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	7e1b      	ldrb	r3, [r3, #24]
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f000 f8a6 	bl	800dc20 <word>
 800dad4:	4603      	mov	r3, r0
 800dad6:	f003 030f 	and.w	r3, r3, #15
 800dada:	b29b      	uxth	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <validateRequest+0x15a>
 800dae0:	897b      	ldrh	r3, [r7, #10]
 800dae2:	3301      	adds	r3, #1
 800dae4:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800dae6:	89ba      	ldrh	r2, [r7, #12]
 800dae8:	897b      	ldrh	r3, [r7, #10]
 800daea:	4413      	add	r3, r2
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800daf2:	4293      	cmp	r3, r2
 800daf4:	dd01      	ble.n	800dafa <validateRequest+0x16e>
 800daf6:	2302      	movs	r3, #2
 800daf8:	e08b      	b.n	800dc12 <validateRequest+0x286>
=======
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	7d5a      	ldrb	r2, [r3, #21]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7d9b      	ldrb	r3, [r3, #22]
 800e998:	4619      	mov	r1, r3
 800e99a:	4610      	mov	r0, r2
 800e99c:	f000 f8bc 	bl	800eb18 <word>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	091b      	lsrs	r3, r3, #4
 800e9a4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7dda      	ldrb	r2, [r3, #23]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7e1b      	ldrb	r3, [r3, #24]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	f000 f8b1 	bl	800eb18 <word>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	091b      	lsrs	r3, r3, #4
 800e9ba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7dda      	ldrb	r2, [r3, #23]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	7e1b      	ldrb	r3, [r3, #24]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f000 f8a6 	bl	800eb18 <word>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f003 030f 	and.w	r3, r3, #15
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <validateRequest+0x15a>
 800e9d8:	897b      	ldrh	r3, [r7, #10]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e9de:	89ba      	ldrh	r2, [r7, #12]
 800e9e0:	897b      	ldrh	r3, [r7, #10]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	dd01      	ble.n	800e9f2 <validateRequest+0x16e>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e08b      	b.n	800eb0a <validateRequest+0x286>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
<<<<<<< HEAD
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7dda      	ldrb	r2, [r3, #23]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7e1b      	ldrb	r3, [r3, #24]
 800db02:	4619      	mov	r1, r3
 800db04:	4610      	mov	r0, r2
 800db06:	f000 f88b 	bl	800dc20 <word>
 800db0a:	4603      	mov	r3, r0
 800db0c:	08db      	lsrs	r3, r3, #3
 800db0e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	7dda      	ldrb	r2, [r3, #23]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7e1b      	ldrb	r3, [r3, #24]
 800db18:	4619      	mov	r1, r3
 800db1a:	4610      	mov	r0, r2
 800db1c:	f000 f880 	bl	800dc20 <word>
 800db20:	4603      	mov	r3, r0
 800db22:	f003 0307 	and.w	r3, r3, #7
 800db26:	b29b      	uxth	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <validateRequest+0x1a6>
 800db2c:	897b      	ldrh	r3, [r7, #10]
 800db2e:	3301      	adds	r3, #1
 800db30:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800db32:	897b      	ldrh	r3, [r7, #10]
 800db34:	3305      	adds	r3, #5
 800db36:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800db38:	897b      	ldrh	r3, [r7, #10]
 800db3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db3e:	d960      	bls.n	800dc02 <validateRequest+0x276>
 800db40:	2303      	movs	r3, #3
 800db42:	e066      	b.n	800dc12 <validateRequest+0x286>
=======
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7dda      	ldrb	r2, [r3, #23]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7e1b      	ldrb	r3, [r3, #24]
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f000 f88b 	bl	800eb18 <word>
 800ea02:	4603      	mov	r3, r0
 800ea04:	08db      	lsrs	r3, r3, #3
 800ea06:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7dda      	ldrb	r2, [r3, #23]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7e1b      	ldrb	r3, [r3, #24]
 800ea10:	4619      	mov	r1, r3
 800ea12:	4610      	mov	r0, r2
 800ea14:	f000 f880 	bl	800eb18 <word>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <validateRequest+0x1a6>
 800ea24:	897b      	ldrh	r3, [r7, #10]
 800ea26:	3301      	adds	r3, #1
 800ea28:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800ea2a:	897b      	ldrh	r3, [r7, #10]
 800ea2c:	3305      	adds	r3, #5
 800ea2e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800ea30:	897b      	ldrh	r3, [r7, #10]
 800ea32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea36:	d960      	bls.n	800eafa <validateRequest+0x276>
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e066      	b.n	800eb0a <validateRequest+0x286>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
<<<<<<< HEAD
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	7d5a      	ldrb	r2, [r3, #21]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d9b      	ldrb	r3, [r3, #22]
 800db4c:	4619      	mov	r1, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	f000 f866 	bl	800dc20 <word>
 800db54:	4603      	mov	r3, r0
 800db56:	091b      	lsrs	r3, r3, #4
 800db58:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	7d5a      	ldrb	r2, [r3, #21]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	7d9b      	ldrb	r3, [r3, #22]
 800db62:	4619      	mov	r1, r3
 800db64:	4610      	mov	r0, r2
 800db66:	f000 f85b 	bl	800dc20 <word>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f003 030f 	and.w	r3, r3, #15
 800db70:	b29b      	uxth	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <validateRequest+0x1f0>
 800db76:	89bb      	ldrh	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800db82:	89ba      	ldrh	r2, [r7, #12]
 800db84:	429a      	cmp	r2, r3
 800db86:	d93e      	bls.n	800dc06 <validateRequest+0x27a>
 800db88:	2302      	movs	r3, #2
 800db8a:	e042      	b.n	800dc12 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7d5a      	ldrb	r2, [r3, #21]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7d9b      	ldrb	r3, [r3, #22]
 800db94:	4619      	mov	r1, r3
 800db96:	4610      	mov	r0, r2
 800db98:	f000 f842 	bl	800dc20 <word>
 800db9c:	4603      	mov	r3, r0
 800db9e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800dba6:	89ba      	ldrh	r2, [r7, #12]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d92e      	bls.n	800dc0a <validateRequest+0x27e>
 800dbac:	2302      	movs	r3, #2
 800dbae:	e030      	b.n	800dc12 <validateRequest+0x286>
=======
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7d5a      	ldrb	r2, [r3, #21]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7d9b      	ldrb	r3, [r3, #22]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4610      	mov	r0, r2
 800ea48:	f000 f866 	bl	800eb18 <word>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	091b      	lsrs	r3, r3, #4
 800ea50:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7d5a      	ldrb	r2, [r3, #21]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d9b      	ldrb	r3, [r3, #22]
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	f000 f85b 	bl	800eb18 <word>
 800ea62:	4603      	mov	r3, r0
 800ea64:	f003 030f 	and.w	r3, r3, #15
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <validateRequest+0x1f0>
 800ea6e:	89bb      	ldrh	r3, [r7, #12]
 800ea70:	3301      	adds	r3, #1
 800ea72:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800ea7a:	89ba      	ldrh	r2, [r7, #12]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d93e      	bls.n	800eafe <validateRequest+0x27a>
 800ea80:	2302      	movs	r3, #2
 800ea82:	e042      	b.n	800eb0a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	7d5a      	ldrb	r2, [r3, #21]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	7d9b      	ldrb	r3, [r3, #22]
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4610      	mov	r0, r2
 800ea90:	f000 f842 	bl	800eb18 <word>
 800ea94:	4603      	mov	r3, r0
 800ea96:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ea9e:	89ba      	ldrh	r2, [r7, #12]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d92e      	bls.n	800eb02 <validateRequest+0x27e>
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	e030      	b.n	800eb0a <validateRequest+0x286>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
<<<<<<< HEAD
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	7d5a      	ldrb	r2, [r3, #21]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7d9b      	ldrb	r3, [r3, #22]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	4610      	mov	r0, r2
 800dbbc:	f000 f830 	bl	800dc20 <word>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	7dda      	ldrb	r2, [r3, #23]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7e1b      	ldrb	r3, [r3, #24]
 800dbcc:	4619      	mov	r1, r3
 800dbce:	4610      	mov	r0, r2
 800dbd0:	f000 f826 	bl	800dc20 <word>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 800dbd8:	89ba      	ldrh	r2, [r7, #12]
 800dbda:	897b      	ldrh	r3, [r7, #10]
 800dbdc:	4413      	add	r3, r2
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	dd01      	ble.n	800dbec <validateRequest+0x260>
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e012      	b.n	800dc12 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800dbec:	897b      	ldrh	r3, [r7, #10]
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	3305      	adds	r3, #5
 800dbf4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800dbf6:	897b      	ldrh	r3, [r7, #10]
 800dbf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbfc:	d907      	bls.n	800dc0e <validateRequest+0x282>
 800dbfe:	2303      	movs	r3, #3
 800dc00:	e007      	b.n	800dc12 <validateRequest+0x286>
	        break;
 800dc02:	bf00      	nop
 800dc04:	e004      	b.n	800dc10 <validateRequest+0x284>
	        break;
 800dc06:	bf00      	nop
 800dc08:	e002      	b.n	800dc10 <validateRequest+0x284>
	        break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <validateRequest+0x284>
	        break;
 800dc0e:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800dc10:	2300      	movs	r3, #0

}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0800e99c 	.word	0x0800e99c

0800dc20 <word>:
=======
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	7d5a      	ldrb	r2, [r3, #21]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7d9b      	ldrb	r3, [r3, #22]
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f000 f830 	bl	800eb18 <word>
 800eab8:	4603      	mov	r3, r0
 800eaba:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	7dda      	ldrb	r2, [r3, #23]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7e1b      	ldrb	r3, [r3, #24]
 800eac4:	4619      	mov	r1, r3
 800eac6:	4610      	mov	r0, r2
 800eac8:	f000 f826 	bl	800eb18 <word>
 800eacc:	4603      	mov	r3, r0
 800eace:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800ead0:	89ba      	ldrh	r2, [r7, #12]
 800ead2:	897b      	ldrh	r3, [r7, #10]
 800ead4:	4413      	add	r3, r2
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800eadc:	4293      	cmp	r3, r2
 800eade:	dd01      	ble.n	800eae4 <validateRequest+0x260>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e012      	b.n	800eb0a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800eae4:	897b      	ldrh	r3, [r7, #10]
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	3305      	adds	r3, #5
 800eaec:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800eaee:	897b      	ldrh	r3, [r7, #10]
 800eaf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eaf4:	d907      	bls.n	800eb06 <validateRequest+0x282>
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e007      	b.n	800eb0a <validateRequest+0x286>
	        break;
 800eafa:	bf00      	nop
 800eafc:	e004      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eafe:	bf00      	nop
 800eb00:	e002      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <validateRequest+0x284>
	        break;
 800eb06:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800eb08:	2300      	movs	r3, #0

}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	0800fadc 	.word	0x0800fadc

0800eb18 <word>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
<<<<<<< HEAD
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	460a      	mov	r2, r1
 800dc2a:	71fb      	strb	r3, [r7, #7]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800dc30:	79bb      	ldrb	r3, [r7, #6]
 800dc32:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800dc38:	89bb      	ldrh	r3, [r7, #12]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <calcCRC>:
=======
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	4603      	mov	r3, r0
 800eb20:	460a      	mov	r2, r1
 800eb22:	71fb      	strb	r3, [r7, #7]
 800eb24:	4613      	mov	r3, r2
 800eb26:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800eb28:	79bb      	ldrb	r3, [r7, #6]
 800eb2a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800eb30:	89bb      	ldrh	r3, [r7, #12]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <calcCRC>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
<<<<<<< HEAD
 800dc46:	b480      	push	{r7}
 800dc48:	b087      	sub	sp, #28
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800dc52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc56:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	74fb      	strb	r3, [r7, #19]
 800dc5c:	e023      	b.n	800dca6 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800dc5e:	7cfb      	ldrb	r3, [r7, #19]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	4413      	add	r3, r2
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	461a      	mov	r2, r3
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	4053      	eors	r3, r2
 800dc6c:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800dc6e:	2301      	movs	r3, #1
 800dc70:	74bb      	strb	r3, [r7, #18]
 800dc72:	e012      	b.n	800dc9a <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f003 0301 	and.w	r3, r3, #1
 800dc7a:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	085b      	lsrs	r3, r3, #1
 800dc80:	617b      	str	r3, [r7, #20]
            if (flag)
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d005      	beq.n	800dc94 <calcCRC+0x4e>
                temp ^= 0xA001;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800dc8e:	f083 0301 	eor.w	r3, r3, #1
 800dc92:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800dc94:	7cbb      	ldrb	r3, [r7, #18]
 800dc96:	3301      	adds	r3, #1
 800dc98:	74bb      	strb	r3, [r7, #18]
 800dc9a:	7cbb      	ldrb	r3, [r7, #18]
 800dc9c:	2b08      	cmp	r3, #8
 800dc9e:	d9e9      	bls.n	800dc74 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800dca0:	7cfb      	ldrb	r3, [r7, #19]
 800dca2:	3301      	adds	r3, #1
 800dca4:	74fb      	strb	r3, [r7, #19]
 800dca6:	7cfa      	ldrb	r2, [r7, #19]
 800dca8:	78fb      	ldrb	r3, [r7, #3]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d3d7      	bcc.n	800dc5e <calcCRC+0x18>
=======
 800eb3e:	b480      	push	{r7}
 800eb40:	b087      	sub	sp, #28
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	460b      	mov	r3, r1
 800eb48:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800eb4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb4e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800eb50:	2300      	movs	r3, #0
 800eb52:	74fb      	strb	r3, [r7, #19]
 800eb54:	e023      	b.n	800eb9e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800eb56:	7cfb      	ldrb	r3, [r7, #19]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	4053      	eors	r3, r2
 800eb64:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800eb66:	2301      	movs	r3, #1
 800eb68:	74bb      	strb	r3, [r7, #18]
 800eb6a:	e012      	b.n	800eb92 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	085b      	lsrs	r3, r3, #1
 800eb78:	617b      	str	r3, [r7, #20]
            if (flag)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d005      	beq.n	800eb8c <calcCRC+0x4e>
                temp ^= 0xA001;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800eb86:	f083 0301 	eor.w	r3, r3, #1
 800eb8a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800eb8c:	7cbb      	ldrb	r3, [r7, #18]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	74bb      	strb	r3, [r7, #18]
 800eb92:	7cbb      	ldrb	r3, [r7, #18]
 800eb94:	2b08      	cmp	r3, #8
 800eb96:	d9e9      	bls.n	800eb6c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800eb98:	7cfb      	ldrb	r3, [r7, #19]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	74fb      	strb	r3, [r7, #19]
 800eb9e:	7cfa      	ldrb	r2, [r7, #19]
 800eba0:	78fb      	ldrb	r3, [r7, #3]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d3d7      	bcc.n	800eb56 <calcCRC+0x18>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
<<<<<<< HEAD
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	0a1b      	lsrs	r3, r3, #8
 800dcb2:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	021b      	lsls	r3, r3, #8
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	b29b      	uxth	r3, r3

}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <buildException>:
=======
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	021b      	lsls	r3, r3, #8
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	b29b      	uxth	r3, r3

}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	371c      	adds	r7, #28
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <buildException>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
<<<<<<< HEAD
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6039      	str	r1, [r7, #0]
 800dcde:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	7d1b      	ldrb	r3, [r3, #20]
 800dce4:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	7a1a      	ldrb	r2, [r3, #8]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
 800dcf0:	3b80      	subs	r3, #128	; 0x80
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	79fa      	ldrb	r2, [r7, #7]
 800dcfc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	2203      	movs	r2, #3
 800dd02:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800dd06:	bf00      	nop
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <sendTxBuffer>:
=======
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	6039      	str	r1, [r7, #0]
 800ebd6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	7a1a      	ldrb	r2, [r3, #8]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	3b80      	subs	r3, #128	; 0x80
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	79fa      	ldrb	r2, [r7, #7]
 800ebf4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	2203      	movs	r2, #3
 800ebfa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800ebfe:	bf00      	nop
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <sendTxBuffer>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800dd12:	b590      	push	{r4, r7, lr}
 800dd14:	b087      	sub	sp, #28
 800dd16:	af02      	add	r7, sp, #8
 800dd18:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f103 0213 	add.w	r2, r3, #19
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd26:	4619      	mov	r1, r3
 800dd28:	4610      	mov	r0, r2
 800dd2a:	f7ff ff8c 	bl	800dc46 <calcCRC>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800dd32:	89fb      	ldrh	r3, [r7, #14]
 800dd34:	0a1b      	lsrs	r3, r3, #8
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd3e:	4619      	mov	r1, r3
 800dd40:	b2d2      	uxtb	r2, r2
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	440b      	add	r3, r1
 800dd46:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd4e:	3301      	adds	r3, #1
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd5e:	4619      	mov	r1, r3
 800dd60:	89fb      	ldrh	r3, [r7, #14]
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	440b      	add	r3, r1
 800dd68:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd70:	3301      	adds	r3, #1
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00c      	beq.n	800dd9c <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f9 f864 	bl	8006e54 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	68d8      	ldr	r0, [r3, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	8a1b      	ldrh	r3, [r3, #16]
 800dd94:	2201      	movs	r2, #1
 800dd96:	4619      	mov	r1, r3
 800dd98:	f7f6 f850 	bl	8003e3c <HAL_GPIO_WritePin>
=======
 800ec0a:	b590      	push	{r4, r7, lr}
 800ec0c:	b087      	sub	sp, #28
 800ec0e:	af02      	add	r7, sp, #8
 800ec10:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f103 0213 	add.w	r2, r3, #19
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f7ff ff8c 	bl	800eb3e <calcCRC>
 800ec26:	4603      	mov	r3, r0
 800ec28:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800ec2a:	89fb      	ldrh	r3, [r7, #14]
 800ec2c:	0a1b      	lsrs	r3, r3, #8
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec36:	4619      	mov	r1, r3
 800ec38:	b2d2      	uxtb	r2, r2
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	440b      	add	r3, r1
 800ec3e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec46:	3301      	adds	r3, #1
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec56:	4619      	mov	r1, r3
 800ec58:	89fb      	ldrh	r3, [r7, #14]
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	440b      	add	r3, r1
 800ec60:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00c      	beq.n	800ec94 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f8 fe44 	bl	800790c <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68d8      	ldr	r0, [r3, #12]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	8a1b      	ldrh	r3, [r3, #16]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	4619      	mov	r1, r3
 800ec90:	f7f5 f986 	bl	8003fa0 <HAL_GPIO_WritePin>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
<<<<<<< HEAD
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d10c      	bne.n	800ddc0 <sendTxBuffer+0xae>
=======
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d10c      	bne.n	800ecb8 <sendTxBuffer+0xae>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
<<<<<<< HEAD
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6858      	ldr	r0, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f103 0113 	add.w	r1, r3, #19
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	f7f8 fa45 	bl	8006248 <HAL_UART_Transmit_IT>
 800ddbe:	e00b      	b.n	800ddd8 <sendTxBuffer+0xc6>
=======
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6858      	ldr	r0, [r3, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f103 0113 	add.w	r1, r3, #19
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	f7f8 f825 	bl	8006d00 <HAL_UART_Transmit_IT>
 800ecb6:	e00b      	b.n	800ecd0 <sendTxBuffer+0xc6>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
<<<<<<< HEAD
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6858      	ldr	r0, [r3, #4]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f103 0113 	add.w	r1, r3, #19
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f7f8 fb18 	bl	8006408 <HAL_UART_Transmit_DMA>
=======
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6858      	ldr	r0, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f103 0113 	add.w	r1, r3, #19
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	461a      	mov	r2, r3
 800eccc:	f7f8 f8f8 	bl	8006ec0 <HAL_UART_Transmit_DMA>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
<<<<<<< HEAD
 800ddd8:	21fa      	movs	r1, #250	; 0xfa
 800ddda:	2001      	movs	r0, #1
 800dddc:	f7fd fca6 	bl	800b72c <ulTaskNotifyTake>
=======
 800ecd0:	21fa      	movs	r1, #250	; 0xfa
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f7fd fcb2 	bl	800c63c <ulTaskNotifyTake>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
<<<<<<< HEAD
 800dde0:	bf00      	nop
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0f7      	beq.n	800dde2 <sendTxBuffer+0xd0>
=======
 800ecd8:	bf00      	nop
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	69db      	ldr	r3, [r3, #28]
 800ece2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0f7      	beq.n	800ecda <sendTxBuffer+0xd0>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
<<<<<<< HEAD
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00c      	beq.n	800de14 <sendTxBuffer+0x102>
=======
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00c      	beq.n	800ed0c <sendTxBuffer+0x102>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68d8      	ldr	r0, [r3, #12]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	8a1b      	ldrh	r3, [r3, #16]
 800de02:	2200      	movs	r2, #0
 800de04:	4619      	mov	r1, r3
 800de06:	f7f6 f819 	bl	8003e3c <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7f9 f874 	bl	8006efc <HAL_HalfDuplex_EnableReceiver>
=======
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68d8      	ldr	r0, [r3, #12]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	8a1b      	ldrh	r3, [r3, #16]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	f7f5 f94f 	bl	8003fa0 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f8 fe54 	bl	80079b4 <HAL_HalfDuplex_EnableReceiver>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
<<<<<<< HEAD
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d10c      	bne.n	800de36 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800de22:	f7fc ffb1 	bl	800ad88 <xTaskGetTickCount>
 800de26:	4602      	mov	r2, r0
 800de28:	2300      	movs	r3, #0
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	2300      	movs	r3, #0
 800de2e:	2102      	movs	r1, #2
 800de30:	4620      	mov	r0, r4
 800de32:	f7fd ffa9 	bl	800bd88 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800de44:	3301      	adds	r3, #1
 800de46:	b29a      	uxth	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	bd90      	pop	{r4, r7, pc}

0800de56 <process_FC1>:
=======
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	2b04      	cmp	r3, #4
 800ed12:	d10c      	bne.n	800ed2e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800ed1a:	f7fc ff07 	bl	800bb2c <xTaskGetTickCount>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	2300      	movs	r3, #0
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	2300      	movs	r3, #0
 800ed26:	2102      	movs	r1, #2
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7fd ff5b 	bl	800cbe4 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800ed46:	bf00      	nop
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd90      	pop	{r4, r7, pc}

0800ed4e <process_FC1>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
<<<<<<< HEAD
 800de56:	b580      	push	{r7, lr}
 800de58:	b086      	sub	sp, #24
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
=======
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b088      	sub	sp, #32
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7d5a      	ldrb	r2, [r3, #21]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	7d9b      	ldrb	r3, [r3, #22]
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f7ff fed9 	bl	800dc20 <word>
 800de6e:	4603      	mov	r3, r0
 800de70:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	7dda      	ldrb	r2, [r3, #23]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	7e1b      	ldrb	r3, [r3, #24]
 800de7a:	4619      	mov	r1, r3
 800de7c:	4610      	mov	r0, r2
 800de7e:	f7ff fecf 	bl	800dc20 <word>
 800de82:	4603      	mov	r3, r0
 800de84:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800de86:	8a3b      	ldrh	r3, [r7, #16]
 800de88:	08db      	lsrs	r3, r3, #3
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800de8e:	8a3b      	ldrh	r3, [r7, #16]
 800de90:	f003 0307 	and.w	r3, r3, #7
 800de94:	b29b      	uxth	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <process_FC1+0x4a>
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	3301      	adds	r3, #1
 800de9e:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7dfa      	ldrb	r2, [r7, #23]
 800dea4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2203      	movs	r2, #3
 800deaa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800deb4:	461a      	mov	r2, r3
 800deb6:	7dfb      	ldrb	r3, [r7, #23]
 800deb8:	4413      	add	r3, r2
 800deba:	3b01      	subs	r3, #1
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	4413      	add	r3, r2
 800dec0:	2200      	movs	r2, #0
 800dec2:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800dec4:	2300      	movs	r3, #0
 800dec6:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800dec8:	2300      	movs	r3, #0
 800deca:	82bb      	strh	r3, [r7, #20]
 800decc:	e058      	b.n	800df80 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800dece:	8a7a      	ldrh	r2, [r7, #18]
 800ded0:	8abb      	ldrh	r3, [r7, #20]
 800ded2:	4413      	add	r3, r2
 800ded4:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 800ded6:	89bb      	ldrh	r3, [r7, #12]
 800ded8:	091b      	lsrs	r3, r3, #4
 800deda:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800dedc:	89bb      	ldrh	r3, [r7, #12]
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	f003 030f 	and.w	r3, r3, #15
 800dee4:	727b      	strb	r3, [r7, #9]

        bitWrite(
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800deec:	897b      	ldrh	r3, [r7, #10]
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	461a      	mov	r2, r3
 800def6:	7a7b      	ldrb	r3, [r7, #9]
 800def8:	fa42 f303 	asr.w	r3, r2, r3
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d014      	beq.n	800df2e <process_FC1+0xd8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df0a:	461a      	mov	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4413      	add	r3, r2
 800df10:	7cda      	ldrb	r2, [r3, #19]
 800df12:	7dbb      	ldrb	r3, [r7, #22]
 800df14:	2101      	movs	r1, #1
 800df16:	fa01 f303 	lsl.w	r3, r1, r3
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800df22:	4313      	orrs	r3, r2
 800df24:	b2da      	uxtb	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	440b      	add	r3, r1
 800df2a:	74da      	strb	r2, [r3, #19]
 800df2c:	e015      	b.n	800df5a <process_FC1+0x104>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df34:	461a      	mov	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4413      	add	r3, r2
 800df3a:	7cda      	ldrb	r2, [r3, #19]
 800df3c:	7dbb      	ldrb	r3, [r7, #22]
 800df3e:	2101      	movs	r1, #1
 800df40:	fa01 f303 	lsl.w	r3, r1, r3
 800df44:	b2db      	uxtb	r3, r3
 800df46:	43db      	mvns	r3, r3
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800df50:	4013      	ands	r3, r2
 800df52:	b2da      	uxtb	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	440b      	add	r3, r1
 800df58:	74da      	strb	r2, [r3, #19]
=======
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	7d5a      	ldrb	r2, [r3, #21]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7d9b      	ldrb	r3, [r3, #22]
 800ed62:	4619      	mov	r1, r3
 800ed64:	4610      	mov	r0, r2
 800ed66:	f7ff fed7 	bl	800eb18 <word>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	7dda      	ldrb	r2, [r3, #23]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	7e1b      	ldrb	r3, [r3, #24]
 800ed76:	4619      	mov	r1, r3
 800ed78:	4610      	mov	r0, r2
 800ed7a:	f7ff fecd 	bl	800eb18 <word>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800ed82:	8abb      	ldrh	r3, [r7, #20]
 800ed84:	08db      	lsrs	r3, r3, #3
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800ed8a:	8abb      	ldrh	r3, [r7, #20]
 800ed8c:	f003 0307 	and.w	r3, r3, #7
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <process_FC1+0x4e>
 800ed96:	7ffb      	ldrb	r3, [r7, #31]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	7ffa      	ldrb	r2, [r7, #31]
 800eda0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2203      	movs	r2, #3
 800eda6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800edb0:	461a      	mov	r2, r3
 800edb2:	7ffb      	ldrb	r3, [r7, #31]
 800edb4:	4413      	add	r3, r2
 800edb6:	3b01      	subs	r3, #1
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	4413      	add	r3, r2
 800edbc:	2200      	movs	r2, #0
 800edbe:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d103      	bne.n	800edd2 <process_FC1+0x84>
    	u16regs = modH->u16regsCoils;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800edd0:	61bb      	str	r3, [r7, #24]
    }


    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800edd2:	2300      	movs	r3, #0
 800edd4:	83bb      	strh	r3, [r7, #28]
 800edd6:	e056      	b.n	800ee86 <process_FC1+0x138>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800edd8:	8afa      	ldrh	r2, [r7, #22]
 800edda:	8bbb      	ldrh	r3, [r7, #28]
 800eddc:	4413      	add	r3, r2
 800edde:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800ede0:	8a3b      	ldrh	r3, [r7, #16]
 800ede2:	091b      	lsrs	r3, r3, #4
 800ede4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ede6:	8a3b      	ldrh	r3, [r7, #16]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	f003 030f 	and.w	r3, r3, #15
 800edee:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800edf0:	89fb      	ldrh	r3, [r7, #14]
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	69ba      	ldr	r2, [r7, #24]
 800edf6:	4413      	add	r3, r2
 800edf8:	881b      	ldrh	r3, [r3, #0]
 800edfa:	461a      	mov	r2, r3
 800edfc:	7b7b      	ldrb	r3, [r7, #13]
 800edfe:	fa42 f303 	asr.w	r3, r2, r3
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d014      	beq.n	800ee34 <process_FC1+0xe6>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee10:	461a      	mov	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4413      	add	r3, r2
 800ee16:	7cda      	ldrb	r2, [r3, #19]
 800ee18:	7fbb      	ldrb	r3, [r7, #30]
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	6879      	ldr	r1, [r7, #4]
 800ee24:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	440b      	add	r3, r1
 800ee30:	74da      	strb	r2, [r3, #19]
 800ee32:	e015      	b.n	800ee60 <process_FC1+0x112>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4413      	add	r3, r2
 800ee40:	7cda      	ldrb	r2, [r3, #19]
 800ee42:	7fbb      	ldrb	r3, [r7, #30]
 800ee44:	2101      	movs	r1, #1
 800ee46:	fa01 f303 	lsl.w	r3, r1, r3
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	43db      	mvns	r3, r3
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	6879      	ldr	r1, [r7, #4]
 800ee52:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800ee56:	4013      	ands	r3, r2
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	440b      	add	r3, r1
 800ee5e:	74da      	strb	r2, [r3, #19]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
<<<<<<< HEAD
 800df5a:	7dbb      	ldrb	r3, [r7, #22]
 800df5c:	3301      	adds	r3, #1
 800df5e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800df60:	7dbb      	ldrb	r3, [r7, #22]
 800df62:	2b07      	cmp	r3, #7
 800df64:	d909      	bls.n	800df7a <process_FC1+0x124>
        {
            u8bitsno = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df70:	3301      	adds	r3, #1
 800df72:	b2da      	uxtb	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800df7a:	8abb      	ldrh	r3, [r7, #20]
 800df7c:	3301      	adds	r3, #1
 800df7e:	82bb      	strh	r3, [r7, #20]
 800df80:	8aba      	ldrh	r2, [r7, #20]
 800df82:	8a3b      	ldrh	r3, [r7, #16]
 800df84:	429a      	cmp	r2, r3
 800df86:	d3a2      	bcc.n	800dece <process_FC1+0x78>
=======
 800ee60:	7fbb      	ldrb	r3, [r7, #30]
 800ee62:	3301      	adds	r3, #1
 800ee64:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800ee66:	7fbb      	ldrb	r3, [r7, #30]
 800ee68:	2b07      	cmp	r3, #7
 800ee6a:	d909      	bls.n	800ee80 <process_FC1+0x132>
        {
            u8bitsno = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ee76:	3301      	adds	r3, #1
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ee80:	8bbb      	ldrh	r3, [r7, #28]
 800ee82:	3301      	adds	r3, #1
 800ee84:	83bb      	strh	r3, [r7, #28]
 800ee86:	8bba      	ldrh	r2, [r7, #28]
 800ee88:	8abb      	ldrh	r3, [r7, #20]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d3a4      	bcc.n	800edd8 <process_FC1+0x8a>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
<<<<<<< HEAD
 800df88:	8a3b      	ldrh	r3, [r7, #16]
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	b29b      	uxth	r3, r3
 800df90:	2b00      	cmp	r3, #0
 800df92:	d007      	beq.n	800dfa4 <process_FC1+0x14e>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df9a:	3301      	adds	r3, #1
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dfaa:	3302      	adds	r3, #2
 800dfac:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff feaf 	bl	800dd12 <sendTxBuffer>
    return u8CopyBufferSize;
 800dfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <process_FC3>:
=======
 800ee8e:	8abb      	ldrh	r3, [r7, #20]
 800ee90:	f003 0307 	and.w	r3, r3, #7
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <process_FC1+0x15c>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eea0:	3301      	adds	r3, #1
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eeb0:	3302      	adds	r3, #2
 800eeb2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7ff fea8 	bl	800ec0a <sendTxBuffer>
    return u8CopyBufferSize;
 800eeba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3720      	adds	r7, #32
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <process_FC3>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
<<<<<<< HEAD
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7d5a      	ldrb	r2, [r3, #21]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7d9b      	ldrb	r3, [r3, #22]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f7ff fe24 	bl	800dc20 <word>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7dda      	ldrb	r2, [r3, #23]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	7e1b      	ldrb	r3, [r3, #24]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4610      	mov	r0, r2
 800dfe8:	f7ff fe1a 	bl	800dc20 <word>
 800dfec:	4603      	mov	r3, r0
 800dfee:	72fb      	strb	r3, [r7, #11]
=======
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b086      	sub	sp, #24
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	460b      	mov	r3, r1
 800eed0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	7d5a      	ldrb	r2, [r3, #21]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	7d9b      	ldrb	r3, [r3, #22]
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f7ff fe1b 	bl	800eb18 <word>
 800eee2:	4603      	mov	r3, r0
 800eee4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	7dda      	ldrb	r2, [r3, #23]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7e1b      	ldrb	r3, [r3, #24]
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7ff fe11 	bl	800eb18 <word>
 800eef6:	4603      	mov	r3, r0
 800eef8:	737b      	strb	r3, [r7, #13]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
<<<<<<< HEAD
 800dff0:	7afb      	ldrb	r3, [r7, #11]
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2203      	movs	r2, #3
 800dffe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e002:	89bb      	ldrh	r3, [r7, #12]
 800e004:	81fb      	strh	r3, [r7, #14]
 800e006:	e032      	b.n	800e06e <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e00e:	89fb      	ldrh	r3, [r7, #14]
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	4413      	add	r3, r2
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	0a1b      	lsrs	r3, r3, #8
 800e018:	b29a      	uxth	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e020:	4619      	mov	r1, r3
 800e022:	b2d2      	uxtb	r2, r2
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	440b      	add	r3, r1
 800e028:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e030:	3301      	adds	r3, #1
 800e032:	b2da      	uxtb	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e040:	89fb      	ldrh	r3, [r7, #14]
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	4413      	add	r3, r2
 800e046:	881a      	ldrh	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e04e:	4619      	mov	r1, r3
 800e050:	b2d2      	uxtb	r2, r2
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	440b      	add	r3, r1
 800e056:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e05e:	3301      	adds	r3, #1
 800e060:	b2da      	uxtb	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	3301      	adds	r3, #1
 800e06c:	81fb      	strh	r3, [r7, #14]
 800e06e:	89fa      	ldrh	r2, [r7, #14]
 800e070:	89b9      	ldrh	r1, [r7, #12]
 800e072:	7afb      	ldrb	r3, [r7, #11]
 800e074:	440b      	add	r3, r1
 800e076:	429a      	cmp	r2, r3
 800e078:	dbc6      	blt.n	800e008 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e080:	3302      	adds	r3, #2
 800e082:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff fe44 	bl	800dd12 <sendTxBuffer>

    return u8CopyBufferSize;
 800e08a:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <process_FC5>:
=======
 800eefa:	7b7b      	ldrb	r3, [r7, #13]
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2203      	movs	r2, #3
 800ef08:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800ef0c:	78fb      	ldrb	r3, [r7, #3]
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d104      	bne.n	800ef1c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef18:	613b      	str	r3, [r7, #16]
 800ef1a:	e006      	b.n	800ef2a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	2b04      	cmp	r3, #4
 800ef20:	d103      	bne.n	800ef2a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ef28:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ef2a:	89fb      	ldrh	r3, [r7, #14]
 800ef2c:	82fb      	strh	r3, [r7, #22]
 800ef2e:	e02e      	b.n	800ef8e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800ef30:	8afb      	ldrh	r3, [r7, #22]
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	4413      	add	r3, r2
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	0a1b      	lsrs	r3, r3, #8
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef44:	4619      	mov	r1, r3
 800ef46:	b2d2      	uxtb	r2, r2
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	440b      	add	r3, r1
 800ef4c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef54:	3301      	adds	r3, #1
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800ef5e:	8afb      	ldrh	r3, [r7, #22]
 800ef60:	005b      	lsls	r3, r3, #1
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	4413      	add	r3, r2
 800ef66:	881a      	ldrh	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef6e:	4619      	mov	r1, r3
 800ef70:	b2d2      	uxtb	r2, r2
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	440b      	add	r3, r1
 800ef76:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef7e:	3301      	adds	r3, #1
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ef88:	8afb      	ldrh	r3, [r7, #22]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	82fb      	strh	r3, [r7, #22]
 800ef8e:	8afa      	ldrh	r2, [r7, #22]
 800ef90:	89f9      	ldrh	r1, [r7, #14]
 800ef92:	7b7b      	ldrb	r3, [r7, #13]
 800ef94:	440b      	add	r3, r1
 800ef96:	429a      	cmp	r2, r3
 800ef98:	dbca      	blt.n	800ef30 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800efa0:	3302      	adds	r3, #2
 800efa2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff fe30 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800efaa:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <process_FC5>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e096:	b580      	push	{r7, lr}
 800e098:	b084      	sub	sp, #16
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
=======
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	7d5a      	ldrb	r2, [r3, #21]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	7d9b      	ldrb	r3, [r3, #22]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	f7ff fdb9 	bl	800dc20 <word>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e0b2:	89fb      	ldrh	r3, [r7, #14]
 800e0b4:	091b      	lsrs	r3, r3, #4
 800e0b6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e0b8:	89fb      	ldrh	r3, [r7, #14]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	f003 030f 	and.w	r3, r3, #15
 800e0c0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7ddb      	ldrb	r3, [r3, #23]
 800e0c6:	2bff      	cmp	r3, #255	; 0xff
 800e0c8:	d115      	bne.n	800e0f6 <process_FC5+0x60>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e0d0:	89bb      	ldrh	r3, [r7, #12]
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	8819      	ldrh	r1, [r3, #0]
 800e0d8:	7afb      	ldrb	r3, [r7, #11]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e0e8:	89bb      	ldrh	r3, [r7, #12]
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	4403      	add	r3, r0
 800e0ee:	430a      	orrs	r2, r1
 800e0f0:	b292      	uxth	r2, r2
 800e0f2:	801a      	strh	r2, [r3, #0]
 800e0f4:	e016      	b.n	800e124 <process_FC5+0x8e>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e0fc:	89bb      	ldrh	r3, [r7, #12]
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	4413      	add	r3, r2
 800e102:	8819      	ldrh	r1, [r3, #0]
 800e104:	7afb      	ldrb	r3, [r7, #11]
 800e106:	2201      	movs	r2, #1
 800e108:	fa02 f303 	lsl.w	r3, r2, r3
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	43db      	mvns	r3, r3
 800e110:	b29a      	uxth	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e118:	89bb      	ldrh	r3, [r7, #12]
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	4403      	add	r3, r0
 800e11e:	400a      	ands	r2, r1
 800e120:	b292      	uxth	r2, r2
 800e122:	801a      	strh	r2, [r3, #0]
=======
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	7d5a      	ldrb	r2, [r3, #21]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7d9b      	ldrb	r3, [r3, #22]
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f7ff fda5 	bl	800eb18 <word>
 800efce:	4603      	mov	r3, r0
 800efd0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800efd2:	89fb      	ldrh	r3, [r7, #14]
 800efd4:	091b      	lsrs	r3, r3, #4
 800efd6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800efd8:	89fb      	ldrh	r3, [r7, #14]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f003 030f 	and.w	r3, r3, #15
 800efe0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	7ddb      	ldrb	r3, [r3, #23]
 800efe6:	2bff      	cmp	r3, #255	; 0xff
 800efe8:	d115      	bne.n	800f016 <process_FC5+0x60>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eff0:	89bb      	ldrh	r3, [r7, #12]
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	4413      	add	r3, r2
 800eff6:	8819      	ldrh	r1, [r3, #0]
 800eff8:	7afb      	ldrb	r3, [r7, #11]
 800effa:	2201      	movs	r2, #1
 800effc:	fa02 f303 	lsl.w	r3, r2, r3
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f008:	89bb      	ldrh	r3, [r7, #12]
 800f00a:	005b      	lsls	r3, r3, #1
 800f00c:	4403      	add	r3, r0
 800f00e:	430a      	orrs	r2, r1
 800f010:	b292      	uxth	r2, r2
 800f012:	801a      	strh	r2, [r3, #0]
 800f014:	e016      	b.n	800f044 <process_FC5+0x8e>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f01c:	89bb      	ldrh	r3, [r7, #12]
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	4413      	add	r3, r2
 800f022:	8819      	ldrh	r1, [r3, #0]
 800f024:	7afb      	ldrb	r3, [r7, #11]
 800f026:	2201      	movs	r2, #1
 800f028:	fa02 f303 	lsl.w	r3, r2, r3
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	43db      	mvns	r3, r3
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f038:	89bb      	ldrh	r3, [r7, #12]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	4403      	add	r3, r0
 800f03e:	400a      	ands	r2, r1
 800f040:	b292      	uxth	r2, r2
 800f042:	801a      	strh	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
<<<<<<< HEAD
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2206      	movs	r2, #6
 800e128:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e132:	3302      	adds	r3, #2
 800e134:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f7ff fdeb 	bl	800dd12 <sendTxBuffer>

    return u8CopyBufferSize;
 800e13c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <process_FC6>:
=======
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2206      	movs	r2, #6
 800f048:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f052:	3302      	adds	r3, #2
 800f054:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7ff fdd7 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f05c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <process_FC6>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
<<<<<<< HEAD
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7d5a      	ldrb	r2, [r3, #21]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7d9b      	ldrb	r3, [r3, #22]
 800e158:	4619      	mov	r1, r3
 800e15a:	4610      	mov	r0, r2
 800e15c:	f7ff fd60 	bl	800dc20 <word>
 800e160:	4603      	mov	r3, r0
 800e162:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	7dda      	ldrb	r2, [r3, #23]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7e1b      	ldrb	r3, [r3, #24]
 800e16c:	4619      	mov	r1, r3
 800e16e:	4610      	mov	r0, r2
 800e170:	f7ff fd56 	bl	800dc20 <word>
 800e174:	4603      	mov	r3, r0
 800e176:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e17e:	89fb      	ldrh	r3, [r7, #14]
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	89ba      	ldrh	r2, [r7, #12]
 800e186:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2206      	movs	r2, #6
 800e18c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e196:	3302      	adds	r3, #2
 800e198:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff fdb9 	bl	800dd12 <sendTxBuffer>

    return u8CopyBufferSize;
 800e1a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <process_FC15>:
=======
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7d5a      	ldrb	r2, [r3, #21]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	7d9b      	ldrb	r3, [r3, #22]
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7ff fd4c 	bl	800eb18 <word>
 800f080:	4603      	mov	r3, r0
 800f082:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	7dda      	ldrb	r2, [r3, #23]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	7e1b      	ldrb	r3, [r3, #24]
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7ff fd42 	bl	800eb18 <word>
 800f094:	4603      	mov	r3, r0
 800f096:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f09e:	89fb      	ldrh	r3, [r7, #14]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	89ba      	ldrh	r2, [r7, #12]
 800f0a6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2206      	movs	r2, #6
 800f0ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f0b6:	3302      	adds	r3, #2
 800f0b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7ff fda5 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f0c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3710      	adds	r7, #16
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <process_FC15>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
=======
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
<<<<<<< HEAD
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7d5a      	ldrb	r2, [r3, #21]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	7d9b      	ldrb	r3, [r3, #22]
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f7ff fd2e 	bl	800dc20 <word>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	7dda      	ldrb	r2, [r3, #23]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	7e1b      	ldrb	r3, [r3, #24]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7ff fd24 	bl	800dc20 <word>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	823b      	strh	r3, [r7, #16]
=======
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7d5a      	ldrb	r2, [r3, #21]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	7d9b      	ldrb	r3, [r3, #22]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4610      	mov	r0, r2
 800f0e0:	f7ff fd1a 	bl	800eb18 <word>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7dda      	ldrb	r2, [r3, #23]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7e1b      	ldrb	r3, [r3, #24]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	4610      	mov	r0, r2
 800f0f4:	f7ff fd10 	bl	800eb18 <word>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	823b      	strh	r3, [r7, #16]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
<<<<<<< HEAD
 800e1dc:	2300      	movs	r3, #0
 800e1de:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e1e0:	2307      	movs	r3, #7
 800e1e2:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	82bb      	strh	r3, [r7, #20]
 800e1e8:	e058      	b.n	800e29c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e1ea:	8a7a      	ldrh	r2, [r7, #18]
 800e1ec:	8abb      	ldrh	r3, [r7, #20]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e1f2:	89bb      	ldrh	r3, [r7, #12]
 800e1f4:	091b      	lsrs	r3, r3, #4
 800e1f6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e1f8:	89bb      	ldrh	r3, [r7, #12]
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	f003 030f 	and.w	r3, r3, #15
 800e200:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	7cdb      	ldrb	r3, [r3, #19]
 800e20a:	461a      	mov	r2, r3
 800e20c:	7dbb      	ldrb	r3, [r7, #22]
 800e20e:	fa42 f303 	asr.w	r3, r2, r3
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	2b00      	cmp	r3, #0
 800e218:	bf14      	ite	ne
 800e21a:	2301      	movne	r3, #1
 800e21c:	2300      	moveq	r3, #0
 800e21e:	723b      	strb	r3, [r7, #8]
=======
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800f100:	2307      	movs	r3, #7
 800f102:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f104:	2300      	movs	r3, #0
 800f106:	82bb      	strh	r3, [r7, #20]
 800f108:	e058      	b.n	800f1bc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800f10a:	8a7a      	ldrh	r2, [r7, #18]
 800f10c:	8abb      	ldrh	r3, [r7, #20]
 800f10e:	4413      	add	r3, r2
 800f110:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800f112:	89bb      	ldrh	r3, [r7, #12]
 800f114:	091b      	lsrs	r3, r3, #4
 800f116:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800f118:	89bb      	ldrh	r3, [r7, #12]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f003 030f 	and.w	r3, r3, #15
 800f120:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800f122:	7dfb      	ldrb	r3, [r7, #23]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	4413      	add	r3, r2
 800f128:	7cdb      	ldrb	r3, [r3, #19]
 800f12a:	461a      	mov	r2, r3
 800f12c:	7dbb      	ldrb	r3, [r7, #22]
 800f12e:	fa42 f303 	asr.w	r3, r2, r3
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	bf14      	ite	ne
 800f13a:	2301      	movne	r3, #1
 800f13c:	2300      	moveq	r3, #0
 800f13e:	723b      	strb	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
<<<<<<< HEAD
 800e220:	7a3b      	ldrb	r3, [r7, #8]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d015      	beq.n	800e252 <process_FC15+0xa6>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e22c:	897b      	ldrh	r3, [r7, #10]
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	4413      	add	r3, r2
 800e232:	8819      	ldrh	r1, [r3, #0]
 800e234:	7a7b      	ldrb	r3, [r7, #9]
 800e236:	2201      	movs	r2, #1
 800e238:	fa02 f303 	lsl.w	r3, r2, r3
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e244:	897b      	ldrh	r3, [r7, #10]
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	4403      	add	r3, r0
 800e24a:	430a      	orrs	r2, r1
 800e24c:	b292      	uxth	r2, r2
 800e24e:	801a      	strh	r2, [r3, #0]
 800e250:	e016      	b.n	800e280 <process_FC15+0xd4>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e258:	897b      	ldrh	r3, [r7, #10]
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	4413      	add	r3, r2
 800e25e:	8819      	ldrh	r1, [r3, #0]
 800e260:	7a7b      	ldrb	r3, [r7, #9]
 800e262:	2201      	movs	r2, #1
 800e264:	fa02 f303 	lsl.w	r3, r2, r3
 800e268:	b29b      	uxth	r3, r3
 800e26a:	43db      	mvns	r3, r3
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800e274:	897b      	ldrh	r3, [r7, #10]
 800e276:	005b      	lsls	r3, r3, #1
 800e278:	4403      	add	r3, r0
 800e27a:	400a      	ands	r2, r1
 800e27c:	b292      	uxth	r2, r2
 800e27e:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
=======
 800f140:	7a3b      	ldrb	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d015      	beq.n	800f172 <process_FC15+0xa6>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f14c:	897b      	ldrh	r3, [r7, #10]
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	4413      	add	r3, r2
 800f152:	8819      	ldrh	r1, [r3, #0]
 800f154:	7a7b      	ldrb	r3, [r7, #9]
 800f156:	2201      	movs	r2, #1
 800f158:	fa02 f303 	lsl.w	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f164:	897b      	ldrh	r3, [r7, #10]
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4403      	add	r3, r0
 800f16a:	430a      	orrs	r2, r1
 800f16c:	b292      	uxth	r2, r2
 800f16e:	801a      	strh	r2, [r3, #0]
 800f170:	e016      	b.n	800f1a0 <process_FC15+0xd4>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f178:	897b      	ldrh	r3, [r7, #10]
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	4413      	add	r3, r2
 800f17e:	8819      	ldrh	r1, [r3, #0]
 800f180:	7a7b      	ldrb	r3, [r7, #9]
 800f182:	2201      	movs	r2, #1
 800f184:	fa02 f303 	lsl.w	r3, r2, r3
 800f188:	b29b      	uxth	r3, r3
 800f18a:	43db      	mvns	r3, r3
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800f194:	897b      	ldrh	r3, [r7, #10]
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	4403      	add	r3, r0
 800f19a:	400a      	ands	r2, r1
 800f19c:	b292      	uxth	r2, r2
 800f19e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
            u8currentBit,
            bTemp );

        u8bitsno ++;
<<<<<<< HEAD
 800e280:	7dbb      	ldrb	r3, [r7, #22]
 800e282:	3301      	adds	r3, #1
 800e284:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e286:	7dbb      	ldrb	r3, [r7, #22]
 800e288:	2b07      	cmp	r3, #7
 800e28a:	d904      	bls.n	800e296 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
 800e292:	3301      	adds	r3, #1
 800e294:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e296:	8abb      	ldrh	r3, [r7, #20]
 800e298:	3301      	adds	r3, #1
 800e29a:	82bb      	strh	r3, [r7, #20]
 800e29c:	8aba      	ldrh	r2, [r7, #20]
 800e29e:	8a3b      	ldrh	r3, [r7, #16]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d3a2      	bcc.n	800e1ea <process_FC15+0x3e>
=======
 800f1a0:	7dbb      	ldrb	r3, [r7, #22]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800f1a6:	7dbb      	ldrb	r3, [r7, #22]
 800f1a8:	2b07      	cmp	r3, #7
 800f1aa:	d904      	bls.n	800f1b6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800f1b0:	7dfb      	ldrb	r3, [r7, #23]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800f1b6:	8abb      	ldrh	r3, [r7, #20]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	82bb      	strh	r3, [r7, #20]
 800f1bc:	8aba      	ldrh	r2, [r7, #20]
 800f1be:	8a3b      	ldrh	r3, [r7, #16]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d3a2      	bcc.n	800f10a <process_FC15+0x3e>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
<<<<<<< HEAD
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2206      	movs	r2, #6
 800e2a8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e2b2:	3302      	adds	r3, #2
 800e2b4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff fd2b 	bl	800dd12 <sendTxBuffer>
    return u8CopyBufferSize;
 800e2bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3718      	adds	r7, #24
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <process_FC16>:
=======
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2206      	movs	r2, #6
 800f1c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f1d2:	3302      	adds	r3, #2
 800f1d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff fd17 	bl	800ec0a <sendTxBuffer>
    return u8CopyBufferSize;
 800f1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <process_FC16>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
<<<<<<< HEAD
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	7d5b      	ldrb	r3, [r3, #21]
 800e2d4:	021b      	lsls	r3, r3, #8
 800e2d6:	b21a      	sxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	7d9b      	ldrb	r3, [r3, #22]
 800e2dc:	b21b      	sxth	r3, r3
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	b21b      	sxth	r3, r3
 800e2e2:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	7ddb      	ldrb	r3, [r3, #23]
 800e2e8:	021b      	lsls	r3, r3, #8
 800e2ea:	b21a      	sxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	7e1b      	ldrb	r3, [r3, #24]
 800e2f0:	b21b      	sxth	r3, r3
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	b21b      	sxth	r3, r3
 800e2f6:	827b      	strh	r3, [r7, #18]
=======
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7d5b      	ldrb	r3, [r3, #21]
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	b21a      	sxth	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7d9b      	ldrb	r3, [r3, #22]
 800f1fc:	b21b      	sxth	r3, r3
 800f1fe:	4313      	orrs	r3, r2
 800f200:	b21b      	sxth	r3, r3
 800f202:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	7ddb      	ldrb	r3, [r3, #23]
 800f208:	021b      	lsls	r3, r3, #8
 800f20a:	b21a      	sxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	7e1b      	ldrb	r3, [r3, #24]
 800f210:	b21b      	sxth	r3, r3
 800f212:	4313      	orrs	r3, r2
 800f214:	b21b      	sxth	r3, r3
 800f216:	827b      	strh	r3, [r7, #18]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
<<<<<<< HEAD
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800e2fe:	8a7b      	ldrh	r3, [r7, #18]
 800e300:	b2da      	uxtb	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2206      	movs	r2, #6
 800e30a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800e30e:	2300      	movs	r3, #0
 800e310:	82fb      	strh	r3, [r7, #22]
 800e312:	e01d      	b.n	800e350 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800e314:	8afb      	ldrh	r3, [r7, #22]
 800e316:	005b      	lsls	r3, r3, #1
 800e318:	3307      	adds	r3, #7
        temp = word(
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	4413      	add	r3, r2
 800e31e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800e320:	8afb      	ldrh	r3, [r7, #22]
 800e322:	3304      	adds	r3, #4
 800e324:	005b      	lsls	r3, r3, #1
        temp = word(
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	4413      	add	r3, r2
 800e32a:	7cdb      	ldrb	r3, [r3, #19]
 800e32c:	4619      	mov	r1, r3
 800e32e:	f7ff fc77 	bl	800dc20 <word>
 800e332:	4603      	mov	r3, r0
 800e334:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e33c:	8ab9      	ldrh	r1, [r7, #20]
 800e33e:	8afb      	ldrh	r3, [r7, #22]
 800e340:	440b      	add	r3, r1
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	4413      	add	r3, r2
 800e346:	89fa      	ldrh	r2, [r7, #14]
 800e348:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800e34a:	8afb      	ldrh	r3, [r7, #22]
 800e34c:	3301      	adds	r3, #1
 800e34e:	82fb      	strh	r3, [r7, #22]
 800e350:	8afa      	ldrh	r2, [r7, #22]
 800e352:	8a7b      	ldrh	r3, [r7, #18]
 800e354:	429a      	cmp	r2, r3
 800e356:	d3dd      	bcc.n	800e314 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e35e:	3302      	adds	r3, #2
 800e360:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7ff fcd5 	bl	800dd12 <sendTxBuffer>

    return u8CopyBufferSize;
 800e368:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <HAL_UART_TxCpltCallback>:
=======
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800f21e:	8a7b      	ldrh	r3, [r7, #18]
 800f220:	b2da      	uxtb	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2206      	movs	r2, #6
 800f22a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800f22e:	2300      	movs	r3, #0
 800f230:	82fb      	strh	r3, [r7, #22]
 800f232:	e01d      	b.n	800f270 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800f234:	8afb      	ldrh	r3, [r7, #22]
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	3307      	adds	r3, #7
        temp = word(
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	4413      	add	r3, r2
 800f23e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800f240:	8afb      	ldrh	r3, [r7, #22]
 800f242:	3304      	adds	r3, #4
 800f244:	005b      	lsls	r3, r3, #1
        temp = word(
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	4413      	add	r3, r2
 800f24a:	7cdb      	ldrb	r3, [r3, #19]
 800f24c:	4619      	mov	r1, r3
 800f24e:	f7ff fc63 	bl	800eb18 <word>
 800f252:	4603      	mov	r3, r0
 800f254:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f25c:	8ab9      	ldrh	r1, [r7, #20]
 800f25e:	8afb      	ldrh	r3, [r7, #22]
 800f260:	440b      	add	r3, r1
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	4413      	add	r3, r2
 800f266:	89fa      	ldrh	r2, [r7, #14]
 800f268:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800f26a:	8afb      	ldrh	r3, [r7, #22]
 800f26c:	3301      	adds	r3, #1
 800f26e:	82fb      	strh	r3, [r7, #22]
 800f270:	8afa      	ldrh	r2, [r7, #22]
 800f272:	8a7b      	ldrh	r3, [r7, #18]
 800f274:	429a      	cmp	r2, r3
 800f276:	d3dd      	bcc.n	800f234 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800f27e:	3302      	adds	r3, #2
 800f280:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7ff fcc1 	bl	800ec0a <sendTxBuffer>

    return u8CopyBufferSize;
 800f288:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <HAL_UART_TxCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af02      	add	r7, sp, #8
 800e37a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e37c:	2300      	movs	r3, #0
 800e37e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e019      	b.n	800e3ba <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800e386:	4a17      	ldr	r2, [pc, #92]	; (800e3e4 <HAL_UART_TxCpltCallback+0x70>)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d10e      	bne.n	800e3b4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800e396:	4a13      	ldr	r2, [pc, #76]	; (800e3e4 <HAL_UART_TxCpltCallback+0x70>)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e39e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800e3a2:	f107 0308 	add.w	r3, r7, #8
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	f7fd fb17 	bl	800b9e0 <xTaskGenericNotifyFromISR>
	   		break;
 800e3b2:	e008      	b.n	800e3c6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	60fb      	str	r3, [r7, #12]
 800e3ba:	4b0b      	ldr	r3, [pc, #44]	; (800e3e8 <HAL_UART_TxCpltCallback+0x74>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	dbdf      	blt.n	800e386 <HAL_UART_TxCpltCallback+0x12>
=======
 800f294:	b580      	push	{r7, lr}
 800f296:	b086      	sub	sp, #24
 800f298:	af02      	add	r7, sp, #8
 800f29a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f29c:	2300      	movs	r3, #0
 800f29e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	e019      	b.n	800f2da <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800f2a6:	4a17      	ldr	r2, [pc, #92]	; (800f304 <HAL_UART_TxCpltCallback+0x70>)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d10e      	bne.n	800f2d4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800f2b6:	4a13      	ldr	r2, [pc, #76]	; (800f304 <HAL_UART_TxCpltCallback+0x70>)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2be:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f2c2:	f107 0308 	add.w	r3, r7, #8
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	f7fd fab5 	bl	800c83c <xTaskGenericNotifyFromISR>
	   		break;
 800f2d2:	e008      	b.n	800f2e6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	60fb      	str	r3, [r7, #12]
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <HAL_UART_TxCpltCallback+0x74>)
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	dbdf      	blt.n	800f2a6 <HAL_UART_TxCpltCallback+0x12>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
<<<<<<< HEAD
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d007      	beq.n	800e3dc <HAL_UART_TxCpltCallback+0x68>
 800e3cc:	4b07      	ldr	r3, [pc, #28]	; (800e3ec <HAL_UART_TxCpltCallback+0x78>)
 800e3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	f3bf 8f6f 	isb	sy
=======
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <HAL_UART_TxCpltCallback+0x68>
 800f2ec:	4b07      	ldr	r3, [pc, #28]	; (800f30c <HAL_UART_TxCpltCallback+0x78>)
 800f2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
<<<<<<< HEAD
 800e3dc:	bf00      	nop
 800e3de:	3710      	adds	r7, #16
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	200020b4 	.word	0x200020b4
 800e3e8:	200020bc 	.word	0x200020bc
 800e3ec:	e000ed04 	.word	0xe000ed04

0800e3f0 <HAL_UART_RxCpltCallback>:
=======
 800f2fc:	bf00      	nop
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20002118 	.word	0x20002118
 800f308:	20002120 	.word	0x20002120
 800f30c:	e000ed04 	.word	0xe000ed04

0800f310 <HAL_UART_RxCpltCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
<<<<<<< HEAD
 800e3f0:	b590      	push	{r4, r7, lr}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af02      	add	r7, sp, #8
 800e3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60bb      	str	r3, [r7, #8]
=======
 800f310:	b590      	push	{r4, r7, lr}
 800f312:	b087      	sub	sp, #28
 800f314:	af02      	add	r7, sp, #8
 800f316:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f318:	2300      	movs	r3, #0
 800f31a:	60bb      	str	r3, [r7, #8]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
<<<<<<< HEAD
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	e042      	b.n	800e488 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800e402:	4a2d      	ldr	r2, [pc, #180]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d137      	bne.n	800e482 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800e412:	4a29      	ldr	r2, [pc, #164]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e41a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d139      	bne.n	800e496 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800e422:	4a25      	ldr	r2, [pc, #148]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e42a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800e42e:	4922      	ldr	r1, [pc, #136]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e436:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7fe fbe5 	bl	800cc0c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800e442:	4a1d      	ldr	r2, [pc, #116]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e44a:	6858      	ldr	r0, [r3, #4]
 800e44c:	4a1a      	ldr	r2, [pc, #104]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e454:	33a6      	adds	r3, #166	; 0xa6
 800e456:	2201      	movs	r2, #1
 800e458:	4619      	mov	r1, r3
 800e45a:	f7f7 ff89 	bl	8006370 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800e45e:	4a16      	ldr	r2, [pc, #88]	; (800e4b8 <HAL_UART_RxCpltCallback+0xc8>)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e466:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 800e46a:	f7fc fc9d 	bl	800ada8 <xTaskGetTickCountFromISR>
 800e46e:	4602      	mov	r2, r0
 800e470:	f107 0308 	add.w	r3, r7, #8
 800e474:	2100      	movs	r1, #0
 800e476:	9100      	str	r1, [sp, #0]
 800e478:	2107      	movs	r1, #7
 800e47a:	4620      	mov	r0, r4
 800e47c:	f7fd fc84 	bl	800bd88 <xTimerGenericCommand>
    		}
    		break;
 800e480:	e009      	b.n	800e496 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
 800e486:	60fb      	str	r3, [r7, #12]
 800e488:	4b0c      	ldr	r3, [pc, #48]	; (800e4bc <HAL_UART_RxCpltCallback+0xcc>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	461a      	mov	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	4293      	cmp	r3, r2
 800e492:	dbb6      	blt.n	800e402 <HAL_UART_RxCpltCallback+0x12>
 800e494:	e000      	b.n	800e498 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800e496:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d007      	beq.n	800e4ae <HAL_UART_RxCpltCallback+0xbe>
 800e49e:	4b08      	ldr	r3, [pc, #32]	; (800e4c0 <HAL_UART_RxCpltCallback+0xd0>)
 800e4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a4:	601a      	str	r2, [r3, #0]
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	f3bf 8f6f 	isb	sy
=======
 800f31c:	2300      	movs	r3, #0
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	e042      	b.n	800f3a8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800f322:	4a2d      	ldr	r2, [pc, #180]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d137      	bne.n	800f3a2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800f332:	4a29      	ldr	r2, [pc, #164]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f33a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d139      	bne.n	800f3b6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800f342:	4a25      	ldr	r2, [pc, #148]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800f34e:	4922      	ldr	r1, [pc, #136]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f356:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7fe fb9d 	bl	800da9c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800f362:	4a1d      	ldr	r2, [pc, #116]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f36a:	6858      	ldr	r0, [r3, #4]
 800f36c:	4a1a      	ldr	r2, [pc, #104]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f374:	33b8      	adds	r3, #184	; 0xb8
 800f376:	2201      	movs	r2, #1
 800f378:	4619      	mov	r1, r3
 800f37a:	f7f7 fd55 	bl	8006e28 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800f37e:	4a16      	ldr	r2, [pc, #88]	; (800f3d8 <HAL_UART_RxCpltCallback+0xc8>)
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f386:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800f38a:	f7fc fbdf 	bl	800bb4c <xTaskGetTickCountFromISR>
 800f38e:	4602      	mov	r2, r0
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	2100      	movs	r1, #0
 800f396:	9100      	str	r1, [sp, #0]
 800f398:	2107      	movs	r1, #7
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7fd fc22 	bl	800cbe4 <xTimerGenericCommand>
    		}
    		break;
 800f3a0:	e009      	b.n	800f3b6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	; (800f3dc <HAL_UART_RxCpltCallback+0xcc>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	dbb6      	blt.n	800f322 <HAL_UART_RxCpltCallback+0x12>
 800f3b4:	e000      	b.n	800f3b8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800f3b6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d007      	beq.n	800f3ce <HAL_UART_RxCpltCallback+0xbe>
 800f3be:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <HAL_UART_RxCpltCallback+0xd0>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
<<<<<<< HEAD
 800e4ae:	bf00      	nop
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd90      	pop	{r4, r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200020b4 	.word	0x200020b4
 800e4bc:	200020bc 	.word	0x200020bc
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <HAL_UART_ErrorCallback>:
=======
 800f3ce:	bf00      	nop
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20002118 	.word	0x20002118
 800f3dc:	20002120 	.word	0x20002120
 800f3e0:	e000ed04 	.word	0xe000ed04

0800f3e4 <HAL_UART_ErrorCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
=======
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

 int i;

 for (i = 0; i < numberHandlers; i++ )
<<<<<<< HEAD
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	e041      	b.n	800e556 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800e4d2:	4a27      	ldr	r2, [pc, #156]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d136      	bne.n	800e550 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800e4e2:	4a23      	ldr	r2, [pc, #140]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4ea:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e4ee:	2b04      	cmp	r3, #4
 800e4f0:	d138      	bne.n	800e564 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e4f2:	e007      	b.n	800e504 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e4f4:	4a1e      	ldr	r2, [pc, #120]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7f8 f802 	bl	8006508 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e504:	4a1a      	ldr	r2, [pc, #104]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e50c:	6858      	ldr	r0, [r3, #4]
 800e50e:	4a18      	ldr	r2, [pc, #96]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e516:	33bc      	adds	r3, #188	; 0xbc
 800e518:	2280      	movs	r2, #128	; 0x80
 800e51a:	4619      	mov	r1, r3
 800e51c:	f7fa fceb 	bl	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1e6      	bne.n	800e4f4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e526:	4a12      	ldr	r2, [pc, #72]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	490d      	ldr	r1, [pc, #52]	; (800e570 <HAL_UART_ErrorCallback+0xac>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f022 0204 	bic.w	r2, r2, #4
 800e54c:	601a      	str	r2, [r3, #0]
=======
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e041      	b.n	800f476 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800f3f2:	4a27      	ldr	r2, [pc, #156]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d136      	bne.n	800f470 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f402:	4a23      	ldr	r2, [pc, #140]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f40e:	2b04      	cmp	r3, #4
 800f410:	d138      	bne.n	800f484 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f412:	e007      	b.n	800f424 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f414:	4a1e      	ldr	r2, [pc, #120]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	4618      	mov	r0, r3
 800f420:	f7f7 fdce 	bl	8006fc0 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f424:	4a1a      	ldr	r2, [pc, #104]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f42c:	6858      	ldr	r0, [r3, #4]
 800f42e:	4a18      	ldr	r2, [pc, #96]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f436:	33d0      	adds	r3, #208	; 0xd0
 800f438:	2280      	movs	r2, #128	; 0x80
 800f43a:	4619      	mov	r1, r3
 800f43c:	f7fa fab7 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e6      	bne.n	800f414 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f446:	4a12      	ldr	r2, [pc, #72]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	490d      	ldr	r1, [pc, #52]	; (800f490 <HAL_UART_ErrorCallback+0xac>)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0204 	bic.w	r2, r2, #4
 800f46c:	601a      	str	r2, [r3, #0]
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7

    		}

    		break;
<<<<<<< HEAD
 800e54e:	e009      	b.n	800e564 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3301      	adds	r3, #1
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	4b07      	ldr	r3, [pc, #28]	; (800e574 <HAL_UART_ErrorCallback+0xb0>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	461a      	mov	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	4293      	cmp	r3, r2
 800e560:	dbb7      	blt.n	800e4d2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800e562:	e000      	b.n	800e566 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800e564:	bf00      	nop
}
 800e566:	bf00      	nop
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	200020b4 	.word	0x200020b4
 800e574:	200020bc 	.word	0x200020bc

0800e578 <HAL_UARTEx_RxEventCallback>:
=======
 800f46e:	e009      	b.n	800f484 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	3301      	adds	r3, #1
 800f474:	60fb      	str	r3, [r7, #12]
 800f476:	4b07      	ldr	r3, [pc, #28]	; (800f494 <HAL_UART_ErrorCallback+0xb0>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4293      	cmp	r3, r2
 800f480:	dbb7      	blt.n	800f3f2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800f482:	e000      	b.n	800f486 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800f484:	bf00      	nop
}
 800f486:	bf00      	nop
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20002118 	.word	0x20002118
 800f494:	20002120 	.word	0x20002120

0800f498 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af02      	add	r7, sp, #8
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e584:	2300      	movs	r3, #0
 800e586:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800e588:	2300      	movs	r3, #0
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e061      	b.n	800e652 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800e58e:	4a3c      	ldr	r2, [pc, #240]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d156      	bne.n	800e64c <HAL_UARTEx_RxEventCallback+0xd4>
=======
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af02      	add	r7, sp, #8
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e061      	b.n	800f572 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800f4ae:	4a3c      	ldr	r2, [pc, #240]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d156      	bne.n	800f56c <HAL_UARTEx_RxEventCallback+0xd4>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
<<<<<<< HEAD
 800e59e:	4a38      	ldr	r2, [pc, #224]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5a6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d158      	bne.n	800e660 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800e5ae:	887b      	ldrh	r3, [r7, #2]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d055      	beq.n	800e660 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800e5b4:	4a32      	ldr	r2, [pc, #200]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5bc:	887a      	ldrh	r2, [r7, #2]
 800e5be:	b2d2      	uxtb	r2, r2
 800e5c0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 800e5c4:	4a2e      	ldr	r2, [pc, #184]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e5d2:	e007      	b.n	800e5e4 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800e5d4:	4a2a      	ldr	r2, [pc, #168]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7f7 ff92 	bl	8006508 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800e5e4:	4a26      	ldr	r2, [pc, #152]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ec:	6858      	ldr	r0, [r3, #4]
 800e5ee:	4a24      	ldr	r2, [pc, #144]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5f6:	33bc      	adds	r3, #188	; 0xbc
 800e5f8:	2280      	movs	r2, #128	; 0x80
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	f7fa fc7b 	bl	8008ef6 <HAL_UARTEx_ReceiveToIdle_DMA>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1e6      	bne.n	800e5d4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800e606:	4a1e      	ldr	r2, [pc, #120]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	4919      	ldr	r1, [pc, #100]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f022 0204 	bic.w	r2, r2, #4
 800e62c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800e62e:	4a14      	ldr	r2, [pc, #80]	; (800e680 <HAL_UARTEx_RxEventCallback+0x108>)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e636:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800e63a:	f107 0308 	add.w	r3, r7, #8
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	2300      	movs	r3, #0
 800e642:	2203      	movs	r2, #3
 800e644:	2100      	movs	r1, #0
 800e646:	f7fd f9cb 	bl	800b9e0 <xTaskGenericNotifyFromISR>
=======
 800f4be:	4a38      	ldr	r2, [pc, #224]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4c6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	d158      	bne.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800f4ce:	887b      	ldrh	r3, [r7, #2]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d055      	beq.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800f4d4:	4a32      	ldr	r2, [pc, #200]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4dc:	887a      	ldrh	r2, [r7, #2]
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800f4e4:	4a2e      	ldr	r2, [pc, #184]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f4f2:	e007      	b.n	800f504 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f4f4:	4a2a      	ldr	r2, [pc, #168]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f7 fd5e 	bl	8006fc0 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f504:	4a26      	ldr	r2, [pc, #152]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50c:	6858      	ldr	r0, [r3, #4]
 800f50e:	4a24      	ldr	r2, [pc, #144]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f516:	33d0      	adds	r3, #208	; 0xd0
 800f518:	2280      	movs	r2, #128	; 0x80
 800f51a:	4619      	mov	r1, r3
 800f51c:	f7fa fa47 	bl	80099ae <HAL_UARTEx_ReceiveToIdle_DMA>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e6      	bne.n	800f4f4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f526:	4a1e      	ldr	r2, [pc, #120]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	4919      	ldr	r1, [pc, #100]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0204 	bic.w	r2, r2, #4
 800f54c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800f54e:	4a14      	ldr	r2, [pc, #80]	; (800f5a0 <HAL_UARTEx_RxEventCallback+0x108>)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f556:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f55a:	f107 0308 	add.w	r3, r7, #8
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	2300      	movs	r3, #0
 800f562:	2203      	movs	r2, #3
 800f564:	2100      	movs	r1, #0
 800f566:	f7fd f969 	bl	800c83c <xTaskGenericNotifyFromISR>
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
	    			}
	    		}

	    		break;
<<<<<<< HEAD
 800e64a:	e009      	b.n	800e660 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	3301      	adds	r3, #1
 800e650:	60fb      	str	r3, [r7, #12]
 800e652:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <HAL_UARTEx_RxEventCallback+0x10c>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	4293      	cmp	r3, r2
 800e65c:	db97      	blt.n	800e58e <HAL_UARTEx_RxEventCallback+0x16>
 800e65e:	e000      	b.n	800e662 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800e660:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <HAL_UARTEx_RxEventCallback+0x100>
 800e668:	4b07      	ldr	r3, [pc, #28]	; (800e688 <HAL_UARTEx_RxEventCallback+0x110>)
 800e66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e66e:	601a      	str	r2, [r3, #0]
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	f3bf 8f6f 	isb	sy
}
 800e678:	bf00      	nop
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	200020b4 	.word	0x200020b4
 800e684:	200020bc 	.word	0x200020bc
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <memset>:
 800e68c:	4402      	add	r2, r0
 800e68e:	4603      	mov	r3, r0
 800e690:	4293      	cmp	r3, r2
 800e692:	d100      	bne.n	800e696 <memset+0xa>
 800e694:	4770      	bx	lr
 800e696:	f803 1b01 	strb.w	r1, [r3], #1
 800e69a:	e7f9      	b.n	800e690 <memset+0x4>

0800e69c <__libc_init_array>:
 800e69c:	b570      	push	{r4, r5, r6, lr}
 800e69e:	4d0d      	ldr	r5, [pc, #52]	; (800e6d4 <__libc_init_array+0x38>)
 800e6a0:	4c0d      	ldr	r4, [pc, #52]	; (800e6d8 <__libc_init_array+0x3c>)
 800e6a2:	1b64      	subs	r4, r4, r5
 800e6a4:	10a4      	asrs	r4, r4, #2
 800e6a6:	2600      	movs	r6, #0
 800e6a8:	42a6      	cmp	r6, r4
 800e6aa:	d109      	bne.n	800e6c0 <__libc_init_array+0x24>
 800e6ac:	4d0b      	ldr	r5, [pc, #44]	; (800e6dc <__libc_init_array+0x40>)
 800e6ae:	4c0c      	ldr	r4, [pc, #48]	; (800e6e0 <__libc_init_array+0x44>)
 800e6b0:	f000 f826 	bl	800e700 <_init>
 800e6b4:	1b64      	subs	r4, r4, r5
 800e6b6:	10a4      	asrs	r4, r4, #2
 800e6b8:	2600      	movs	r6, #0
 800e6ba:	42a6      	cmp	r6, r4
 800e6bc:	d105      	bne.n	800e6ca <__libc_init_array+0x2e>
 800e6be:	bd70      	pop	{r4, r5, r6, pc}
 800e6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6c4:	4798      	blx	r3
 800e6c6:	3601      	adds	r6, #1
 800e6c8:	e7ee      	b.n	800e6a8 <__libc_init_array+0xc>
 800e6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6ce:	4798      	blx	r3
 800e6d0:	3601      	adds	r6, #1
 800e6d2:	e7f2      	b.n	800e6ba <__libc_init_array+0x1e>
 800e6d4:	0800e9ac 	.word	0x0800e9ac
 800e6d8:	0800e9ac 	.word	0x0800e9ac
 800e6dc:	0800e9ac 	.word	0x0800e9ac
 800e6e0:	0800e9b0 	.word	0x0800e9b0

0800e6e4 <memcpy>:
 800e6e4:	440a      	add	r2, r1
 800e6e6:	4291      	cmp	r1, r2
 800e6e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6ec:	d100      	bne.n	800e6f0 <memcpy+0xc>
 800e6ee:	4770      	bx	lr
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6fa:	4291      	cmp	r1, r2
 800e6fc:	d1f9      	bne.n	800e6f2 <memcpy+0xe>
 800e6fe:	bd10      	pop	{r4, pc}

0800e700 <_init>:
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	bf00      	nop
 800e704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e706:	bc08      	pop	{r3}
 800e708:	469e      	mov	lr, r3
 800e70a:	4770      	bx	lr

0800e70c <_fini>:
 800e70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e70e:	bf00      	nop
 800e710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e712:	bc08      	pop	{r3}
 800e714:	469e      	mov	lr, r3
 800e716:	4770      	bx	lr
=======
 800f56a:	e009      	b.n	800f580 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3301      	adds	r3, #1
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	4b0c      	ldr	r3, [pc, #48]	; (800f5a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4293      	cmp	r3, r2
 800f57c:	db97      	blt.n	800f4ae <HAL_UARTEx_RxEventCallback+0x16>
 800f57e:	e000      	b.n	800f582 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800f580:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d007      	beq.n	800f598 <HAL_UARTEx_RxEventCallback+0x100>
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <HAL_UARTEx_RxEventCallback+0x110>)
 800f58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f58e:	601a      	str	r2, [r3, #0]
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	f3bf 8f6f 	isb	sy
}
 800f598:	bf00      	nop
 800f59a:	3710      	adds	r7, #16
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20002118 	.word	0x20002118
 800f5a4:	20002120 	.word	0x20002120
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800f5ac:	b480      	push	{r7}
 800f5ae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800f5b0:	bf00      	nop
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
	...

0800f5bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af04      	add	r7, sp, #16
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800f5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ca:	9302      	str	r3, [sp, #8]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	1dfb      	adds	r3, r7, #7
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2178      	movs	r1, #120	; 0x78
 800f5da:	4803      	ldr	r0, [pc, #12]	; (800f5e8 <ssd1306_WriteCommand+0x2c>)
 800f5dc:	f7f4 fd94 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20000160 	.word	0x20000160

0800f5ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af04      	add	r7, sp, #16
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fe:	9202      	str	r2, [sp, #8]
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	2301      	movs	r3, #1
 800f608:	2240      	movs	r2, #64	; 0x40
 800f60a:	2178      	movs	r1, #120	; 0x78
 800f60c:	4803      	ldr	r0, [pc, #12]	; (800f61c <ssd1306_WriteData+0x30>)
 800f60e:	f7f4 fd7b 	bl	8004108 <HAL_I2C_Mem_Write>
}
 800f612:	bf00      	nop
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20000160 	.word	0x20000160

0800f620 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800f620:	b580      	push	{r7, lr}
 800f622:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800f624:	f7ff ffc2 	bl	800f5ac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800f628:	2064      	movs	r0, #100	; 0x64
 800f62a:	f7f2 fa1b 	bl	8001a64 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800f62e:	2000      	movs	r0, #0
 800f630:	f000 f8c0 	bl	800f7b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800f634:	2020      	movs	r0, #32
 800f636:	f7ff ffc1 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800f63a:	2000      	movs	r0, #0
 800f63c:	f7ff ffbe 	bl	800f5bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800f640:	20b0      	movs	r0, #176	; 0xb0
 800f642:	f7ff ffbb 	bl	800f5bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800f646:	20c8      	movs	r0, #200	; 0xc8
 800f648:	f7ff ffb8 	bl	800f5bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800f64c:	2000      	movs	r0, #0
 800f64e:	f7ff ffb5 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800f652:	2010      	movs	r0, #16
 800f654:	f7ff ffb2 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800f658:	2040      	movs	r0, #64	; 0x40
 800f65a:	f7ff ffaf 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800f65e:	20ff      	movs	r0, #255	; 0xff
 800f660:	f000 f894 	bl	800f78c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800f664:	20a1      	movs	r0, #161	; 0xa1
 800f666:	f7ff ffa9 	bl	800f5bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800f66a:	20a6      	movs	r0, #166	; 0xa6
 800f66c:	f7ff ffa6 	bl	800f5bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800f670:	20a8      	movs	r0, #168	; 0xa8
 800f672:	f7ff ffa3 	bl	800f5bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800f676:	203f      	movs	r0, #63	; 0x3f
 800f678:	f7ff ffa0 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800f67c:	20a4      	movs	r0, #164	; 0xa4
 800f67e:	f7ff ff9d 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800f682:	20d3      	movs	r0, #211	; 0xd3
 800f684:	f7ff ff9a 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800f688:	2000      	movs	r0, #0
 800f68a:	f7ff ff97 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800f68e:	20d5      	movs	r0, #213	; 0xd5
 800f690:	f7ff ff94 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800f694:	20f0      	movs	r0, #240	; 0xf0
 800f696:	f7ff ff91 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800f69a:	20d9      	movs	r0, #217	; 0xd9
 800f69c:	f7ff ff8e 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800f6a0:	2022      	movs	r0, #34	; 0x22
 800f6a2:	f7ff ff8b 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800f6a6:	20da      	movs	r0, #218	; 0xda
 800f6a8:	f7ff ff88 	bl	800f5bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800f6ac:	2012      	movs	r0, #18
 800f6ae:	f7ff ff85 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800f6b2:	20db      	movs	r0, #219	; 0xdb
 800f6b4:	f7ff ff82 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800f6b8:	2020      	movs	r0, #32
 800f6ba:	f7ff ff7f 	bl	800f5bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800f6be:	208d      	movs	r0, #141	; 0x8d
 800f6c0:	f7ff ff7c 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800f6c4:	2014      	movs	r0, #20
 800f6c6:	f7ff ff79 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800f6ca:	2001      	movs	r0, #1
 800f6cc:	f000 f872 	bl	800f7b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	f000 f80f 	bl	800f6f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800f6d6:	f000 f831 	bl	800f73c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800f6da:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800f6e0:	4b03      	ldr	r3, [pc, #12]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800f6e6:	4b02      	ldr	r3, [pc, #8]	; (800f6f0 <ssd1306_Init+0xd0>)
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	711a      	strb	r2, [r3, #4]
}
 800f6ec:	bf00      	nop
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	20002524 	.word	0x20002524

0800f6f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f6fe:	2300      	movs	r3, #0
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	e00d      	b.n	800f720 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d101      	bne.n	800f70e <ssd1306_Fill+0x1a>
 800f70a:	2100      	movs	r1, #0
 800f70c:	e000      	b.n	800f710 <ssd1306_Fill+0x1c>
 800f70e:	21ff      	movs	r1, #255	; 0xff
 800f710:	4a09      	ldr	r2, [pc, #36]	; (800f738 <ssd1306_Fill+0x44>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4413      	add	r3, r2
 800f716:	460a      	mov	r2, r1
 800f718:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	3301      	adds	r3, #1
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f726:	d3ed      	bcc.n	800f704 <ssd1306_Fill+0x10>
    }
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	20002124 	.word	0x20002124

0800f73c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f742:	2300      	movs	r3, #0
 800f744:	71fb      	strb	r3, [r7, #7]
 800f746:	e016      	b.n	800f776 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800f748:	79fb      	ldrb	r3, [r7, #7]
 800f74a:	3b50      	subs	r3, #80	; 0x50
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff ff34 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800f754:	2000      	movs	r0, #0
 800f756:	f7ff ff31 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800f75a:	2010      	movs	r0, #16
 800f75c:	f7ff ff2e 	bl	800f5bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	01db      	lsls	r3, r3, #7
 800f764:	4a08      	ldr	r2, [pc, #32]	; (800f788 <ssd1306_UpdateScreen+0x4c>)
 800f766:	4413      	add	r3, r2
 800f768:	2180      	movs	r1, #128	; 0x80
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff ff3e 	bl	800f5ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	3301      	adds	r3, #1
 800f774:	71fb      	strb	r3, [r7, #7]
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	2b07      	cmp	r3, #7
 800f77a:	d9e5      	bls.n	800f748 <ssd1306_UpdateScreen+0xc>
    }
}
 800f77c:	bf00      	nop
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20002124 	.word	0x20002124

0800f78c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	4603      	mov	r3, r0
 800f794:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800f796:	2381      	movs	r3, #129	; 0x81
 800f798:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800f79a:	7bfb      	ldrb	r3, [r7, #15]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7ff ff0d 	bl	800f5bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff ff09 	bl	800f5bc <ssd1306_WriteCommand>
}
 800f7aa:	bf00      	nop
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
	...

0800f7b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d005      	beq.n	800f7d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800f7c4:	23af      	movs	r3, #175	; 0xaf
 800f7c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800f7c8:	4b08      	ldr	r3, [pc, #32]	; (800f7ec <ssd1306_SetDisplayOn+0x38>)
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	715a      	strb	r2, [r3, #5]
 800f7ce:	e004      	b.n	800f7da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800f7d0:	23ae      	movs	r3, #174	; 0xae
 800f7d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800f7d4:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <ssd1306_SetDisplayOn+0x38>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff feed 	bl	800f5bc <ssd1306_WriteCommand>
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20002524 	.word	0x20002524

0800f7f0 <memset>:
 800f7f0:	4402      	add	r2, r0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d100      	bne.n	800f7fa <memset+0xa>
 800f7f8:	4770      	bx	lr
 800f7fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f7fe:	e7f9      	b.n	800f7f4 <memset+0x4>

0800f800 <__libc_init_array>:
 800f800:	b570      	push	{r4, r5, r6, lr}
 800f802:	4d0d      	ldr	r5, [pc, #52]	; (800f838 <__libc_init_array+0x38>)
 800f804:	4c0d      	ldr	r4, [pc, #52]	; (800f83c <__libc_init_array+0x3c>)
 800f806:	1b64      	subs	r4, r4, r5
 800f808:	10a4      	asrs	r4, r4, #2
 800f80a:	2600      	movs	r6, #0
 800f80c:	42a6      	cmp	r6, r4
 800f80e:	d109      	bne.n	800f824 <__libc_init_array+0x24>
 800f810:	4d0b      	ldr	r5, [pc, #44]	; (800f840 <__libc_init_array+0x40>)
 800f812:	4c0c      	ldr	r4, [pc, #48]	; (800f844 <__libc_init_array+0x44>)
 800f814:	f000 f826 	bl	800f864 <_init>
 800f818:	1b64      	subs	r4, r4, r5
 800f81a:	10a4      	asrs	r4, r4, #2
 800f81c:	2600      	movs	r6, #0
 800f81e:	42a6      	cmp	r6, r4
 800f820:	d105      	bne.n	800f82e <__libc_init_array+0x2e>
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	f855 3b04 	ldr.w	r3, [r5], #4
 800f828:	4798      	blx	r3
 800f82a:	3601      	adds	r6, #1
 800f82c:	e7ee      	b.n	800f80c <__libc_init_array+0xc>
 800f82e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f832:	4798      	blx	r3
 800f834:	3601      	adds	r6, #1
 800f836:	e7f2      	b.n	800f81e <__libc_init_array+0x1e>
 800f838:	0800faec 	.word	0x0800faec
 800f83c:	0800faec 	.word	0x0800faec
 800f840:	0800faec 	.word	0x0800faec
 800f844:	0800faf0 	.word	0x0800faf0

0800f848 <memcpy>:
 800f848:	440a      	add	r2, r1
 800f84a:	4291      	cmp	r1, r2
 800f84c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f850:	d100      	bne.n	800f854 <memcpy+0xc>
 800f852:	4770      	bx	lr
 800f854:	b510      	push	{r4, lr}
 800f856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f85a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f85e:	4291      	cmp	r1, r2
 800f860:	d1f9      	bne.n	800f856 <memcpy+0xe>
 800f862:	bd10      	pop	{r4, pc}

0800f864 <_init>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	bf00      	nop
 800f868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86a:	bc08      	pop	{r3}
 800f86c:	469e      	mov	lr, r3
 800f86e:	4770      	bx	lr

0800f870 <_fini>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	bf00      	nop
 800f874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f876:	bc08      	pop	{r3}
 800f878:	469e      	mov	lr, r3
 800f87a:	4770      	bx	lr
>>>>>>> 87f8dd6860dbfaa1f862358e03f1bf112f17dac7
