
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee08  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f204  0800f204  0001f204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f208  0800f208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000058  20000008  0800f20c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020b4  20000060  0800f264  00020060  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20002114  0800f264  00022114  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030b27  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005e50  00000000  00000000  00050bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b78  00000000  00000000  00056a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000219f  00000000  00000000  000595c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028967  00000000  00000000  0005b767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002eaf0  00000000  00000000  000840ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010150a  00000000  00000000  000b2bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bbe4  00000000  00000000  001b40c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001bfcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ef30 	.word	0x0800ef30

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800ef30 	.word	0x0800ef30

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <IO_Module_Init>:



//IO Module Configuration function
void IO_Module_Init(modbusHandler_t * modH)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	bitWrite(modH,TWA1_STATUS,TWA_1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8f9 	bl	8000e1c <bitWrite>
	bitWrite(modH,TWA2_STATUS,TWA_2);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f8f4 	bl	8000e1c <bitWrite>
	bitWrite(modH,TWA3_STATUS,TWA_3);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f8ef 	bl	8000e1c <bitWrite>
	bitWrite(modH,TWA4_STATUS,TWA_4);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2106      	movs	r1, #6
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f8ea 	bl	8000e1c <bitWrite>


}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_ADC_ConvCpltCallback>:



// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 fdf8 	bl	8009854 <osThreadFlagsSet>

}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000007c 	.word	0x2000007c

08000c70 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <ADC_Temp_Thread_Start+0x24>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <ADC_Temp_Thread_Start+0x28>)
 8000c7a:	f008 fd59 	bl	8009730 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <ADC_Temp_Thread_Start+0x2c>)
 8000c82:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <ADC_Temp_Thread_Start+0x30>)
 8000c86:	f008 ff8f 	bl	8009ba8 <osEventFlagsNew>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <ADC_Temp_Thread_Start+0x34>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800f030 	.word	0x0800f030
 8000c98:	08000d59 	.word	0x08000d59
 8000c9c:	2000007c 	.word	0x2000007c
 8000ca0:	0800f088 	.word	0x0800f088
 8000ca4:	20000088 	.word	0x20000088

08000ca8 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread

void Control_Thread_Init(modbusHandler_t *modH)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	ControlHandle = osThreadNew(ControlTask, modH, &Control_attributes);
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <Control_Thread_Init+0x34>)
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <Control_Thread_Init+0x38>)
 8000cb6:	f008 fd3b 	bl	8009730 <osThreadNew>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <Control_Thread_Init+0x3c>)
 8000cbe:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <Control_Thread_Init+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <Control_Thread_Init+0x44>)
 8000cc8:	f008 fec4 	bl	8009a54 <osTimerNew>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <Control_Thread_Init+0x48>)
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	0800f054 	.word	0x0800f054
 8000ce0:	08000cf5 	.word	0x08000cf5
 8000ce4:	20000080 	.word	0x20000080
 8000ce8:	0800f078 	.word	0x0800f078
 8000cec:	08000ec1 	.word	0x08000ec1
 8000cf0:	20000084 	.word	0x20000084

08000cf4 <ControlTask>:


// System Threads


void ControlTask(void *argument){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	osTimerStart(controlTimerHandle, CONTROLFREQ);
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <ControlTask+0x58>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 ff21 	bl	8009b4c <osTimerStart>
	modbusHandler_t *modH = (modbusHandler_t *)argument;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO

	uint8_t TWA_Status = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	72fb      	strb	r3, [r7, #11]

		// Request room temperature ¿Function?, run control algorithm and get an output
		// Check output and change state of the TWA based on it.
		// Run this loop every 1 second

		TWA_Status = bitRead(modH,1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f8b8 	bl	8000e8a <bitRead>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(TWA2_GPIO_Port, TWA2_Pin,TWA_Status);
 8000d1e:	7afb      	ldrb	r3, [r7, #11]
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <ControlTask+0x5c>)
 8000d28:	f003 f9ec 	bl	8004104 <HAL_GPIO_WritePin>
		osDelay(5000);
 8000d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d30:	f008 fe5f 	bl	80099f2 <osDelay>


		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f008 fdd8 	bl	80098f0 <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d40:	2101      	movs	r1, #1
 8000d42:	4803      	ldr	r0, [pc, #12]	; (8000d50 <ControlTask+0x5c>)
 8000d44:	f003 f9f6 	bl	8004134 <HAL_GPIO_TogglePin>
		TWA_Status = bitRead(modH,1);
 8000d48:	e7e3      	b.n	8000d12 <ControlTask+0x1e>
 8000d4a:	bf00      	nop
 8000d4c:	20000084 	.word	0x20000084
 8000d50:	48000400 	.word	0x48000400
 8000d54:	00000000 	.word	0x00000000

08000d58 <CalculateTemp_Thread>:
	}
}


void CalculateTemp_Thread(void *argument){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d60:	217f      	movs	r1, #127	; 0x7f
 8000d62:	4829      	ldr	r0, [pc, #164]	; (8000e08 <CalculateTemp_Thread+0xb0>)
 8000d64:	f002 fbac 	bl	80034c0 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4928      	ldr	r1, [pc, #160]	; (8000e0c <CalculateTemp_Thread+0xb4>)
 8000d6c:	4826      	ldr	r0, [pc, #152]	; (8000e08 <CalculateTemp_Thread+0xb0>)
 8000d6e:	f001 fad1 	bl	8002314 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000d72:	f04f 32ff 	mov.w	r2, #4294967295
 8000d76:	2100      	movs	r1, #0
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f008 fdb9 	bl	80098f0 <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <CalculateTemp_Thread+0xb4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb4d 	bl	8000424 <__aeabi_i2d>
 8000d8a:	a319      	add	r3, pc, #100	; (adr r3, 8000df0 <CalculateTemp_Thread+0x98>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fbb2 	bl	80004f8 <__aeabi_dmul>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	491d      	ldr	r1, [pc, #116]	; (8000e10 <CalculateTemp_Thread+0xb8>)
 8000d9a:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <CalculateTemp_Thread+0xb8>)
 8000da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da4:	a314      	add	r3, pc, #80	; (adr r3, 8000df8 <CalculateTemp_Thread+0xa0>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff f9ed 	bl	8000188 <__aeabi_dsub>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <CalculateTemp_Thread+0xbc>)
 8000dbc:	f7ff fb9c 	bl	80004f8 <__aeabi_dmul>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	a30d      	add	r3, pc, #52	; (adr r3, 8000e00 <CalculateTemp_Thread+0xa8>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fcbd 	bl	800074c <__aeabi_ddiv>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4910      	ldr	r1, [pc, #64]	; (8000e18 <CalculateTemp_Thread+0xc0>)
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <CalculateTemp_Thread+0xb0>)
 8000dde:	f001 fb1d 	bl	800241c <HAL_ADC_Stop_DMA>
		osDelay(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f008 fe05 	bl	80099f2 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000de8:	e7be      	b.n	8000d68 <CalculateTemp_Thread+0x10>
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	f9353597 	.word	0xf9353597
 8000df4:	3f47fffb 	.word	0x3f47fffb
 8000df8:	083126e9 	.word	0x083126e9
 8000dfc:	3fda1cac 	.word	0x3fda1cac
 8000e00:	851eb852 	.word	0x851eb852
 8000e04:	400051eb 	.word	0x400051eb
 8000e08:	200000ac 	.word	0x200000ac
 8000e0c:	2000008c 	.word	0x2000008c
 8000e10:	20000090 	.word	0x20000090
 8000e14:	40590000 	.word	0x40590000
 8000e18:	20000098 	.word	0x20000098

08000e1c <bitWrite>:
	}

}
void bitWrite(modbusHandler_t * modH, uint8_t pos, uint8_t val)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	70bb      	strb	r3, [r7, #2]
	uint16_t *temp;
	temp = &modH->u16regsCoilsRO[pos/16];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]

	if (val == 1) {
 8000e3e:	78bb      	ldrb	r3, [r7, #2]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10d      	bne.n	8000e60 <bitWrite+0x44>
		*temp |= (1UL << (pos%16));
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	801a      	strh	r2, [r3, #0]
	}
	else {
		*temp &= ~(1UL << (pos%16));
	}
}
 8000e5e:	e00e      	b.n	8000e7e <bitWrite+0x62>
		*temp &= ~(1UL << (pos%16));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	881a      	ldrh	r2, [r3, #0]
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	801a      	strh	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <bitRead>:

uint8_t bitRead(modbusHandler_t *modH, uint8_t pos)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
	uint16_t *temp;
	uint8_t res;
	temp = &modH->u16regsCoils[0];
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e9c:	60fb      	str	r3, [r7, #12]

	res = (*temp >> pos) & 0x01;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	72fb      	strb	r3, [r7, #11]
	return res;
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <ControlExecTim>:

/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	osThreadFlagsSet(ControlHandle, 0x01);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <ControlExecTim+0x1c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 fcc0 	bl	8009854 <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000080 	.word	0x20000080

08000ee0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ef0:	f023 0218 	bic.w	r2, r3, #24
 8000ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f30:	68fb      	ldr	r3, [r7, #12]
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fe00 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f872 	bl	8001060 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f7c:	f000 f8e6 	bl	800114c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fa50 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f84:	f000 fa2c 	bl	80013e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f88:	f000 f9b6 	bl	80012f8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000f8c:	f000 fa00 	bl	8001390 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000f90:	f000 f90e 	bl	80011b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f94:	f000 f970 	bl	8001278 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  ModbusH.uModbusType = MB_SLAVE;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <main+0xc8>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <main+0xc8>)
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <main+0xcc>)
 8000fa2:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <main+0xc8>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <main+0xc8>)
 8000fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <main+0xc8>)
 8000fb6:	4a22      	ldr	r2, [pc, #136]	; (8001040 <main+0xd0>)
 8000fb8:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <main+0xc8>)
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <main+0xc8>)
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <main+0xd4>)
 8000fc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <main+0xc8>)
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <main+0xd8>)
 8000fcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <main+0xc8>)
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <main+0xdc>)
 8000fd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <main+0xc8>)
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <main+0xe0>)
 8000fdc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <main+0xc8>)
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <main+0xc8>)
 8000fea:	2214      	movs	r2, #20
 8000fec:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <main+0xc8>)
 8000ff2:	2205      	movs	r2, #5
 8000ff4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  //ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
  ModbusH.xTypeHW = USART_HW_DMA;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <main+0xc8>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  IO_Module_Init(&ModbusH);
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <main+0xc8>)
 8001002:	f7ff fe09 	bl	8000c18 <IO_Module_Init>
  Control_Thread_Init(&ModbusH);
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <main+0xc8>)
 8001008:	f7ff fe4e 	bl	8000ca8 <Control_Thread_Init>

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <main+0xc8>)
 800100e:	f00c fa8d 	bl	800d52c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <main+0xc8>)
 8001014:	f00c fb2c 	bl	800d670 <ModbusStart>
  //ssd1306_TestAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f008 fb40 	bl	800969c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <main+0xe4>)
 800101e:	2100      	movs	r1, #0
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <main+0xe8>)
 8001022:	f008 fb85 	bl	8009730 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <main+0xec>)
 800102a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 800102c:	f7ff fe20 	bl	8000c70 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001030:	f008 fb58 	bl	80096e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0xc4>
 8001036:	bf00      	nop
 8001038:	20000610 	.word	0x20000610
 800103c:	200001c4 	.word	0x200001c4
 8001040:	48000800 	.word	0x48000800
 8001044:	20000008 	.word	0x20000008
 8001048:	2000001c 	.word	0x2000001c
 800104c:	20000044 	.word	0x20000044
 8001050:	200000a0 	.word	0x200000a0
 8001054:	0800f098 	.word	0x0800f098
 8001058:	08001505 	.word	0x08001505
 800105c:	2000060c 	.word	0x2000060c

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09a      	sub	sp, #104	; 0x68
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2248      	movs	r2, #72	; 0x48
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00d ff24 	bl	800eebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001094:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f023 0303 	bic.w	r3, r3, #3
 80010a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010aa:	f003 fa93 	bl	80045d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ff16 	bl	8000ee0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SystemClock_Config+0xe8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <SystemClock_Config+0xe8>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <SystemClock_Config+0xe8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80010d0:	2327      	movs	r3, #39	; 0x27
 80010d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fe09 	bl	8004d14 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001108:	f000 fa16 	bl	8001538 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800110c:	236f      	movs	r3, #111	; 0x6f
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001110:	2302      	movs	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f965 	bl	80053fc <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001138:	f000 f9fe 	bl	8001538 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800113c:	f004 ff52 	bl	8005fe4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001140:	bf00      	nop
 8001142:	3768      	adds	r7, #104	; 0x68
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58000400 	.word	0x58000400

0800114c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2250      	movs	r2, #80	; 0x50
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00d feaf 	bl	800eebc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800115e:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 8001162:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001164:	2318      	movs	r3, #24
 8001166:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800116e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001172:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001174:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001178:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800117a:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800117e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800118c:	2300      	movs	r3, #0
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fdae 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80011a2:	f000 f9c9 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	; 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_ADC1_Init+0xbc>)
 80011c8:	4a29      	ldr	r2, [pc, #164]	; (8001270 <MX_ADC1_Init+0xc0>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_ADC1_Init+0xbc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_ADC1_Init+0xbc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_ADC1_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_ADC1_Init+0xbc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_ADC1_Init+0xbc>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_ADC1_Init+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_ADC1_Init+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_ADC1_Init+0xbc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_ADC1_Init+0xbc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC1_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_ADC1_Init+0xbc>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_ADC1_Init+0xbc>)
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ADC1_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_ADC1_Init+0xbc>)
 8001228:	f000 ff28 	bl	800207c <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001232:	f000 f981 	bl	8001538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_ADC1_Init+0xc4>)
 8001238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123a:	2306      	movs	r3, #6
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800123e:	2302      	movs	r3, #2
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001242:	237f      	movs	r3, #127	; 0x7f
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001246:	2304      	movs	r3, #4
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC1_Init+0xbc>)
 8001254:	f001 fb18 	bl	8002888 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800125e:	f000 f96b 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000ac 	.word	0x200000ac
 8001270:	50040000 	.word	0x50040000
 8001274:	14f00020 	.word	0x14f00020

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_I2C1_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_I2C1_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <MX_I2C1_Init+0x74>)
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_I2C1_Init+0x7c>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_I2C1_Init+0x74>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_I2C1_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_I2C1_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <MX_I2C1_Init+0x74>)
 80012b4:	f002 ff58 	bl	8004168 <HAL_I2C_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012be:	f000 f93b 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_I2C1_Init+0x74>)
 80012c6:	f002 ffea 	bl	800429e <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d0:	f000 f932 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_I2C1_Init+0x74>)
 80012d8:	f003 f82c 	bl	8004334 <HAL_I2CEx_ConfigDigitalFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 f929 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000170 	.word	0x20000170
 80012f0:	40005400 	.word	0x40005400
 80012f4:	00300f38 	.word	0x00300f38

080012f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_USART1_UART_Init+0x90>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <MX_USART1_UART_Init+0x94>)
 8001300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_USART1_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_USART1_UART_Init+0x90>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_USART1_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001342:	f005 f9e1 	bl	8006708 <HAL_UART_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800134c:	f000 f8f4 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001354:	f008 f803 	bl	800935e <HAL_UARTEx_SetTxFifoThreshold>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800135e:	f000 f8eb 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001366:	f008 f838 	bl	80093da <HAL_UARTEx_SetRxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001370:	f000 f8e2 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_USART1_UART_Init+0x90>)
 8001376:	f007 ffb9 	bl	80092ec <HAL_UARTEx_DisableFifoMode>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001380:	f000 f8da 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200001c4 	.word	0x200001c4
 800138c:	40013800 	.word	0x40013800

08001390 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <MX_USB_PCD_Init+0x4c>)
 8001398:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 800139c:	2208      	movs	r2, #8
 800139e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_USB_PCD_Init+0x48>)
 80013c6:	f003 f801 	bl	80043cc <HAL_PCD_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013d0:	f000 f8b2 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000318 	.word	0x20000318
 80013dc:	40006800 	.word	0x40006800

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013e4:	2004      	movs	r0, #4
 80013e6:	f7ff fd91 	bl	8000f0c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff fd8e 	bl	8000f0c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2105      	movs	r1, #5
 80013f4:	200b      	movs	r0, #11
 80013f6:	f002 f9af 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013fa:	200b      	movs	r0, #11
 80013fc:	f002 f9c6 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2105      	movs	r1, #5
 8001404:	200c      	movs	r0, #12
 8001406:	f002 f9a7 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800140a:	200c      	movs	r0, #12
 800140c:	f002 f9be 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	200d      	movs	r0, #13
 8001416:	f002 f99f 	bl	8003758 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800141a:	200d      	movs	r0, #13
 800141c:	f002 f9b6 	bl	800378c <HAL_NVIC_EnableIRQ>

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	2004      	movs	r0, #4
 800143a:	f7ff fd80 	bl	8000f3e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fd7d 	bl	8000f3e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fd7a 	bl	8000f3e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	2008      	movs	r0, #8
 800144c:	f7ff fd77 	bl	8000f3e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2108      	movs	r1, #8
 8001454:	4828      	ldr	r0, [pc, #160]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001456:	f002 fe55 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2102      	movs	r1, #2
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f002 fe4f 	bl	8004104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 8001466:	2200      	movs	r2, #0
 8001468:	f24f 0103 	movw	r1, #61443	; 0xf003
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_GPIO_Init+0xd8>)
 800146e:	f002 fe49 	bl	8004104 <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 8001472:	2308      	movs	r3, #8
 8001474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_GPIO_Init+0xd4>)
 8001488:	f002 fccc 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148c:	2302      	movs	r3, #2
 800148e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f002 fcbe 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a8:	2310      	movs	r3, #16
 80014aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	480f      	ldr	r0, [pc, #60]	; (80014f8 <MX_GPIO_Init+0xd4>)
 80014ba:	f002 fcb3 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 80014be:	f24f 0303 	movw	r3, #61443	; 0xf003
 80014c2:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_GPIO_Init+0xd8>)
 80014d6:	f002 fca5 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80014da:	2303      	movs	r3, #3
 80014dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0xdc>)
 80014ec:	f002 fc9a 	bl	8003e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000c00 	.word	0x48000c00

08001504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


for(;;)
  {
    osDelay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f008 fa70 	bl	80099f2 <osDelay>
 8001512:	e7fb      	b.n	800150c <StartDefaultTask+0x8>

08001514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001526:	f000 fb47 	bl	8001bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40014400 	.word	0x40014400

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>

08001542 <LL_AHB2_GRP1_EnableClock>:
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4313      	orrs	r3, r2
 8001558:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001590:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	210f      	movs	r1, #15
 80015e0:	f06f 0001 	mvn.w	r0, #1
 80015e4:	f002 f8b8 	bl	8003758 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <HAL_ADC_MspInit+0xb8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d146      	bne.n	800169c <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001612:	f7ff ff96 	bl	8001542 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff ff93 	bl	8001542 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161c:	2301      	movs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f002 fbf7 	bl	8003e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001638:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_ADC_MspInit+0xc0>)
 800163a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 800163e:	2205      	movs	r2, #5
 8001640:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 800165e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001662:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001666:	2220      	movs	r2, #32
 8001668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001672:	f002 f899 	bl	80037a8 <HAL_DMA_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 800167c:	f7ff ff5c 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001684:	64da      	str	r2, [r3, #76]	; 0x4c
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	2012      	movs	r0, #18
 8001692:	f002 f861 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001696:	2012      	movs	r0, #18
 8001698:	f002 f878 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	50040000 	.word	0x50040000
 80016a8:	20000110 	.word	0x20000110
 80016ac:	40020030 	.word	0x40020030

080016b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b09c      	sub	sp, #112	; 0x70
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2250      	movs	r2, #80	; 0x50
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00d fbf3 	bl	800eebc <memset>
  if(hi2c->Instance==I2C1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_I2C_MspInit+0x88>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d126      	bne.n	800172e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016e0:	2304      	movs	r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016e4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fb02 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016fa:	f7ff ff1d 	bl	8001538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2002      	movs	r0, #2
 8001700:	f7ff ff1f 	bl	8001542 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001708:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001716:	2304      	movs	r3, #4
 8001718:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800171e:	4619      	mov	r1, r3
 8001720:	4806      	ldr	r0, [pc, #24]	; (800173c <HAL_I2C_MspInit+0x8c>)
 8001722:	f002 fb7f 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001726:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800172a:	f7ff ff23 	bl	8001574 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3770      	adds	r7, #112	; 0x70
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40005400 	.word	0x40005400
 800173c:	48000400 	.word	0x48000400

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09c      	sub	sp, #112	; 0x70
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2250      	movs	r2, #80	; 0x50
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f00d fbab 	bl	800eebc <memset>
  if(huart->Instance==USART1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_UART_MspInit+0x138>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d17f      	bne.n	8001870 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001770:	2301      	movs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fabb 	bl	8005cf8 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001788:	f7ff fed6 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001790:	f7ff ff09 	bl	80015a6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001794:	2002      	movs	r0, #2
 8001796:	f7ff fed4 	bl	8001542 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800179a:	23c0      	movs	r3, #192	; 0xc0
 800179c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017aa:	2307      	movs	r3, #7
 80017ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4831      	ldr	r0, [pc, #196]	; (800187c <HAL_UART_MspInit+0x13c>)
 80017b6:	f002 fb35 	bl	8003e24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017bc:	4a31      	ldr	r2, [pc, #196]	; (8001884 <HAL_UART_MspInit+0x144>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017c2:	220e      	movs	r2, #14
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017c6:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <HAL_UART_MspInit+0x140>)
 80017f2:	f001 ffd9 	bl	80037a8 <HAL_DMA_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80017fc:	f7ff fe9c 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_UART_MspInit+0x140>)
 8001804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_UART_MspInit+0x140>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_UART_MspInit+0x14c>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001816:	220f      	movs	r2, #15
 8001818:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x148>)
 800181c:	2210      	movs	r2, #16
 800181e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_UART_MspInit+0x148>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_UART_MspInit+0x148>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001846:	f001 ffaf 	bl	80037a8 <HAL_DMA_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001850:	f7ff fe72 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_UART_MspInit+0x148>)
 8001858:	67da      	str	r2, [r3, #124]	; 0x7c
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_UART_MspInit+0x148>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2105      	movs	r1, #5
 8001864:	2024      	movs	r0, #36	; 0x24
 8001866:	f001 ff77 	bl	8003758 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800186a:	2024      	movs	r0, #36	; 0x24
 800186c:	f001 ff8e 	bl	800378c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3770      	adds	r7, #112	; 0x70
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013800 	.word	0x40013800
 800187c:	48000400 	.word	0x48000400
 8001880:	20000258 	.word	0x20000258
 8001884:	40020008 	.word	0x40020008
 8001888:	200002b8 	.word	0x200002b8
 800188c:	4002001c 	.word	0x4002001c

08001890 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_PCD_MspInit+0x5c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d118      	bne.n	80018e4 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fe45 	bl	8001542 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80018ca:	230a      	movs	r3, #10
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f002 faa4 	bl	8003e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80018e0:	f7ff fe48 	bl	8001574 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40006800 	.word	0x40006800

080018f0 <LL_APB2_GRP1_EnableClock>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	2019      	movs	r0, #25
 800193a:	f001 ff0d 	bl	8003758 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800193e:	2019      	movs	r0, #25
 8001940:	f001 ff24 	bl	800378c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001944:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001948:	f7ff ffd2 	bl	80018f0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800194c:	f107 0208 	add.w	r2, r7, #8
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f003 ff3c 	bl	80057d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800195c:	f003 ff24 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8001960:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_InitTick+0x8c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3b01      	subs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_InitTick+0x90>)
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_InitTick+0x94>)
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_InitTick+0x90>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800197e:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_InitTick+0x90>)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_InitTick+0x90>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_InitTick+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001990:	4808      	ldr	r0, [pc, #32]	; (80019b4 <HAL_InitTick+0x90>)
 8001992:	f004 fc3e 	bl	8006212 <HAL_TIM_Base_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d104      	bne.n	80019a6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_InitTick+0x90>)
 800199e:	f004 fc99 	bl	80062d4 <HAL_TIM_Base_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	20000768 	.word	0x20000768
 80019b8:	40014400 	.word	0x40014400

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ee:	f002 f8bc 	bl	8003b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000258 	.word	0x20000258

080019fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA1_Channel2_IRQHandler+0x10>)
 8001a02:	f002 f8b2 	bl	8003b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200002b8 	.word	0x200002b8

08001a10 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA1_Channel3_IRQHandler+0x10>)
 8001a16:	f002 f8a8 	bl	8003b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000110 	.word	0x20000110

08001a24 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <ADC1_IRQHandler+0x10>)
 8001a2a:	f000 fd58 	bl	80024de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200000ac 	.word	0x200000ac

08001a38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a3e:	f004 fc97 	bl	8006370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000768 	.word	0x20000768

08001a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <USART1_IRQHandler+0x10>)
 8001a52:	f005 f96d 	bl	8006d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001c4 	.word	0x200001c4

08001a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <SystemInit+0x98>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <SystemInit+0x98>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a8c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <SystemInit+0x9c>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aaa:	f023 0305 	bic.w	r3, r3, #5
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <SystemInit+0xa0>)
 8001acc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <SystemInit+0xa0>)
 8001ad4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	faf6fefb 	.word	0xfaf6fefb
 8001b00:	22041000 	.word	0x22041000

08001b04 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001b04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b08:	3304      	adds	r3, #4

08001b0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b0e:	d3f9      	bcc.n	8001b04 <CopyDataInit>
  bx lr
 8001b10:	4770      	bx	lr

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b12:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b14:	3004      	adds	r0, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b16:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>
  bx lr
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b20:	f7ff ff9e 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <LoopForever+0x6>)
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <LoopForever+0xa>)
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <LoopForever+0xe>)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f7ff ffed 	bl	8001b0a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0x12>)
 8001b32:	490c      	ldr	r1, [pc, #48]	; (8001b64 <LoopForever+0x16>)
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <LoopForever+0x1a>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f7ff ffe7 	bl	8001b0a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <LoopForever+0x1e>)
 8001b3e:	490c      	ldr	r1, [pc, #48]	; (8001b70 <LoopForever+0x22>)
 8001b40:	2300      	movs	r3, #0
 8001b42:	f7ff ffe8 	bl	8001b16 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b46:	f00d f9c1 	bl	800eecc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b4a:	f7ff fa11 	bl	8000f70 <main>

08001b4e <LoopForever>:

LoopForever:
  b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   r0, =_estack
 8001b50:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000060 	.word	0x20000060
 8001b5c:	0800f20c 	.word	0x0800f20c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b60:	20030000 	.word	0x20030000
 8001b64:	20030000 	.word	0x20030000
 8001b68:	0800f264 	.word	0x0800f264
  INIT_BSS _sbss, _ebss
 8001b6c:	20000060 	.word	0x20000060
 8001b70:	20002114 	.word	0x20002114

08001b74 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <AES1_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_Init+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_Init+0x3c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f001 fdd7 	bl	8003742 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b94:	200f      	movs	r0, #15
 8001b96:	f7ff fec5 	bl	8001924 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	e001      	b.n	8001baa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba6:	f7ff fd17 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58004000 	.word	0x58004000

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000058 	.word	0x20000058
 8001bdc:	200007b4 	.word	0x200007b4

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200007b4 	.word	0x200007b4

08001bf8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTickPrio+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000054 	.word	0x20000054

08001c10 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3360      	adds	r3, #96	; 0x60
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <LL_ADC_SetOffset+0x44>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	03fff000 	.word	0x03fff000

08001cc0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	461a      	mov	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d3a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3330      	adds	r3, #48	; 0x30
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	4413      	add	r3, r2
 8001d66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	211f      	movs	r1, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	f003 011f 	and.w	r1, r3, #31
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b087      	sub	sp, #28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3314      	adds	r3, #20
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0e5b      	lsrs	r3, r3, #25
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0d1b      	lsrs	r3, r3, #20
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	2107      	movs	r1, #7
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0d1b      	lsrs	r3, r3, #20
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0318 	and.w	r3, r3, #24
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e5c:	40d9      	lsrs	r1, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	400b      	ands	r3, r1
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e66:	431a      	orrs	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	0007ffff 	.word	0x0007ffff

08001e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6093      	str	r3, [r2, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f58:	f043 0202 	orr.w	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <LL_ADC_IsEnabled+0x18>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <LL_ADC_IsEnabled+0x1a>
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDisableOngoing+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDisableOngoing+0x1a>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fcc:	f043 0204 	orr.w	r2, r3, #4
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d101      	bne.n	8002020 <LL_ADC_REG_IsConversionOngoing+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800203e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b08      	cmp	r3, #8
 8002068:	d101      	bne.n	800206e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e12e      	b.n	80022f8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fa9f 	bl	80015ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff feef 	bl	8001ea4 <LL_ADC_IsDeepPowerDownEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fed5 	bl	8001e80 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff0a 	bl	8001ef4 <LL_ADC_IsInternalRegulatorEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff feee 	bl	8001ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f0:	4b83      	ldr	r3, [pc, #524]	; (8002300 <HAL_ADC_Init+0x284>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	4a83      	ldr	r2, [pc, #524]	; (8002304 <HAL_ADC_Init+0x288>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002104:	e002      	b.n	800210c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3b01      	subs	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f9      	bne.n	8002106 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff feec 	bl	8001ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff60 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8002148:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80c7 	bne.w	80022e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 80c3 	bne.w	80022e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002168:	f043 0202 	orr.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fef9 	bl	8001f6c <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002180:	4861      	ldr	r0, [pc, #388]	; (8002308 <HAL_ADC_Init+0x28c>)
 8002182:	f7ff fef3 	bl	8001f6c <LL_ADC_IsEnabled>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4619      	mov	r1, r3
 8002192:	485e      	ldr	r0, [pc, #376]	; (800230c <HAL_ADC_Init+0x290>)
 8002194:	f7ff fd3c 	bl	8001c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e5b      	ldrb	r3, [r3, #25]
 800219c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80021b8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	3b01      	subs	r3, #1
 80021d0:	045b      	lsls	r3, r3, #17
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_ADC_Init+0x294>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	430b      	orrs	r3, r1
 8002206:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fefb 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8002212:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff1c 	bl	8002056 <LL_ADC_INJ_IsConversionOngoing>
 800221e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d13d      	bne.n	80022a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d13a      	bne.n	80022a2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002230:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002238:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	69b9      	ldr	r1, [r7, #24]
 8002252:	430b      	orrs	r3, r1
 8002254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800225c:	2b01      	cmp	r3, #1
 800225e:	d118      	bne.n	8002292 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	e007      	b.n	80022a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10c      	bne.n	80022c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	f023 010f 	bic.w	r1, r3, #15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
 80022c2:	e007      	b.n	80022d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 020f 	bic.w	r2, r2, #15
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f023 0303 	bic.w	r3, r3, #3
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
 80022e4:	e007      	b.n	80022f6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000050 	.word	0x20000050
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	50040000 	.word	0x50040000
 800230c:	50040300 	.word	0x50040300
 8002310:	fff0c007 	.word	0xfff0c007

08002314 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fe6f 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d167      	bne.n	8002400 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_ADC_Start_DMA+0x2a>
 800233a:	2302      	movs	r3, #2
 800233c:	e063      	b.n	8002406 <HAL_ADC_Start_DMA+0xf2>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 ff20 	bl	800318c <ADC_Enable>
 800234c:	4603      	mov	r3, r0
 800234e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14f      	bne.n	80023f6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f023 0206 	bic.w	r2, r3, #6
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	659a      	str	r2, [r3, #88]	; 0x58
 8002382:	e002      	b.n	800238a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_ADC_Start_DMA+0xfc>)
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_ADC_Start_DMA+0x100>)
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_ADC_Start_DMA+0x104>)
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	221c      	movs	r2, #28
 80023a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0210 	orr.w	r2, r2, #16
 80023c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3340      	adds	r3, #64	; 0x40
 80023dc:	4619      	mov	r1, r3
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f001 fa89 	bl	80038f8 <HAL_DMA_Start_IT>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fde2 	bl	8001fb8 <LL_ADC_REG_StartConversion>
 80023f4:	e006      	b.n	8002404 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023fe:	e001      	b.n	8002404 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0800333f 	.word	0x0800333f
 8002414:	08003417 	.word	0x08003417
 8002418:	08003433 	.word	0x08003433

0800241c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Stop_DMA+0x16>
 800242e:	2302      	movs	r3, #2
 8002430:	e051      	b.n	80024d6 <HAL_ADC_Stop_DMA+0xba>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800243a:	2103      	movs	r1, #3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fde9 	bl	8003014 <ADC_ConversionStop>
 8002442:	4603      	mov	r3, r0
 8002444:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d13f      	bne.n	80024cc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002460:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d10f      	bne.n	800248a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4618      	mov	r0, r3
 8002470:	f001 fabd 	bl	80039ee <HAL_DMA_Abort>
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 feed 	bl	8003280 <ADC_Disable>
 80024a6:	4603      	mov	r3, r0
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e002      	b.n	80024b2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fee7 	bl	8003280 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d017      	beq.n	8002534 <HAL_ADC_IRQHandler+0x56>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f001 f854 	bl	80035d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_ADC_IRQHandler+0x6a>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	d05d      	beq.n	800260e <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d058      	beq.n	800260e <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fbd2 	bl	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03d      	beq.n	8002600 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002592:	d035      	beq.n	8002600 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d12e      	bne.n	8002600 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd2e 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11a      	bne.n	80025e8 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020c 	bic.w	r2, r2, #12
 80025c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d112      	bne.n	8002600 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
 80025e6:	e00b      	b.n	8002600 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fb25 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	220c      	movs	r2, #12
 800260c:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_ADC_IRQHandler+0x144>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d109      	bne.n	8002636 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002628:	2b00      	cmp	r3, #0
 800262a:	d074      	beq.n	8002716 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d06f      	beq.n	8002716 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fbb2 	bl	8001dbc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002658:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fb5f 	bl	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002664:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d049      	beq.n	8002708 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ADC_IRQHandler+0x1b0>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d041      	beq.n	8002708 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13c      	bne.n	8002708 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d135      	bne.n	8002708 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d12e      	bne.n	8002708 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fcd1 	bl	8002056 <LL_ADC_INJ_IsConversionOngoing>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11a      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026c8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
 80026ee:	e00b      	b.n	8002708 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 ff3b 	bl	8003584 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2260      	movs	r2, #96	; 0x60
 8002714:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d011      	beq.n	8002744 <HAL_ADC_IRQHandler+0x266>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00c      	beq.n	8002744 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f891 	bl	800285e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_ADC_IRQHandler+0x296>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 ff21 	bl	80035ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x2c6>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 ff13 	bl	80035c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d02b      	beq.n	8002806 <HAL_ADC_IRQHandler+0x328>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d026      	beq.n	8002806 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	e009      	b.n	80027da <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fae8 	bl	8001da0 <LL_ADC_REG_GetDMATransfer>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d10e      	bne.n	80027fe <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f043 0202 	orr.w	r2, r3, #2
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f83a 	bl	8002872 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d018      	beq.n	8002842 <HAL_ADC_IRQHandler+0x364>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	f043 0208 	orr.w	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 feab 	bl	8003598 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002842:	bf00      	nop
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0b6      	sub	sp, #216	; 0xd8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x22>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e39f      	b.n	8002fea <HAL_ADC_ConfigChannel+0x762>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fba6 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8384 	bne.w	8002fcc <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	f7ff fa39 	bl	8001d48 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fb94 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 80028e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fbb4 	bl	8002056 <LL_ADC_INJ_IsConversionOngoing>
 80028ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 81a6 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 81a1 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	461a      	mov	r2, r3
 8002914:	f7ff fa65 	bl	8001de2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	08db      	lsrs	r3, r3, #3
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00a      	beq.n	8002950 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294a:	f7ff f995 	bl	8001c78 <LL_ADC_SetOffset>
 800294e:	e17b      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f9b2 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <HAL_ADC_ConfigChannel+0xf4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff f9a7 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 021f 	and.w	r2, r3, #31
 800297a:	e01e      	b.n	80029ba <HAL_ADC_ConfigChannel+0x132>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f99c 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800299e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80029ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x14a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	e018      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x17c>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80029fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d106      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f96b 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f94f 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x1ba>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f944 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	0e9b      	lsrs	r3, r3, #26
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	e01e      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1f8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f939 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x210>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	e018      	b.n	8002aca <HAL_ADC_ConfigChannel+0x242>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002abc:	2320      	movs	r3, #32
 8002abe:	e004      	b.n	8002aca <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f908 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f8ec 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x280>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2102      	movs	r1, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f8e1 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 021f 	and.w	r2, r3, #31
 8002b06:	e01e      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x2be>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f8d6 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002b36:	2320      	movs	r3, #32
 8002b38:	e004      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x2d6>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	e016      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x304>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e004      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d106      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2102      	movs	r1, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f8a7 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2103      	movs	r1, #3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f88b 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x342>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2103      	movs	r1, #3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff f880 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	e017      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x372>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff f875 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x38a>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e011      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x3ae>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d106      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2103      	movs	r1, #3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f852 	bl	8001cec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f98d 	bl	8001f6c <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 81c2 	bne.w	8002fde <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f7ff f8e6 	bl	8001e38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a8e      	ldr	r2, [pc, #568]	; (8002eac <HAL_ADC_ConfigChannel+0x624>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f040 8130 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x418>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	bf94      	ite	ls
 8002c98:	2301      	movls	r3, #1
 8002c9a:	2300      	movhi	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e019      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x44c>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e003      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002cbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	bf94      	ite	ls
 8002cce:	2301      	movls	r3, #1
 8002cd0:	2300      	movhi	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d079      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x46c>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf2:	e015      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x498>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x4b8>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	e017      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x4e8>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	ea42 0103 	orr.w	r1, r2, r3
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x50e>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	051b      	lsls	r3, r3, #20
 8002d94:	e018      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x540>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e003      	b.n	8002dba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	e080      	b.n	8002ece <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x560>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	069b      	lsls	r3, r3, #26
 8002de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de6:	e015      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x58c>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	069b      	lsls	r3, r3, #26
 8002e10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	e017      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x5dc>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	61fb      	str	r3, [r7, #28]
  return result;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2101      	movs	r1, #1
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	ea42 0103 	orr.w	r1, r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x608>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f003 021f 	and.w	r2, r3, #31
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	3b1e      	subs	r3, #30
 8002e88:	051b      	lsls	r3, r3, #20
 8002e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	e01d      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x644>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	613b      	str	r3, [r7, #16]
  return result;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e005      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x630>
 8002eac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b1e      	subs	r3, #30
 8002ec6:	051b      	lsls	r3, r3, #20
 8002ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fe ff85 	bl	8001de2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_ADC_ConfigChannel+0x76c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d07c      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee4:	4844      	ldr	r0, [pc, #272]	; (8002ff8 <HAL_ADC_ConfigChannel+0x770>)
 8002ee6:	f7fe feb9 	bl	8001c5c <LL_ADC_GetCommonPathInternalCh>
 8002eea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eee:	4843      	ldr	r0, [pc, #268]	; (8002ffc <HAL_ADC_ConfigChannel+0x774>)
 8002ef0:	f7ff f83c 	bl	8001f6c <LL_ADC_IsEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d15e      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a40      	ldr	r2, [pc, #256]	; (8003000 <HAL_ADC_ConfigChannel+0x778>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d127      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x6cc>
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d121      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a39      	ldr	r2, [pc, #228]	; (8002ffc <HAL_ADC_ConfigChannel+0x774>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d161      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f22:	4619      	mov	r1, r3
 8002f24:	4834      	ldr	r0, [pc, #208]	; (8002ff8 <HAL_ADC_ConfigChannel+0x770>)
 8002f26:	f7fe fe86 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_ADC_ConfigChannel+0x77c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_ADC_ConfigChannel+0x780>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002f44:	e002      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f9      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f52:	e044      	b.n	8002fde <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <HAL_ADC_ConfigChannel+0x784>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d113      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x6fe>
 8002f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <HAL_ADC_ConfigChannel+0x774>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d134      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	481e      	ldr	r0, [pc, #120]	; (8002ff8 <HAL_ADC_ConfigChannel+0x770>)
 8002f80:	f7fe fe59 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f84:	e02b      	b.n	8002fde <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_ADC_ConfigChannel+0x788>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d126      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x756>
 8002f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d120      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_ADC_ConfigChannel+0x774>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11b      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4811      	ldr	r0, [pc, #68]	; (8002ff8 <HAL_ADC_ConfigChannel+0x770>)
 8002fb2:	f7fe fe40 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
 8002fb6:	e012      	b.n	8002fde <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fca:	e008      	b.n	8002fde <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	37d8      	adds	r7, #216	; 0xd8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	80080000 	.word	0x80080000
 8002ff8:	50040300 	.word	0x50040300
 8002ffc:	50040000 	.word	0x50040000
 8003000:	c7520000 	.word	0xc7520000
 8003004:	20000050 	.word	0x20000050
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	cb840000 	.word	0xcb840000
 8003010:	80000001 	.word	0x80000001

08003014 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe ffec 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 8003030:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f80d 	bl	8002056 <LL_ADC_INJ_IsConversionOngoing>
 800303c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8098 	beq.w	800317c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02a      	beq.n	80030b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7e5b      	ldrb	r3, [r3, #25]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d126      	bne.n	80030b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e1b      	ldrb	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d122      	bne.n	80030b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800306e:	e014      	b.n	800309a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4a45      	ldr	r2, [pc, #276]	; (8003188 <ADC_ConversionStop+0x174>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d90d      	bls.n	8003094 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e074      	b.n	800317e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d1e3      	bne.n	8003070 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d014      	beq.n	80030e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe ffa4 	bl	8002008 <LL_ADC_REG_IsConversionOngoing>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe ff61 	bl	8001f92 <LL_ADC_IsDisableOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe ff80 	bl	8001fe0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d014      	beq.n	8003110 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ffb3 	bl	8002056 <LL_ADC_INJ_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff49 	bl	8001f92 <LL_ADC_IsDisableOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe ff8f 	bl	800202e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d005      	beq.n	8003122 <ADC_ConversionStop+0x10e>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d105      	bne.n	8003128 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800311c:	230c      	movs	r3, #12
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	e005      	b.n	800312e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003122:	2308      	movs	r3, #8
 8003124:	617b      	str	r3, [r7, #20]
        break;
 8003126:	e002      	b.n	800312e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003128:	2304      	movs	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
        break;
 800312c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800312e:	f7fe fd57 	bl	8001be0 <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003134:	e01b      	b.n	800316e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003136:	f7fe fd53 	bl	8001be0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d914      	bls.n	800316e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1dc      	bne.n	8003136 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	a33fffff 	.word	0xa33fffff

0800318c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fee5 	bl	8001f6c <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d15e      	bne.n	8003266 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <ADC_Enable+0xe4>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e04a      	b.n	8003268 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fea0 	bl	8001f1c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031dc:	4825      	ldr	r0, [pc, #148]	; (8003274 <ADC_Enable+0xe8>)
 80031de:	f7fe fd3d 	bl	8001c5c <LL_ADC_GetCommonPathInternalCh>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00f      	beq.n	800320c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <ADC_Enable+0xec>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	4a22      	ldr	r2, [pc, #136]	; (800327c <ADC_Enable+0xf0>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031fe:	e002      	b.n	8003206 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3b01      	subs	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f9      	bne.n	8003200 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800320c:	f7fe fce8 	bl	8001be0 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003212:	e021      	b.n	8003258 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fea7 	bl	8001f6c <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fe77 	bl	8001f1c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800322e:	f7fe fcd7 	bl	8001be0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d90d      	bls.n	8003258 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d1d6      	bne.n	8003214 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	8000003f 	.word	0x8000003f
 8003274:	50040300 	.word	0x50040300
 8003278:	20000050 	.word	0x20000050
 800327c:	053e2d63 	.word	0x053e2d63

08003280 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fe80 	bl	8001f92 <LL_ADC_IsDisableOngoing>
 8003292:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fe67 	bl	8001f6c <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d047      	beq.n	8003334 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d144      	bne.n	8003334 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030d 	and.w	r3, r3, #13
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10c      	bne.n	80032d2 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fe41 	bl	8001f44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2203      	movs	r2, #3
 80032c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ca:	f7fe fc89 	bl	8001be0 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032d0:	e029      	b.n	8003326 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ee:	f7fe fc77 	bl	8001be0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d914      	bls.n	8003326 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e007      	b.n	8003336 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1dc      	bne.n	80032ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003354:	2b00      	cmp	r3, #0
 8003356:	d14b      	bne.n	80033f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d021      	beq.n	80033b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fcd3 	bl	8001d22 <LL_ADC_REG_IsTriggerSourceSWStart>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d032      	beq.n	80033e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d12b      	bne.n	80033e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11f      	bne.n	80033e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
 80033b4:	e018      	b.n	80033e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f043 0201 	orr.w	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7fd fc31 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033ee:	e00e      	b.n	800340e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fa38 	bl	8002872 <HAL_ADC_ErrorCallback>
}
 8003402:	e004      	b.n	800340e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff fa10 	bl	800284a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fa0a 	bl	8002872 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <LL_ADC_StartCalibration>:
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_IsCalibrationOnGoing>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ac:	d101      	bne.n	80034b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_ADCEx_Calibration_Start+0x1c>
 80034d8:	2302      	movs	r3, #2
 80034da:	e04d      	b.n	8003578 <HAL_ADCEx_Calibration_Start+0xb8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fecb 	bl	8003280 <ADC_Disable>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d136      	bne.n	8003562 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034fc:	f023 0302 	bic.w	r3, r3, #2
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ffa9 	bl	8003466 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003514:	e014      	b.n	8003540 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d90d      	bls.n	8003540 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f023 0312 	bic.w	r3, r3, #18
 800352c:	f043 0210 	orr.w	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e01b      	b.n	8003578 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ffa7 	bl	8003498 <LL_ADC_IsCalibrationOnGoing>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e2      	bne.n	8003516 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f023 0303 	bic.w	r3, r3, #3
 8003558:	f043 0201 	orr.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
 8003560:	e005      	b.n	800356e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00026aaa 	.word	0x00026aaa

08003584 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003604:	4013      	ands	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <__NVIC_SetPriorityGrouping+0x44>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	60d3      	str	r3, [r2, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <__NVIC_GetPriorityGrouping+0x18>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 0307 	and.w	r3, r3, #7
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	db0b      	blt.n	8003676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4907      	ldr	r1, [pc, #28]	; (8003684 <__NVIC_EnableIRQ+0x38>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2001      	movs	r0, #1
 800366e:	fa00 f202 	lsl.w	r2, r0, r2
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	; (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff4c 	bl	80035e8 <__NVIC_SetPriorityGrouping>
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003766:	f7ff ff63 	bl	8003630 <__NVIC_GetPriorityGrouping>
 800376a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	6978      	ldr	r0, [r7, #20]
 8003772:	f7ff ffb3 	bl	80036dc <NVIC_EncodePriority>
 8003776:	4602      	mov	r2, r0
 8003778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff82 	bl	8003688 <__NVIC_SetPriority>
}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ff56 	bl	800364c <__NVIC_EnableIRQ>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e08e      	b.n	80038d8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_DMA_Init+0x138>)
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d80f      	bhi.n	80037e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b45      	ldr	r3, [pc, #276]	; (80038e4 <HAL_DMA_Init+0x13c>)
 80037ce:	4413      	add	r3, r2
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_DMA_Init+0x140>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_DMA_Init+0x144>)
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
 80037e4:	e00e      	b.n	8003804 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_DMA_Init+0x148>)
 80037ee:	4413      	add	r3, r2
 80037f0:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <HAL_DMA_Init+0x140>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <HAL_DMA_Init+0x14c>)
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa80 	bl	8003d5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003864:	d102      	bne.n	800386c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003878:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003882:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_DMA_Init+0x106>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d80c      	bhi.n	80038ae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fa9f 	bl	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	e008      	b.n	80038c0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40020407 	.word	0x40020407
 80038e4:	bffdfff8 	.word	0xbffdfff8
 80038e8:	cccccccd 	.word	0xcccccccd
 80038ec:	40020000 	.word	0x40020000
 80038f0:	bffdfbf8 	.word	0xbffdfbf8
 80038f4:	40020400 	.word	0x40020400

080038f8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_DMA_Start_IT+0x20>
 8003914:	2302      	movs	r3, #2
 8003916:	e066      	b.n	80039e6 <HAL_DMA_Start_IT+0xee>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d155      	bne.n	80039d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f9c5 	bl	8003ce0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 020e 	orr.w	r2, r2, #14
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00f      	b.n	8003990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0204 	bic.w	r2, r2, #4
 800397e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 020a 	orr.w	r2, r2, #10
 800398e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e005      	b.n	80039e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
 80039e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e04f      	b.n	8003aa0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d008      	beq.n	8003a1e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e040      	b.n	8003aa0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 020e 	bic.w	r2, r2, #14
 8003a2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 021c 	and.w	r2, r3, #28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e047      	b.n	8003b60 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f003 021c 	and.w	r2, r3, #28
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
    }
  }
  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f003 031c 	and.w	r3, r3, #28
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d026      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x7a>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d107      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0204 	bic.w	r2, r2, #4
 8003bbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 021c 	and.w	r2, r3, #28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2104      	movs	r1, #4
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d071      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003be2:	e06c      	b.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f003 031c 	and.w	r3, r3, #28
 8003bec:	2202      	movs	r2, #2
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xec>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d029      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 020a 	bic.w	r2, r2, #10
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f003 021c 	and.w	r2, r3, #28
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2102      	movs	r1, #2
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d038      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c54:	e033      	b.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f003 031c 	and.w	r3, r3, #28
 8003c5e:	2208      	movs	r2, #8
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d025      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 020e 	bic.w	r2, r2, #14
 8003c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 021c 	and.w	r2, r3, #28
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
}
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f003 021c 	and.w	r2, r3, #28
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d108      	bne.n	8003d40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d3e:	e007      	b.n	8003d50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d80a      	bhi.n	8003d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6493      	str	r3, [r2, #72]	; 0x48
 8003d84:	e007      	b.n	8003d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d90:	4413      	add	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40020407 	.word	0x40020407
 8003dcc:	4002081c 	.word	0x4002081c
 8003dd0:	cccccccd 	.word	0xcccccccd
 8003dd4:	40020880 	.word	0x40020880

08003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	1000823f 	.word	0x1000823f
 8003e20:	40020940 	.word	0x40020940

08003e24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e32:	e14c      	b.n	80040ce <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 813e 	beq.w	80040c8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d005      	beq.n	8003e64 <HAL_GPIO_Init+0x40>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d130      	bne.n	8003ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0201 	and.w	r2, r3, #1
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d017      	beq.n	8003f02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2203      	movs	r2, #3
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d123      	bne.n	8003f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	08da      	lsrs	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3208      	adds	r2, #8
 8003f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	220f      	movs	r2, #15
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0203 	and.w	r2, r3, #3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8098 	beq.w	80040c8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f98:	4a54      	ldr	r2, [pc, #336]	; (80040ec <HAL_GPIO_Init+0x2c8>)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	220f      	movs	r2, #15
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fc2:	d019      	beq.n	8003ff8 <HAL_GPIO_Init+0x1d4>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_GPIO_Init+0x2cc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_GPIO_Init+0x1d0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a49      	ldr	r2, [pc, #292]	; (80040f4 <HAL_GPIO_Init+0x2d0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_GPIO_Init+0x1cc>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a48      	ldr	r2, [pc, #288]	; (80040f8 <HAL_GPIO_Init+0x2d4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <HAL_GPIO_Init+0x1c8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a47      	ldr	r2, [pc, #284]	; (80040fc <HAL_GPIO_Init+0x2d8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_GPIO_Init+0x1c4>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	e008      	b.n	8003ffa <HAL_GPIO_Init+0x1d6>
 8003fe8:	2307      	movs	r3, #7
 8003fea:	e006      	b.n	8003ffa <HAL_GPIO_Init+0x1d6>
 8003fec:	2303      	movs	r3, #3
 8003fee:	e004      	b.n	8003ffa <HAL_GPIO_Init+0x1d6>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e002      	b.n	8003ffa <HAL_GPIO_Init+0x1d6>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_GPIO_Init+0x1d6>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	f002 0203 	and.w	r2, r2, #3
 8004000:	0092      	lsls	r2, r2, #2
 8004002:	4093      	lsls	r3, r2
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800400a:	4938      	ldr	r1, [pc, #224]	; (80040ec <HAL_GPIO_Init+0x2c8>)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004018:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800403c:	4a30      	ldr	r2, [pc, #192]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004092:	4a1b      	ldr	r2, [pc, #108]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c0:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <HAL_GPIO_Init+0x2dc>)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f aeab 	bne.w	8003e34 <HAL_GPIO_Init+0x10>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40010000 	.word	0x40010000
 80040f0:	48000400 	.word	0x48000400
 80040f4:	48000800 	.word	0x48000800
 80040f8:	48000c00 	.word	0x48000c00
 80040fc:	48001000 	.word	0x48001000
 8004100:	58000800 	.word	0x58000800

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004120:	e002      	b.n	8004128 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	041a      	lsls	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43d9      	mvns	r1, r3
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	400b      	ands	r3, r1
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e08d      	b.n	8004296 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fa8e 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	e006      	b.n	80041f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d108      	bne.n	800420a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	e007      	b.n	800421a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d138      	bne.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042be:	2302      	movs	r3, #2
 80042c0:	e032      	b.n	8004328 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6819      	ldr	r1, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	d139      	bne.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004354:	2302      	movs	r3, #2
 8004356:	e033      	b.n	80043c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004386:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ce:	b08b      	sub	sp, #44	; 0x2c
 80043d0:	af06      	add	r7, sp, #24
 80043d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0cb      	b.n	8004576 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fa4c 	bl	8001890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2203      	movs	r2, #3
 80043fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f005 f8c9 	bl	800959c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e040      	b.n	8004492 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	3301      	adds	r3, #1
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	3303      	adds	r3, #3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	3338      	adds	r3, #56	; 0x38
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	440b      	add	r3, r1
 8004472:	333c      	adds	r3, #60	; 0x3c
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	3340      	adds	r3, #64	; 0x40
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	3301      	adds	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d3b9      	bcc.n	8004410 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e044      	b.n	800452c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	440b      	add	r3, r1
 80044b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	440b      	add	r3, r1
 80044c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	440b      	add	r3, r1
 80044dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044e4:	7bfa      	ldrb	r2, [r7, #15]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004510:	7bfa      	ldrb	r2, [r7, #15]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	3301      	adds	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3b5      	bcc.n	80044a2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	687e      	ldr	r6, [r7, #4]
 800453e:	466d      	mov	r5, sp
 8004540:	f106 0410 	add.w	r4, r6, #16
 8004544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	1d33      	adds	r3, r6, #4
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	6838      	ldr	r0, [r7, #0]
 8004552:	f005 f83e 	bl	80095d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f805 	bl	800457e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	58000400 	.word	0x58000400

080045f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_PWREx_GetVoltageRange+0x18>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	58000400 	.word	0x58000400

08004610 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004622:	d101      	bne.n	8004628 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_HSE_Enable>:
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_RCC_HSE_Disable>:
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_RCC_HSE_IsReady>:
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004682:	d101      	bne.n	8004688 <LL_RCC_HSE_IsReady+0x18>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <LL_RCC_HSE_IsReady+0x1a>
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_RCC_HSI_Enable>:
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_RCC_HSI_Disable>:
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	6013      	str	r3, [r2, #0]
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_HSI_IsReady>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d101      	bne.n	80046e8 <LL_RCC_HSI_IsReady+0x18>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_RCC_HSI_IsReady+0x1a>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_RCC_HSI48_Enable>:
{
 800471e:	b480      	push	{r7}
 8004720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_HSI48_Disable>:
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <LL_RCC_HSI48_IsReady>:
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d101      	bne.n	800477a <LL_RCC_HSI48_IsReady+0x18>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <LL_RCC_HSI48_IsReady+0x1a>
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_RCC_LSE_Enable>:
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_LSE_Disable>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <LL_RCC_LSE_EnableBypass>:
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_RCC_LSE_DisableBypass>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d101      	bne.n	8004826 <LL_RCC_LSE_IsReady+0x18>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <LL_RCC_LSE_IsReady+0x1a>
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004832:	b480      	push	{r7}
 8004834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d101      	bne.n	800488e <LL_RCC_LSI1_IsReady+0x18>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <LL_RCC_LSI1_IsReady+0x1a>
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d101      	bne.n	80048f6 <LL_RCC_LSI2_IsReady+0x18>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_RCC_LSI2_IsReady+0x1a>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d101      	bne.n	8004982 <LL_RCC_MSI_IsReady+0x16>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <LL_RCC_MSI_IsReady+0x18>
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2bb0      	cmp	r3, #176	; 0xb0
 80049cc:	d901      	bls.n	80049d2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80049ce:	23b0      	movs	r3, #176	; 0xb0
 80049d0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80049d2:	687b      	ldr	r3, [r7, #4]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80049e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 0203 	bic.w	r2, r3, #3
 8004a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aae:	f023 020f 	bic.w	r2, r3, #15
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	608b      	str	r3, [r1, #8]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bac:	6013      	str	r3, [r2, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be8:	d101      	bne.n	8004bee <LL_RCC_PLL_IsReady+0x18>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <LL_RCC_PLL_IsReady+0x1a>
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6e:	d101      	bne.n	8004c74 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c94:	d101      	bne.n	8004c9a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cba:	d101      	bne.n	8004cc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cde:	d101      	bne.n	8004ce4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d02:	d101      	bne.n	8004d08 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b08d      	sub	sp, #52	; 0x34
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e363      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 808d 	beq.w	8004e4e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d34:	f7ff fe7d 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8004d38:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3a:	f7ff ff83 	bl	8004c44 <LL_RCC_PLL_GetMainSource>
 8004d3e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_RCC_OscConfig+0x3e>
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d147      	bne.n	8004ddc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d144      	bne.n	8004ddc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e347      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004d62:	f7ff fe28 	bl	80049b6 <LL_RCC_MSI_GetRange>
 8004d66:	4603      	mov	r3, r0
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	d914      	bls.n	8004d96 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fd61 	bl	8005838 <RCC_SetFlashLatencyFromMSIRange>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e336      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fe02 	bl	800498e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff fe26 	bl	80049e0 <LL_RCC_MSI_SetCalibTrimming>
 8004d94:	e013      	b.n	8004dbe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff fdf7 	bl	800498e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fe1b 	bl	80049e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd42 	bl	8005838 <RCC_SetFlashLatencyFromMSIRange>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e317      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dbe:	f000 fcc9 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4aa4      	ldr	r2, [pc, #656]	; (8005058 <HAL_RCC_OscConfig+0x344>)
 8004dc6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc8:	4ba4      	ldr	r3, [pc, #656]	; (800505c <HAL_RCC_OscConfig+0x348>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc fda9 	bl	8001924 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d039      	beq.n	8004e4c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e308      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01e      	beq.n	8004e22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004de4:	f7ff fda4 	bl	8004930 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004de8:	f7fc fefa 	bl	8001be0 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004df0:	f7fc fef6 	bl	8001be0 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e2f5      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e02:	f7ff fdb3 	bl	800496c <LL_RCC_MSI_IsReady>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f1      	beq.n	8004df0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fdbc 	bl	800498e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fde0 	bl	80049e0 <LL_RCC_MSI_SetCalibTrimming>
 8004e20:	e015      	b.n	8004e4e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e22:	f7ff fd94 	bl	800494e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e26:	f7fc fedb 	bl	8001be0 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e2e:	f7fc fed7 	bl	8001be0 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e2d6      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e40:	f7ff fd94 	bl	800496c <LL_RCC_MSI_IsReady>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f1      	bne.n	8004e2e <HAL_RCC_OscConfig+0x11a>
 8004e4a:	e000      	b.n	8004e4e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e4c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d047      	beq.n	8004eea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	f7ff fdea 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8004e5e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e60:	f7ff fef0 	bl	8004c44 <LL_RCC_PLL_GetMainSource>
 8004e64:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_OscConfig+0x164>
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d108      	bne.n	8004e84 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d105      	bne.n	8004e84 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d134      	bne.n	8004eea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e2b4      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d102      	bne.n	8004e94 <HAL_RCC_OscConfig+0x180>
 8004e8e:	f7ff fbd1 	bl	8004634 <LL_RCC_HSE_Enable>
 8004e92:	e001      	b.n	8004e98 <HAL_RCC_OscConfig+0x184>
 8004e94:	f7ff fbdd 	bl	8004652 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fc fe9e 	bl	8001be0 <HAL_GetTick>
 8004ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fc fe9a 	bl	8001be0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e299      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004eba:	f7ff fbd9 	bl	8004670 <LL_RCC_HSE_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f1      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x194>
 8004ec4:	e011      	b.n	8004eea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fc fe8b 	bl	8001be0 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ece:	f7fc fe87 	bl	8001be0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b64      	cmp	r3, #100	; 0x64
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e286      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ee0:	f7ff fbc6 	bl	8004670 <LL_RCC_HSE_IsReady>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f1      	bne.n	8004ece <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04c      	beq.n	8004f90 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	f7ff fd9c 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8004efa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004efc:	f7ff fea2 	bl	8004c44 <LL_RCC_PLL_GetMainSource>
 8004f00:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_OscConfig+0x200>
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	d10e      	bne.n	8004f2c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e266      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fbe5 	bl	80046f4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f2a:	e031      	b.n	8004f90 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d019      	beq.n	8004f68 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f34:	f7ff fbae 	bl	8004694 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc fe52 	bl	8001be0 <HAL_GetTick>
 8004f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f40:	f7fc fe4e 	bl	8001be0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e24d      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f52:	f7ff fbbd 	bl	80046d0 <LL_RCC_HSI_IsReady>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f1      	beq.n	8004f40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fbc7 	bl	80046f4 <LL_RCC_HSI_SetCalibTrimming>
 8004f66:	e013      	b.n	8004f90 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f68:	f7ff fba3 	bl	80046b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fe38 	bl	8001be0 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fc fe34 	bl	8001be0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e233      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f86:	f7ff fba3 	bl	80046d0 <LL_RCC_HSI_IsReady>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f1      	bne.n	8004f74 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a3 	beq.w	80050f0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d076      	beq.n	80050a0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d046      	beq.n	800504c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004fbe:	f7ff fc5a 	bl	8004876 <LL_RCC_LSI1_IsReady>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004fc8:	f7ff fc33 	bl	8004832 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fcc:	f7fc fe08 	bl	8001be0 <HAL_GetTick>
 8004fd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fd4:	f7fc fe04 	bl	8001be0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e203      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fe6:	f7ff fc46 	bl	8004876 <LL_RCC_LSI1_IsReady>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f1      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ff0:	f7ff fc53 	bl	800489a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fdf4 	bl	8001be0 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ffc:	f7fc fdf0 	bl	8001be0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e1ef      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800500e:	f7ff fc66 	bl	80048de <LL_RCC_LSI2_IsReady>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f1      	beq.n	8004ffc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fc70 	bl	8004902 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005022:	f7ff fc17 	bl	8004854 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fc fddb 	bl	8001be0 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800502e:	f7fc fdd7 	bl	8001be0 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1d6      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005040:	f7ff fc19 	bl	8004876 <LL_RCC_LSI1_IsReady>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f1      	bne.n	800502e <HAL_RCC_OscConfig+0x31a>
 800504a:	e051      	b.n	80050f0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800504c:	f7ff fbf1 	bl	8004832 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fc fdc6 	bl	8001be0 <HAL_GetTick>
 8005054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005056:	e00c      	b.n	8005072 <HAL_RCC_OscConfig+0x35e>
 8005058:	20000050 	.word	0x20000050
 800505c:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005060:	f7fc fdbe 	bl	8001be0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1bd      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005072:	f7ff fc00 	bl	8004876 <LL_RCC_LSI1_IsReady>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f1      	beq.n	8005060 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800507c:	f7ff fc1e 	bl	80048bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005082:	f7fc fdad 	bl	8001be0 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e1ac      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005094:	f7ff fc23 	bl	80048de <LL_RCC_LSI2_IsReady>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f1      	bne.n	8005082 <HAL_RCC_OscConfig+0x36e>
 800509e:	e027      	b.n	80050f0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80050a0:	f7ff fc0c 	bl	80048bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fc fd9c 	bl	8001be0 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050ac:	f7fc fd98 	bl	8001be0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e197      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050be:	f7ff fc0e 	bl	80048de <LL_RCC_LSI2_IsReady>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f1      	bne.n	80050ac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80050c8:	f7ff fbc4 	bl	8004854 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fc fd88 	bl	8001be0 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050d4:	f7fc fd84 	bl	8001be0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e183      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050e6:	f7ff fbc6 	bl	8004876 <LL_RCC_LSI1_IsReady>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f1      	bne.n	80050d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05b      	beq.n	80051b4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	4ba7      	ldr	r3, [pc, #668]	; (800539c <HAL_RCC_OscConfig+0x688>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d114      	bne.n	8005132 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005108:	f7ff fa64 	bl	80045d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510c:	f7fc fd68 	bl	8001be0 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005114:	f7fc fd64 	bl	8001be0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e163      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	4b9d      	ldr	r3, [pc, #628]	; (800539c <HAL_RCC_OscConfig+0x688>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <HAL_RCC_OscConfig+0x42c>
 800513a:	f7ff fb24 	bl	8004786 <LL_RCC_LSE_Enable>
 800513e:	e00c      	b.n	800515a <HAL_RCC_OscConfig+0x446>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b05      	cmp	r3, #5
 8005146:	d104      	bne.n	8005152 <HAL_RCC_OscConfig+0x43e>
 8005148:	f7ff fb3f 	bl	80047ca <LL_RCC_LSE_EnableBypass>
 800514c:	f7ff fb1b 	bl	8004786 <LL_RCC_LSE_Enable>
 8005150:	e003      	b.n	800515a <HAL_RCC_OscConfig+0x446>
 8005152:	f7ff fb29 	bl	80047a8 <LL_RCC_LSE_Disable>
 8005156:	f7ff fb49 	bl	80047ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d014      	beq.n	800518c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fc fd3d 	bl	8001be0 <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fc fd39 	bl	8001be0 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e136      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005180:	f7ff fb45 	bl	800480e <LL_RCC_LSE_IsReady>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <HAL_RCC_OscConfig+0x456>
 800518a:	e013      	b.n	80051b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fc fd28 	bl	8001be0 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fc fd24 	bl	8001be0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e121      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80051aa:	f7ff fb30 	bl	800480e <LL_RCC_LSE_IsReady>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ef      	bne.n	8005194 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02c      	beq.n	800521a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d014      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051c8:	f7ff faa9 	bl	800471e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051cc:	f7fc fd08 	bl	8001be0 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051d4:	f7fc fd04 	bl	8001be0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e103      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80051e6:	f7ff fabc 	bl	8004762 <LL_RCC_HSI48_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f1      	beq.n	80051d4 <HAL_RCC_OscConfig+0x4c0>
 80051f0:	e013      	b.n	800521a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051f2:	f7ff faa5 	bl	8004740 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f6:	f7fc fcf3 	bl	8001be0 <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fe:	f7fc fcef 	bl	8001be0 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e0ee      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005210:	f7ff faa7 	bl	8004762 <LL_RCC_HSI48_IsReady>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f1      	bne.n	80051fe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80e4 	beq.w	80053ec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005224:	f7ff fc05 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8005228:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	2b02      	cmp	r3, #2
 8005238:	f040 80b4 	bne.w	80053a4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0203 	and.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	429a      	cmp	r2, r3
 8005248:	d123      	bne.n	8005292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d11c      	bne.n	8005292 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d114      	bne.n	8005292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d10d      	bne.n	8005292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d106      	bne.n	8005292 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d05d      	beq.n	800534e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d058      	beq.n	800534a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e0a1      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052aa:	f7ff fc85 	bl	8004bb8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052ae:	f7fc fc97 	bl	8001be0 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b6:	f7fc fc93 	bl	8001be0 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e092      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ef      	bne.n	80052b6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <HAL_RCC_OscConfig+0x68c>)
 80052de:	4013      	ands	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052e8:	4311      	orrs	r1, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ee:	0212      	lsls	r2, r2, #8
 80052f0:	4311      	orrs	r1, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052f6:	4311      	orrs	r1, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052fc:	4311      	orrs	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005302:	430a      	orrs	r2, r1
 8005304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005308:	4313      	orrs	r3, r2
 800530a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800530c:	f7ff fc45 	bl	8004b9a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005320:	f7fc fc5e 	bl	8001be0 <HAL_GetTick>
 8005324:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005328:	f7fc fc5a 	bl	8001be0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e059      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ef      	beq.n	8005328 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005348:	e050      	b.n	80053ec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e04f      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d147      	bne.n	80053ec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800535c:	f7ff fc1d 	bl	8004b9a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800536e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005370:	f7fc fc36 	bl	8001be0 <HAL_GetTick>
 8005374:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fc fc32 	bl	8001be0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e031      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0ef      	beq.n	8005378 <HAL_RCC_OscConfig+0x664>
 8005398:	e028      	b.n	80053ec <HAL_RCC_OscConfig+0x6d8>
 800539a:	bf00      	nop
 800539c:	58000400 	.word	0x58000400
 80053a0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d01e      	beq.n	80053e8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	f7ff fc05 	bl	8004bb8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fc fc17 	bl	8001be0 <HAL_GetTick>
 80053b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b6:	f7fc fc13 	bl	8001be0 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e012      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1ef      	bne.n	80053b6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80053d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_OscConfig+0x6e4>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
 80053e6:	e001      	b.n	80053ec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3734      	adds	r7, #52	; 0x34
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	eefefffc 	.word	0xeefefffc

080053fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e12d      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005410:	4b98      	ldr	r3, [pc, #608]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d91b      	bls.n	8005456 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b95      	ldr	r3, [pc, #596]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 0207 	bic.w	r2, r3, #7
 8005426:	4993      	ldr	r1, [pc, #588]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542e:	f7fc fbd7 	bl	8001be0 <HAL_GetTick>
 8005432:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005434:	e008      	b.n	8005448 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005436:	f7fc fbd3 	bl	8001be0 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e111      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005448:	4b8a      	ldr	r3, [pc, #552]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d1ef      	bne.n	8005436 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff faef 	bl	8004a4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800546c:	f7fc fbb8 	bl	8001be0 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005474:	f7fc fbb4 	bl	8001be0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0f2      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005486:	f7ff fbe9 	bl	8004c5c <LL_RCC_IsActiveFlag_HPRE>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f1      	beq.n	8005474 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fae6 	bl	8004a72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054a6:	f7fc fb9b 	bl	8001be0 <HAL_GetTick>
 80054aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054ae:	f7fc fb97 	bl	8001be0 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0d5      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80054c0:	f7ff fbde 	bl	8004c80 <LL_RCC_IsActiveFlag_C2HPRE>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f1      	beq.n	80054ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fadf 	bl	8004a9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054e0:	f7fc fb7e 	bl	8001be0 <HAL_GetTick>
 80054e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054e8:	f7fc fb7a 	bl	8001be0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0b8      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80054fa:	f7ff fbd4 	bl	8004ca6 <LL_RCC_IsActiveFlag_SHDHPRE>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f1      	beq.n	80054e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fad9 	bl	8004acc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800551a:	f7fc fb61 	bl	8001be0 <HAL_GetTick>
 800551e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005520:	e008      	b.n	8005534 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005522:	f7fc fb5d 	bl	8001be0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e09b      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005534:	f7ff fbca 	bl	8004ccc <LL_RCC_IsActiveFlag_PPRE1>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f1      	beq.n	8005522 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff facf 	bl	8004af4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005556:	f7fc fb43 	bl	8001be0 <HAL_GetTick>
 800555a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800555e:	f7fc fb3f 	bl	8001be0 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e07d      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005570:	f7ff fbbe 	bl	8004cf0 <LL_RCC_IsActiveFlag_PPRE2>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f1      	beq.n	800555e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d043      	beq.n	800560e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d106      	bne.n	800559c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800558e:	f7ff f86f 	bl	8004670 <LL_RCC_HSE_IsReady>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11e      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e067      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80055a4:	f7ff fb17 	bl	8004bd6 <LL_RCC_PLL_IsReady>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d113      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e05c      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80055ba:	f7ff f9d7 	bl	800496c <LL_RCC_MSI_IsReady>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e051      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80055c8:	f7ff f882 	bl	80046d0 <LL_RCC_HSI_IsReady>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e04a      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fa15 	bl	8004a0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc fafe 	bl	8001be0 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fc fafa 	bl	8001be0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e036      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	f7ff fa18 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	429a      	cmp	r2, r3
 800560c:	d1ec      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800560e:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d21b      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f023 0207 	bic.w	r2, r3, #7
 8005624:	4913      	ldr	r1, [pc, #76]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562c:	f7fc fad8 	bl	8001be0 <HAL_GetTick>
 8005630:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	e008      	b.n	8005646 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005634:	f7fc fad4 	bl	8001be0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e012      	b.n	800566c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_ClockConfig+0x278>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d1ef      	bne.n	8005634 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005654:	f000 f87e 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005658:	4603      	mov	r3, r0
 800565a:	4a07      	ldr	r2, [pc, #28]	; (8005678 <HAL_RCC_ClockConfig+0x27c>)
 800565c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800565e:	f7fc facb 	bl	8001bf8 <HAL_GetTickPrio>
 8005662:	4603      	mov	r3, r0
 8005664:	4618      	mov	r0, r3
 8005666:	f7fc f95d 	bl	8001924 <HAL_InitTick>
 800566a:	4603      	mov	r3, r0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	58004000 	.word	0x58004000
 8005678:	20000050 	.word	0x20000050

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	b590      	push	{r4, r7, lr}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005682:	f7ff f9d6 	bl	8004a32 <LL_RCC_GetSysClkSource>
 8005686:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800568e:	f7ff f992 	bl	80049b6 <LL_RCC_MSI_GetRange>
 8005692:	4603      	mov	r3, r0
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	4a2b      	ldr	r2, [pc, #172]	; (8005748 <HAL_RCC_GetSysClockFreq+0xcc>)
 800569c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e04b      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d102      	bne.n	80056b0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056aa:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e045      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d10a      	bne.n	80056cc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056b6:	f7fe ffab 	bl	8004610 <LL_RCC_HSE_IsEnabledDiv2>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d102      	bne.n	80056c6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80056c0:	4b22      	ldr	r3, [pc, #136]	; (800574c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e03a      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80056c6:	4b22      	ldr	r3, [pc, #136]	; (8005750 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e037      	b.n	800573c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80056cc:	f7ff faba 	bl	8004c44 <LL_RCC_PLL_GetMainSource>
 80056d0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d003      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x64>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d003      	beq.n	80056e6 <HAL_RCC_GetSysClockFreq+0x6a>
 80056de:	e00d      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056e2:	60bb      	str	r3, [r7, #8]
        break;
 80056e4:	e015      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80056e6:	f7fe ff93 	bl	8004610 <LL_RCC_HSE_IsEnabledDiv2>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d102      	bne.n	80056f6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80056f0:	4b16      	ldr	r3, [pc, #88]	; (800574c <HAL_RCC_GetSysClockFreq+0xd0>)
 80056f2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80056f4:	e00d      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <HAL_RCC_GetSysClockFreq+0xd4>)
 80056f8:	60bb      	str	r3, [r7, #8]
        break;
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80056fc:	f7ff f95b 	bl	80049b6 <LL_RCC_MSI_GetRange>
 8005700:	4603      	mov	r3, r0
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <HAL_RCC_GetSysClockFreq+0xcc>)
 800570a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570e:	60bb      	str	r3, [r7, #8]
        break;
 8005710:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005712:	f7ff fa72 	bl	8004bfa <LL_RCC_PLL_GetN>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	fb03 f402 	mul.w	r4, r3, r2
 800571e:	f7ff fa85 	bl	8004c2c <LL_RCC_PLL_GetDivider>
 8005722:	4603      	mov	r3, r0
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	3301      	adds	r3, #1
 8005728:	fbb4 f4f3 	udiv	r4, r4, r3
 800572c:	f7ff fa72 	bl	8004c14 <LL_RCC_PLL_GetR>
 8005730:	4603      	mov	r3, r0
 8005732:	0f5b      	lsrs	r3, r3, #29
 8005734:	3301      	adds	r3, #1
 8005736:	fbb4 f3f3 	udiv	r3, r4, r3
 800573a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800573c:	68fb      	ldr	r3, [r7, #12]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bd90      	pop	{r4, r7, pc}
 8005746:	bf00      	nop
 8005748:	0800f11c 	.word	0x0800f11c
 800574c:	00f42400 	.word	0x00f42400
 8005750:	01e84800 	.word	0x01e84800

08005754 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005754:	b598      	push	{r3, r4, r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005758:	f7ff ff90 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800575c:	4604      	mov	r4, r0
 800575e:	f7ff f9dd 	bl	8004b1c <LL_RCC_GetAHBPrescaler>
 8005762:	4603      	mov	r3, r0
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a03      	ldr	r2, [pc, #12]	; (8005778 <HAL_RCC_GetHCLKFreq+0x24>)
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd98      	pop	{r3, r4, r7, pc}
 8005778:	0800f0bc 	.word	0x0800f0bc

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b598      	push	{r3, r4, r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005780:	f7ff ffe8 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 8005784:	4604      	mov	r4, r0
 8005786:	f7ff f9f0 	bl	8004b6a <LL_RCC_GetAPB1Prescaler>
 800578a:	4603      	mov	r3, r0
 800578c:	0a1b      	lsrs	r3, r3, #8
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	4a04      	ldr	r2, [pc, #16]	; (80057a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd98      	pop	{r3, r4, r7, pc}
 80057a4:	0800f0fc 	.word	0x0800f0fc

080057a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a8:	b598      	push	{r3, r4, r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80057ac:	f7ff ffd2 	bl	8005754 <HAL_RCC_GetHCLKFreq>
 80057b0:	4604      	mov	r4, r0
 80057b2:	f7ff f9e6 	bl	8004b82 <LL_RCC_GetAPB2Prescaler>
 80057b6:	4603      	mov	r3, r0
 80057b8:	0adb      	lsrs	r3, r3, #11
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	bd98      	pop	{r3, r4, r7, pc}
 80057d0:	0800f0fc 	.word	0x0800f0fc

080057d4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	226f      	movs	r2, #111	; 0x6f
 80057e2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80057e4:	f7ff f925 	bl	8004a32 <LL_RCC_GetSysClkSource>
 80057e8:	4602      	mov	r2, r0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80057ee:	f7ff f995 	bl	8004b1c <LL_RCC_GetAHBPrescaler>
 80057f2:	4602      	mov	r2, r0
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80057f8:	f7ff f9b7 	bl	8004b6a <LL_RCC_GetAPB1Prescaler>
 80057fc:	4602      	mov	r2, r0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005802:	f7ff f9be 	bl	8004b82 <LL_RCC_GetAPB2Prescaler>
 8005806:	4602      	mov	r2, r0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800580c:	f7ff f992 	bl	8004b34 <LL_C2_RCC_GetAHBPrescaler>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005816:	f7ff f99a 	bl	8004b4e <LL_RCC_GetAHB4Prescaler>
 800581a:	4602      	mov	r2, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_RCC_GetClockConfig+0x60>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0207 	and.w	r2, r3, #7
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58004000 	.word	0x58004000

08005838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2bb0      	cmp	r3, #176	; 0xb0
 8005844:	d903      	bls.n	800584e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e007      	b.n	800585e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a11      	ldr	r2, [pc, #68]	; (800589c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800585e:	f7ff f976 	bl	8004b4e <LL_RCC_GetAHB4Prescaler>
 8005862:	4603      	mov	r3, r0
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0c9c      	lsrs	r4, r3, #18
 8005882:	f7fe feb7 	bl	80045f4 <HAL_PWREx_GetVoltageRange>
 8005886:	4603      	mov	r3, r0
 8005888:	4619      	mov	r1, r3
 800588a:	4620      	mov	r0, r4
 800588c:	f000 f80c 	bl	80058a8 <RCC_SetFlashLatency>
 8005890:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	0800f11c 	.word	0x0800f11c
 80058a0:	0800f0bc 	.word	0x0800f0bc
 80058a4:	431bde83 	.word	0x431bde83

080058a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b093      	sub	sp, #76	; 0x4c
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80058b2:	4b37      	ldr	r3, [pc, #220]	; (8005990 <RCC_SetFlashLatency+0xe8>)
 80058b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80058b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80058be:	4a35      	ldr	r2, [pc, #212]	; (8005994 <RCC_SetFlashLatency+0xec>)
 80058c0:	f107 031c 	add.w	r3, r7, #28
 80058c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80058c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80058ca:	4b33      	ldr	r3, [pc, #204]	; (8005998 <RCC_SetFlashLatency+0xf0>)
 80058cc:	f107 040c 	add.w	r4, r7, #12
 80058d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80058d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80058d6:	2300      	movs	r3, #0
 80058d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d11a      	bne.n	8005918 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	643b      	str	r3, [r7, #64]	; 0x40
 80058e6:	e013      	b.n	8005910 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3348      	adds	r3, #72	; 0x48
 80058ee:	443b      	add	r3, r7
 80058f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d807      	bhi.n	800590a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	3348      	adds	r3, #72	; 0x48
 8005900:	443b      	add	r3, r7
 8005902:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005906:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005908:	e020      	b.n	800594c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	3301      	adds	r3, #1
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
 8005910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005912:	2b03      	cmp	r3, #3
 8005914:	d9e8      	bls.n	80058e8 <RCC_SetFlashLatency+0x40>
 8005916:	e019      	b.n	800594c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	e013      	b.n	8005946 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800591e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	3348      	adds	r3, #72	; 0x48
 8005924:	443b      	add	r3, r7
 8005926:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d807      	bhi.n	8005940 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3348      	adds	r3, #72	; 0x48
 8005936:	443b      	add	r3, r7
 8005938:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800593e:	e005      	b.n	800594c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005942:	3301      	adds	r3, #1
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	2b02      	cmp	r3, #2
 800594a:	d9e8      	bls.n	800591e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <RCC_SetFlashLatency+0xf4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 0207 	bic.w	r2, r3, #7
 8005954:	4911      	ldr	r1, [pc, #68]	; (800599c <RCC_SetFlashLatency+0xf4>)
 8005956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800595c:	f7fc f940 	bl	8001be0 <HAL_GetTick>
 8005960:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005962:	e008      	b.n	8005976 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005964:	f7fc f93c 	bl	8001be0 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e007      	b.n	8005986 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <RCC_SetFlashLatency+0xf4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005980:	429a      	cmp	r2, r3
 8005982:	d1ef      	bne.n	8005964 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	374c      	adds	r7, #76	; 0x4c
 800598a:	46bd      	mov	sp, r7
 800598c:	bd90      	pop	{r4, r7, pc}
 800598e:	bf00      	nop
 8005990:	0800ef8c 	.word	0x0800ef8c
 8005994:	0800ef9c 	.word	0x0800ef9c
 8005998:	0800efa8 	.word	0x0800efa8
 800599c:	58004000 	.word	0x58004000

080059a0 <LL_RCC_LSE_IsEnabled>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <LL_RCC_LSE_IsEnabled+0x18>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <LL_RCC_LSE_IsEnabled+0x1a>
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_LSE_IsReady>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d101      	bne.n	80059dc <LL_RCC_LSE_IsReady+0x18>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <LL_RCC_LSE_IsReady+0x1a>
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_RCC_MSI_EnablePLLMode>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f6:	f043 0304 	orr.w	r3, r3, #4
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_RCC_SetRFWKPClockSource>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_SetSMPSClockSource>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	f023 0203 	bic.w	r2, r3, #3
 8005a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_SetSMPSPrescaler>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_RCC_SetUSARTClockSource>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_RCC_SetLPUARTClockSource>:
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_SetI2CClockSource>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005af2:	43db      	mvns	r3, r3
 8005af4:	401a      	ands	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_RCC_SetLPTIMClockSource>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	401a      	ands	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	041b      	lsls	r3, r3, #16
 8005b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_SetSAIClockSource>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <LL_RCC_SetRNGClockSource>:
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005b88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_SetCLK48ClockSource>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_SetUSBClockSource>:
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff ffe3 	bl	8005ba0 <LL_RCC_SetCLK48ClockSource>
}
 8005bda:	bf00      	nop
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <LL_RCC_SetADCClockSource>:
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_RCC_SetRTCClockSource>:
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <LL_RCC_GetRTCClockSource>:
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_ForceBackupDomainReset>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005c76:	b480      	push	{r7}
 8005c78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005c8e:	bf00      	nop
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <LL_RCC_PLLSAI1_Enable>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <LL_RCC_PLLSAI1_Disable>:
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cc8:	6013      	str	r3, [r2, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_RCC_PLLSAI1_IsReady>:
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce6:	d101      	bne.n	8005cec <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005d00:	2300      	movs	r3, #0
 8005d02:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005d04:	2300      	movs	r3, #0
 8005d06:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d034      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d1c:	d021      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005d1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d22:	d81b      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d28:	d01d      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d2e:	d815      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d38:	d110      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d4a:	e00d      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f94d 	bl	8005ff0 <RCCEx_PLLSAI1_ConfigNP>
 8005d56:	4603      	mov	r3, r0
 8005d58:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d5a:	e005      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	77fb      	strb	r3, [r7, #31]
        break;
 8005d60:	e002      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fee8 	bl	8005b48 <LL_RCC_SetSAIClockSource>
 8005d78:	e001      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d046      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d8a:	f7ff ff56 	bl	8005c3a <LL_RCC_GetRTCClockSource>
 8005d8e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d03c      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d9a:	f7fe fc1b 	bl	80045d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff30 	bl	8005c0e <LL_RCC_SetRTCClockSource>
 8005dae:	e02e      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005dba:	f7ff ff4b 	bl	8005c54 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005dbe:	f7ff ff5a 	bl	8005c76 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005dda:	f7ff fde1 	bl	80059a0 <LL_RCC_LSE_IsEnabled>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d114      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005de4:	f7fb fefc 	bl	8001be0 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005dea:	e00b      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dec:	f7fb fef8 	bl	8001be0 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d902      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	77fb      	strb	r3, [r7, #31]
              break;
 8005e02:	e004      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e04:	f7ff fdde 	bl	80059c4 <LL_RCC_LSE_IsReady>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d1ee      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005e0e:	7ffb      	ldrb	r3, [r7, #31]
 8005e10:	77bb      	strb	r3, [r7, #30]
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fe2a 	bl	8005a82 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fe35 	bl	8005aae <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fe5d 	bl	8005b14 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fe52 	bl	8005b14 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fe2a 	bl	8005ada <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fe1f 	bl	8005ada <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d022      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fe8d 	bl	8005bcc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eba:	d107      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed4:	d10b      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f8e3 	bl	80060a6 <RCCEx_PLLSAI1_ConfigNQ>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005ee4:	7ffb      	ldrb	r3, [r7, #31]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005eea:	7ffb      	ldrb	r3, [r7, #31]
 8005eec:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d02b      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d008      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d105      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fe2a 	bl	8005b74 <LL_RCC_SetRNGClockSource>
 8005f20:	e00a      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7ff fe21 	bl	8005b74 <LL_RCC_SetRNGClockSource>
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff fe34 	bl	8005ba0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005f40:	d107      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d022      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fe3d 	bl	8005be2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f70:	d107      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f80:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8a:	d10b      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 f8e3 	bl	800615c <RCCEx_PLLSAI1_ConfigNR>
 8005f96:	4603      	mov	r3, r0
 8005f98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f9a:	7ffb      	ldrb	r3, [r7, #31]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005fa0:	7ffb      	ldrb	r3, [r7, #31]
 8005fa2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fd26 	bl	8005a06 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fd45 	bl	8005a5a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fd2c 	bl	8005a32 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005fda:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005fe8:	f7ff fcfe 	bl	80059e8 <LL_RCC_MSI_EnablePLLMode>
}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ffc:	f7ff fe5b 	bl	8005cb6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006000:	f7fb fdee 	bl	8001be0 <HAL_GetTick>
 8006004:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006006:	e009      	b.n	800601c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006008:	f7fb fdea 	bl	8001be0 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d902      	bls.n	800601c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
      break;
 800601a:	e004      	b.n	8006026 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800601c:	f7ff fe5a 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d137      	bne.n	800609c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800602c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006040:	4313      	orrs	r3, r2
 8006042:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006056:	4313      	orrs	r3, r2
 8006058:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800605a:	f7ff fe1d 	bl	8005c98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605e:	f7fb fdbf 	bl	8001be0 <HAL_GetTick>
 8006062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006064:	e009      	b.n	800607a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006066:	f7fb fdbb 	bl	8001be0 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d902      	bls.n	800607a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	73fb      	strb	r3, [r7, #15]
        break;
 8006078:	e004      	b.n	8006084 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800607a:	f7ff fe2b 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d1f0      	bne.n	8006066 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060b2:	f7ff fe00 	bl	8005cb6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060b6:	f7fb fd93 	bl	8001be0 <HAL_GetTick>
 80060ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060bc:	e009      	b.n	80060d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060be:	f7fb fd8f 	bl	8001be0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d902      	bls.n	80060d2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e004      	b.n	80060dc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060d2:	f7ff fdff 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d137      	bne.n	8006152 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610c:	4313      	orrs	r3, r2
 800610e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006110:	f7ff fdc2 	bl	8005c98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006114:	f7fb fd64 	bl	8001be0 <HAL_GetTick>
 8006118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800611a:	e009      	b.n	8006130 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800611c:	f7fb fd60 	bl	8001be0 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d902      	bls.n	8006130 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	73fb      	strb	r3, [r7, #15]
        break;
 800612e:	e004      	b.n	800613a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006130:	f7ff fdd0 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 8006134:	4603      	mov	r3, r0
 8006136:	2b01      	cmp	r3, #1
 8006138:	d1f0      	bne.n	800611c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d108      	bne.n	8006152 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006152:	7bfb      	ldrb	r3, [r7, #15]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006168:	f7ff fda5 	bl	8005cb6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800616c:	f7fb fd38 	bl	8001be0 <HAL_GetTick>
 8006170:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006172:	e009      	b.n	8006188 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006174:	f7fb fd34 	bl	8001be0 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d902      	bls.n	8006188 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	73fb      	strb	r3, [r7, #15]
      break;
 8006186:	e004      	b.n	8006192 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006188:	f7ff fda4 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d137      	bne.n	8006208 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061c6:	f7ff fd67 	bl	8005c98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ca:	f7fb fd09 	bl	8001be0 <HAL_GetTick>
 80061ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061d0:	e009      	b.n	80061e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061d2:	f7fb fd05 	bl	8001be0 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d902      	bls.n	80061e6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	73fb      	strb	r3, [r7, #15]
        break;
 80061e4:	e004      	b.n	80061f0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061e6:	f7ff fd75 	bl	8005cd4 <LL_RCC_PLLSAI1_IsReady>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d1f0      	bne.n	80061d2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d108      	bne.n	8006208 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006204:	4313      	orrs	r3, r2
 8006206:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e049      	b.n	80062b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f841 	bl	80062c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f000 f9b7 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d001      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e036      	b.n	800635a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a17      	ldr	r2, [pc, #92]	; (8006368 <HAL_TIM_Base_Start_IT+0x94>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x44>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d115      	bne.n	8006344 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <HAL_TIM_Base_Start_IT+0x98>)
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d015      	beq.n	8006356 <HAL_TIM_Base_Start_IT+0x82>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d011      	beq.n	8006356 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e008      	b.n	8006356 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e000      	b.n	8006358 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	00010007 	.word	0x00010007

08006370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d020      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01b      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0202 	mvn.w	r2, #2
 80063a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8e4 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 80063c0:	e005      	b.n	80063ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8d6 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f8e7 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d020      	beq.n	8006420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0204 	mvn.w	r2, #4
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8be 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8b0 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8c1 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d020      	beq.n	800646c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01b      	beq.n	800646c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0208 	mvn.w	r2, #8
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2204      	movs	r2, #4
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f898 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f88a 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f89b 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	d020      	beq.n	80064b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01b      	beq.n	80064b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0210 	mvn.w	r2, #16
 8006488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2208      	movs	r2, #8
 800648e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f872 	bl	8006588 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f864 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f875 	bl	800659c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00c      	beq.n	80064dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0201 	mvn.w	r2, #1
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb f81c 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8d0 	bl	80066a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f8c8 	bl	80066b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00c      	beq.n	8006548 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f834 	bl	80065b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0220 	mvn.w	r2, #32
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f890 	bl	800668c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a2a      	ldr	r2, [pc, #168]	; (8006680 <TIM_Base_SetConfig+0xbc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x20>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <TIM_Base_SetConfig+0xbc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <TIM_Base_SetConfig+0xc0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <TIM_Base_SetConfig+0xc4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <TIM_Base_SetConfig+0xbc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <TIM_Base_SetConfig+0xc0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a0a      	ldr	r2, [pc, #40]	; (8006688 <TIM_Base_SetConfig+0xc4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d103      	bne.n	800666c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	615a      	str	r2, [r3, #20]
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800

0800668c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <LL_RCC_GetUSARTClockSource>:
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80066d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4013      	ands	r3, r2
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_GetLPUARTClockSource>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e042      	b.n	80067a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fb f807 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2224      	movs	r2, #36	; 0x24
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f914 	bl	8007980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fee9 	bl	8007530 <UART_SetConfig>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e01b      	b.n	80067a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 f993 	bl	8007ac4 <UART_CheckIdleState>
 800679e:	4603      	mov	r3, r0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b091      	sub	sp, #68	; 0x44
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d178      	bne.n	80068b2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_UART_Transmit_IT+0x24>
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e071      	b.n	80068b4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	88fa      	ldrh	r2, [r7, #6]
 80067da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2221      	movs	r2, #33	; 0x21
 80067f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006804:	d12a      	bne.n	800685c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d107      	bne.n	8006820 <HAL_UART_Transmit_IT+0x78>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <HAL_UART_Transmit_IT+0x118>)
 800681c:	679a      	str	r2, [r3, #120]	; 0x78
 800681e:	e002      	b.n	8006826 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_UART_Transmit_IT+0x11c>)
 8006824:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3308      	adds	r3, #8
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800683c:	63bb      	str	r3, [r7, #56]	; 0x38
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006846:	637a      	str	r2, [r7, #52]	; 0x34
 8006848:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e5      	bne.n	8006826 <HAL_UART_Transmit_IT+0x7e>
 800685a:	e028      	b.n	80068ae <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006864:	d107      	bne.n	8006876 <HAL_UART_Transmit_IT+0xce>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <HAL_UART_Transmit_IT+0x120>)
 8006872:	679a      	str	r2, [r3, #120]	; 0x78
 8006874:	e002      	b.n	800687c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a14      	ldr	r2, [pc, #80]	; (80068cc <HAL_UART_Transmit_IT+0x124>)
 800687a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	613b      	str	r3, [r7, #16]
   return(result);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	69f9      	ldr	r1, [r7, #28]
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3744      	adds	r7, #68	; 0x44
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	08008737 	.word	0x08008737
 80068c4:	08008657 	.word	0x08008657
 80068c8:	08008595 	.word	0x08008595
 80068cc:	080084dd 	.word	0x080084dd

080068d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d137      	bne.n	8006958 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_UART_Receive_IT+0x24>
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e030      	b.n	800695a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_UART_Receive_IT+0x94>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01f      	beq.n	8006948 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	613b      	str	r3, [r7, #16]
   return(result);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	623b      	str	r3, [r7, #32]
 8006936:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69f9      	ldr	r1, [r7, #28]
 800693a:	6a3a      	ldr	r2, [r7, #32]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	61bb      	str	r3, [r7, #24]
   return(result);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	461a      	mov	r2, r3
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f001 f9ca 	bl	8007ce8 <UART_Start_Receive_IT>
 8006954:	4603      	mov	r3, r0
 8006956:	e000      	b.n	800695a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40008000 	.word	0x40008000

08006968 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	2b20      	cmp	r3, #32
 800697e:	d167      	bne.n	8006a50 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_UART_Transmit_DMA+0x24>
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e060      	b.n	8006a52 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	88fa      	ldrh	r2, [r7, #6]
 800699a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2221      	movs	r2, #33	; 0x21
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d028      	beq.n	8006a10 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c2:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <HAL_UART_Transmit_DMA+0xf4>)
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ca:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <HAL_UART_Transmit_DMA+0xf8>)
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d2:	4a24      	ldr	r2, [pc, #144]	; (8006a64 <HAL_UART_Transmit_DMA+0xfc>)
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069da:	2200      	movs	r2, #0
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	4619      	mov	r1, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3328      	adds	r3, #40	; 0x28
 80069ee:	461a      	mov	r2, r3
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	f7fc ff81 	bl	80038f8 <HAL_DMA_Start_IT>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2210      	movs	r2, #16
 8006a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e020      	b.n	8006a52 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2240      	movs	r2, #64	; 0x40
 8006a16:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	613b      	str	r3, [r7, #16]
   return(result);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a38:	623a      	str	r2, [r7, #32]
 8006a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	6a3a      	ldr	r2, [r7, #32]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	e000      	b.n	8006a52 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	080081c7 	.word	0x080081c7
 8006a60:	08008261 	.word	0x08008261
 8006a64:	080083e7 	.word	0x080083e7

08006a68 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d139      	bne.n	8006b02 <HAL_UART_DMAStop+0x9a>
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	2b21      	cmp	r3, #33	; 0x21
 8006a92:	d136      	bne.n	8006b02 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d015      	beq.n	8006afc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fc ff8a 	bl	80039ee <HAL_DMA_Abort>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fd f8ef 	bl	8003cc8 <HAL_DMA_GetError>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d105      	bne.n	8006afc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2210      	movs	r2, #16
 8006af4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e047      	b.n	8006b8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fabb 	bl	8008078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d13c      	bne.n	8006b8a <HAL_UART_DMAStop+0x122>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	2b22      	cmp	r3, #34	; 0x22
 8006b14:	d139      	bne.n	8006b8a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b36:	61ba      	str	r2, [r7, #24]
 8006b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	613b      	str	r3, [r7, #16]
   return(result);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e5      	bne.n	8006b16 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d017      	beq.n	8006b84 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc ff47 	bl	80039ee <HAL_DMA_Abort>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00e      	beq.n	8006b84 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fd f8ab 	bl	8003cc8 <HAL_DMA_GetError>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d105      	bne.n	8006b84 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2210      	movs	r2, #16
 8006b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e003      	b.n	8006b8c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fab8 	bl	80080fa <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3740      	adds	r7, #64	; 0x40
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b09a      	sub	sp, #104	; 0x68
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bba:	657b      	str	r3, [r7, #84]	; 0x54
 8006bbc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e6      	bne.n	8006b9c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bf2:	643a      	str	r2, [r7, #64]	; 0x40
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d118      	bne.n	8006c40 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f023 0310 	bic.w	r3, r3, #16
 8006c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e6      	bne.n	8006c0e <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d154      	bne.n	8006cf8 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c6e:	61ba      	str	r2, [r7, #24]
 8006c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e5      	bne.n	8006c4e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d017      	beq.n	8006cbc <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c92:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <HAL_UART_AbortReceive_IT+0x198>)
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fc ff05 	bl	8003aac <HAL_DMA_Abort_IT>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03c      	beq.n	8006d22 <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4798      	blx	r3
 8006cba:	e032      	b.n	8006d22 <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	220f      	movs	r2, #15
 8006cd0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0208 	orr.w	r2, r2, #8
 8006ce0:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb55 	bl	80073a0 <HAL_UART_AbortReceiveCpltCallback>
 8006cf6:	e014      	b.n	8006d22 <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	220f      	movs	r2, #15
 8006d0c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb3f 	bl	80073a0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3768      	adds	r7, #104	; 0x68
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	08008493 	.word	0x08008493

08006d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b0ba      	sub	sp, #232	; 0xe8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d5e:	4013      	ands	r3, r2
 8006d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11b      	bne.n	8006da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d015      	beq.n	8006da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7c:	f003 0320 	and.w	r3, r3, #32
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 82e3 	beq.w	8007360 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      }
      return;
 8006da2:	e2dd      	b.n	8007360 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8123 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006db2:	4b8d      	ldr	r3, [pc, #564]	; (8006fe8 <HAL_UART_IRQHandler+0x2b8>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006dbe:	4b8b      	ldr	r3, [pc, #556]	; (8006fec <HAL_UART_IRQHandler+0x2bc>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8116 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d011      	beq.n	8006df8 <HAL_UART_IRQHandler+0xc8>
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2201      	movs	r2, #1
 8006de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d011      	beq.n	8006e28 <HAL_UART_IRQHandler+0xf8>
 8006e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2202      	movs	r2, #2
 8006e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d011      	beq.n	8006e58 <HAL_UART_IRQHandler+0x128>
 8006e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2204      	movs	r2, #4
 8006e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f043 0202 	orr.w	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d105      	bne.n	8006e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006e74:	4b5c      	ldr	r3, [pc, #368]	; (8006fe8 <HAL_UART_IRQHandler+0x2b8>)
 8006e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2208      	movs	r2, #8
 8006e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8a:	f043 0208 	orr.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d012      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x196>
 8006ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8249 	beq.w	8007364 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d013      	beq.n	8006f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d005      	beq.n	8006f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d054      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f8e5 	bl	80080fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3a:	2b40      	cmp	r3, #64	; 0x40
 8006f3c:	d146      	bne.n	8006fcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1d9      	bne.n	8006f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d017      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9a:	4a15      	ldr	r2, [pc, #84]	; (8006ff0 <HAL_UART_IRQHandler+0x2c0>)
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fc fd81 	bl	8003aac <HAL_DMA_Abort_IT>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d019      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc2:	e00f      	b.n	8006fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f007 fe95 	bl	800ecf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fca:	e00b      	b.n	8006fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f007 fe91 	bl	800ecf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd2:	e007      	b.n	8006fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f007 fe8d 	bl	800ecf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006fe2:	e1bf      	b.n	8007364 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe4:	bf00      	nop
    return;
 8006fe6:	e1bd      	b.n	8007364 <HAL_UART_IRQHandler+0x634>
 8006fe8:	10000001 	.word	0x10000001
 8006fec:	04000120 	.word	0x04000120
 8006ff0:	08008467 	.word	0x08008467

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	f040 8153 	bne.w	80072a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 814c 	beq.w	80072a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8145 	beq.w	80072a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2210      	movs	r2, #16
 8007020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	f040 80bb 	bne.w	80071a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 818f 	beq.w	8007368 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007050:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007054:	429a      	cmp	r2, r3
 8007056:	f080 8187 	bcs.w	8007368 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 8087 	bne.w	8007186 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800708c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1da      	bne.n	8007078 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e1      	bne.n	80070c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800710e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e3      	bne.n	80070fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	f023 0310 	bic.w	r3, r3, #16
 8007158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007166:	65bb      	str	r3, [r7, #88]	; 0x58
 8007168:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800716c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e4      	bne.n	8007144 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007180:	4618      	mov	r0, r3
 8007182:	f7fc fc34 	bl	80039ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007198:	b29b      	uxth	r3, r3
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	b29b      	uxth	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f007 fe01 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a6:	e0df      	b.n	8007368 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80d1 	beq.w	800736c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80071ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80cc 	beq.w	800736c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f6:	647b      	str	r3, [r7, #68]	; 0x44
 80071f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e4      	bne.n	80071d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	623b      	str	r3, [r7, #32]
   return(result);
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007232:	633a      	str	r2, [r7, #48]	; 0x30
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e1      	bne.n	800720a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	60fb      	str	r3, [r7, #12]
   return(result);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0310 	bic.w	r3, r3, #16
 800726e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	617b      	str	r3, [r7, #20]
   return(result);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e4      	bne.n	800725a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f007 fd83 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072a2:	e063      	b.n	800736c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00e      	beq.n	80072ce <HAL_UART_IRQHandler+0x59e>
 80072b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 fff2 	bl	80092b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072cc:	e051      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d014      	beq.n	8007304 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80072e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d03a      	beq.n	8007370 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
    }
    return;
 8007302:	e035      	b.n	8007370 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <HAL_UART_IRQHandler+0x5f4>
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fa7f 	bl	8008820 <UART_EndTransmit_IT>
    return;
 8007322:	e026      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <HAL_UART_IRQHandler+0x614>
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 ffcb 	bl	80092d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007342:	e016      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <HAL_UART_IRQHandler+0x642>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	2b00      	cmp	r3, #0
 8007356:	da0c      	bge.n	8007372 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 ffb3 	bl	80092c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800735e:	e008      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
      return;
 8007360:	bf00      	nop
 8007362:	e006      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
    return;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
      return;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
      return;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_UART_IRQHandler+0x642>
    return;
 8007370:	bf00      	nop
  }
}
 8007372:	37e8      	adds	r7, #232	; 0xe8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b08f      	sub	sp, #60	; 0x3c
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_HalfDuplex_EnableTransmitter+0x16>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e042      	b.n	8007450 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2224      	movs	r2, #36	; 0x24
 80073d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f023 030c 	bic.w	r3, r3, #12
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	60bb      	str	r3, [r7, #8]
   return(result);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f043 0308 	orr.w	r3, r3, #8
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6979      	ldr	r1, [r7, #20]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e6      	bne.n	800740c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	373c      	adds	r7, #60	; 0x3c
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b08f      	sub	sp, #60	; 0x3c
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_HalfDuplex_EnableReceiver+0x16>
 800746e:	2302      	movs	r3, #2
 8007470:	e042      	b.n	80074f8 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	; 0x24
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f023 030c 	bic.w	r3, r3, #12
 8007496:	637b      	str	r3, [r7, #52]	; 0x34
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f043 0304 	orr.w	r3, r3, #4
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	61bb      	str	r3, [r7, #24]
 80074d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6979      	ldr	r1, [r7, #20]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	613b      	str	r3, [r7, #16]
   return(result);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e6      	bne.n	80074b4 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	373c      	adds	r7, #60	; 0x3c
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007512:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4313      	orrs	r3, r2
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007534:	b08c      	sub	sp, #48	; 0x30
 8007536:	af00      	add	r7, sp, #0
 8007538:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	431a      	orrs	r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	431a      	orrs	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4313      	orrs	r3, r2
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	4baf      	ldr	r3, [pc, #700]	; (800781c <UART_SetConfig+0x2ec>)
 8007560:	4013      	ands	r3, r2
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007568:	430b      	orrs	r3, r1
 800756a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4aa4      	ldr	r2, [pc, #656]	; (8007820 <UART_SetConfig+0x2f0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d004      	beq.n	800759c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007598:	4313      	orrs	r3, r2
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80075a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f023 010f 	bic.w	r1, r3, #15
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a95      	ldr	r2, [pc, #596]	; (8007824 <UART_SetConfig+0x2f4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d125      	bne.n	8007620 <UART_SetConfig+0xf0>
 80075d4:	2003      	movs	r0, #3
 80075d6:	f7ff f877 	bl	80066c8 <LL_RCC_GetUSARTClockSource>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d81b      	bhi.n	8007618 <UART_SetConfig+0xe8>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0xb8>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	08007609 	.word	0x08007609
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007611 	.word	0x08007611
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e042      	b.n	8007686 <UART_SetConfig+0x156>
 8007600:	2302      	movs	r3, #2
 8007602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007606:	e03e      	b.n	8007686 <UART_SetConfig+0x156>
 8007608:	2304      	movs	r3, #4
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760e:	e03a      	b.n	8007686 <UART_SetConfig+0x156>
 8007610:	2308      	movs	r3, #8
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007616:	e036      	b.n	8007686 <UART_SetConfig+0x156>
 8007618:	2310      	movs	r3, #16
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761e:	e032      	b.n	8007686 <UART_SetConfig+0x156>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a7e      	ldr	r2, [pc, #504]	; (8007820 <UART_SetConfig+0x2f0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d12a      	bne.n	8007680 <UART_SetConfig+0x150>
 800762a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800762e:	f7ff f85b 	bl	80066e8 <LL_RCC_GetLPUARTClockSource>
 8007632:	4603      	mov	r3, r0
 8007634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007638:	d01a      	beq.n	8007670 <UART_SetConfig+0x140>
 800763a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800763e:	d81b      	bhi.n	8007678 <UART_SetConfig+0x148>
 8007640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007644:	d00c      	beq.n	8007660 <UART_SetConfig+0x130>
 8007646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764a:	d815      	bhi.n	8007678 <UART_SetConfig+0x148>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <UART_SetConfig+0x128>
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007654:	d008      	beq.n	8007668 <UART_SetConfig+0x138>
 8007656:	e00f      	b.n	8007678 <UART_SetConfig+0x148>
 8007658:	2300      	movs	r3, #0
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765e:	e012      	b.n	8007686 <UART_SetConfig+0x156>
 8007660:	2302      	movs	r3, #2
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007666:	e00e      	b.n	8007686 <UART_SetConfig+0x156>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766e:	e00a      	b.n	8007686 <UART_SetConfig+0x156>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007676:	e006      	b.n	8007686 <UART_SetConfig+0x156>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767e:	e002      	b.n	8007686 <UART_SetConfig+0x156>
 8007680:	2310      	movs	r3, #16
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a65      	ldr	r2, [pc, #404]	; (8007820 <UART_SetConfig+0x2f0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	f040 8097 	bne.w	80077c0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007696:	2b08      	cmp	r3, #8
 8007698:	d823      	bhi.n	80076e2 <UART_SetConfig+0x1b2>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <UART_SetConfig+0x170>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076e3 	.word	0x080076e3
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076e3 	.word	0x080076e3
 80076b0:	080076d3 	.word	0x080076d3
 80076b4:	080076e3 	.word	0x080076e3
 80076b8:	080076e3 	.word	0x080076e3
 80076bc:	080076e3 	.word	0x080076e3
 80076c0:	080076db 	.word	0x080076db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c4:	f7fe f85a 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80076c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ca:	e010      	b.n	80076ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076cc:	4b56      	ldr	r3, [pc, #344]	; (8007828 <UART_SetConfig+0x2f8>)
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076d0:	e00d      	b.n	80076ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d2:	f7fd ffd3 	bl	800567c <HAL_RCC_GetSysClockFreq>
 80076d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076d8:	e009      	b.n	80076ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076e0:	e005      	b.n	80076ee <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 812b 	beq.w	800794c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	4a4c      	ldr	r2, [pc, #304]	; (800782c <UART_SetConfig+0x2fc>)
 80076fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	fbb3 f3f2 	udiv	r3, r3, r2
 8007708:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	429a      	cmp	r2, r3
 8007718:	d305      	bcc.n	8007726 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	429a      	cmp	r2, r3
 8007724:	d903      	bls.n	800772e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800772c:	e10e      	b.n	800794c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	2200      	movs	r2, #0
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	60fa      	str	r2, [r7, #12]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	4a3c      	ldr	r2, [pc, #240]	; (800782c <UART_SetConfig+0x2fc>)
 800773c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007740:	b29b      	uxth	r3, r3
 8007742:	2200      	movs	r2, #0
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007750:	f7f9 f8e4 	bl	800091c <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4610      	mov	r0, r2
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	020b      	lsls	r3, r1, #8
 8007766:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800776a:	0202      	lsls	r2, r0, #8
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	6849      	ldr	r1, [r1, #4]
 8007770:	0849      	lsrs	r1, r1, #1
 8007772:	2000      	movs	r0, #0
 8007774:	460c      	mov	r4, r1
 8007776:	4605      	mov	r5, r0
 8007778:	eb12 0804 	adds.w	r8, r2, r4
 800777c:	eb43 0905 	adc.w	r9, r3, r5
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	469a      	mov	sl, r3
 8007788:	4693      	mov	fp, r2
 800778a:	4652      	mov	r2, sl
 800778c:	465b      	mov	r3, fp
 800778e:	4640      	mov	r0, r8
 8007790:	4649      	mov	r1, r9
 8007792:	f7f9 f8c3 	bl	800091c <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4613      	mov	r3, r2
 800779c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a4:	d308      	bcc.n	80077b8 <UART_SetConfig+0x288>
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ac:	d204      	bcs.n	80077b8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a3a      	ldr	r2, [r7, #32]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e0c9      	b.n	800794c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077be:	e0c5      	b.n	800794c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c8:	d16d      	bne.n	80078a6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80077ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077ce:	3b01      	subs	r3, #1
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d82d      	bhi.n	8007830 <UART_SetConfig+0x300>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <UART_SetConfig+0x2ac>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077fd 	.word	0x080077fd
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007831 	.word	0x08007831
 80077e8:	0800780b 	.word	0x0800780b
 80077ec:	08007831 	.word	0x08007831
 80077f0:	08007831 	.word	0x08007831
 80077f4:	08007831 	.word	0x08007831
 80077f8:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd ffd4 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8007800:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007802:	e01b      	b.n	800783c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b08      	ldr	r3, [pc, #32]	; (8007828 <UART_SetConfig+0x2f8>)
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007808:	e018      	b.n	800783c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fd ff37 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800780e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007810:	e014      	b.n	800783c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007818:	e010      	b.n	800783c <UART_SetConfig+0x30c>
 800781a:	bf00      	nop
 800781c:	cfff69f3 	.word	0xcfff69f3
 8007820:	40008000 	.word	0x40008000
 8007824:	40013800 	.word	0x40013800
 8007828:	00f42400 	.word	0x00f42400
 800782c:	0800f15c 	.word	0x0800f15c
      default:
        pclk = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800783a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8084 	beq.w	800794c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	4a4b      	ldr	r2, [pc, #300]	; (8007978 <UART_SetConfig+0x448>)
 800784a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800784e:	461a      	mov	r2, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	fbb3 f3f2 	udiv	r3, r3, r2
 8007856:	005a      	lsls	r2, r3, #1
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	441a      	add	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	2b0f      	cmp	r3, #15
 800786e:	d916      	bls.n	800789e <UART_SetConfig+0x36e>
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007876:	d212      	bcs.n	800789e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	b29b      	uxth	r3, r3
 800787c:	f023 030f 	bic.w	r3, r3, #15
 8007880:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	b29b      	uxth	r3, r3
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	b29a      	uxth	r2, r3
 800788e:	8bfb      	ldrh	r3, [r7, #30]
 8007890:	4313      	orrs	r3, r2
 8007892:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	8bfa      	ldrh	r2, [r7, #30]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	e056      	b.n	800794c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078a4:	e052      	b.n	800794c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2b07      	cmp	r3, #7
 80078ae:	d822      	bhi.n	80078f6 <UART_SetConfig+0x3c6>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <UART_SetConfig+0x388>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	080078e1 	.word	0x080078e1
 80078c0:	080078f7 	.word	0x080078f7
 80078c4:	080078e7 	.word	0x080078e7
 80078c8:	080078f7 	.word	0x080078f7
 80078cc:	080078f7 	.word	0x080078f7
 80078d0:	080078f7 	.word	0x080078f7
 80078d4:	080078ef 	.word	0x080078ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078d8:	f7fd ff66 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 80078dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078de:	e010      	b.n	8007902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e0:	4b26      	ldr	r3, [pc, #152]	; (800797c <UART_SetConfig+0x44c>)
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078e4:	e00d      	b.n	8007902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078e6:	f7fd fec9 	bl	800567c <HAL_RCC_GetSysClockFreq>
 80078ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078ec:	e009      	b.n	8007902 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078f4:	e005      	b.n	8007902 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007900:	bf00      	nop
    }

    if (pclk != 0U)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d021      	beq.n	800794c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <UART_SetConfig+0x448>)
 800790e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007912:	461a      	mov	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	fbb3 f2f2 	udiv	r2, r3, r2
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	441a      	add	r2, r3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	2b0f      	cmp	r3, #15
 8007930:	d909      	bls.n	8007946 <UART_SetConfig+0x416>
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007938:	d205      	bcs.n	8007946 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	b29a      	uxth	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	e002      	b.n	800794c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2201      	movs	r2, #1
 8007950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2201      	movs	r2, #1
 8007958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2200      	movs	r2, #0
 8007960:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007968:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800796c:	4618      	mov	r0, r3
 800796e:	3730      	adds	r7, #48	; 0x30
 8007970:	46bd      	mov	sp, r7
 8007972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007976:	bf00      	nop
 8007978:	0800f15c 	.word	0x0800f15c
 800797c:	00f42400 	.word	0x00f42400

08007980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01a      	beq.n	8007a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7e:	d10a      	bne.n	8007a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	605a      	str	r2, [r3, #4]
  }
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b098      	sub	sp, #96	; 0x60
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad4:	f7fa f884 	bl	8001be0 <HAL_GetTick>
 8007ad8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d12f      	bne.n	8007b48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af0:	2200      	movs	r2, #0
 8007af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f88e 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d022      	beq.n	8007b48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b16:	653b      	str	r3, [r7, #80]	; 0x50
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
 8007b22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e063      	b.n	8007c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0304 	and.w	r3, r3, #4
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d149      	bne.n	8007bea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f857 	bl	8007c18 <UART_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d03c      	beq.n	8007bea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc2:	61fa      	str	r2, [r7, #28]
 8007bc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	69b9      	ldr	r1, [r7, #24]
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	617b      	str	r3, [r7, #20]
   return(result);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e012      	b.n	8007c10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3758      	adds	r7, #88	; 0x58
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	603b      	str	r3, [r7, #0]
 8007c24:	4613      	mov	r3, r2
 8007c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c28:	e049      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d045      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c32:	f7f9 ffd5 	bl	8001be0 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e048      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d031      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d110      	bne.n	8007c8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fa42 	bl	80080fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e029      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c98:	d111      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fa28 	bl	80080fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d0a6      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b0a3      	sub	sp, #140	; 0x8c
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1a:	d10e      	bne.n	8007d3a <UART_Start_Receive_IT+0x52>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <UART_Start_Receive_IT+0x48>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d2e:	e02d      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22ff      	movs	r2, #255	; 0xff
 8007d34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d38:	e028      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10d      	bne.n	8007d5e <UART_Start_Receive_IT+0x76>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <UART_Start_Receive_IT+0x6c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22ff      	movs	r2, #255	; 0xff
 8007d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d52:	e01b      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	227f      	movs	r2, #127	; 0x7f
 8007d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d5c:	e016      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d66:	d10d      	bne.n	8007d84 <UART_Start_Receive_IT+0x9c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <UART_Start_Receive_IT+0x92>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	227f      	movs	r2, #127	; 0x7f
 8007d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d78:	e008      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	223f      	movs	r2, #63	; 0x3f
 8007d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d82:	e003      	b.n	8007d8c <UART_Start_Receive_IT+0xa4>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2222      	movs	r2, #34	; 0x22
 8007d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dae:	f043 0301 	orr.w	r3, r3, #1
 8007db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007dc0:	673a      	str	r2, [r7, #112]	; 0x70
 8007dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007dc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e3      	bne.n	8007d9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ddc:	d14f      	bne.n	8007e7e <UART_Start_Receive_IT+0x196>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007de4:	88fa      	ldrh	r2, [r7, #6]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d349      	bcc.n	8007e7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df2:	d107      	bne.n	8007e04 <UART_Start_Receive_IT+0x11c>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a47      	ldr	r2, [pc, #284]	; (8007f1c <UART_Start_Receive_IT+0x234>)
 8007e00:	675a      	str	r2, [r3, #116]	; 0x74
 8007e02:	e002      	b.n	8007e0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4a46      	ldr	r2, [pc, #280]	; (8007f20 <UART_Start_Receive_IT+0x238>)
 8007e08:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e4      	bne.n	8007e12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e68:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_Start_Receive_IT+0x160>
 8007e7c:	e046      	b.n	8007f0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e86:	d107      	bne.n	8007e98 <UART_Start_Receive_IT+0x1b0>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <UART_Start_Receive_IT+0x23c>)
 8007e94:	675a      	str	r2, [r3, #116]	; 0x74
 8007e96:	e002      	b.n	8007e9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a23      	ldr	r2, [pc, #140]	; (8007f28 <UART_Start_Receive_IT+0x240>)
 8007e9c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d019      	beq.n	8007eda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007eba:	677b      	str	r3, [r7, #116]	; 0x74
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e6      	bne.n	8007ea6 <UART_Start_Receive_IT+0x1be>
 8007ed8:	e018      	b.n	8007f0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	e853 3f00 	ldrex	r3, [r3]
 8007ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f043 0320 	orr.w	r3, r3, #32
 8007eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	69f9      	ldr	r1, [r7, #28]
 8007efe:	6a3a      	ldr	r2, [r7, #32]
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e6      	bne.n	8007eda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	378c      	adds	r7, #140	; 0x8c
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	08008f49 	.word	0x08008f49
 8007f20:	08008be9 	.word	0x08008be9
 8007f24:	08008a31 	.word	0x08008a31
 8007f28:	08008879 	.word	0x08008879

08007f2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b096      	sub	sp, #88	; 0x58
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2222      	movs	r2, #34	; 0x22
 8007f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02d      	beq.n	8007fbe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f68:	4a40      	ldr	r2, [pc, #256]	; (800806c <UART_Start_Receive_DMA+0x140>)
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f72:	4a3f      	ldr	r2, [pc, #252]	; (8008070 <UART_Start_Receive_DMA+0x144>)
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f7c:	4a3d      	ldr	r2, [pc, #244]	; (8008074 <UART_Start_Receive_DMA+0x148>)
 8007f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f86:	2200      	movs	r2, #0
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3324      	adds	r3, #36	; 0x24
 8007f96:	4619      	mov	r1, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	f7fb fcaa 	bl	80038f8 <HAL_DMA_Start_IT>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2210      	movs	r2, #16
 8007fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e051      	b.n	8008062 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d018      	beq.n	8007ff8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fda:	657b      	str	r3, [r7, #84]	; 0x54
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e6      	bne.n	8007fc6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	653b      	str	r3, [r7, #80]	; 0x50
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3308      	adds	r3, #8
 8008016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008018:	637a      	str	r2, [r7, #52]	; 0x34
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e5      	bne.n	8007ff8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800804c:	623a      	str	r2, [r7, #32]
 800804e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e5      	bne.n	800802c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3758      	adds	r7, #88	; 0x58
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	0800827d 	.word	0x0800827d
 8008070:	080083a9 	.word	0x080083a9
 8008074:	080083e7 	.word	0x080083e7

08008078 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b08f      	sub	sp, #60	; 0x3c
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	61fb      	str	r3, [r7, #28]
   return(result);
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e6      	bne.n	8008080 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080c8:	633b      	str	r3, [r7, #48]	; 0x30
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d2:	61ba      	str	r2, [r7, #24]
 80080d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6979      	ldr	r1, [r7, #20]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	613b      	str	r3, [r7, #16]
   return(result);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e5      	bne.n	80080b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80080ee:	bf00      	nop
 80080f0:	373c      	adds	r7, #60	; 0x3c
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b095      	sub	sp, #84	; 0x54
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
 8008122:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	61fb      	str	r3, [r7, #28]
   return(result);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814a:	f023 0301 	bic.w	r3, r3, #1
 800814e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008158:	62fa      	str	r2, [r7, #44]	; 0x2c
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800815e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e3      	bne.n	8008134 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d118      	bne.n	80081a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	60bb      	str	r3, [r7, #8]
   return(result);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f023 0310 	bic.w	r3, r3, #16
 8008188:	647b      	str	r3, [r7, #68]	; 0x44
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6979      	ldr	r1, [r7, #20]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	613b      	str	r3, [r7, #16]
   return(result);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80081ba:	bf00      	nop
 80081bc:	3754      	adds	r7, #84	; 0x54
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b090      	sub	sp, #64	; 0x40
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0320 	and.w	r3, r3, #32
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d137      	bne.n	8008252 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3308      	adds	r3, #8
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	623b      	str	r3, [r7, #32]
   return(result);
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
 8008202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3308      	adds	r3, #8
 8008208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800820a:	633a      	str	r2, [r7, #48]	; 0x30
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e5      	bne.n	80081ea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800821e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60fb      	str	r3, [r7, #12]
   return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	69b9      	ldr	r1, [r7, #24]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	617b      	str	r3, [r7, #20]
   return(result);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e6      	bne.n	800821e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008250:	e002      	b.n	8008258 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008252:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008254:	f006 fca6 	bl	800eba4 <HAL_UART_TxCpltCallback>
}
 8008258:	bf00      	nop
 800825a:	3740      	adds	r7, #64	; 0x40
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7ff f882 	bl	8007378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b09c      	sub	sp, #112	; 0x70
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0320 	and.w	r3, r3, #32
 8008294:	2b00      	cmp	r3, #0
 8008296:	d171      	bne.n	800837c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829a:	2200      	movs	r2, #0
 800829c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082be:	65bb      	str	r3, [r7, #88]	; 0x58
 80082c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082c6:	e841 2300 	strex	r3, r2, [r1]
 80082ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1e6      	bne.n	80082a0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	667b      	str	r3, [r7, #100]	; 0x64
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3308      	adds	r3, #8
 80082f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082f2:	647a      	str	r2, [r7, #68]	; 0x44
 80082f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e5      	bne.n	80082d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	623b      	str	r3, [r7, #32]
   return(result);
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831c:	663b      	str	r3, [r7, #96]	; 0x60
 800831e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3308      	adds	r3, #8
 8008324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008326:	633a      	str	r2, [r7, #48]	; 0x30
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e5      	bne.n	8008306 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	2220      	movs	r2, #32
 800833e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008346:	2b01      	cmp	r3, #1
 8008348:	d118      	bne.n	800837c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	60fb      	str	r3, [r7, #12]
   return(result);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0310 	bic.w	r3, r3, #16
 800835e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	69b9      	ldr	r1, [r7, #24]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	617b      	str	r3, [r7, #20]
   return(result);
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800837c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837e:	2200      	movs	r2, #0
 8008380:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d107      	bne.n	800839a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008390:	4619      	mov	r1, r3
 8008392:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008394:	f006 fd08 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008398:	e002      	b.n	80083a0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800839a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800839c:	f006 fc40 	bl	800ec20 <HAL_UART_RxCpltCallback>
}
 80083a0:	bf00      	nop
 80083a2:	3770      	adds	r7, #112	; 0x70
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d109      	bne.n	80083d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4619      	mov	r1, r3
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f006 fce9 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083d6:	e002      	b.n	80083de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7fe ffd7 	bl	800738c <HAL_UART_RxHalfCpltCallback>
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008402:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d109      	bne.n	8008426 <UART_DMAError+0x40>
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b21      	cmp	r3, #33	; 0x21
 8008416:	d106      	bne.n	8008426 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2200      	movs	r2, #0
 800841c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008420:	6978      	ldr	r0, [r7, #20]
 8008422:	f7ff fe29 	bl	8008078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d109      	bne.n	8008448 <UART_DMAError+0x62>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b22      	cmp	r3, #34	; 0x22
 8008438:	d106      	bne.n	8008448 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2200      	movs	r2, #0
 800843e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7ff fe59 	bl	80080fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844e:	f043 0210 	orr.w	r2, r3, #16
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008458:	6978      	ldr	r0, [r7, #20]
 800845a:	f006 fc4b 	bl	800ecf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845e:	bf00      	nop
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f006 fc35 	bl	800ecf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	220f      	movs	r2, #15
 80084ae:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7fe ff66 	bl	80073a0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b08f      	sub	sp, #60	; 0x3c
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ea:	2b21      	cmp	r3, #33	; 0x21
 80084ec:	d14c      	bne.n	8008588 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d132      	bne.n	8008560 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	e853 3f00 	ldrex	r3, [r3]
 8008506:	61fb      	str	r3, [r7, #28]
   return(result);
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e6      	bne.n	80084fa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	60bb      	str	r3, [r7, #8]
   return(result);
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008540:	633b      	str	r3, [r7, #48]	; 0x30
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	61bb      	str	r3, [r7, #24]
 800854c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6979      	ldr	r1, [r7, #20]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	613b      	str	r3, [r7, #16]
   return(result);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e6      	bne.n	800852c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800855e:	e013      	b.n	8008588 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008564:	781a      	ldrb	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008588:	bf00      	nop
 800858a:	373c      	adds	r7, #60	; 0x3c
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b091      	sub	sp, #68	; 0x44
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a2:	2b21      	cmp	r3, #33	; 0x21
 80085a4:	d151      	bne.n	800864a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d132      	bne.n	8008618 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	623b      	str	r3, [r7, #32]
   return(result);
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	461a      	mov	r2, r3
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
 80085d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e6      	bne.n	80085b2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	69b9      	ldr	r1, [r7, #24]
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	617b      	str	r3, [r7, #20]
   return(result);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e6      	bne.n	80085e4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008616:	e018      	b.n	800864a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800862c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008632:	1c9a      	adds	r2, r3, #2
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800864a:	bf00      	nop
 800864c:	3744      	adds	r7, #68	; 0x44
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008656:	b480      	push	{r7}
 8008658:	b091      	sub	sp, #68	; 0x44
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008664:	2b21      	cmp	r3, #33	; 0x21
 8008666:	d160      	bne.n	800872a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800866e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008670:	e057      	b.n	8008722 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d133      	bne.n	80086e6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	623b      	str	r3, [r7, #32]
   return(result);
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869e:	633a      	str	r2, [r7, #48]	; 0x30
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e5      	bne.n	800867e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c6:	637b      	str	r3, [r7, #52]	; 0x34
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	69b9      	ldr	r1, [r7, #24]
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	617b      	str	r3, [r7, #20]
   return(result);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80086e4:	e021      	b.n	800872a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d013      	beq.n	800871c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008710:	b29b      	uxth	r3, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	b29a      	uxth	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800871c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800871e:	3b01      	subs	r3, #1
 8008720:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008722:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1a4      	bne.n	8008672 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008728:	e7ff      	b.n	800872a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800872a:	bf00      	nop
 800872c:	3744      	adds	r7, #68	; 0x44
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008736:	b480      	push	{r7}
 8008738:	b091      	sub	sp, #68	; 0x44
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008744:	2b21      	cmp	r3, #33	; 0x21
 8008746:	d165      	bne.n	8008814 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800874e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008750:	e05c      	b.n	800880c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d133      	bne.n	80087c6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	61fb      	str	r3, [r7, #28]
   return(result);
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800877e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e5      	bne.n	800875e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	633b      	str	r3, [r7, #48]	; 0x30
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6979      	ldr	r1, [r7, #20]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e6      	bne.n	8008792 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80087c4:	e026      	b.n	8008814 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d018      	beq.n	8008806 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087e8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ee:	1c9a      	adds	r2, r3, #2
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008806:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008808:	3b01      	subs	r3, #1
 800880a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800880c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800880e:	2b00      	cmp	r3, #0
 8008810:	d19f      	bne.n	8008752 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008812:	e7ff      	b.n	8008814 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008814:	bf00      	nop
 8008816:	3744      	adds	r7, #68	; 0x44
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	60bb      	str	r3, [r7, #8]
   return(result);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6979      	ldr	r1, [r7, #20]
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	613b      	str	r3, [r7, #16]
   return(result);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e6      	bne.n	8008828 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f006 f99b 	bl	800eba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800886e:	bf00      	nop
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b09c      	sub	sp, #112	; 0x70
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008890:	2b22      	cmp	r3, #34	; 0x22
 8008892:	f040 80be 	bne.w	8008a12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80088a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088a4:	b2d9      	uxtb	r1, r3
 80088a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	400a      	ands	r2, r1
 80088b2:	b2d2      	uxtb	r2, r2
 80088b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 80a1 	bne.w	8008a22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800890c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e6      	bne.n	80088e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	f023 0301 	bic.w	r3, r3, #1
 8008928:	667b      	str	r3, [r7, #100]	; 0x64
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008932:	647a      	str	r2, [r7, #68]	; 0x44
 8008934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e5      	bne.n	8008912 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a33      	ldr	r2, [pc, #204]	; (8008a2c <UART_RxISR_8BIT+0x1b4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d01f      	beq.n	80089a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d018      	beq.n	80089a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	623b      	str	r3, [r7, #32]
   return(result);
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008986:	663b      	str	r3, [r7, #96]	; 0x60
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008990:	633b      	str	r3, [r7, #48]	; 0x30
 8008992:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d12e      	bne.n	8008a0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	60fb      	str	r3, [r7, #12]
   return(result);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0310 	bic.w	r3, r3, #16
 80089c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	69b9      	ldr	r1, [r7, #24]
 80089d6:	69fa      	ldr	r2, [r7, #28]
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	617b      	str	r3, [r7, #20]
   return(result);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e6      	bne.n	80089b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d103      	bne.n	80089fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2210      	movs	r2, #16
 80089f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f006 f9d0 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a08:	e00b      	b.n	8008a22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f006 f908 	bl	800ec20 <HAL_UART_RxCpltCallback>
}
 8008a10:	e007      	b.n	8008a22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0208 	orr.w	r2, r2, #8
 8008a20:	619a      	str	r2, [r3, #24]
}
 8008a22:	bf00      	nop
 8008a24:	3770      	adds	r7, #112	; 0x70
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40008000 	.word	0x40008000

08008a30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b09c      	sub	sp, #112	; 0x70
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a48:	2b22      	cmp	r3, #34	; 0x22
 8008a4a:	f040 80be 	bne.w	8008bca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a66:	4013      	ands	r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a72:	1c9a      	adds	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 80a1 	bne.w	8008bda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aac:	667b      	str	r3, [r7, #100]	; 0x64
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ab8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e6      	bne.n	8008a98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008aea:	643a      	str	r2, [r7, #64]	; 0x40
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e5      	bne.n	8008aca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a33      	ldr	r2, [pc, #204]	; (8008be4 <UART_RxISR_16BIT+0x1b4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d01f      	beq.n	8008b5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d018      	beq.n	8008b5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e6      	bne.n	8008b2a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d12e      	bne.n	8008bc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f023 0310 	bic.w	r3, r3, #16
 8008b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6979      	ldr	r1, [r7, #20]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	613b      	str	r3, [r7, #16]
   return(result);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d103      	bne.n	8008bb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2210      	movs	r2, #16
 8008bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f006 f8f4 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bc0:	e00b      	b.n	8008bda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f006 f82c 	bl	800ec20 <HAL_UART_RxCpltCallback>
}
 8008bc8:	e007      	b.n	8008bda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	699a      	ldr	r2, [r3, #24]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0208 	orr.w	r2, r2, #8
 8008bd8:	619a      	str	r2, [r3, #24]
}
 8008bda:	bf00      	nop
 8008bdc:	3770      	adds	r7, #112	; 0x70
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40008000 	.word	0x40008000

08008be8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b0ac      	sub	sp, #176	; 0xb0
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c1e:	2b22      	cmp	r3, #34	; 0x22
 8008c20:	f040 8182 	bne.w	8008f28 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c2e:	e125      	b.n	8008e7c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008c3e:	b2d9      	uxtb	r1, r3
 8008c40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4a:	400a      	ands	r2, r1
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d053      	beq.n	8008d2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca8:	f043 0201 	orr.w	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d011      	beq.n	8008ce2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd8:	f043 0204 	orr.w	r2, r3, #4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d011      	beq.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2204      	movs	r2, #4
 8008d00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d08:	f043 0202 	orr.w	r2, r3, #2
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d006      	beq.n	8008d2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f005 ffe9 	bl	800ecf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f040 80a2 	bne.w	8008e7c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d5c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008d60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e4      	bne.n	8008d38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3308      	adds	r3, #8
 8008d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d96:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e1      	bne.n	8008d6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a5f      	ldr	r2, [pc, #380]	; (8008f40 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d021      	beq.n	8008e0c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d01a      	beq.n	8008e0c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008df8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dfa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e4      	bne.n	8008dd6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d130      	bne.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	f023 0310 	bic.w	r3, r3, #16
 8008e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e4      	bne.n	8008e1a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b10      	cmp	r3, #16
 8008e5c:	d103      	bne.n	8008e66 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2210      	movs	r2, #16
 8008e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f005 ff9a 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
 8008e74:	e002      	b.n	8008e7c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f005 fed2 	bl	800ec20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e7c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d006      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f47f aecf 	bne.w	8008c30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d049      	beq.n	8008f38 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008eaa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d242      	bcs.n	8008f38 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e3      	bne.n	8008eb2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008eee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f043 0320 	orr.w	r3, r3, #32
 8008f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6979      	ldr	r1, [r7, #20]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e4      	bne.n	8008ef0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f26:	e007      	b.n	8008f38 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0208 	orr.w	r2, r2, #8
 8008f36:	619a      	str	r2, [r3, #24]
}
 8008f38:	bf00      	nop
 8008f3a:	37b0      	adds	r7, #176	; 0xb0
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40008000 	.word	0x40008000
 8008f44:	08008879 	.word	0x08008879

08008f48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b0ae      	sub	sp, #184	; 0xb8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f56:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f7e:	2b22      	cmp	r3, #34	; 0x22
 8008f80:	f040 8186 	bne.w	8009290 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f8e:	e129      	b.n	80091e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fa2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008fa6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008faa:	4013      	ands	r3, r2
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb8:	1c9a      	adds	r2, r3, #2
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d053      	beq.n	800908e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d011      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900c:	f043 0201 	orr.w	r2, r3, #1
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d011      	beq.n	8009046 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2202      	movs	r2, #2
 8009034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903c:	f043 0204 	orr.w	r2, r3, #4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d011      	beq.n	8009076 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2204      	movs	r2, #4
 8009064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906c:	f043 0202 	orr.w	r2, r3, #2
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907c:	2b00      	cmp	r3, #0
 800907e:	d006      	beq.n	800908e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f005 fe37 	bl	800ecf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 80a4 	bne.w	80091e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e2      	bne.n	800909c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3308      	adds	r3, #8
 80090fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80090fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800910c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e1      	bne.n	80090d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a5f      	ldr	r2, [pc, #380]	; (80092a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d021      	beq.n	8009174 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01a      	beq.n	8009174 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800914e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009160:	65bb      	str	r3, [r7, #88]	; 0x58
 8009162:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e4      	bne.n	800913e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d130      	bne.n	80091de <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091a4:	647b      	str	r3, [r7, #68]	; 0x44
 80091a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e4      	bne.n	8009182 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b10      	cmp	r3, #16
 80091c4:	d103      	bne.n	80091ce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2210      	movs	r2, #16
 80091cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f005 fde6 	bl	800eda8 <HAL_UARTEx_RxEventCallback>
 80091dc:	e002      	b.n	80091e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f005 fd1e 	bl	800ec20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f47f aecb 	bne.w	8008f90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009200:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009204:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009208:	2b00      	cmp	r3, #0
 800920a:	d049      	beq.n	80092a0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009212:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009216:	429a      	cmp	r2, r3
 8009218:	d242      	bcs.n	80092a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3308      	adds	r3, #8
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	623b      	str	r3, [r7, #32]
   return(result);
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800923e:	633a      	str	r2, [r7, #48]	; 0x30
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e3      	bne.n	800921a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a15      	ldr	r2, [pc, #84]	; (80092ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009256:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	60fb      	str	r3, [r7, #12]
   return(result);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f043 0320 	orr.w	r3, r3, #32
 800926c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800927a:	61fb      	str	r3, [r7, #28]
 800927c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927e:	69b9      	ldr	r1, [r7, #24]
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	617b      	str	r3, [r7, #20]
   return(result);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e4      	bne.n	8009258 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800928e:	e007      	b.n	80092a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0208 	orr.w	r2, r2, #8
 800929e:	619a      	str	r2, [r3, #24]
}
 80092a0:	bf00      	nop
 80092a2:	37b8      	adds	r7, #184	; 0xb8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40008000 	.word	0x40008000
 80092ac:	08008a31 	.word	0x08008a31

080092b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_UARTEx_DisableFifoMode+0x16>
 80092fe:	2302      	movs	r3, #2
 8009300:	e027      	b.n	8009352 <HAL_UARTEx_DisableFifoMode+0x66>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2224      	movs	r2, #36	; 0x24
 800930e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0201 	bic.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009372:	2302      	movs	r3, #2
 8009374:	e02d      	b.n	80093d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2224      	movs	r2, #36	; 0x24
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0201 	bic.w	r2, r2, #1
 800939c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8a4 	bl	8009500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e02d      	b.n	800944e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2224      	movs	r2, #36	; 0x24
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0201 	bic.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f866 	bl	8009500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b08c      	sub	sp, #48	; 0x30
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946a:	2b20      	cmp	r3, #32
 800946c:	d142      	bne.n	80094f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e03b      	b.n	80094f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	461a      	mov	r2, r3
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7fe fd4b 	bl	8007f2c <UART_Start_Receive_DMA>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800949c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d124      	bne.n	80094ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d11d      	bne.n	80094e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2210      	movs	r2, #16
 80094b2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	617b      	str	r3, [r7, #20]
   return(result);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f043 0310 	orr.w	r3, r3, #16
 80094c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
 80094d4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6a39      	ldr	r1, [r7, #32]
 80094d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e6      	bne.n	80094b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80094e6:	e002      	b.n	80094ee <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80094ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094f2:	e000      	b.n	80094f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80094f4:	2302      	movs	r3, #2
  }
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3730      	adds	r7, #48	; 0x30
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800950c:	2b00      	cmp	r3, #0
 800950e:	d108      	bne.n	8009522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009520:	e031      	b.n	8009586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009522:	2308      	movs	r3, #8
 8009524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009526:	2308      	movs	r3, #8
 8009528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	0e5b      	lsrs	r3, r3, #25
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 0307 	and.w	r3, r3, #7
 8009538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	0f5b      	lsrs	r3, r3, #29
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	7b3a      	ldrb	r2, [r7, #12]
 800954e:	4911      	ldr	r1, [pc, #68]	; (8009594 <UARTEx_SetNbDataToProcess+0x94>)
 8009550:	5c8a      	ldrb	r2, [r1, r2]
 8009552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009556:	7b3a      	ldrb	r2, [r7, #12]
 8009558:	490f      	ldr	r1, [pc, #60]	; (8009598 <UARTEx_SetNbDataToProcess+0x98>)
 800955a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800955c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009568:	7bfb      	ldrb	r3, [r7, #15]
 800956a:	7b7a      	ldrb	r2, [r7, #13]
 800956c:	4909      	ldr	r1, [pc, #36]	; (8009594 <UARTEx_SetNbDataToProcess+0x94>)
 800956e:	5c8a      	ldrb	r2, [r1, r2]
 8009570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009574:	7b7a      	ldrb	r2, [r7, #13]
 8009576:	4908      	ldr	r1, [pc, #32]	; (8009598 <UARTEx_SetNbDataToProcess+0x98>)
 8009578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800957a:	fb93 f3f2 	sdiv	r3, r3, r2
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009586:	bf00      	nop
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	0800f174 	.word	0x0800f174
 8009598:	0800f17c 	.word	0x0800f17c

0800959c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	43db      	mvns	r3, r3
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4013      	ands	r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095d2:	b084      	sub	sp, #16
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	f107 0014 	add.w	r0, r7, #20
 80095e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	b004      	add	sp, #16
 8009612:	4770      	bx	lr

08009614 <__NVIC_SetPriority>:
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009624:	2b00      	cmp	r3, #0
 8009626:	db0a      	blt.n	800963e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	490c      	ldr	r1, [pc, #48]	; (8009660 <__NVIC_SetPriority+0x4c>)
 800962e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009632:	0112      	lsls	r2, r2, #4
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	440b      	add	r3, r1
 8009638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800963c:	e00a      	b.n	8009654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	4908      	ldr	r1, [pc, #32]	; (8009664 <__NVIC_SetPriority+0x50>)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	3b04      	subs	r3, #4
 800964c:	0112      	lsls	r2, r2, #4
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	440b      	add	r3, r1
 8009652:	761a      	strb	r2, [r3, #24]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	e000e100 	.word	0xe000e100
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <SysTick_Handler+0x1c>)
 800966e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009670:	f002 fa42 	bl	800baf8 <xTaskGetSchedulerState>
 8009674:	4603      	mov	r3, r0
 8009676:	2b01      	cmp	r3, #1
 8009678:	d001      	beq.n	800967e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800967a:	f003 fc15 	bl	800cea8 <xPortSysTickHandler>
  }
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	e000e010 	.word	0xe000e010

08009688 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800968c:	2100      	movs	r1, #0
 800968e:	f06f 0004 	mvn.w	r0, #4
 8009692:	f7ff ffbf 	bl	8009614 <__NVIC_SetPriority>
#endif
}
 8009696:	bf00      	nop
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a2:	f3ef 8305 	mrs	r3, IPSR
 80096a6:	603b      	str	r3, [r7, #0]
  return(result);
 80096a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80096ae:	f06f 0305 	mvn.w	r3, #5
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	e00c      	b.n	80096d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80096b6:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <osKernelInitialize+0x44>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <osKernelInitialize+0x44>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e002      	b.n	80096d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80096ca:	f04f 33ff 	mov.w	r3, #4294967295
 80096ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d0:	687b      	ldr	r3, [r7, #4]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	200007b8 	.word	0x200007b8

080096e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ea:	f3ef 8305 	mrs	r3, IPSR
 80096ee:	603b      	str	r3, [r7, #0]
  return(result);
 80096f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80096f6:	f06f 0305 	mvn.w	r3, #5
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	e010      	b.n	8009720 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <osKernelStart+0x48>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d109      	bne.n	800971a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009706:	f7ff ffbf 	bl	8009688 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800970a:	4b08      	ldr	r3, [pc, #32]	; (800972c <osKernelStart+0x48>)
 800970c:	2202      	movs	r2, #2
 800970e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009710:	f001 fd98 	bl	800b244 <vTaskStartScheduler>
      stat = osOK;
 8009714:	2300      	movs	r3, #0
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e002      	b.n	8009720 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800971a:	f04f 33ff 	mov.w	r3, #4294967295
 800971e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009720:	687b      	ldr	r3, [r7, #4]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200007b8 	.word	0x200007b8

08009730 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af04      	add	r7, sp, #16
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800973c:	2300      	movs	r3, #0
 800973e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009740:	f3ef 8305 	mrs	r3, IPSR
 8009744:	617b      	str	r3, [r7, #20]
  return(result);
 8009746:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009748:	2b00      	cmp	r3, #0
 800974a:	d17e      	bne.n	800984a <osThreadNew+0x11a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d07b      	beq.n	800984a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009752:	2380      	movs	r3, #128	; 0x80
 8009754:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009756:	2318      	movs	r3, #24
 8009758:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800975e:	f04f 33ff 	mov.w	r3, #4294967295
 8009762:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d045      	beq.n	80097f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <osThreadNew+0x48>
        name = attr->name;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <osThreadNew+0x6e>
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2b38      	cmp	r3, #56	; 0x38
 8009790:	d805      	bhi.n	800979e <osThreadNew+0x6e>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <osThreadNew+0x72>
        return (NULL);
 800979e:	2300      	movs	r3, #0
 80097a0:	e054      	b.n	800984c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	089b      	lsrs	r3, r3, #2
 80097b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <osThreadNew+0xa8>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	2b5b      	cmp	r3, #91	; 0x5b
 80097c0:	d90a      	bls.n	80097d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d006      	beq.n	80097d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <osThreadNew+0xa8>
        mem = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	e010      	b.n	80097fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10c      	bne.n	80097fa <osThreadNew+0xca>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d108      	bne.n	80097fa <osThreadNew+0xca>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <osThreadNew+0xca>
          mem = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e001      	b.n	80097fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d110      	bne.n	8009822 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009808:	9202      	str	r2, [sp, #8]
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	6a3a      	ldr	r2, [r7, #32]
 8009814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f001 fb3e 	bl	800ae98 <xTaskCreateStatic>
 800981c:	4603      	mov	r3, r0
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	e013      	b.n	800984a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d110      	bne.n	800984a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	b29a      	uxth	r2, r3
 800982c:	f107 0310 	add.w	r3, r7, #16
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 fb89 	bl	800af52 <xTaskCreate>
 8009840:	4603      	mov	r3, r0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d001      	beq.n	800984a <osThreadNew+0x11a>
            hTask = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800984a:	693b      	ldr	r3, [r7, #16]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	; 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af02      	add	r7, sp, #8
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <osThreadFlagsSet+0x1a>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	da03      	bge.n	8009876 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800986e:	f06f 0303 	mvn.w	r3, #3
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e035      	b.n	80098e2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009876:	f04f 33ff 	mov.w	r3, #4294967295
 800987a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800987c:	f3ef 8305 	mrs	r3, IPSR
 8009880:	613b      	str	r3, [r7, #16]
  return(result);
 8009882:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01f      	beq.n	80098c8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800988c:	f107 0308 	add.w	r3, r7, #8
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	2201      	movs	r2, #1
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6978      	ldr	r0, [r7, #20]
 800989a:	f002 fc11 	bl	800c0c0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800989e:	f107 030c 	add.w	r3, r7, #12
 80098a2:	2200      	movs	r2, #0
 80098a4:	9200      	str	r2, [sp, #0]
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f002 fc08 	bl	800c0c0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d015      	beq.n	80098e2 <osThreadFlagsSet+0x8e>
 80098b6:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <osThreadFlagsSet+0x98>)
 80098b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	e00c      	b.n	80098e2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80098c8:	2300      	movs	r3, #0
 80098ca:	2201      	movs	r2, #1
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6978      	ldr	r0, [r7, #20]
 80098d0:	f002 fb3e 	bl	800bf50 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80098d4:	f107 030c 	add.w	r3, r7, #12
 80098d8:	2200      	movs	r2, #0
 80098da:	2100      	movs	r1, #0
 80098dc:	6978      	ldr	r0, [r7, #20]
 80098de:	f002 fb37 	bl	800bf50 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	e000ed04 	.word	0xe000ed04

080098f0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08c      	sub	sp, #48	; 0x30
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098fc:	f3ef 8305 	mrs	r3, IPSR
 8009900:	617b      	str	r3, [r7, #20]
  return(result);
 8009902:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009908:	f06f 0305 	mvn.w	r3, #5
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800990e:	e06b      	b.n	80099e8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	da03      	bge.n	800991e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009916:	f06f 0303 	mvn.w	r3, #3
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800991c:	e064      	b.n	80099e8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
 800992c:	e001      	b.n	8009932 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800993a:	f001 fd95 	bl	800b468 <xTaskGetTickCount>
 800993e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009940:	f107 0210 	add.w	r2, r7, #16
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009948:	2000      	movs	r0, #0
 800994a:	f002 faa7 	bl	800be9c <xTaskNotifyWait>
 800994e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d137      	bne.n	80099c6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4013      	ands	r3, r2
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009962:	4313      	orrs	r3, r2
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00c      	beq.n	800998a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	4013      	ands	r3, r2
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	429a      	cmp	r2, r3
 800997a:	d032      	beq.n	80099e2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10f      	bne.n	80099a2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009982:	f06f 0302 	mvn.w	r3, #2
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009988:	e02e      	b.n	80099e8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	4013      	ands	r3, r2
 8009990:	2b00      	cmp	r3, #0
 8009992:	d128      	bne.n	80099e6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800999a:	f06f 0302 	mvn.w	r3, #2
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80099a0:	e022      	b.n	80099e8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80099a2:	f001 fd61 	bl	800b468 <xTaskGetTickCount>
 80099a6:	4602      	mov	r2, r0
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d902      	bls.n	80099bc <osThreadFlagsWait+0xcc>
          tout  = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ba:	e00e      	b.n	80099da <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80099bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
 80099c4:	e009      	b.n	80099da <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80099cc:	f06f 0302 	mvn.w	r3, #2
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d2:	e002      	b.n	80099da <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80099d4:	f06f 0301 	mvn.w	r3, #1
 80099d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1af      	bne.n	8009940 <osThreadFlagsWait+0x50>
 80099e0:	e002      	b.n	80099e8 <osThreadFlagsWait+0xf8>
            break;
 80099e2:	bf00      	nop
 80099e4:	e000      	b.n	80099e8 <osThreadFlagsWait+0xf8>
            break;
 80099e6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3730      	adds	r7, #48	; 0x30
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099fa:	f3ef 8305 	mrs	r3, IPSR
 80099fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <osDelay+0x1c>
    stat = osErrorISR;
 8009a06:	f06f 0305 	mvn.w	r3, #5
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e007      	b.n	8009a1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fbdf 	bl	800b1dc <vTaskDelay>
    }
  }

  return (stat);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f003 f85d 	bl	800caf0 <pvTimerGetTimerID>
 8009a36:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <TimerCallback+0x22>
    callb->func (callb->arg);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	6852      	ldr	r2, [r2, #4]
 8009a46:	4610      	mov	r0, r2
 8009a48:	4798      	blx	r3
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08c      	sub	sp, #48	; 0x30
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	607a      	str	r2, [r7, #4]
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	460b      	mov	r3, r1
 8009a62:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a68:	f3ef 8305 	mrs	r3, IPSR
 8009a6c:	613b      	str	r3, [r7, #16]
  return(result);
 8009a6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d163      	bne.n	8009b3c <osTimerNew+0xe8>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d060      	beq.n	8009b3c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009a7a:	2008      	movs	r0, #8
 8009a7c:	f003 faa4 	bl	800cfc8 <pvPortMalloc>
 8009a80:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d059      	beq.n	8009b3c <osTimerNew+0xe8>
      callb->func = func;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009a94:	7afb      	ldrb	r3, [r7, #11]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61fb      	str	r3, [r7, #28]
 8009a9e:	e001      	b.n	8009aa4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01c      	beq.n	8009aee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <osTimerNew+0x6e>
          name = attr->name;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d006      	beq.n	8009ad8 <osTimerNew+0x84>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	2b2b      	cmp	r3, #43	; 0x2b
 8009ad0:	d902      	bls.n	8009ad8 <osTimerNew+0x84>
          mem = 1;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	61bb      	str	r3, [r7, #24]
 8009ad6:	e00c      	b.n	8009af2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d108      	bne.n	8009af2 <osTimerNew+0x9e>
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <osTimerNew+0x9e>
            mem = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61bb      	str	r3, [r7, #24]
 8009aec:	e001      	b.n	8009af2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d10c      	bne.n	8009b12 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	4b12      	ldr	r3, [pc, #72]	; (8009b48 <osTimerNew+0xf4>)
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	2101      	movs	r1, #1
 8009b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b0a:	f002 fc72 	bl	800c3f2 <xTimerCreateStatic>
 8009b0e:	6238      	str	r0, [r7, #32]
 8009b10:	e00b      	b.n	8009b2a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d108      	bne.n	8009b2a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <osTimerNew+0xf4>)
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	2101      	movs	r1, #1
 8009b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b24:	f002 fc44 	bl	800c3b0 <xTimerCreate>
 8009b28:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d105      	bne.n	8009b3c <osTimerNew+0xe8>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <osTimerNew+0xe8>
        vPortFree (callb);
 8009b36:	6978      	ldr	r0, [r7, #20]
 8009b38:	f003 fb12 	bl	800d160 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3728      	adds	r7, #40	; 0x28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	08009a29 	.word	0x08009a29

08009b4c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b5a:	f3ef 8305 	mrs	r3, IPSR
 8009b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b60:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <osTimerStart+0x22>
    stat = osErrorISR;
 8009b66:	f06f 0305 	mvn.w	r3, #5
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e017      	b.n	8009b9e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <osTimerStart+0x30>
    stat = osErrorParameter;
 8009b74:	f06f 0303 	mvn.w	r3, #3
 8009b78:	617b      	str	r3, [r7, #20]
 8009b7a:	e010      	b.n	8009b9e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	2300      	movs	r3, #0
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	2104      	movs	r1, #4
 8009b86:	6938      	ldr	r0, [r7, #16]
 8009b88:	f002 fcac 	bl	800c4e4 <xTimerGenericCommand>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d102      	bne.n	8009b98 <osTimerStart+0x4c>
      stat = osOK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	e002      	b.n	8009b9e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009b98:	f06f 0302 	mvn.w	r3, #2
 8009b9c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009b9e:	697b      	ldr	r3, [r7, #20]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bb4:	f3ef 8305 	mrs	r3, IPSR
 8009bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009bba:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d12d      	bne.n	8009c1c <osEventFlagsNew+0x74>
    mem = -1;
 8009bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d015      	beq.n	8009bf8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <osEventFlagsNew+0x3a>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b1f      	cmp	r3, #31
 8009bda:	d902      	bls.n	8009be2 <osEventFlagsNew+0x3a>
        mem = 1;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	613b      	str	r3, [r7, #16]
 8009be0:	e00c      	b.n	8009bfc <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d108      	bne.n	8009bfc <osEventFlagsNew+0x54>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <osEventFlagsNew+0x54>
          mem = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	e001      	b.n	8009bfc <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d106      	bne.n	8009c10 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f93e 	bl	8009e88 <xEventGroupCreateStatic>
 8009c0c:	6178      	str	r0, [r7, #20]
 8009c0e:	e005      	b.n	8009c1c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009c16:	f000 f96e 	bl	8009ef6 <xEventGroupCreate>
 8009c1a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009c1c:	697b      	ldr	r3, [r7, #20]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b08a      	sub	sp, #40	; 0x28
 8009c2a:	af02      	add	r7, sp, #8
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c36:	f3ef 8305 	mrs	r3, IPSR
 8009c3a:	613b      	str	r3, [r7, #16]
  return(result);
 8009c3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d175      	bne.n	8009d2e <osSemaphoreNew+0x108>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d072      	beq.n	8009d2e <osSemaphoreNew+0x108>
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d86e      	bhi.n	8009d2e <osSemaphoreNew+0x108>
    mem = -1;
 8009c50:	f04f 33ff 	mov.w	r3, #4294967295
 8009c54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d015      	beq.n	8009c88 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d006      	beq.n	8009c72 <osSemaphoreNew+0x4c>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	2b4f      	cmp	r3, #79	; 0x4f
 8009c6a:	d902      	bls.n	8009c72 <osSemaphoreNew+0x4c>
        mem = 1;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	61bb      	str	r3, [r7, #24]
 8009c70:	e00c      	b.n	8009c8c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d108      	bne.n	8009c8c <osSemaphoreNew+0x66>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <osSemaphoreNew+0x66>
          mem = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	e001      	b.n	8009c8c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	d04c      	beq.n	8009d2e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d128      	bne.n	8009cec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d10a      	bne.n	8009cb6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	9200      	str	r2, [sp, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	2001      	movs	r0, #1
 8009cae:	f000 fa59 	bl	800a164 <xQueueGenericCreateStatic>
 8009cb2:	61f8      	str	r0, [r7, #28]
 8009cb4:	e005      	b.n	8009cc2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	2100      	movs	r1, #0
 8009cba:	2001      	movs	r0, #1
 8009cbc:	f000 faca 	bl	800a254 <xQueueGenericCreate>
 8009cc0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d022      	beq.n	8009d0e <osSemaphoreNew+0xe8>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01f      	beq.n	8009d0e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	69f8      	ldr	r0, [r7, #28]
 8009cd6:	f000 fb85 	bl	800a3e4 <xQueueGenericSend>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d016      	beq.n	8009d0e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009ce0:	69f8      	ldr	r0, [r7, #28]
 8009ce2:	f000 ff05 	bl	800aaf0 <vQueueDelete>
            hSemaphore = NULL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61fb      	str	r3, [r7, #28]
 8009cea:	e010      	b.n	8009d0e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d108      	bne.n	8009d04 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fb07 	bl	800a30e <xQueueCreateCountingSemaphoreStatic>
 8009d00:	61f8      	str	r0, [r7, #28]
 8009d02:	e004      	b.n	8009d0e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fb38 	bl	800a37c <xQueueCreateCountingSemaphore>
 8009d0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00c      	beq.n	8009d2e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	e001      	b.n	8009d26 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009d26:	6979      	ldr	r1, [r7, #20]
 8009d28:	69f8      	ldr	r0, [r7, #28]
 8009d2a:	f001 f82d 	bl	800ad88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009d2e:	69fb      	ldr	r3, [r7, #28]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3720      	adds	r7, #32
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d48:	f3ef 8305 	mrs	r3, IPSR
 8009d4c:	613b      	str	r3, [r7, #16]
  return(result);
 8009d4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d15f      	bne.n	8009e14 <osMessageQueueNew+0xdc>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d05c      	beq.n	8009e14 <osMessageQueueNew+0xdc>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d059      	beq.n	8009e14 <osMessageQueueNew+0xdc>
    mem = -1;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
 8009d64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d029      	beq.n	8009dc0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d012      	beq.n	8009d9a <osMessageQueueNew+0x62>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	2b4f      	cmp	r3, #79	; 0x4f
 8009d7a:	d90e      	bls.n	8009d9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d302      	bcc.n	8009d9a <osMessageQueueNew+0x62>
        mem = 1;
 8009d94:	2301      	movs	r3, #1
 8009d96:	61bb      	str	r3, [r7, #24]
 8009d98:	e014      	b.n	8009dc4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d110      	bne.n	8009dc4 <osMessageQueueNew+0x8c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d108      	bne.n	8009dc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d104      	bne.n	8009dc4 <osMessageQueueNew+0x8c>
          mem = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	e001      	b.n	8009dc4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10b      	bne.n	8009de2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691a      	ldr	r2, [r3, #16]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	9100      	str	r1, [sp, #0]
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 f9c3 	bl	800a164 <xQueueGenericCreateStatic>
 8009dde:	61f8      	str	r0, [r7, #28]
 8009de0:	e008      	b.n	8009df4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009de8:	2200      	movs	r2, #0
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 fa31 	bl	800a254 <xQueueGenericCreate>
 8009df2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00c      	beq.n	8009e14 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e001      	b.n	8009e0c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009e0c:	6979      	ldr	r1, [r7, #20]
 8009e0e:	69f8      	ldr	r0, [r7, #28]
 8009e10:	f000 ffba 	bl	800ad88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009e14:	69fb      	ldr	r3, [r7, #28]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a07      	ldr	r2, [pc, #28]	; (8009e4c <vApplicationGetIdleTaskMemory+0x2c>)
 8009e30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4a06      	ldr	r2, [pc, #24]	; (8009e50 <vApplicationGetIdleTaskMemory+0x30>)
 8009e36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2280      	movs	r2, #128	; 0x80
 8009e3c:	601a      	str	r2, [r3, #0]
}
 8009e3e:	bf00      	nop
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	200007bc 	.word	0x200007bc
 8009e50:	20000818 	.word	0x20000818

08009e54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4a07      	ldr	r2, [pc, #28]	; (8009e80 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4a06      	ldr	r2, [pc, #24]	; (8009e84 <vApplicationGetTimerTaskMemory+0x30>)
 8009e6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e72:	601a      	str	r2, [r3, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	20000a18 	.word	0x20000a18
 8009e84:	20000a74 	.word	0x20000a74

08009e88 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009eac:	2320      	movs	r3, #32
 8009eae:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d00a      	beq.n	8009ecc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	60fb      	str	r3, [r7, #12]
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 f822 	bl	8009f2a <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009eec:	697b      	ldr	r3, [r7, #20]
	}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009efc:	2020      	movs	r0, #32
 8009efe:	f003 f863 	bl	800cfc8 <pvPortMalloc>
 8009f02:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 f808 	bl	8009f2a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009f20:	687b      	ldr	r3, [r7, #4]
	}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f103 0208 	add.w	r2, r3, #8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f103 0208 	add.w	r2, r3, #8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f103 0208 	add.w	r2, r3, #8
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f5e:	bf00      	nop
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d103      	bne.n	8009fec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	e00c      	b.n	800a006 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e002      	b.n	8009ffa <vListInsert+0x2e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d2f6      	bcs.n	8009ff4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	601a      	str	r2, [r3, #0]
}
 800a032:	bf00      	nop
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6892      	ldr	r2, [r2, #8]
 800a054:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6852      	ldr	r2, [r2, #4]
 800a05e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d103      	bne.n	800a072 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	1e5a      	subs	r2, r3, #1
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <xQueueGenericReset+0x2a>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	60bb      	str	r3, [r7, #8]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a0be:	f002 fe61 	bl	800cd84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ca:	68f9      	ldr	r1, [r7, #12]
 800a0cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0ce:	fb01 f303 	mul.w	r3, r1, r3
 800a0d2:	441a      	add	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	441a      	add	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	22ff      	movs	r2, #255	; 0xff
 800a102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	22ff      	movs	r2, #255	; 0xff
 800a10a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d114      	bne.n	800a13e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01a      	beq.n	800a152 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3310      	adds	r3, #16
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fb2b 	bl	800b77c <xTaskRemoveFromEventList>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d012      	beq.n	800a152 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a12c:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <xQueueGenericReset+0xcc>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	e009      	b.n	800a152 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3310      	adds	r3, #16
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff fef1 	bl	8009f2a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3324      	adds	r3, #36	; 0x24
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff feec 	bl	8009f2a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a152:	f002 fe47 	bl	800cde4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a156:	2301      	movs	r3, #1
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08e      	sub	sp, #56	; 0x38
 800a168:	af02      	add	r7, sp, #8
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <xQueueGenericCreateStatic+0x52>
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <xQueueGenericCreateStatic+0x56>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <xQueueGenericCreateStatic+0x58>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10a      	bne.n	800a1d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	623b      	str	r3, [r7, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d102      	bne.n	800a1e2 <xQueueGenericCreateStatic+0x7e>
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <xQueueGenericCreateStatic+0x82>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e000      	b.n	800a1e8 <xQueueGenericCreateStatic+0x84>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	61fb      	str	r3, [r7, #28]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a202:	2350      	movs	r3, #80	; 0x50
 800a204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2b50      	cmp	r3, #80	; 0x50
 800a20a:	d00a      	beq.n	800a222 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	61bb      	str	r3, [r7, #24]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a222:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00d      	beq.n	800a24a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a236:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	4613      	mov	r3, r2
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f83f 	bl	800a2c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3730      	adds	r7, #48	; 0x30
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	; 0x28
 800a258:	af02      	add	r7, sp, #8
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	613b      	str	r3, [r7, #16]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	fb02 f303 	mul.w	r3, r2, r3
 800a286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	3350      	adds	r3, #80	; 0x50
 800a28c:	4618      	mov	r0, r3
 800a28e:	f002 fe9b 	bl	800cfc8 <pvPortMalloc>
 800a292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d011      	beq.n	800a2be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	3350      	adds	r3, #80	; 0x50
 800a2a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2ac:	79fa      	ldrb	r2, [r7, #7]
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 f805 	bl	800a2c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2be:	69bb      	ldr	r3, [r7, #24]
	}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d103      	bne.n	800a2e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	e002      	b.n	800a2ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	69b8      	ldr	r0, [r7, #24]
 800a2fa:	f7ff fecb 	bl	800a094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b08a      	sub	sp, #40	; 0x28
 800a312:	af02      	add	r7, sp, #8
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61bb      	str	r3, [r7, #24]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d90a      	bls.n	800a354 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	617b      	str	r3, [r7, #20]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a354:	2302      	movs	r3, #2
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff ff00 	bl	800a164 <xQueueGenericCreateStatic>
 800a364:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a372:	69fb      	ldr	r3, [r7, #28]
	}
 800a374:	4618      	mov	r0, r3
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10a      	bne.n	800a3a2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	613b      	str	r3, [r7, #16]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d90a      	bls.n	800a3c0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	60fb      	str	r3, [r7, #12]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ff45 	bl	800a254 <xQueueGenericCreate>
 800a3ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3d8:	697b      	ldr	r3, [r7, #20]
	}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10a      	bne.n	800a416 <xQueueGenericSend+0x32>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <xQueueGenericSend+0x40>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <xQueueGenericSend+0x44>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <xQueueGenericSend+0x46>
 800a428:	2300      	movs	r3, #0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <xQueueGenericSend+0x60>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x6e>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d101      	bne.n	800a456 <xQueueGenericSend+0x72>
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <xQueueGenericSend+0x74>
 800a456:	2300      	movs	r3, #0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <xQueueGenericSend+0x8e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	623b      	str	r3, [r7, #32]
}
 800a46e:	bf00      	nop
 800a470:	e7fe      	b.n	800a470 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a472:	f001 fb41 	bl	800baf8 <xTaskGetSchedulerState>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <xQueueGenericSend+0x9e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <xQueueGenericSend+0xa2>
 800a482:	2301      	movs	r3, #1
 800a484:	e000      	b.n	800a488 <xQueueGenericSend+0xa4>
 800a486:	2300      	movs	r3, #0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a2:	f002 fc6f 	bl	800cd84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <xQueueGenericSend+0xd4>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d129      	bne.n	800a50c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4be:	f000 fb52 	bl	800ab66 <prvCopyDataToQueue>
 800a4c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	3324      	adds	r3, #36	; 0x24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f001 f953 	bl	800b77c <xTaskRemoveFromEventList>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4dc:	4b3f      	ldr	r3, [pc, #252]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	e00a      	b.n	800a504 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4f4:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a504:	f002 fc6e 	bl	800cde4 <vPortExitCritical>
				return pdPASS;
 800a508:	2301      	movs	r3, #1
 800a50a:	e063      	b.n	800a5d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a512:	f002 fc67 	bl	800cde4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a516:	2300      	movs	r3, #0
 800a518:	e05c      	b.n	800a5d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d106      	bne.n	800a52e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4618      	mov	r0, r3
 800a526:	f001 f98d 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a52e:	f002 fc59 	bl	800cde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a532:	f000 feed 	bl	800b310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a536:	f002 fc25 	bl	800cd84 <vPortEnterCritical>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a540:	b25b      	sxtb	r3, r3
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d103      	bne.n	800a550 <xQueueGenericSend+0x16c>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a556:	b25b      	sxtb	r3, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d103      	bne.n	800a566 <xQueueGenericSend+0x182>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a566:	f002 fc3d 	bl	800cde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a56a:	1d3a      	adds	r2, r7, #4
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f001 f97c 	bl	800b870 <xTaskCheckForTimeOut>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d124      	bne.n	800a5c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a580:	f000 fbe9 	bl	800ad56 <prvIsQueueFull>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d018      	beq.n	800a5bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	3310      	adds	r3, #16
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f001 f8a2 	bl	800b6dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a59a:	f000 fb74 	bl	800ac86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a59e:	f000 fec5 	bl	800b32c <xTaskResumeAll>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f47f af7c 	bne.w	800a4a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <xQueueGenericSend+0x1f8>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	e772      	b.n	800a4a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5be:	f000 fb62 	bl	800ac86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5c2:	f000 feb3 	bl	800b32c <xTaskResumeAll>
 800a5c6:	e76c      	b.n	800a4a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ca:	f000 fb5c 	bl	800ac86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5ce:	f000 fead 	bl	800b32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3738      	adds	r7, #56	; 0x38
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b090      	sub	sp, #64	; 0x40
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d103      	bne.n	800a61c <xQueueGenericSendFromISR+0x3c>
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <xQueueGenericSendFromISR+0x40>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <xQueueGenericSendFromISR+0x42>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d103      	bne.n	800a64a <xQueueGenericSendFromISR+0x6a>
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <xQueueGenericSendFromISR+0x6e>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <xQueueGenericSendFromISR+0x70>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10a      	bne.n	800a66a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	623b      	str	r3, [r7, #32]
}
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a66a:	f002 fc6d 	bl	800cf48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a66e:	f3ef 8211 	mrs	r2, BASEPRI
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	61fa      	str	r2, [r7, #28]
 800a684:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a686:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	429a      	cmp	r2, r3
 800a694:	d302      	bcc.n	800a69c <xQueueGenericSendFromISR+0xbc>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d12f      	bne.n	800a6fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6b2:	f000 fa58 	bl	800ab66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d112      	bne.n	800a6e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d016      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 f855 	bl	800b77c <xTaskRemoveFromEventList>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00e      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00b      	beq.n	800a6f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e007      	b.n	800a6f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	b25a      	sxtb	r2, r3
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a6fa:	e001      	b.n	800a700 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a70a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3740      	adds	r7, #64	; 0x40
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08c      	sub	sp, #48	; 0x30
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a724:	2300      	movs	r3, #0
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <xQueueReceive+0x30>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	623b      	str	r3, [r7, #32]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d103      	bne.n	800a756 <xQueueReceive+0x3e>
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <xQueueReceive+0x42>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <xQueueReceive+0x44>
 800a75a:	2300      	movs	r3, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10a      	bne.n	800a776 <xQueueReceive+0x5e>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61fb      	str	r3, [r7, #28]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a776:	f001 f9bf 	bl	800baf8 <xTaskGetSchedulerState>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <xQueueReceive+0x6e>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <xQueueReceive+0x72>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueReceive+0x74>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10a      	bne.n	800a7a6 <xQueueReceive+0x8e>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	61bb      	str	r3, [r7, #24]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a6:	f002 faed 	bl	800cd84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01f      	beq.n	800a7f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7b6:	68b9      	ldr	r1, [r7, #8]
 800a7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ba:	f000 fa3e 	bl	800ac3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00f      	beq.n	800a7ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	3310      	adds	r3, #16
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 ffd2 	bl	800b77c <xTaskRemoveFromEventList>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7de:	4b3d      	ldr	r3, [pc, #244]	; (800a8d4 <xQueueReceive+0x1bc>)
 800a7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7ee:	f002 faf9 	bl	800cde4 <vPortExitCritical>
				return pdPASS;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e069      	b.n	800a8ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d103      	bne.n	800a804 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7fc:	f002 faf2 	bl	800cde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a800:	2300      	movs	r3, #0
 800a802:	e062      	b.n	800a8ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 f818 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a818:	f002 fae4 	bl	800cde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a81c:	f000 fd78 	bl	800b310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a820:	f002 fab0 	bl	800cd84 <vPortEnterCritical>
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82a:	b25b      	sxtb	r3, r3
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d103      	bne.n	800a83a <xQueueReceive+0x122>
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d103      	bne.n	800a850 <xQueueReceive+0x138>
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a850:	f002 fac8 	bl	800cde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a854:	1d3a      	adds	r2, r7, #4
 800a856:	f107 0310 	add.w	r3, r7, #16
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f807 	bl	800b870 <xTaskCheckForTimeOut>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d123      	bne.n	800a8b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86a:	f000 fa5e 	bl	800ad2a <prvIsQueueEmpty>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d017      	beq.n	800a8a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	3324      	adds	r3, #36	; 0x24
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 ff2d 	bl	800b6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a884:	f000 f9ff 	bl	800ac86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a888:	f000 fd50 	bl	800b32c <xTaskResumeAll>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d189      	bne.n	800a7a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a892:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <xQueueReceive+0x1bc>)
 800a894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	e780      	b.n	800a7a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8a6:	f000 f9ee 	bl	800ac86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8aa:	f000 fd3f 	bl	800b32c <xTaskResumeAll>
 800a8ae:	e77a      	b.n	800a7a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b2:	f000 f9e8 	bl	800ac86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8b6:	f000 fd39 	bl	800b32c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8bc:	f000 fa35 	bl	800ad2a <prvIsQueueEmpty>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f43f af6f 	beq.w	800a7a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08e      	sub	sp, #56	; 0x38
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	623b      	str	r3, [r7, #32]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	61fb      	str	r3, [r7, #28]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a928:	f001 f8e6 	bl	800baf8 <xTaskGetSchedulerState>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <xQueueSemaphoreTake+0x60>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <xQueueSemaphoreTake+0x64>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <xQueueSemaphoreTake+0x66>
 800a93c:	2300      	movs	r3, #0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	61bb      	str	r3, [r7, #24]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a958:	f002 fa14 	bl	800cd84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	d024      	beq.n	800a9b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96a:	1e5a      	subs	r2, r3, #1
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a978:	f001 fa34 	bl	800bde4 <pvTaskIncrementMutexHeldCount>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00f      	beq.n	800a9aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	3310      	adds	r3, #16
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fef4 	bl	800b77c <xTaskRemoveFromEventList>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d007      	beq.n	800a9aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a99a:	4b54      	ldr	r3, [pc, #336]	; (800aaec <xQueueSemaphoreTake+0x214>)
 800a99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9aa:	f002 fa1b 	bl	800cde4 <vPortExitCritical>
				return pdPASS;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e097      	b.n	800aae2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d111      	bne.n	800a9dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	617b      	str	r3, [r7, #20]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9d4:	f002 fa06 	bl	800cde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	e082      	b.n	800aae2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d106      	bne.n	800a9f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 ff2c 	bl	800b844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9f0:	f002 f9f8 	bl	800cde4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9f4:	f000 fc8c 	bl	800b310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9f8:	f002 f9c4 	bl	800cd84 <vPortEnterCritical>
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa02:	b25b      	sxtb	r3, r3
 800aa04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa08:	d103      	bne.n	800aa12 <xQueueSemaphoreTake+0x13a>
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d103      	bne.n	800aa28 <xQueueSemaphoreTake+0x150>
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	2200      	movs	r2, #0
 800aa24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa28:	f002 f9dc 	bl	800cde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa2c:	463a      	mov	r2, r7
 800aa2e:	f107 030c 	add.w	r3, r7, #12
 800aa32:	4611      	mov	r1, r2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 ff1b 	bl	800b870 <xTaskCheckForTimeOut>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d132      	bne.n	800aaa6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa42:	f000 f972 	bl	800ad2a <prvIsQueueEmpty>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d026      	beq.n	800aa9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d109      	bne.n	800aa68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa54:	f002 f996 	bl	800cd84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f001 f869 	bl	800bb34 <xTaskPriorityInherit>
 800aa62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa64:	f002 f9be 	bl	800cde4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	3324      	adds	r3, #36	; 0x24
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 fe33 	bl	800b6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa78:	f000 f905 	bl	800ac86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa7c:	f000 fc56 	bl	800b32c <xTaskResumeAll>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f47f af68 	bne.w	800a958 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa88:	4b18      	ldr	r3, [pc, #96]	; (800aaec <xQueueSemaphoreTake+0x214>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	e75e      	b.n	800a958 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa9c:	f000 f8f3 	bl	800ac86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa0:	f000 fc44 	bl	800b32c <xTaskResumeAll>
 800aaa4:	e758      	b.n	800a958 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aaa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaa8:	f000 f8ed 	bl	800ac86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaac:	f000 fc3e 	bl	800b32c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aab2:	f000 f93a 	bl	800ad2a <prvIsQueueEmpty>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f43f af4d 	beq.w	800a958 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00d      	beq.n	800aae0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aac4:	f002 f95e 	bl	800cd84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaca:	f000 f834 	bl	800ab36 <prvGetDisinheritPriorityAfterTimeout>
 800aace:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 f902 	bl	800bce0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aadc:	f002 f982 	bl	800cde4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3738      	adds	r7, #56	; 0x38
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <vQueueDelete+0x28>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	60bb      	str	r3, [r7, #8]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f95f 	bl	800addc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f002 fb19 	bl	800d160 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab2e:	bf00      	nop
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	e001      	b.n	800ab58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab58:	68fb      	ldr	r3, [r7, #12]
	}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b086      	sub	sp, #24
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	60f8      	str	r0, [r7, #12]
 800ab6e:	60b9      	str	r1, [r7, #8]
 800ab70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10d      	bne.n	800aba0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d14d      	bne.n	800ac28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 f837 	bl	800bc04 <xTaskPriorityDisinherit>
 800ab96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	609a      	str	r2, [r3, #8]
 800ab9e:	e043      	b.n	800ac28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d119      	bne.n	800abda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6858      	ldr	r0, [r3, #4]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	461a      	mov	r2, r3
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	f004 f9af 	bl	800ef14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	441a      	add	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d32b      	bcc.n	800ac28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	605a      	str	r2, [r3, #4]
 800abd8:	e026      	b.n	800ac28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	68d8      	ldr	r0, [r3, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	461a      	mov	r2, r3
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	f004 f995 	bl	800ef14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	68da      	ldr	r2, [r3, #12]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf2:	425b      	negs	r3, r3
 800abf4:	441a      	add	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d207      	bcs.n	800ac16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0e:	425b      	negs	r3, r3
 800ac10:	441a      	add	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d105      	bne.n	800ac28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	1c5a      	adds	r2, r3, #1
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac30:	697b      	ldr	r3, [r7, #20]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d018      	beq.n	800ac7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	441a      	add	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d303      	bcc.n	800ac6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68d9      	ldr	r1, [r3, #12]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	461a      	mov	r2, r3
 800ac78:	6838      	ldr	r0, [r7, #0]
 800ac7a:	f004 f94b 	bl	800ef14 <memcpy>
	}
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac8e:	f002 f879 	bl	800cd84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac9a:	e011      	b.n	800acc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d012      	beq.n	800acca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3324      	adds	r3, #36	; 0x24
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fd67 	bl	800b77c <xTaskRemoveFromEventList>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acb4:	f000 fe3e 	bl	800b934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	3b01      	subs	r3, #1
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dce9      	bgt.n	800ac9c <prvUnlockQueue+0x16>
 800acc8:	e000      	b.n	800accc <prvUnlockQueue+0x46>
					break;
 800acca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	22ff      	movs	r2, #255	; 0xff
 800acd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acd4:	f002 f886 	bl	800cde4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acd8:	f002 f854 	bl	800cd84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ace2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ace4:	e011      	b.n	800ad0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d012      	beq.n	800ad14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3310      	adds	r3, #16
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fd42 	bl	800b77c <xTaskRemoveFromEventList>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acfe:	f000 fe19 	bl	800b934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	dce9      	bgt.n	800ace6 <prvUnlockQueue+0x60>
 800ad12:	e000      	b.n	800ad16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	22ff      	movs	r2, #255	; 0xff
 800ad1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad1e:	f002 f861 	bl	800cde4 <vPortExitCritical>
}
 800ad22:	bf00      	nop
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad32:	f002 f827 	bl	800cd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d102      	bne.n	800ad44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	e001      	b.n	800ad48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad48:	f002 f84c 	bl	800cde4 <vPortExitCritical>

	return xReturn;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad5e:	f002 f811 	bl	800cd84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d102      	bne.n	800ad74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	e001      	b.n	800ad78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad78:	f002 f834 	bl	800cde4 <vPortExitCritical>

	return xReturn;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	e014      	b.n	800adc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad98:	4a0f      	ldr	r2, [pc, #60]	; (800add8 <vQueueAddToRegistry+0x50>)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10b      	bne.n	800adbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ada4:	490c      	ldr	r1, [pc, #48]	; (800add8 <vQueueAddToRegistry+0x50>)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adae:	4a0a      	ldr	r2, [pc, #40]	; (800add8 <vQueueAddToRegistry+0x50>)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	4413      	add	r3, r2
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800adba:	e006      	b.n	800adca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2b07      	cmp	r3, #7
 800adc6:	d9e7      	bls.n	800ad98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adc8:	bf00      	nop
 800adca:	bf00      	nop
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	20000e74 	.word	0x20000e74

0800addc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e016      	b.n	800ae18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800adea:	4a10      	ldr	r2, [pc, #64]	; (800ae2c <vQueueUnregisterQueue+0x50>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d10b      	bne.n	800ae12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800adfa:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <vQueueUnregisterQueue+0x50>)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2100      	movs	r1, #0
 800ae00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ae04:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <vQueueUnregisterQueue+0x50>)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	00db      	lsls	r3, r3, #3
 800ae0a:	4413      	add	r3, r2
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	605a      	str	r2, [r3, #4]
				break;
 800ae10:	e006      	b.n	800ae20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3301      	adds	r3, #1
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b07      	cmp	r3, #7
 800ae1c:	d9e5      	bls.n	800adea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20000e74 	.word	0x20000e74

0800ae30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae40:	f001 ffa0 	bl	800cd84 <vPortEnterCritical>
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae4a:	b25b      	sxtb	r3, r3
 800ae4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae50:	d103      	bne.n	800ae5a <vQueueWaitForMessageRestricted+0x2a>
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae60:	b25b      	sxtb	r3, r3
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae66:	d103      	bne.n	800ae70 <vQueueWaitForMessageRestricted+0x40>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae70:	f001 ffb8 	bl	800cde4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	3324      	adds	r3, #36	; 0x24
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fc4d 	bl	800b724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae8a:	6978      	ldr	r0, [r7, #20]
 800ae8c:	f7ff fefb 	bl	800ac86 <prvUnlockQueue>
	}
 800ae90:	bf00      	nop
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08e      	sub	sp, #56	; 0x38
 800ae9c:	af04      	add	r7, sp, #16
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	623b      	str	r3, [r7, #32]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xTaskCreateStatic+0x46>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	61fb      	str	r3, [r7, #28]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aede:	235c      	movs	r3, #92	; 0x5c
 800aee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b5c      	cmp	r3, #92	; 0x5c
 800aee6:	d00a      	beq.n	800aefe <xTaskCreateStatic+0x66>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	61bb      	str	r3, [r7, #24]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aefe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01e      	beq.n	800af44 <xTaskCreateStatic+0xac>
 800af06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01b      	beq.n	800af44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	2202      	movs	r2, #2
 800af1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af1e:	2300      	movs	r3, #0
 800af20:	9303      	str	r3, [sp, #12]
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	9302      	str	r3, [sp, #8]
 800af26:	f107 0314 	add.w	r3, r7, #20
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f850 	bl	800afdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af3e:	f000 f8dd 	bl	800b0fc <prvAddNewTaskToReadyList>
 800af42:	e001      	b.n	800af48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af48:	697b      	ldr	r3, [r7, #20]
	}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3728      	adds	r7, #40	; 0x28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af52:	b580      	push	{r7, lr}
 800af54:	b08c      	sub	sp, #48	; 0x30
 800af56:	af04      	add	r7, sp, #16
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	603b      	str	r3, [r7, #0]
 800af5e:	4613      	mov	r3, r2
 800af60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4618      	mov	r0, r3
 800af68:	f002 f82e 	bl	800cfc8 <pvPortMalloc>
 800af6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00e      	beq.n	800af92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af74:	205c      	movs	r0, #92	; 0x5c
 800af76:	f002 f827 	bl	800cfc8 <pvPortMalloc>
 800af7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	631a      	str	r2, [r3, #48]	; 0x30
 800af88:	e005      	b.n	800af96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af8a:	6978      	ldr	r0, [r7, #20]
 800af8c:	f002 f8e8 	bl	800d160 <vPortFree>
 800af90:	e001      	b.n	800af96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d017      	beq.n	800afcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afa4:	88fa      	ldrh	r2, [r7, #6]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	9302      	str	r3, [sp, #8]
 800afae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f000 f80e 	bl	800afdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afc0:	69f8      	ldr	r0, [r7, #28]
 800afc2:	f000 f89b 	bl	800b0fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afc6:	2301      	movs	r3, #1
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	e002      	b.n	800afd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295
 800afd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800afd2:	69bb      	ldr	r3, [r7, #24]
	}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	461a      	mov	r2, r3
 800aff4:	21a5      	movs	r1, #165	; 0xa5
 800aff6:	f003 ff61 	bl	800eebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b004:	3b01      	subs	r3, #1
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	f023 0307 	bic.w	r3, r3, #7
 800b012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	617b      	str	r3, [r7, #20]
}
 800b030:	bf00      	nop
 800b032:	e7fe      	b.n	800b032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01f      	beq.n	800b07a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b03a:	2300      	movs	r3, #0
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	e012      	b.n	800b066 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	4413      	add	r3, r2
 800b046:	7819      	ldrb	r1, [r3, #0]
 800b048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	4413      	add	r3, r2
 800b04e:	3334      	adds	r3, #52	; 0x34
 800b050:	460a      	mov	r2, r1
 800b052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	4413      	add	r3, r2
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d006      	beq.n	800b06e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	3301      	adds	r3, #1
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2b0f      	cmp	r3, #15
 800b06a:	d9e9      	bls.n	800b040 <prvInitialiseNewTask+0x64>
 800b06c:	e000      	b.n	800b070 <prvInitialiseNewTask+0x94>
			{
				break;
 800b06e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b078:	e003      	b.n	800b082 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	2b37      	cmp	r3, #55	; 0x37
 800b086:	d901      	bls.n	800b08c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b088:	2337      	movs	r3, #55	; 0x37
 800b08a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b090:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b096:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe ff61 	bl	8009f6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	3318      	adds	r3, #24
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe ff5c 	bl	8009f6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	68f9      	ldr	r1, [r7, #12]
 800b0da:	69b8      	ldr	r0, [r7, #24]
 800b0dc:	f001 fd28 	bl	800cb30 <pxPortInitialiseStack>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0f2:	bf00      	nop
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b104:	f001 fe3e 	bl	800cd84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b108:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	4a2c      	ldr	r2, [pc, #176]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b112:	4b2c      	ldr	r3, [pc, #176]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b11a:	4a2a      	ldr	r2, [pc, #168]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d110      	bne.n	800b14a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b128:	f000 fc28 	bl	800b97c <prvInitialiseTaskLists>
 800b12c:	e00d      	b.n	800b14a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b12e:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <prvAddNewTaskToReadyList+0xcc>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b136:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	429a      	cmp	r2, r3
 800b142:	d802      	bhi.n	800b14a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b144:	4a1f      	ldr	r2, [pc, #124]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b14a:	4b20      	ldr	r3, [pc, #128]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	4a1e      	ldr	r2, [pc, #120]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b154:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <prvAddNewTaskToReadyList+0xd4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d903      	bls.n	800b170 <prvAddNewTaskToReadyList+0x74>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	4a18      	ldr	r2, [pc, #96]	; (800b1d0 <prvAddNewTaskToReadyList+0xd4>)
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4a15      	ldr	r2, [pc, #84]	; (800b1d4 <prvAddNewTaskToReadyList+0xd8>)
 800b17e:	441a      	add	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3304      	adds	r3, #4
 800b184:	4619      	mov	r1, r3
 800b186:	4610      	mov	r0, r2
 800b188:	f7fe fefc 	bl	8009f84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b18c:	f001 fe2a 	bl	800cde4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b190:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <prvAddNewTaskToReadyList+0xcc>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00e      	beq.n	800b1b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b198:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d207      	bcs.n	800b1b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvAddNewTaskToReadyList+0xdc>)
 800b1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20001388 	.word	0x20001388
 800b1c4:	20000eb4 	.word	0x20000eb4
 800b1c8:	20001394 	.word	0x20001394
 800b1cc:	200013a4 	.word	0x200013a4
 800b1d0:	20001390 	.word	0x20001390
 800b1d4:	20000eb8 	.word	0x20000eb8
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d017      	beq.n	800b21e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <vTaskDelay+0x60>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <vTaskDelay+0x30>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60bb      	str	r3, [r7, #8]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b20c:	f000 f880 	bl	800b310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b210:	2100      	movs	r1, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f001 f830 	bl	800c278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b218:	f000 f888 	bl	800b32c <xTaskResumeAll>
 800b21c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d107      	bne.n	800b234 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b224:	4b06      	ldr	r3, [pc, #24]	; (800b240 <vTaskDelay+0x64>)
 800b226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200013b0 	.word	0x200013b0
 800b240:	e000ed04 	.word	0xe000ed04

0800b244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	; 0x28
 800b248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b252:	463a      	mov	r2, r7
 800b254:	1d39      	adds	r1, r7, #4
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fde0 	bl	8009e20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	9202      	str	r2, [sp, #8]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	460a      	mov	r2, r1
 800b272:	4921      	ldr	r1, [pc, #132]	; (800b2f8 <vTaskStartScheduler+0xb4>)
 800b274:	4821      	ldr	r0, [pc, #132]	; (800b2fc <vTaskStartScheduler+0xb8>)
 800b276:	f7ff fe0f 	bl	800ae98 <xTaskCreateStatic>
 800b27a:	4603      	mov	r3, r0
 800b27c:	4a20      	ldr	r2, [pc, #128]	; (800b300 <vTaskStartScheduler+0xbc>)
 800b27e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b280:	4b1f      	ldr	r3, [pc, #124]	; (800b300 <vTaskStartScheduler+0xbc>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b288:	2301      	movs	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	e001      	b.n	800b292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d102      	bne.n	800b29e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b298:	f001 f842 	bl	800c320 <xTimerCreateTimerTask>
 800b29c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d116      	bne.n	800b2d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2b8:	4b12      	ldr	r3, [pc, #72]	; (800b304 <vTaskStartScheduler+0xc0>)
 800b2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b2be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2c0:	4b11      	ldr	r3, [pc, #68]	; (800b308 <vTaskStartScheduler+0xc4>)
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2c6:	4b11      	ldr	r3, [pc, #68]	; (800b30c <vTaskStartScheduler+0xc8>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2cc:	f001 fcb8 	bl	800cc40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2d0:	e00e      	b.n	800b2f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d10a      	bne.n	800b2f0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	60fb      	str	r3, [r7, #12]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <vTaskStartScheduler+0xaa>
}
 800b2f0:	bf00      	nop
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	0800efb8 	.word	0x0800efb8
 800b2fc:	0800b94d 	.word	0x0800b94d
 800b300:	200013ac 	.word	0x200013ac
 800b304:	200013a8 	.word	0x200013a8
 800b308:	20001394 	.word	0x20001394
 800b30c:	2000138c 	.word	0x2000138c

0800b310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b310:	b480      	push	{r7}
 800b312:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <vTaskSuspendAll+0x18>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3301      	adds	r3, #1
 800b31a:	4a03      	ldr	r2, [pc, #12]	; (800b328 <vTaskSuspendAll+0x18>)
 800b31c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b31e:	bf00      	nop
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	200013b0 	.word	0x200013b0

0800b32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b336:	2300      	movs	r3, #0
 800b338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b33a:	4b42      	ldr	r3, [pc, #264]	; (800b444 <xTaskResumeAll+0x118>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <xTaskResumeAll+0x2c>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	603b      	str	r3, [r7, #0]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b358:	f001 fd14 	bl	800cd84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b35c:	4b39      	ldr	r3, [pc, #228]	; (800b444 <xTaskResumeAll+0x118>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3b01      	subs	r3, #1
 800b362:	4a38      	ldr	r2, [pc, #224]	; (800b444 <xTaskResumeAll+0x118>)
 800b364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <xTaskResumeAll+0x118>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d162      	bne.n	800b434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b36e:	4b36      	ldr	r3, [pc, #216]	; (800b448 <xTaskResumeAll+0x11c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d05e      	beq.n	800b434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b376:	e02f      	b.n	800b3d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b378:	4b34      	ldr	r3, [pc, #208]	; (800b44c <xTaskResumeAll+0x120>)
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3318      	adds	r3, #24
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fe5a 	bl	800a03e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3304      	adds	r3, #4
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fe55 	bl	800a03e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b398:	4b2d      	ldr	r3, [pc, #180]	; (800b450 <xTaskResumeAll+0x124>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <xTaskResumeAll+0x7c>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4a2a      	ldr	r2, [pc, #168]	; (800b450 <xTaskResumeAll+0x124>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4a27      	ldr	r2, [pc, #156]	; (800b454 <xTaskResumeAll+0x128>)
 800b3b6:	441a      	add	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe fde0 	bl	8009f84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	4b23      	ldr	r3, [pc, #140]	; (800b458 <xTaskResumeAll+0x12c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d302      	bcc.n	800b3d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3d2:	4b22      	ldr	r3, [pc, #136]	; (800b45c <xTaskResumeAll+0x130>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3d8:	4b1c      	ldr	r3, [pc, #112]	; (800b44c <xTaskResumeAll+0x120>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1cb      	bne.n	800b378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3e6:	f000 fb67 	bl	800bab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3ea:	4b1d      	ldr	r3, [pc, #116]	; (800b460 <xTaskResumeAll+0x134>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d010      	beq.n	800b418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3f6:	f000 f859 	bl	800b4ac <xTaskIncrementTick>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b400:	4b16      	ldr	r3, [pc, #88]	; (800b45c <xTaskResumeAll+0x130>)
 800b402:	2201      	movs	r2, #1
 800b404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3b01      	subs	r3, #1
 800b40a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1f1      	bne.n	800b3f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b412:	4b13      	ldr	r3, [pc, #76]	; (800b460 <xTaskResumeAll+0x134>)
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b418:	4b10      	ldr	r3, [pc, #64]	; (800b45c <xTaskResumeAll+0x130>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b420:	2301      	movs	r3, #1
 800b422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b424:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <xTaskResumeAll+0x138>)
 800b426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b434:	f001 fcd6 	bl	800cde4 <vPortExitCritical>

	return xAlreadyYielded;
 800b438:	68bb      	ldr	r3, [r7, #8]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	200013b0 	.word	0x200013b0
 800b448:	20001388 	.word	0x20001388
 800b44c:	20001348 	.word	0x20001348
 800b450:	20001390 	.word	0x20001390
 800b454:	20000eb8 	.word	0x20000eb8
 800b458:	20000eb4 	.word	0x20000eb4
 800b45c:	2000139c 	.word	0x2000139c
 800b460:	20001398 	.word	0x20001398
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b46e:	4b05      	ldr	r3, [pc, #20]	; (800b484 <xTaskGetTickCount+0x1c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b474:	687b      	ldr	r3, [r7, #4]
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	2000138c 	.word	0x2000138c

0800b488 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b48e:	f001 fd5b 	bl	800cf48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b492:	2300      	movs	r3, #0
 800b494:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b496:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <xTaskGetTickCountFromISR+0x20>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b49c:	683b      	ldr	r3, [r7, #0]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	2000138c 	.word	0x2000138c

0800b4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	; (800b5f4 <xTaskIncrementTick+0x148>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f040 808f 	bne.w	800b5de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4c0:	4b4d      	ldr	r3, [pc, #308]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4c8:	4a4b      	ldr	r2, [pc, #300]	; (800b5f8 <xTaskIncrementTick+0x14c>)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d120      	bne.n	800b516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4d4:	4b49      	ldr	r3, [pc, #292]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	603b      	str	r3, [r7, #0]
}
 800b4f0:	bf00      	nop
 800b4f2:	e7fe      	b.n	800b4f2 <xTaskIncrementTick+0x46>
 800b4f4:	4b41      	ldr	r3, [pc, #260]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	4b41      	ldr	r3, [pc, #260]	; (800b600 <xTaskIncrementTick+0x154>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a3f      	ldr	r2, [pc, #252]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	4a3f      	ldr	r2, [pc, #252]	; (800b600 <xTaskIncrementTick+0x154>)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <xTaskIncrementTick+0x158>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a3d      	ldr	r2, [pc, #244]	; (800b604 <xTaskIncrementTick+0x158>)
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	f000 fad1 	bl	800bab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b516:	4b3c      	ldr	r3, [pc, #240]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d349      	bcc.n	800b5b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b52a:	4b37      	ldr	r3, [pc, #220]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	601a      	str	r2, [r3, #0]
					break;
 800b532:	e03f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b534:	4b31      	ldr	r3, [pc, #196]	; (800b5fc <xTaskIncrementTick+0x150>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d203      	bcs.n	800b554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b54c:	4a2e      	ldr	r2, [pc, #184]	; (800b608 <xTaskIncrementTick+0x15c>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b552:	e02f      	b.n	800b5b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fd70 	bl	800a03e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d004      	beq.n	800b570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3318      	adds	r3, #24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fd67 	bl	800a03e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b574:	4b25      	ldr	r3, [pc, #148]	; (800b60c <xTaskIncrementTick+0x160>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d903      	bls.n	800b584 <xTaskIncrementTick+0xd8>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a22      	ldr	r2, [pc, #136]	; (800b60c <xTaskIncrementTick+0x160>)
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4613      	mov	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4a1f      	ldr	r2, [pc, #124]	; (800b610 <xTaskIncrementTick+0x164>)
 800b592:	441a      	add	r2, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	3304      	adds	r3, #4
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fe fcf2 	bl	8009f84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a4:	4b1b      	ldr	r3, [pc, #108]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d3b8      	bcc.n	800b520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b2:	e7b5      	b.n	800b520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5b4:	4b17      	ldr	r3, [pc, #92]	; (800b614 <xTaskIncrementTick+0x168>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	4915      	ldr	r1, [pc, #84]	; (800b610 <xTaskIncrementTick+0x164>)
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d901      	bls.n	800b5d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <xTaskIncrementTick+0x16c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e004      	b.n	800b5e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <xTaskIncrementTick+0x170>)
 800b5e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5e8:	697b      	ldr	r3, [r7, #20]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200013b0 	.word	0x200013b0
 800b5f8:	2000138c 	.word	0x2000138c
 800b5fc:	20001340 	.word	0x20001340
 800b600:	20001344 	.word	0x20001344
 800b604:	200013a0 	.word	0x200013a0
 800b608:	200013a8 	.word	0x200013a8
 800b60c:	20001390 	.word	0x20001390
 800b610:	20000eb8 	.word	0x20000eb8
 800b614:	20000eb4 	.word	0x20000eb4
 800b618:	2000139c 	.word	0x2000139c
 800b61c:	20001398 	.word	0x20001398

0800b620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b626:	4b28      	ldr	r3, [pc, #160]	; (800b6c8 <vTaskSwitchContext+0xa8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b62e:	4b27      	ldr	r3, [pc, #156]	; (800b6cc <vTaskSwitchContext+0xac>)
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b634:	e041      	b.n	800b6ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b636:	4b25      	ldr	r3, [pc, #148]	; (800b6cc <vTaskSwitchContext+0xac>)
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b63c:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <vTaskSwitchContext+0xb0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e010      	b.n	800b666 <vTaskSwitchContext+0x46>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <vTaskSwitchContext+0x40>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	607b      	str	r3, [r7, #4]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <vTaskSwitchContext+0x3e>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3b01      	subs	r3, #1
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	491b      	ldr	r1, [pc, #108]	; (800b6d4 <vTaskSwitchContext+0xb4>)
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d0e4      	beq.n	800b644 <vTaskSwitchContext+0x24>
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4a13      	ldr	r2, [pc, #76]	; (800b6d4 <vTaskSwitchContext+0xb4>)
 800b686:	4413      	add	r3, r2
 800b688:	60bb      	str	r3, [r7, #8]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	605a      	str	r2, [r3, #4]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	3308      	adds	r3, #8
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d104      	bne.n	800b6aa <vTaskSwitchContext+0x8a>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <vTaskSwitchContext+0xb8>)
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <vTaskSwitchContext+0xb0>)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6013      	str	r3, [r2, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	200013b0 	.word	0x200013b0
 800b6cc:	2000139c 	.word	0x2000139c
 800b6d0:	20001390 	.word	0x20001390
 800b6d4:	20000eb8 	.word	0x20000eb8
 800b6d8:	20000eb4 	.word	0x20000eb4

0800b6dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	60fb      	str	r3, [r7, #12]
}
 800b6fe:	bf00      	nop
 800b700:	e7fe      	b.n	800b700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <vTaskPlaceOnEventList+0x44>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3318      	adds	r3, #24
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7fe fc5e 	bl	8009fcc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b710:	2101      	movs	r1, #1
 800b712:	6838      	ldr	r0, [r7, #0]
 800b714:	f000 fdb0 	bl	800c278 <prvAddCurrentTaskToDelayedList>
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20000eb4 	.word	0x20000eb4

0800b724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	617b      	str	r3, [r7, #20]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <vTaskPlaceOnEventListRestricted+0x54>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3318      	adds	r3, #24
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7fe fc15 	bl	8009f84 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b760:	f04f 33ff 	mov.w	r3, #4294967295
 800b764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f000 fd85 	bl	800c278 <prvAddCurrentTaskToDelayedList>
	}
 800b76e:	bf00      	nop
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000eb4 	.word	0x20000eb4

0800b77c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60fb      	str	r3, [r7, #12]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fc46 	bl	800a03e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7b2:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <xTaskRemoveFromEventList+0xb0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d11d      	bne.n	800b7f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fe fc3d 	bl	800a03e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	4b19      	ldr	r3, [pc, #100]	; (800b830 <xTaskRemoveFromEventList+0xb4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d903      	bls.n	800b7d8 <xTaskRemoveFromEventList+0x5c>
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d4:	4a16      	ldr	r2, [pc, #88]	; (800b830 <xTaskRemoveFromEventList+0xb4>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a13      	ldr	r2, [pc, #76]	; (800b834 <xTaskRemoveFromEventList+0xb8>)
 800b7e6:	441a      	add	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7fe fbc8 	bl	8009f84 <vListInsertEnd>
 800b7f4:	e005      	b.n	800b802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	480e      	ldr	r0, [pc, #56]	; (800b838 <xTaskRemoveFromEventList+0xbc>)
 800b7fe:	f7fe fbc1 	bl	8009f84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b806:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <xTaskRemoveFromEventList+0xc0>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d905      	bls.n	800b81c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <xTaskRemoveFromEventList+0xc4>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	e001      	b.n	800b820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b820:	697b      	ldr	r3, [r7, #20]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	200013b0 	.word	0x200013b0
 800b830:	20001390 	.word	0x20001390
 800b834:	20000eb8 	.word	0x20000eb8
 800b838:	20001348 	.word	0x20001348
 800b83c:	20000eb4 	.word	0x20000eb4
 800b840:	2000139c 	.word	0x2000139c

0800b844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <vTaskInternalSetTimeOutState+0x24>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <vTaskInternalSetTimeOutState+0x28>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	605a      	str	r2, [r3, #4]
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	200013a0 	.word	0x200013a0
 800b86c:	2000138c 	.word	0x2000138c

0800b870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	613b      	str	r3, [r7, #16]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60fb      	str	r3, [r7, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8b2:	f001 fa67 	bl	800cd84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <xTaskCheckForTimeOut+0xbc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ce:	d102      	bne.n	800b8d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
 800b8d4:	e023      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b15      	ldr	r3, [pc, #84]	; (800b930 <xTaskCheckForTimeOut+0xc0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d007      	beq.n	800b8f2 <xTaskCheckForTimeOut+0x82>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d302      	bcc.n	800b8f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e015      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d20b      	bcs.n	800b914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	1ad2      	subs	r2, r2, r3
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff ff9b 	bl	800b844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e004      	b.n	800b91e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b91a:	2301      	movs	r3, #1
 800b91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b91e:	f001 fa61 	bl	800cde4 <vPortExitCritical>

	return xReturn;
 800b922:	69fb      	ldr	r3, [r7, #28]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3720      	adds	r7, #32
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000138c 	.word	0x2000138c
 800b930:	200013a0 	.word	0x200013a0

0800b934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b938:	4b03      	ldr	r3, [pc, #12]	; (800b948 <vTaskMissedYield+0x14>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
}
 800b93e:	bf00      	nop
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	2000139c 	.word	0x2000139c

0800b94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b954:	f000 f852 	bl	800b9fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b958:	4b06      	ldr	r3, [pc, #24]	; (800b974 <prvIdleTask+0x28>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d9f9      	bls.n	800b954 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b960:	4b05      	ldr	r3, [pc, #20]	; (800b978 <prvIdleTask+0x2c>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b970:	e7f0      	b.n	800b954 <prvIdleTask+0x8>
 800b972:	bf00      	nop
 800b974:	20000eb8 	.word	0x20000eb8
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
 800b986:	e00c      	b.n	800b9a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a12      	ldr	r2, [pc, #72]	; (800b9dc <prvInitialiseTaskLists+0x60>)
 800b994:	4413      	add	r3, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fac7 	bl	8009f2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	607b      	str	r3, [r7, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b37      	cmp	r3, #55	; 0x37
 800b9a6:	d9ef      	bls.n	800b988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9a8:	480d      	ldr	r0, [pc, #52]	; (800b9e0 <prvInitialiseTaskLists+0x64>)
 800b9aa:	f7fe fabe 	bl	8009f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9ae:	480d      	ldr	r0, [pc, #52]	; (800b9e4 <prvInitialiseTaskLists+0x68>)
 800b9b0:	f7fe fabb 	bl	8009f2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9b4:	480c      	ldr	r0, [pc, #48]	; (800b9e8 <prvInitialiseTaskLists+0x6c>)
 800b9b6:	f7fe fab8 	bl	8009f2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9ba:	480c      	ldr	r0, [pc, #48]	; (800b9ec <prvInitialiseTaskLists+0x70>)
 800b9bc:	f7fe fab5 	bl	8009f2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9c0:	480b      	ldr	r0, [pc, #44]	; (800b9f0 <prvInitialiseTaskLists+0x74>)
 800b9c2:	f7fe fab2 	bl	8009f2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9c6:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <prvInitialiseTaskLists+0x78>)
 800b9c8:	4a05      	ldr	r2, [pc, #20]	; (800b9e0 <prvInitialiseTaskLists+0x64>)
 800b9ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvInitialiseTaskLists+0x7c>)
 800b9ce:	4a05      	ldr	r2, [pc, #20]	; (800b9e4 <prvInitialiseTaskLists+0x68>)
 800b9d0:	601a      	str	r2, [r3, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000eb8 	.word	0x20000eb8
 800b9e0:	20001318 	.word	0x20001318
 800b9e4:	2000132c 	.word	0x2000132c
 800b9e8:	20001348 	.word	0x20001348
 800b9ec:	2000135c 	.word	0x2000135c
 800b9f0:	20001374 	.word	0x20001374
 800b9f4:	20001340 	.word	0x20001340
 800b9f8:	20001344 	.word	0x20001344

0800b9fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba02:	e019      	b.n	800ba38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba04:	f001 f9be 	bl	800cd84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba08:	4b10      	ldr	r3, [pc, #64]	; (800ba4c <prvCheckTasksWaitingTermination+0x50>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fb12 	bl	800a03e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <prvCheckTasksWaitingTermination+0x54>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	4a0b      	ldr	r2, [pc, #44]	; (800ba50 <prvCheckTasksWaitingTermination+0x54>)
 800ba22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba24:	4b0b      	ldr	r3, [pc, #44]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4a0a      	ldr	r2, [pc, #40]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba2e:	f001 f9d9 	bl	800cde4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f810 	bl	800ba58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <prvCheckTasksWaitingTermination+0x58>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e1      	bne.n	800ba04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	2000135c 	.word	0x2000135c
 800ba50:	20001388 	.word	0x20001388
 800ba54:	20001370 	.word	0x20001370

0800ba58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d108      	bne.n	800ba7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fb76 	bl	800d160 <vPortFree>
				vPortFree( pxTCB );
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 fb73 	bl	800d160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba7a:	e018      	b.n	800baae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d103      	bne.n	800ba8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 fb6a 	bl	800d160 <vPortFree>
	}
 800ba8c:	e00f      	b.n	800baae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d00a      	beq.n	800baae <prvDeleteTCB+0x56>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <prvDeleteTCB+0x54>
	}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800babe:	4b0c      	ldr	r3, [pc, #48]	; (800baf0 <prvResetNextTaskUnblockTime+0x38>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d104      	bne.n	800bad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bac8:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <prvResetNextTaskUnblockTime+0x3c>)
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bad0:	e008      	b.n	800bae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad2:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <prvResetNextTaskUnblockTime+0x38>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	4a04      	ldr	r2, [pc, #16]	; (800baf4 <prvResetNextTaskUnblockTime+0x3c>)
 800bae2:	6013      	str	r3, [r2, #0]
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	20001340 	.word	0x20001340
 800baf4:	200013a8 	.word	0x200013a8

0800baf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bafe:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <xTaskGetSchedulerState+0x34>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb06:	2301      	movs	r3, #1
 800bb08:	607b      	str	r3, [r7, #4]
 800bb0a:	e008      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0c:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <xTaskGetSchedulerState+0x38>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb14:	2302      	movs	r3, #2
 800bb16:	607b      	str	r3, [r7, #4]
 800bb18:	e001      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb1e:	687b      	ldr	r3, [r7, #4]
	}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20001394 	.word	0x20001394
 800bb30:	200013b0 	.word	0x200013b0

0800bb34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d051      	beq.n	800bbee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4e:	4b2a      	ldr	r3, [pc, #168]	; (800bbf8 <xTaskPriorityInherit+0xc4>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d241      	bcs.n	800bbdc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	db06      	blt.n	800bb6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb60:	4b25      	ldr	r3, [pc, #148]	; (800bbf8 <xTaskPriorityInherit+0xc4>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6959      	ldr	r1, [r3, #20]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	4613      	mov	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4a1f      	ldr	r2, [pc, #124]	; (800bbfc <xTaskPriorityInherit+0xc8>)
 800bb80:	4413      	add	r3, r2
 800bb82:	4299      	cmp	r1, r3
 800bb84:	d122      	bne.n	800bbcc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	3304      	adds	r3, #4
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe fa57 	bl	800a03e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb90:	4b19      	ldr	r3, [pc, #100]	; (800bbf8 <xTaskPriorityInherit+0xc4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9e:	4b18      	ldr	r3, [pc, #96]	; (800bc00 <xTaskPriorityInherit+0xcc>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d903      	bls.n	800bbae <xTaskPriorityInherit+0x7a>
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbaa:	4a15      	ldr	r2, [pc, #84]	; (800bc00 <xTaskPriorityInherit+0xcc>)
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4a10      	ldr	r2, [pc, #64]	; (800bbfc <xTaskPriorityInherit+0xc8>)
 800bbbc:	441a      	add	r2, r3
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fe f9dd 	bl	8009f84 <vListInsertEnd>
 800bbca:	e004      	b.n	800bbd6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbcc:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <xTaskPriorityInherit+0xc4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e008      	b.n	800bbee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <xTaskPriorityInherit+0xc4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d201      	bcs.n	800bbee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bbea:	2301      	movs	r3, #1
 800bbec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbee:	68fb      	ldr	r3, [r7, #12]
	}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20000eb4 	.word	0x20000eb4
 800bbfc:	20000eb8 	.word	0x20000eb8
 800bc00:	20001390 	.word	0x20001390

0800bc04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc10:	2300      	movs	r3, #0
 800bc12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d056      	beq.n	800bcc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc1a:	4b2e      	ldr	r3, [pc, #184]	; (800bcd4 <xTaskPriorityDisinherit+0xd0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d00a      	beq.n	800bc3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	60fb      	str	r3, [r7, #12]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	60bb      	str	r3, [r7, #8]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc5c:	1e5a      	subs	r2, r3, #1
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d02c      	beq.n	800bcc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d128      	bne.n	800bcc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	3304      	adds	r3, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fe f9df 	bl	800a03e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc98:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <xTaskPriorityDisinherit+0xd4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d903      	bls.n	800bca8 <xTaskPriorityDisinherit+0xa4>
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca4:	4a0c      	ldr	r2, [pc, #48]	; (800bcd8 <xTaskPriorityDisinherit+0xd4>)
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4a09      	ldr	r2, [pc, #36]	; (800bcdc <xTaskPriorityDisinherit+0xd8>)
 800bcb6:	441a      	add	r2, r3
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	f7fe f960 	bl	8009f84 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcc8:	697b      	ldr	r3, [r7, #20]
	}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000eb4 	.word	0x20000eb4
 800bcd8:	20001390 	.word	0x20001390
 800bcdc:	20000eb8 	.word	0x20000eb8

0800bce0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d06a      	beq.n	800bdce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10a      	bne.n	800bd16 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	60fb      	str	r3, [r7, #12]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d902      	bls.n	800bd26 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	61fb      	str	r3, [r7, #28]
 800bd24:	e002      	b.n	800bd2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d04b      	beq.n	800bdce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d146      	bne.n	800bdce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bd40:	4b25      	ldr	r3, [pc, #148]	; (800bdd8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d10a      	bne.n	800bd60 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	60bb      	str	r3, [r7, #8]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	69fa      	ldr	r2, [r7, #28]
 800bd6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	db04      	blt.n	800bd7e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	6959      	ldr	r1, [r3, #20]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	4613      	mov	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4413      	add	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4a13      	ldr	r2, [pc, #76]	; (800bddc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bd8e:	4413      	add	r3, r2
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d11c      	bne.n	800bdce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fe f950 	bl	800a03e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda2:	4b0f      	ldr	r3, [pc, #60]	; (800bde0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d903      	bls.n	800bdb2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	4a0c      	ldr	r2, [pc, #48]	; (800bde0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bdb0:	6013      	str	r3, [r2, #0]
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4a07      	ldr	r2, [pc, #28]	; (800bddc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bdc0:	441a      	add	r2, r3
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	3304      	adds	r3, #4
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4610      	mov	r0, r2
 800bdca:	f7fe f8db 	bl	8009f84 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdce:	bf00      	nop
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000eb4 	.word	0x20000eb4
 800bddc:	20000eb8 	.word	0x20000eb8
 800bde0:	20001390 	.word	0x20001390

0800bde4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bde8:	4b07      	ldr	r3, [pc, #28]	; (800be08 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d004      	beq.n	800bdfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bdfa:	4b03      	ldr	r3, [pc, #12]	; (800be08 <pvTaskIncrementMutexHeldCount+0x24>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
	}
 800bdfe:	4618      	mov	r0, r3
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	20000eb4 	.word	0x20000eb4

0800be0c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800be16:	f000 ffb5 	bl	800cd84 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800be1a:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	2b00      	cmp	r3, #0
 800be22:	d113      	bne.n	800be4c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800be24:	4b1b      	ldr	r3, [pc, #108]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2201      	movs	r2, #1
 800be2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be34:	2101      	movs	r1, #1
 800be36:	6838      	ldr	r0, [r7, #0]
 800be38:	f000 fa1e 	bl	800c278 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800be3c:	4b16      	ldr	r3, [pc, #88]	; (800be98 <ulTaskNotifyTake+0x8c>)
 800be3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800be4c:	f000 ffca 	bl	800cde4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800be50:	f000 ff98 	bl	800cd84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800be54:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00c      	beq.n	800be7c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d004      	beq.n	800be72 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2200      	movs	r2, #0
 800be6e:	655a      	str	r2, [r3, #84]	; 0x54
 800be70:	e004      	b.n	800be7c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800be72:	4b08      	ldr	r3, [pc, #32]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	3a01      	subs	r2, #1
 800be7a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <ulTaskNotifyTake+0x88>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800be86:	f000 ffad 	bl	800cde4 <vPortExitCritical>

		return ulReturn;
 800be8a:	68fb      	ldr	r3, [r7, #12]
	}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20000eb4 	.word	0x20000eb4
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800beaa:	f000 ff6b 	bl	800cd84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800beae:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <xTaskNotifyWait+0xac>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d01a      	beq.n	800bef2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bebc:	4b22      	ldr	r3, [pc, #136]	; (800bf48 <xTaskNotifyWait+0xac>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	43d2      	mvns	r2, r2
 800bec6:	400a      	ands	r2, r1
 800bec8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800beca:	4b1f      	ldr	r3, [pc, #124]	; (800bf48 <xTaskNotifyWait+0xac>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800beda:	2101      	movs	r1, #1
 800bedc:	6838      	ldr	r0, [r7, #0]
 800bede:	f000 f9cb 	bl	800c278 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bee2:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <xTaskNotifyWait+0xb0>)
 800bee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bef2:	f000 ff77 	bl	800cde4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bef6:	f000 ff45 	bl	800cd84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d004      	beq.n	800bf0a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bf00:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <xTaskNotifyWait+0xac>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf0a:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <xTaskNotifyWait+0xac>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d002      	beq.n	800bf1e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	e008      	b.n	800bf30 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bf1e:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <xTaskNotifyWait+0xac>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	43d2      	mvns	r2, r2
 800bf28:	400a      	ands	r2, r1
 800bf2a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <xTaskNotifyWait+0xac>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bf3a:	f000 ff53 	bl	800cde4 <vPortExitCritical>

		return xReturn;
 800bf3e:	697b      	ldr	r3, [r7, #20]
	}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000eb4 	.word	0x20000eb4
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08a      	sub	sp, #40	; 0x28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bf60:	2301      	movs	r3, #1
 800bf62:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xTaskGenericNotify+0x30>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	61bb      	str	r3, [r7, #24]
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bf84:	f000 fefe 	bl	800cd84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bf96:	6a3b      	ldr	r3, [r7, #32]
 800bf98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf9c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d828      	bhi.n	800bffe <xTaskGenericNotify+0xae>
 800bfac:	a201      	add	r2, pc, #4	; (adr r2, 800bfb4 <xTaskGenericNotify+0x64>)
 800bfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb2:	bf00      	nop
 800bfb4:	0800c01f 	.word	0x0800c01f
 800bfb8:	0800bfc9 	.word	0x0800bfc9
 800bfbc:	0800bfd7 	.word	0x0800bfd7
 800bfc0:	0800bfe3 	.word	0x0800bfe3
 800bfc4:	0800bfeb 	.word	0x0800bfeb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfd4:	e026      	b.n	800c024 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfe0:	e020      	b.n	800c024 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bfe8:	e01c      	b.n	800c024 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bfea:	7ffb      	ldrb	r3, [r7, #31]
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d003      	beq.n	800bff8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bff6:	e015      	b.n	800c024 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bffc:	e012      	b.n	800c024 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c006:	d00c      	beq.n	800c022 <xTaskGenericNotify+0xd2>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	617b      	str	r3, [r7, #20]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <xTaskGenericNotify+0xcc>
					break;
 800c01e:	bf00      	nop
 800c020:	e000      	b.n	800c024 <xTaskGenericNotify+0xd4>

					break;
 800c022:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c024:	7ffb      	ldrb	r3, [r7, #31]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d13a      	bne.n	800c0a0 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	3304      	adds	r3, #4
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe f805 	bl	800a03e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c038:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <xTaskGenericNotify+0x160>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d903      	bls.n	800c048 <xTaskGenericNotify+0xf8>
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	4a1a      	ldr	r2, [pc, #104]	; (800c0b0 <xTaskGenericNotify+0x160>)
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4a17      	ldr	r2, [pc, #92]	; (800c0b4 <xTaskGenericNotify+0x164>)
 800c056:	441a      	add	r2, r3
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	3304      	adds	r3, #4
 800c05c:	4619      	mov	r1, r3
 800c05e:	4610      	mov	r0, r2
 800c060:	f7fd ff90 	bl	8009f84 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00a      	beq.n	800c082 <xTaskGenericNotify+0x132>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	613b      	str	r3, [r7, #16]
}
 800c07e:	bf00      	nop
 800c080:	e7fe      	b.n	800c080 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c086:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <xTaskGenericNotify+0x168>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d907      	bls.n	800c0a0 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <xTaskGenericNotify+0x16c>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c0a0:	f000 fea0 	bl	800cde4 <vPortExitCritical>

		return xReturn;
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3728      	adds	r7, #40	; 0x28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20001390 	.word	0x20001390
 800c0b4:	20000eb8 	.word	0x20000eb8
 800c0b8:	20000eb4 	.word	0x20000eb4
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08e      	sub	sp, #56	; 0x38
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0f0:	f000 ff2a 	bl	800cf48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c0f8:	f3ef 8211 	mrs	r2, BASEPRI
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	623a      	str	r2, [r7, #32]
 800c10e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c110:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	2202      	movs	r2, #2
 800c130:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	2b04      	cmp	r3, #4
 800c138:	d828      	bhi.n	800c18c <xTaskGenericNotifyFromISR+0xcc>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <xTaskGenericNotifyFromISR+0x80>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c1ad 	.word	0x0800c1ad
 800c144:	0800c155 	.word	0x0800c155
 800c148:	0800c163 	.word	0x0800c163
 800c14c:	0800c16f 	.word	0x0800c16f
 800c150:	0800c177 	.word	0x0800c177
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c160:	e027      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c16c:	e021      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c174:	e01d      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d003      	beq.n	800c186 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c184:	e015      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c186:	2300      	movs	r3, #0
 800c188:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c18a:	e012      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d00c      	beq.n	800c1b0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	61bb      	str	r3, [r7, #24]
}
 800c1a8:	bf00      	nop
 800c1aa:	e7fe      	b.n	800c1aa <xTaskGenericNotifyFromISR+0xea>
					break;
 800c1ac:	bf00      	nop
 800c1ae:	e000      	b.n	800c1b2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c1b0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d146      	bne.n	800c248 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	617b      	str	r3, [r7, #20]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d8:	4b21      	ldr	r3, [pc, #132]	; (800c260 <xTaskGenericNotifyFromISR+0x1a0>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11d      	bne.n	800c21c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fd ff2a 	bl	800a03e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ee:	4b1d      	ldr	r3, [pc, #116]	; (800c264 <xTaskGenericNotifyFromISR+0x1a4>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d903      	bls.n	800c1fe <xTaskGenericNotifyFromISR+0x13e>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fa:	4a1a      	ldr	r2, [pc, #104]	; (800c264 <xTaskGenericNotifyFromISR+0x1a4>)
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a17      	ldr	r2, [pc, #92]	; (800c268 <xTaskGenericNotifyFromISR+0x1a8>)
 800c20c:	441a      	add	r2, r3
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	3304      	adds	r3, #4
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fd feb5 	bl	8009f84 <vListInsertEnd>
 800c21a:	e005      	b.n	800c228 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	3318      	adds	r3, #24
 800c220:	4619      	mov	r1, r3
 800c222:	4812      	ldr	r0, [pc, #72]	; (800c26c <xTaskGenericNotifyFromISR+0x1ac>)
 800c224:	f7fd feae 	bl	8009f84 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22c:	4b10      	ldr	r3, [pc, #64]	; (800c270 <xTaskGenericNotifyFromISR+0x1b0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	429a      	cmp	r2, r3
 800c234:	d908      	bls.n	800c248 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23e:	2201      	movs	r2, #1
 800c240:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c242:	4b0c      	ldr	r3, [pc, #48]	; (800c274 <xTaskGenericNotifyFromISR+0x1b4>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f383 8811 	msr	BASEPRI, r3
}
 800c252:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c256:	4618      	mov	r0, r3
 800c258:	3738      	adds	r7, #56	; 0x38
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	200013b0 	.word	0x200013b0
 800c264:	20001390 	.word	0x20001390
 800c268:	20000eb8 	.word	0x20000eb8
 800c26c:	20001348 	.word	0x20001348
 800c270:	20000eb4 	.word	0x20000eb4
 800c274:	2000139c 	.word	0x2000139c

0800c278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c282:	4b21      	ldr	r3, [pc, #132]	; (800c308 <prvAddCurrentTaskToDelayedList+0x90>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c288:	4b20      	ldr	r3, [pc, #128]	; (800c30c <prvAddCurrentTaskToDelayedList+0x94>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3304      	adds	r3, #4
 800c28e:	4618      	mov	r0, r3
 800c290:	f7fd fed5 	bl	800a03e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d10a      	bne.n	800c2b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d007      	beq.n	800c2b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2a2:	4b1a      	ldr	r3, [pc, #104]	; (800c30c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4819      	ldr	r0, [pc, #100]	; (800c310 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2ac:	f7fd fe6a 	bl	8009f84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2b0:	e026      	b.n	800c300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2ba:	4b14      	ldr	r3, [pc, #80]	; (800c30c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d209      	bcs.n	800c2de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ca:	4b12      	ldr	r3, [pc, #72]	; (800c314 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4610      	mov	r0, r2
 800c2d8:	f7fd fe78 	bl	8009fcc <vListInsert>
}
 800c2dc:	e010      	b.n	800c300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2de:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	f7fd fe6e 	bl	8009fcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d202      	bcs.n	800c300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2fa:	4a08      	ldr	r2, [pc, #32]	; (800c31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	6013      	str	r3, [r2, #0]
}
 800c300:	bf00      	nop
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	2000138c 	.word	0x2000138c
 800c30c:	20000eb4 	.word	0x20000eb4
 800c310:	20001374 	.word	0x20001374
 800c314:	20001344 	.word	0x20001344
 800c318:	20001340 	.word	0x20001340
 800c31c:	200013a8 	.word	0x200013a8

0800c320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08a      	sub	sp, #40	; 0x28
 800c324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c326:	2300      	movs	r3, #0
 800c328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c32a:	f000 fba1 	bl	800ca70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c32e:	4b1c      	ldr	r3, [pc, #112]	; (800c3a0 <xTimerCreateTimerTask+0x80>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d021      	beq.n	800c37a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c33e:	1d3a      	adds	r2, r7, #4
 800c340:	f107 0108 	add.w	r1, r7, #8
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd fd83 	bl	8009e54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c34e:	6879      	ldr	r1, [r7, #4]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	9202      	str	r2, [sp, #8]
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	2302      	movs	r3, #2
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	2300      	movs	r3, #0
 800c35e:	460a      	mov	r2, r1
 800c360:	4910      	ldr	r1, [pc, #64]	; (800c3a4 <xTimerCreateTimerTask+0x84>)
 800c362:	4811      	ldr	r0, [pc, #68]	; (800c3a8 <xTimerCreateTimerTask+0x88>)
 800c364:	f7fe fd98 	bl	800ae98 <xTaskCreateStatic>
 800c368:	4603      	mov	r3, r0
 800c36a:	4a10      	ldr	r2, [pc, #64]	; (800c3ac <xTimerCreateTimerTask+0x8c>)
 800c36c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c36e:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <xTimerCreateTimerTask+0x8c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c376:	2301      	movs	r3, #1
 800c378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	e7fe      	b.n	800c394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c396:	697b      	ldr	r3, [r7, #20]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200013e4 	.word	0x200013e4
 800c3a4:	0800efc0 	.word	0x0800efc0
 800c3a8:	0800c619 	.word	0x0800c619
 800c3ac:	200013e8 	.word	0x200013e8

0800c3b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c3be:	202c      	movs	r0, #44	; 0x2c
 800c3c0:	f000 fe02 	bl	800cfc8 <pvPortMalloc>
 800c3c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00d      	beq.n	800c3e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	68b9      	ldr	r1, [r7, #8]
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f000 f843 	bl	800c46e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c3e8:	697b      	ldr	r3, [r7, #20]
	}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b08a      	sub	sp, #40	; 0x28
 800c3f6:	af02      	add	r7, sp, #8
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c400:	232c      	movs	r3, #44	; 0x2c
 800c402:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b2c      	cmp	r3, #44	; 0x2c
 800c408:	d00a      	beq.n	800c420 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	61bb      	str	r3, [r7, #24]
}
 800c41c:	bf00      	nop
 800c41e:	e7fe      	b.n	800c41e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c420:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10a      	bne.n	800c43e <xTimerCreateStatic+0x4c>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	617b      	str	r3, [r7, #20]
}
 800c43a:	bf00      	nop
 800c43c:	e7fe      	b.n	800c43c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00d      	beq.n	800c464 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 f805 	bl	800c46e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c464:	69fb      	ldr	r3, [r7, #28]
	}
 800c466:	4618      	mov	r0, r3
 800c468:	3720      	adds	r7, #32
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b086      	sub	sp, #24
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10a      	bne.n	800c498 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	617b      	str	r3, [r7, #20]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d01e      	beq.n	800c4dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c49e:	f000 fae7 	bl	800ca70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	6a3a      	ldr	r2, [r7, #32]
 800c4b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fd fd53 	bl	8009f6a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d008      	beq.n	800c4dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d0:	f043 0304 	orr.w	r3, r3, #4
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c4dc:	bf00      	nop
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	623b      	str	r3, [r7, #32]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c512:	4b1a      	ldr	r3, [pc, #104]	; (800c57c <xTimerGenericCommand+0x98>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d02a      	beq.n	800c570 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b05      	cmp	r3, #5
 800c52a:	dc18      	bgt.n	800c55e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c52c:	f7ff fae4 	bl	800baf8 <xTaskGetSchedulerState>
 800c530:	4603      	mov	r3, r0
 800c532:	2b02      	cmp	r3, #2
 800c534:	d109      	bne.n	800c54a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c536:	4b11      	ldr	r3, [pc, #68]	; (800c57c <xTimerGenericCommand+0x98>)
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f107 0110 	add.w	r1, r7, #16
 800c53e:	2300      	movs	r3, #0
 800c540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c542:	f7fd ff4f 	bl	800a3e4 <xQueueGenericSend>
 800c546:	6278      	str	r0, [r7, #36]	; 0x24
 800c548:	e012      	b.n	800c570 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c54a:	4b0c      	ldr	r3, [pc, #48]	; (800c57c <xTimerGenericCommand+0x98>)
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	f107 0110 	add.w	r1, r7, #16
 800c552:	2300      	movs	r3, #0
 800c554:	2200      	movs	r2, #0
 800c556:	f7fd ff45 	bl	800a3e4 <xQueueGenericSend>
 800c55a:	6278      	str	r0, [r7, #36]	; 0x24
 800c55c:	e008      	b.n	800c570 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c55e:	4b07      	ldr	r3, [pc, #28]	; (800c57c <xTimerGenericCommand+0x98>)
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f107 0110 	add.w	r1, r7, #16
 800c566:	2300      	movs	r3, #0
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	f7fe f839 	bl	800a5e0 <xQueueGenericSendFromISR>
 800c56e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c572:	4618      	mov	r0, r3
 800c574:	3728      	adds	r7, #40	; 0x28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200013e4 	.word	0x200013e4

0800c580 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af02      	add	r7, sp, #8
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c58a:	4b22      	ldr	r3, [pc, #136]	; (800c614 <prvProcessExpiredTimer+0x94>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fd fd50 	bl	800a03e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d022      	beq.n	800c5f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	699a      	ldr	r2, [r3, #24]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	18d1      	adds	r1, r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	6978      	ldr	r0, [r7, #20]
 800c5ba:	f000 f8d1 	bl	800c760 <prvInsertTimerInActiveList>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d01f      	beq.n	800c604 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f7ff ff88 	bl	800c4e4 <xTimerGenericCommand>
 800c5d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d113      	bne.n	800c604 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	60fb      	str	r3, [r7, #12]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	6978      	ldr	r0, [r7, #20]
 800c60a:	4798      	blx	r3
}
 800c60c:	bf00      	nop
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	200013dc 	.word	0x200013dc

0800c618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c620:	f107 0308 	add.w	r3, r7, #8
 800c624:	4618      	mov	r0, r3
 800c626:	f000 f857 	bl	800c6d8 <prvGetNextExpireTime>
 800c62a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	4619      	mov	r1, r3
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f803 	bl	800c63c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c636:	f000 f8d5 	bl	800c7e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c63a:	e7f1      	b.n	800c620 <prvTimerTask+0x8>

0800c63c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c646:	f7fe fe63 	bl	800b310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c64a:	f107 0308 	add.w	r3, r7, #8
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 f866 	bl	800c720 <prvSampleTimeNow>
 800c654:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d130      	bne.n	800c6be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <prvProcessTimerOrBlockTask+0x3c>
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	429a      	cmp	r2, r3
 800c668:	d806      	bhi.n	800c678 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c66a:	f7fe fe5f 	bl	800b32c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c66e:	68f9      	ldr	r1, [r7, #12]
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff ff85 	bl	800c580 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c676:	e024      	b.n	800c6c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d008      	beq.n	800c690 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c67e:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <prvProcessTimerOrBlockTask+0x90>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <prvProcessTimerOrBlockTask+0x50>
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <prvProcessTimerOrBlockTask+0x52>
 800c68c:	2300      	movs	r3, #0
 800c68e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c690:	4b0f      	ldr	r3, [pc, #60]	; (800c6d0 <prvProcessTimerOrBlockTask+0x94>)
 800c692:	6818      	ldr	r0, [r3, #0]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f7fe fbc7 	bl	800ae30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6a2:	f7fe fe43 	bl	800b32c <xTaskResumeAll>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10a      	bne.n	800c6c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6ac:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <prvProcessTimerOrBlockTask+0x98>)
 800c6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	f3bf 8f6f 	isb	sy
}
 800c6bc:	e001      	b.n	800c6c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6be:	f7fe fe35 	bl	800b32c <xTaskResumeAll>
}
 800c6c2:	bf00      	nop
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	200013e0 	.word	0x200013e0
 800c6d0:	200013e4 	.word	0x200013e4
 800c6d4:	e000ed04 	.word	0xe000ed04

0800c6d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6e0:	4b0e      	ldr	r3, [pc, #56]	; (800c71c <prvGetNextExpireTime+0x44>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d101      	bne.n	800c6ee <prvGetNextExpireTime+0x16>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	e000      	b.n	800c6f0 <prvGetNextExpireTime+0x18>
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d105      	bne.n	800c708 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6fc:	4b07      	ldr	r3, [pc, #28]	; (800c71c <prvGetNextExpireTime+0x44>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	60fb      	str	r3, [r7, #12]
 800c706:	e001      	b.n	800c70c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c708:	2300      	movs	r3, #0
 800c70a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c70c:	68fb      	ldr	r3, [r7, #12]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	200013dc 	.word	0x200013dc

0800c720 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c728:	f7fe fe9e 	bl	800b468 <xTaskGetTickCount>
 800c72c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c72e:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <prvSampleTimeNow+0x3c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	429a      	cmp	r2, r3
 800c736:	d205      	bcs.n	800c744 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c738:	f000 f936 	bl	800c9a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	601a      	str	r2, [r3, #0]
 800c742:	e002      	b.n	800c74a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c74a:	4a04      	ldr	r2, [pc, #16]	; (800c75c <prvSampleTimeNow+0x3c>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c750:	68fb      	ldr	r3, [r7, #12]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	200013ec 	.word	0x200013ec

0800c760 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	68fa      	ldr	r2, [r7, #12]
 800c77c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	429a      	cmp	r2, r3
 800c784:	d812      	bhi.n	800c7ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	1ad2      	subs	r2, r2, r3
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	429a      	cmp	r2, r3
 800c792:	d302      	bcc.n	800c79a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c794:	2301      	movs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	e01b      	b.n	800c7d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c79a:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <prvInsertTimerInActiveList+0x7c>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	f7fd fc11 	bl	8009fcc <vListInsert>
 800c7aa:	e012      	b.n	800c7d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d206      	bcs.n	800c7c2 <prvInsertTimerInActiveList+0x62>
 800c7b4:	68ba      	ldr	r2, [r7, #8]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d302      	bcc.n	800c7c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e007      	b.n	800c7d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <prvInsertTimerInActiveList+0x80>)
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7fd fbfd 	bl	8009fcc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7d2:	697b      	ldr	r3, [r7, #20]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	200013e0 	.word	0x200013e0
 800c7e0:	200013dc 	.word	0x200013dc

0800c7e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08e      	sub	sp, #56	; 0x38
 800c7e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ea:	e0ca      	b.n	800c982 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da18      	bge.n	800c824 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7f2:	1d3b      	adds	r3, r7, #4
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10a      	bne.n	800c814 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	61fb      	str	r3, [r7, #28]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c81a:	6850      	ldr	r0, [r2, #4]
 800c81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c81e:	6892      	ldr	r2, [r2, #8]
 800c820:	4611      	mov	r1, r2
 800c822:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f2c0 80ab 	blt.w	800c982 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83a:	3304      	adds	r3, #4
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fd fbfe 	bl	800a03e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c842:	463b      	mov	r3, r7
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff ff6b 	bl	800c720 <prvSampleTimeNow>
 800c84a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b09      	cmp	r3, #9
 800c850:	f200 8096 	bhi.w	800c980 <prvProcessReceivedCommands+0x19c>
 800c854:	a201      	add	r2, pc, #4	; (adr r2, 800c85c <prvProcessReceivedCommands+0x78>)
 800c856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c85a:	bf00      	nop
 800c85c:	0800c885 	.word	0x0800c885
 800c860:	0800c885 	.word	0x0800c885
 800c864:	0800c885 	.word	0x0800c885
 800c868:	0800c8f9 	.word	0x0800c8f9
 800c86c:	0800c90d 	.word	0x0800c90d
 800c870:	0800c957 	.word	0x0800c957
 800c874:	0800c885 	.word	0x0800c885
 800c878:	0800c885 	.word	0x0800c885
 800c87c:	0800c8f9 	.word	0x0800c8f9
 800c880:	0800c90d 	.word	0x0800c90d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	18d1      	adds	r1, r2, r3
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a4:	f7ff ff5c 	bl	800c760 <prvInsertTimerInActiveList>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d069      	beq.n	800c982 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8bc:	f003 0304 	and.w	r3, r3, #4
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d05e      	beq.n	800c982 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	699b      	ldr	r3, [r3, #24]
 800c8ca:	441a      	add	r2, r3
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d6:	f7ff fe05 	bl	800c4e4 <xTimerGenericCommand>
 800c8da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d14f      	bne.n	800c982 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	61bb      	str	r3, [r7, #24]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8fe:	f023 0301 	bic.w	r3, r3, #1
 800c902:	b2da      	uxtb	r2, r3
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c90a:	e03a      	b.n	800c982 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c912:	f043 0301 	orr.w	r3, r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	617b      	str	r3, [r7, #20]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	699a      	ldr	r2, [r3, #24]
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	18d1      	adds	r1, r2, r3
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c950:	f7ff ff06 	bl	800c760 <prvInsertTimerInActiveList>
					break;
 800c954:	e015      	b.n	800c982 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d103      	bne.n	800c96c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c966:	f000 fbfb 	bl	800d160 <vPortFree>
 800c96a:	e00a      	b.n	800c982 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c972:	f023 0301 	bic.w	r3, r3, #1
 800c976:	b2da      	uxtb	r2, r3
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c97e:	e000      	b.n	800c982 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c980:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c982:	4b08      	ldr	r3, [pc, #32]	; (800c9a4 <prvProcessReceivedCommands+0x1c0>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	1d39      	adds	r1, r7, #4
 800c988:	2200      	movs	r2, #0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fd fec4 	bl	800a718 <xQueueReceive>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	f47f af2a 	bne.w	800c7ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	3730      	adds	r7, #48	; 0x30
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	200013e4 	.word	0x200013e4

0800c9a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b088      	sub	sp, #32
 800c9ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ae:	e048      	b.n	800ca42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9b0:	4b2d      	ldr	r3, [pc, #180]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ba:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fd fb38 	bl	800a03e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d02e      	beq.n	800ca42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d90e      	bls.n	800ca14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca02:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f7fd fadd 	bl	8009fcc <vListInsert>
 800ca12:	e016      	b.n	800ca42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca14:	2300      	movs	r3, #0
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7ff fd60 	bl	800c4e4 <xTimerGenericCommand>
 800ca24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	603b      	str	r3, [r7, #0]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca42:	4b09      	ldr	r3, [pc, #36]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1b1      	bne.n	800c9b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca4c:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca52:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <prvSwitchTimerLists+0xc4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a04      	ldr	r2, [pc, #16]	; (800ca68 <prvSwitchTimerLists+0xc0>)
 800ca58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca5a:	4a04      	ldr	r2, [pc, #16]	; (800ca6c <prvSwitchTimerLists+0xc4>)
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	6013      	str	r3, [r2, #0]
}
 800ca60:	bf00      	nop
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	200013dc 	.word	0x200013dc
 800ca6c:	200013e0 	.word	0x200013e0

0800ca70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca76:	f000 f985 	bl	800cd84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d120      	bne.n	800cac4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca82:	4814      	ldr	r0, [pc, #80]	; (800cad4 <prvCheckForValidListAndQueue+0x64>)
 800ca84:	f7fd fa51 	bl	8009f2a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca88:	4813      	ldr	r0, [pc, #76]	; (800cad8 <prvCheckForValidListAndQueue+0x68>)
 800ca8a:	f7fd fa4e 	bl	8009f2a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <prvCheckForValidListAndQueue+0x6c>)
 800ca90:	4a10      	ldr	r2, [pc, #64]	; (800cad4 <prvCheckForValidListAndQueue+0x64>)
 800ca92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca94:	4b12      	ldr	r3, [pc, #72]	; (800cae0 <prvCheckForValidListAndQueue+0x70>)
 800ca96:	4a10      	ldr	r2, [pc, #64]	; (800cad8 <prvCheckForValidListAndQueue+0x68>)
 800ca98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	4b11      	ldr	r3, [pc, #68]	; (800cae4 <prvCheckForValidListAndQueue+0x74>)
 800caa0:	4a11      	ldr	r2, [pc, #68]	; (800cae8 <prvCheckForValidListAndQueue+0x78>)
 800caa2:	2110      	movs	r1, #16
 800caa4:	200a      	movs	r0, #10
 800caa6:	f7fd fb5d 	bl	800a164 <xQueueGenericCreateStatic>
 800caaa:	4603      	mov	r3, r0
 800caac:	4a08      	ldr	r2, [pc, #32]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800caae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab8:	4b05      	ldr	r3, [pc, #20]	; (800cad0 <prvCheckForValidListAndQueue+0x60>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	490b      	ldr	r1, [pc, #44]	; (800caec <prvCheckForValidListAndQueue+0x7c>)
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f962 	bl	800ad88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cac4:	f000 f98e 	bl	800cde4 <vPortExitCritical>
}
 800cac8:	bf00      	nop
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	200013e4 	.word	0x200013e4
 800cad4:	200013b4 	.word	0x200013b4
 800cad8:	200013c8 	.word	0x200013c8
 800cadc:	200013dc 	.word	0x200013dc
 800cae0:	200013e0 	.word	0x200013e0
 800cae4:	20001490 	.word	0x20001490
 800cae8:	200013f0 	.word	0x200013f0
 800caec:	0800efc8 	.word	0x0800efc8

0800caf0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10a      	bne.n	800cb18 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	60fb      	str	r3, [r7, #12]
}
 800cb14:	bf00      	nop
 800cb16:	e7fe      	b.n	800cb16 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cb18:	f000 f934 	bl	800cd84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cb22:	f000 f95f 	bl	800cde4 <vPortExitCritical>

	return pvReturn;
 800cb26:	693b      	ldr	r3, [r7, #16]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3718      	adds	r7, #24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b04      	subs	r3, #4
 800cb40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3b04      	subs	r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f023 0201 	bic.w	r2, r3, #1
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3b04      	subs	r3, #4
 800cb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb60:	4a0c      	ldr	r2, [pc, #48]	; (800cb94 <pxPortInitialiseStack+0x64>)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3b14      	subs	r3, #20
 800cb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3b04      	subs	r3, #4
 800cb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f06f 0202 	mvn.w	r2, #2
 800cb7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3b20      	subs	r3, #32
 800cb84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb86:	68fb      	ldr	r3, [r7, #12]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	0800cb99 	.word	0x0800cb99

0800cb98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cba2:	4b12      	ldr	r3, [pc, #72]	; (800cbec <prvTaskExitError+0x54>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d00a      	beq.n	800cbc2 <prvTaskExitError+0x2a>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60fb      	str	r3, [r7, #12]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <prvTaskExitError+0x28>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	60bb      	str	r3, [r7, #8]
}
 800cbd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbd6:	bf00      	nop
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0fc      	beq.n	800cbd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	2000005c 	.word	0x2000005c

0800cbf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbf0:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <pxCurrentTCBConst2>)
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	6808      	ldr	r0, [r1, #0]
 800cbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfa:	f380 8809 	msr	PSP, r0
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f04f 0000 	mov.w	r0, #0
 800cc06:	f380 8811 	msr	BASEPRI, r0
 800cc0a:	4770      	bx	lr
 800cc0c:	f3af 8000 	nop.w

0800cc10 <pxCurrentTCBConst2>:
 800cc10:	20000eb4 	.word	0x20000eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop

0800cc18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc18:	4808      	ldr	r0, [pc, #32]	; (800cc3c <prvPortStartFirstTask+0x24>)
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	6800      	ldr	r0, [r0, #0]
 800cc1e:	f380 8808 	msr	MSP, r0
 800cc22:	f04f 0000 	mov.w	r0, #0
 800cc26:	f380 8814 	msr	CONTROL, r0
 800cc2a:	b662      	cpsie	i
 800cc2c:	b661      	cpsie	f
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	df00      	svc	0
 800cc38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc3a:	bf00      	nop
 800cc3c:	e000ed08 	.word	0xe000ed08

0800cc40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc46:	4b46      	ldr	r3, [pc, #280]	; (800cd60 <xPortStartScheduler+0x120>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a46      	ldr	r2, [pc, #280]	; (800cd64 <xPortStartScheduler+0x124>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d10a      	bne.n	800cc66 <xPortStartScheduler+0x26>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	613b      	str	r3, [r7, #16]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc66:	4b3e      	ldr	r3, [pc, #248]	; (800cd60 <xPortStartScheduler+0x120>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a3f      	ldr	r2, [pc, #252]	; (800cd68 <xPortStartScheduler+0x128>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d10a      	bne.n	800cc86 <xPortStartScheduler+0x46>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	60fb      	str	r3, [r7, #12]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc86:	4b39      	ldr	r3, [pc, #228]	; (800cd6c <xPortStartScheduler+0x12c>)
 800cc88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	22ff      	movs	r2, #255	; 0xff
 800cc96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cca0:	78fb      	ldrb	r3, [r7, #3]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	4b31      	ldr	r3, [pc, #196]	; (800cd70 <xPortStartScheduler+0x130>)
 800ccac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccae:	4b31      	ldr	r3, [pc, #196]	; (800cd74 <xPortStartScheduler+0x134>)
 800ccb0:	2207      	movs	r2, #7
 800ccb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccb4:	e009      	b.n	800ccca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ccb6:	4b2f      	ldr	r3, [pc, #188]	; (800cd74 <xPortStartScheduler+0x134>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	4a2d      	ldr	r2, [pc, #180]	; (800cd74 <xPortStartScheduler+0x134>)
 800ccbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccc0:	78fb      	ldrb	r3, [r7, #3]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccd2:	2b80      	cmp	r3, #128	; 0x80
 800ccd4:	d0ef      	beq.n	800ccb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccd6:	4b27      	ldr	r3, [pc, #156]	; (800cd74 <xPortStartScheduler+0x134>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1c3 0307 	rsb	r3, r3, #7
 800ccde:	2b04      	cmp	r3, #4
 800cce0:	d00a      	beq.n	800ccf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	60bb      	str	r3, [r7, #8]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccf8:	4b1e      	ldr	r3, [pc, #120]	; (800cd74 <xPortStartScheduler+0x134>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	4a1d      	ldr	r2, [pc, #116]	; (800cd74 <xPortStartScheduler+0x134>)
 800cd00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <xPortStartScheduler+0x134>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd0a:	4a1a      	ldr	r2, [pc, #104]	; (800cd74 <xPortStartScheduler+0x134>)
 800cd0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd16:	4b18      	ldr	r3, [pc, #96]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a17      	ldr	r2, [pc, #92]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd22:	4b15      	ldr	r3, [pc, #84]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a14      	ldr	r2, [pc, #80]	; (800cd78 <xPortStartScheduler+0x138>)
 800cd28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd2e:	f000 f8dd 	bl	800ceec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd32:	4b12      	ldr	r3, [pc, #72]	; (800cd7c <xPortStartScheduler+0x13c>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd38:	f000 f8fc 	bl	800cf34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd3c:	4b10      	ldr	r3, [pc, #64]	; (800cd80 <xPortStartScheduler+0x140>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a0f      	ldr	r2, [pc, #60]	; (800cd80 <xPortStartScheduler+0x140>)
 800cd42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd48:	f7ff ff66 	bl	800cc18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd4c:	f7fe fc68 	bl	800b620 <vTaskSwitchContext>
	prvTaskExitError();
 800cd50:	f7ff ff22 	bl	800cb98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	e000ed00 	.word	0xe000ed00
 800cd64:	410fc271 	.word	0x410fc271
 800cd68:	410fc270 	.word	0x410fc270
 800cd6c:	e000e400 	.word	0xe000e400
 800cd70:	200014e0 	.word	0x200014e0
 800cd74:	200014e4 	.word	0x200014e4
 800cd78:	e000ed20 	.word	0xe000ed20
 800cd7c:	2000005c 	.word	0x2000005c
 800cd80:	e000ef34 	.word	0xe000ef34

0800cd84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	607b      	str	r3, [r7, #4]
}
 800cd9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd9e:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <vPortEnterCritical+0x58>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	4a0d      	ldr	r2, [pc, #52]	; (800cddc <vPortEnterCritical+0x58>)
 800cda6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cda8:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <vPortEnterCritical+0x58>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d10f      	bne.n	800cdd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdb0:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <vPortEnterCritical+0x5c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00a      	beq.n	800cdd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	603b      	str	r3, [r7, #0]
}
 800cdcc:	bf00      	nop
 800cdce:	e7fe      	b.n	800cdce <vPortEnterCritical+0x4a>
	}
}
 800cdd0:	bf00      	nop
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	2000005c 	.word	0x2000005c
 800cde0:	e000ed04 	.word	0xe000ed04

0800cde4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdea:	4b12      	ldr	r3, [pc, #72]	; (800ce34 <vPortExitCritical+0x50>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10a      	bne.n	800ce08 <vPortExitCritical+0x24>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	607b      	str	r3, [r7, #4]
}
 800ce04:	bf00      	nop
 800ce06:	e7fe      	b.n	800ce06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce08:	4b0a      	ldr	r3, [pc, #40]	; (800ce34 <vPortExitCritical+0x50>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	4a09      	ldr	r2, [pc, #36]	; (800ce34 <vPortExitCritical+0x50>)
 800ce10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce12:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <vPortExitCritical+0x50>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d105      	bne.n	800ce26 <vPortExitCritical+0x42>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	f383 8811 	msr	BASEPRI, r3
}
 800ce24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce26:	bf00      	nop
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	2000005c 	.word	0x2000005c
	...

0800ce40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce40:	f3ef 8009 	mrs	r0, PSP
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <pxCurrentTCBConst>)
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	f01e 0f10 	tst.w	lr, #16
 800ce50:	bf08      	it	eq
 800ce52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5a:	6010      	str	r0, [r2, #0]
 800ce5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce64:	f380 8811 	msr	BASEPRI, r0
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f7fe fbd6 	bl	800b620 <vTaskSwitchContext>
 800ce74:	f04f 0000 	mov.w	r0, #0
 800ce78:	f380 8811 	msr	BASEPRI, r0
 800ce7c:	bc09      	pop	{r0, r3}
 800ce7e:	6819      	ldr	r1, [r3, #0]
 800ce80:	6808      	ldr	r0, [r1, #0]
 800ce82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce86:	f01e 0f10 	tst.w	lr, #16
 800ce8a:	bf08      	it	eq
 800ce8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce90:	f380 8809 	msr	PSP, r0
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	f3af 8000 	nop.w

0800cea0 <pxCurrentTCBConst>:
 800cea0:	20000eb4 	.word	0x20000eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop

0800cea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	607b      	str	r3, [r7, #4]
}
 800cec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cec2:	f7fe faf3 	bl	800b4ac <xTaskIncrementTick>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d003      	beq.n	800ced4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cecc:	4b06      	ldr	r3, [pc, #24]	; (800cee8 <xPortSysTickHandler+0x40>)
 800cece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	2300      	movs	r3, #0
 800ced6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	f383 8811 	msr	BASEPRI, r3
}
 800cede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	e000ed04 	.word	0xe000ed04

0800ceec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cef0:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <vPortSetupTimerInterrupt+0x34>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cef6:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <vPortSetupTimerInterrupt+0x38>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <vPortSetupTimerInterrupt+0x3c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <vPortSetupTimerInterrupt+0x40>)
 800cf02:	fba2 2303 	umull	r2, r3, r2, r3
 800cf06:	099b      	lsrs	r3, r3, #6
 800cf08:	4a09      	ldr	r2, [pc, #36]	; (800cf30 <vPortSetupTimerInterrupt+0x44>)
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf0e:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <vPortSetupTimerInterrupt+0x34>)
 800cf10:	2207      	movs	r2, #7
 800cf12:	601a      	str	r2, [r3, #0]
}
 800cf14:	bf00      	nop
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	e000e010 	.word	0xe000e010
 800cf24:	e000e018 	.word	0xe000e018
 800cf28:	20000050 	.word	0x20000050
 800cf2c:	10624dd3 	.word	0x10624dd3
 800cf30:	e000e014 	.word	0xe000e014

0800cf34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf44 <vPortEnableVFP+0x10>
 800cf38:	6801      	ldr	r1, [r0, #0]
 800cf3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf3e:	6001      	str	r1, [r0, #0]
 800cf40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf42:	bf00      	nop
 800cf44:	e000ed88 	.word	0xe000ed88

0800cf48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf4e:	f3ef 8305 	mrs	r3, IPSR
 800cf52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b0f      	cmp	r3, #15
 800cf58:	d914      	bls.n	800cf84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf5a:	4a17      	ldr	r2, [pc, #92]	; (800cfb8 <vPortValidateInterruptPriority+0x70>)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf64:	4b15      	ldr	r3, [pc, #84]	; (800cfbc <vPortValidateInterruptPriority+0x74>)
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	7afa      	ldrb	r2, [r7, #11]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d20a      	bcs.n	800cf84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	607b      	str	r3, [r7, #4]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf84:	4b0e      	ldr	r3, [pc, #56]	; (800cfc0 <vPortValidateInterruptPriority+0x78>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf8c:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <vPortValidateInterruptPriority+0x7c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d90a      	bls.n	800cfaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	603b      	str	r3, [r7, #0]
}
 800cfa6:	bf00      	nop
 800cfa8:	e7fe      	b.n	800cfa8 <vPortValidateInterruptPriority+0x60>
	}
 800cfaa:	bf00      	nop
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	e000e3f0 	.word	0xe000e3f0
 800cfbc:	200014e0 	.word	0x200014e0
 800cfc0:	e000ed0c 	.word	0xe000ed0c
 800cfc4:	200014e4 	.word	0x200014e4

0800cfc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfd4:	f7fe f99c 	bl	800b310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfd8:	4b5b      	ldr	r3, [pc, #364]	; (800d148 <pvPortMalloc+0x180>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfe0:	f000 f920 	bl	800d224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfe4:	4b59      	ldr	r3, [pc, #356]	; (800d14c <pvPortMalloc+0x184>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4013      	ands	r3, r2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f040 8093 	bne.w	800d118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d01d      	beq.n	800d034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cff8:	2208      	movs	r2, #8
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4413      	add	r3, r2
 800cffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	2b00      	cmp	r3, #0
 800d008:	d014      	beq.n	800d034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f023 0307 	bic.w	r3, r3, #7
 800d010:	3308      	adds	r3, #8
 800d012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00a      	beq.n	800d034 <pvPortMalloc+0x6c>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	617b      	str	r3, [r7, #20]
}
 800d030:	bf00      	nop
 800d032:	e7fe      	b.n	800d032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d06e      	beq.n	800d118 <pvPortMalloc+0x150>
 800d03a:	4b45      	ldr	r3, [pc, #276]	; (800d150 <pvPortMalloc+0x188>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	429a      	cmp	r2, r3
 800d042:	d869      	bhi.n	800d118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d044:	4b43      	ldr	r3, [pc, #268]	; (800d154 <pvPortMalloc+0x18c>)
 800d046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d048:	4b42      	ldr	r3, [pc, #264]	; (800d154 <pvPortMalloc+0x18c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d04e:	e004      	b.n	800d05a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <pvPortMalloc+0xa4>
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1f1      	bne.n	800d050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d06c:	4b36      	ldr	r3, [pc, #216]	; (800d148 <pvPortMalloc+0x180>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d072:	429a      	cmp	r2, r3
 800d074:	d050      	beq.n	800d118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2208      	movs	r2, #8
 800d07c:	4413      	add	r3, r2
 800d07e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	2308      	movs	r3, #8
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	429a      	cmp	r2, r3
 800d096:	d91f      	bls.n	800d0d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4413      	add	r3, r2
 800d09e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	f003 0307 	and.w	r3, r3, #7
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <pvPortMalloc+0xf8>
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	613b      	str	r3, [r7, #16]
}
 800d0bc:	bf00      	nop
 800d0be:	e7fe      	b.n	800d0be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	1ad2      	subs	r2, r2, r3
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0d2:	69b8      	ldr	r0, [r7, #24]
 800d0d4:	f000 f908 	bl	800d2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0d8:	4b1d      	ldr	r3, [pc, #116]	; (800d150 <pvPortMalloc+0x188>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	4a1b      	ldr	r2, [pc, #108]	; (800d150 <pvPortMalloc+0x188>)
 800d0e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0e6:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <pvPortMalloc+0x188>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	4b1b      	ldr	r3, [pc, #108]	; (800d158 <pvPortMalloc+0x190>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d203      	bcs.n	800d0fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0f2:	4b17      	ldr	r3, [pc, #92]	; (800d150 <pvPortMalloc+0x188>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a18      	ldr	r2, [pc, #96]	; (800d158 <pvPortMalloc+0x190>)
 800d0f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	4b13      	ldr	r3, [pc, #76]	; (800d14c <pvPortMalloc+0x184>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	431a      	orrs	r2, r3
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	2200      	movs	r2, #0
 800d10c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d10e:	4b13      	ldr	r3, [pc, #76]	; (800d15c <pvPortMalloc+0x194>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3301      	adds	r3, #1
 800d114:	4a11      	ldr	r2, [pc, #68]	; (800d15c <pvPortMalloc+0x194>)
 800d116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d118:	f7fe f908 	bl	800b32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	f003 0307 	and.w	r3, r3, #7
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00a      	beq.n	800d13c <pvPortMalloc+0x174>
	__asm volatile
 800d126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	60fb      	str	r3, [r7, #12]
}
 800d138:	bf00      	nop
 800d13a:	e7fe      	b.n	800d13a <pvPortMalloc+0x172>
	return pvReturn;
 800d13c:	69fb      	ldr	r3, [r7, #28]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3728      	adds	r7, #40	; 0x28
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	200020f0 	.word	0x200020f0
 800d14c:	20002104 	.word	0x20002104
 800d150:	200020f4 	.word	0x200020f4
 800d154:	200020e8 	.word	0x200020e8
 800d158:	200020f8 	.word	0x200020f8
 800d15c:	200020fc 	.word	0x200020fc

0800d160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d04d      	beq.n	800d20e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d172:	2308      	movs	r3, #8
 800d174:	425b      	negs	r3, r3
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4413      	add	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	685a      	ldr	r2, [r3, #4]
 800d184:	4b24      	ldr	r3, [pc, #144]	; (800d218 <vPortFree+0xb8>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4013      	ands	r3, r2
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <vPortFree+0x44>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	60fb      	str	r3, [r7, #12]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <vPortFree+0x62>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	60bb      	str	r3, [r7, #8]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	4b14      	ldr	r3, [pc, #80]	; (800d218 <vPortFree+0xb8>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01e      	beq.n	800d20e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11a      	bne.n	800d20e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	685a      	ldr	r2, [r3, #4]
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <vPortFree+0xb8>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	43db      	mvns	r3, r3
 800d1e2:	401a      	ands	r2, r3
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1e8:	f7fe f892 	bl	800b310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <vPortFree+0xbc>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4a09      	ldr	r2, [pc, #36]	; (800d21c <vPortFree+0xbc>)
 800d1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1fa:	6938      	ldr	r0, [r7, #16]
 800d1fc:	f000 f874 	bl	800d2e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d200:	4b07      	ldr	r3, [pc, #28]	; (800d220 <vPortFree+0xc0>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3301      	adds	r3, #1
 800d206:	4a06      	ldr	r2, [pc, #24]	; (800d220 <vPortFree+0xc0>)
 800d208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d20a:	f7fe f88f 	bl	800b32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d20e:	bf00      	nop
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20002104 	.word	0x20002104
 800d21c:	200020f4 	.word	0x200020f4
 800d220:	20002100 	.word	0x20002100

0800d224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d22a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d230:	4b27      	ldr	r3, [pc, #156]	; (800d2d0 <prvHeapInit+0xac>)
 800d232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00c      	beq.n	800d258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3307      	adds	r3, #7
 800d242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f023 0307 	bic.w	r3, r3, #7
 800d24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	4a1f      	ldr	r2, [pc, #124]	; (800d2d0 <prvHeapInit+0xac>)
 800d254:	4413      	add	r3, r2
 800d256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d25c:	4a1d      	ldr	r2, [pc, #116]	; (800d2d4 <prvHeapInit+0xb0>)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d262:	4b1c      	ldr	r3, [pc, #112]	; (800d2d4 <prvHeapInit+0xb0>)
 800d264:	2200      	movs	r2, #0
 800d266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	4413      	add	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d270:	2208      	movs	r2, #8
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f023 0307 	bic.w	r3, r3, #7
 800d27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4a15      	ldr	r2, [pc, #84]	; (800d2d8 <prvHeapInit+0xb4>)
 800d284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d286:	4b14      	ldr	r3, [pc, #80]	; (800d2d8 <prvHeapInit+0xb4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2200      	movs	r2, #0
 800d28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d28e:	4b12      	ldr	r3, [pc, #72]	; (800d2d8 <prvHeapInit+0xb4>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2a4:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <prvHeapInit+0xb4>)
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4a0a      	ldr	r2, [pc, #40]	; (800d2dc <prvHeapInit+0xb8>)
 800d2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <prvHeapInit+0xbc>)
 800d2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2bc:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <prvHeapInit+0xc0>)
 800d2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2c2:	601a      	str	r2, [r3, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	3714      	adds	r7, #20
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	200014e8 	.word	0x200014e8
 800d2d4:	200020e8 	.word	0x200020e8
 800d2d8:	200020f0 	.word	0x200020f0
 800d2dc:	200020f8 	.word	0x200020f8
 800d2e0:	200020f4 	.word	0x200020f4
 800d2e4:	20002104 	.word	0x20002104

0800d2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2f0:	4b28      	ldr	r3, [pc, #160]	; (800d394 <prvInsertBlockIntoFreeList+0xac>)
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e002      	b.n	800d2fc <prvInsertBlockIntoFreeList+0x14>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	429a      	cmp	r2, r3
 800d304:	d8f7      	bhi.n	800d2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	4413      	add	r3, r2
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	429a      	cmp	r2, r3
 800d316:	d108      	bne.n	800d32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	441a      	add	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d118      	bne.n	800d370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <prvInsertBlockIntoFreeList+0xb0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d00d      	beq.n	800d366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	441a      	add	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	e008      	b.n	800d378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <prvInsertBlockIntoFreeList+0xb0>)
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	e003      	b.n	800d378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d002      	beq.n	800d386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d386:	bf00      	nop
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	200020e8 	.word	0x200020e8
 800d398:	200020f0 	.word	0x200020f0

0800d39c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	78fa      	ldrb	r2, [r7, #3]
 800d3b4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d3bc:	3301      	adds	r3, #1
 800d3be:	425a      	negs	r2, r3
 800d3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3c8:	bf58      	it	pl
 800d3ca:	4253      	negpl	r3, r2
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3da:	2b80      	cmp	r3, #128	; 0x80
 800d3dc:	d113      	bne.n	800d406 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	425a      	negs	r2, r3
 800d3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3f8:	bf58      	it	pl
 800d3fa:	4253      	negpl	r3, r2
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d404:	e00b      	b.n	800d41e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d414:	3301      	adds	r3, #1
 800d416:	b2da      	uxtb	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d41e:	bf00      	nop
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d43a:	461a      	mov	r2, r3
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f805 	bl	800d44e <RingGetNBytes>
 800d444:	4603      	mov	r3, r0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b086      	sub	sp, #24
 800d452:	af00      	add	r7, sp, #0
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	4613      	mov	r3, r2
 800d45a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <RingGetNBytes+0x1e>
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <RingGetNBytes+0x22>
 800d46c:	2300      	movs	r3, #0
 800d46e:	e03e      	b.n	800d4ee <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	2b80      	cmp	r3, #128	; 0x80
 800d474:	d901      	bls.n	800d47a <RingGetNBytes+0x2c>
 800d476:	2300      	movs	r3, #0
 800d478:	e039      	b.n	800d4ee <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d47a:	2300      	movs	r3, #0
 800d47c:	75fb      	strb	r3, [r7, #23]
 800d47e:	e01b      	b.n	800d4b8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d486:	4619      	mov	r1, r3
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	4413      	add	r3, r2
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	5c52      	ldrb	r2, [r2, r1]
 800d492:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d49a:	3301      	adds	r3, #1
 800d49c:	425a      	negs	r2, r3
 800d49e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4a6:	bf58      	it	pl
 800d4a8:	4253      	negpl	r3, r2
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d4b2:	7dfb      	ldrb	r3, [r7, #23]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	75fb      	strb	r3, [r7, #23]
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d205      	bcs.n	800d4cc <RingGetNBytes+0x7e>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d4c6:	7dfa      	ldrb	r2, [r7, #23]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3d9      	bcc.n	800d480 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 f805 	bl	800d4f6 <RingClear>

	return uCounter;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b083      	sub	sp, #12
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
	...

0800d52c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af02      	add	r7, sp, #8
 800d532:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d534:	4b42      	ldr	r3, [pc, #264]	; (800d640 <ModbusInit+0x114>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d87d      	bhi.n	800d638 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	33d0      	adds	r3, #208	; 0xd0
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff ffd8 	bl	800d4f6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	d109      	bne.n	800d562 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d54e:	4a3d      	ldr	r2, [pc, #244]	; (800d644 <ModbusInit+0x118>)
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	483d      	ldr	r0, [pc, #244]	; (800d648 <ModbusInit+0x11c>)
 800d554:	f7fc f8ec 	bl	8009730 <osThreadNew>
 800d558:	4602      	mov	r2, r0
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d560:	e033      	b.n	800d5ca <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2b04      	cmp	r3, #4
 800d568:	d12e      	bne.n	800d5c8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d56a:	4a38      	ldr	r2, [pc, #224]	; (800d64c <ModbusInit+0x120>)
 800d56c:	6879      	ldr	r1, [r7, #4]
 800d56e:	4838      	ldr	r0, [pc, #224]	; (800d650 <ModbusInit+0x124>)
 800d570:	f7fc f8de 	bl	8009730 <osThreadNew>
 800d574:	4602      	mov	r2, r0
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d582:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d58a:	4a32      	ldr	r2, [pc, #200]	; (800d654 <ModbusInit+0x128>)
 800d58c:	9200      	str	r2, [sp, #0]
 800d58e:	2200      	movs	r2, #0
 800d590:	4831      	ldr	r0, [pc, #196]	; (800d658 <ModbusInit+0x12c>)
 800d592:	f7fe ff0d 	bl	800c3b0 <xTimerCreate>
 800d596:	4602      	mov	r2, r0
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d100      	bne.n	800d5aa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d5a8:	e7fe      	b.n	800d5a8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d5aa:	4a2c      	ldr	r2, [pc, #176]	; (800d65c <ModbusInit+0x130>)
 800d5ac:	2110      	movs	r1, #16
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f7fc fbc2 	bl	8009d38 <osMessageQueueNew>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d5c6:	e7fe      	b.n	800d5c6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d5c8:	e7fe      	b.n	800d5c8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d100      	bne.n	800d5d6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d5d4:	e7fe      	b.n	800d5d4 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d5dc:	4a20      	ldr	r2, [pc, #128]	; (800d660 <ModbusInit+0x134>)
 800d5de:	9200      	str	r2, [sp, #0]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	2105      	movs	r1, #5
 800d5e4:	481f      	ldr	r0, [pc, #124]	; (800d664 <ModbusInit+0x138>)
 800d5e6:	f7fe fee3 	bl	800c3b0 <xTimerCreate>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d100      	bne.n	800d5fe <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d5fc:	e7fe      	b.n	800d5fc <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d5fe:	4a1a      	ldr	r2, [pc, #104]	; (800d668 <ModbusInit+0x13c>)
 800d600:	2101      	movs	r1, #1
 800d602:	2001      	movs	r0, #1
 800d604:	f7fc fb0f 	bl	8009c26 <osSemaphoreNew>
 800d608:	4602      	mov	r2, r0
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d616:	2b00      	cmp	r3, #0
 800d618:	d100      	bne.n	800d61c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d61a:	e7fe      	b.n	800d61a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d61c:	4b08      	ldr	r3, [pc, #32]	; (800d640 <ModbusInit+0x114>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	4619      	mov	r1, r3
 800d622:	4a12      	ldr	r2, [pc, #72]	; (800d66c <ModbusInit+0x140>)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d62a:	4b05      	ldr	r3, [pc, #20]	; (800d640 <ModbusInit+0x114>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	3301      	adds	r3, #1
 800d630:	b2da      	uxtb	r2, r3
 800d632:	4b03      	ldr	r3, [pc, #12]	; (800d640 <ModbusInit+0x114>)
 800d634:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d636:	e000      	b.n	800d63a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d638:	e7fe      	b.n	800d638 <ModbusInit+0x10c>
}
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	20002110 	.word	0x20002110
 800d644:	0800f19c 	.word	0x0800f19c
 800d648:	0800d879 	.word	0x0800d879
 800d64c:	0800f1c0 	.word	0x0800f1c0
 800d650:	0800dd55 	.word	0x0800dd55
 800d654:	0800d81d 	.word	0x0800d81d
 800d658:	0800f014 	.word	0x0800f014
 800d65c:	0800f184 	.word	0x0800f184
 800d660:	0800d799 	.word	0x0800d799
 800d664:	0800f024 	.word	0x0800f024
 800d668:	0800f1e4 	.word	0x0800f1e4
 800d66c:	20002108 	.word	0x20002108

0800d670 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d005      	beq.n	800d68e <ModbusStart+0x1e>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d688:	2b04      	cmp	r3, #4
 800d68a:	d000      	beq.n	800d68e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d68c:	e7fe      	b.n	800d68c <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d694:	2b01      	cmp	r3, #1
 800d696:	d004      	beq.n	800d6a2 <ModbusStart+0x32>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d15c      	bne.n	800d75c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68d8      	ldr	r0, [r3, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	8a1b      	ldrh	r3, [r3, #16]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f7f6 fd25 	bl	8004104 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d105      	bne.n	800d6ce <ModbusStart+0x5e>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d100      	bne.n	800d6ce <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d6cc:	e7fe      	b.n	800d6cc <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d6ce:	bf00      	nop
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f9 ff15 	bl	8007504 <HAL_UART_GetState>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d1f7      	bne.n	800d6d0 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d11a      	bne.n	800d720 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6858      	ldr	r0, [r3, #4]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	33d0      	adds	r3, #208	; 0xd0
 800d6f2:	2280      	movs	r2, #128	; 0x80
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	f7fb feae 	bl	8009456 <HAL_UARTEx_ReceiveToIdle_DMA>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d000      	beq.n	800d702 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d700:	e7fe      	b.n	800d700 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f022 0204 	bic.w	r2, r2, #4
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	e00b      	b.n	800d738 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6858      	ldr	r0, [r3, #4]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	33b8      	adds	r3, #184	; 0xb8
 800d728:	2201      	movs	r2, #1
 800d72a:	4619      	mov	r1, r3
 800d72c:	f7f9 f8d0 	bl	80068d0 <HAL_UART_Receive_IT>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d000      	beq.n	800d738 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d736:	e7fe      	b.n	800d736 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7a1b      	ldrb	r3, [r3, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d004      	beq.n	800d74a <ModbusStart+0xda>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b04      	cmp	r3, #4
 800d746:	d100      	bne.n	800d74a <ModbusStart+0xda>
          {
        	  while(1)
 800d748:	e7fe      	b.n	800d748 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	7a1b      	ldrb	r3, [r3, #8]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d104      	bne.n	800d75c <ModbusStart+0xec>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b03      	cmp	r3, #3
 800d758:	d100      	bne.n	800d75c <ModbusStart+0xec>
          {
             	  while(1)
 800d75a:	e7fe      	b.n	800d75a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af02      	add	r7, sp, #8
 800d79e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
 800d7a4:	e02a      	b.n	800d7fc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d7a6:	4a1b      	ldr	r2, [pc, #108]	; (800d814 <vTimerCallbackT35+0x7c>)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d11e      	bne.n	800d7f6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d7b8:	4a16      	ldr	r2, [pc, #88]	; (800d814 <vTimerCallbackT35+0x7c>)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	2b04      	cmp	r3, #4
 800d7c4:	d10c      	bne.n	800d7e0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d7c6:	4a13      	ldr	r2, [pc, #76]	; (800d814 <vTimerCallbackT35+0x7c>)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2103      	movs	r1, #3
 800d7dc:	f7fe fe82 	bl	800c4e4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d7e0:	4a0c      	ldr	r2, [pc, #48]	; (800d814 <vTimerCallbackT35+0x7c>)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2203      	movs	r2, #3
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	f7fe fbad 	bl	800bf50 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	4b06      	ldr	r3, [pc, #24]	; (800d818 <vTimerCallbackT35+0x80>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	461a      	mov	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	4293      	cmp	r3, r2
 800d806:	dbce      	blt.n	800d7a6 <vTimerCallbackT35+0xe>
		}

	}
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	20002108 	.word	0x20002108
 800d818:	20002110 	.word	0x20002110

0800d81c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d824:	2300      	movs	r3, #0
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e017      	b.n	800d85a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d82a:	4a11      	ldr	r2, [pc, #68]	; (800d870 <vTimerCallbackTimeout+0x54>)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d832:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d10b      	bne.n	800d854 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d83c:	4a0c      	ldr	r2, [pc, #48]	; (800d870 <vTimerCallbackTimeout+0x54>)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d844:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d848:	2300      	movs	r3, #0
 800d84a:	2203      	movs	r2, #3
 800d84c:	f06f 0107 	mvn.w	r1, #7
 800d850:	f7fe fb7e 	bl	800bf50 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3301      	adds	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	4b06      	ldr	r3, [pc, #24]	; (800d874 <vTimerCallbackTimeout+0x58>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	461a      	mov	r2, r3
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4293      	cmp	r3, r2
 800d864:	dbe1      	blt.n	800d82a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d866:	bf00      	nop
 800d868:	bf00      	nop
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20002108 	.word	0x20002108
 800d874:	20002110 	.word	0x20002110

0800d878 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d890:	2b01      	cmp	r3, #1
 800d892:	d004      	beq.n	800d89e <StartTaskModbusSlave+0x26>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d117      	bne.n	800d8ce <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d89e:	f04f 31ff 	mov.w	r1, #4294967295
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	f7fe fab2 	bl	800be0c <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 fc21 	bl	800e0f0 <getRxBuffer>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f113 0f03 	cmn.w	r3, #3
 800d8b4:	d10b      	bne.n	800d8ce <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	22fd      	movs	r2, #253	; 0xfd
 800d8ba:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800d8cc:	e0b7      	b.n	800da3e <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d8d4:	2b06      	cmp	r3, #6
 800d8d6:	d80b      	bhi.n	800d8f0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	22fa      	movs	r2, #250	; 0xfa
 800d8dc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800d8ee:	e0a6      	b.n	800da3e <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	7cda      	ldrb	r2, [r3, #19]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	7a1b      	ldrb	r3, [r3, #8]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	f040 809f 	bne.w	800da3c <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f000 fc40 	bl	800e184 <validateRequest>
 800d904:	4603      	mov	r3, r0
 800d906:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d90e:	7afb      	ldrb	r3, [r7, #11]
 800d910:	68f9      	ldr	r1, [r7, #12]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 fdda 	bl	800e4cc <buildException>
			sendTxBuffer(modH);
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f000 fdf6 	bl	800e50a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d91e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d926:	e08a      	b.n	800da3e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d934:	f04f 31ff 	mov.w	r1, #4294967295
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fc ffcd 	bl	800a8d8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	7d1b      	ldrb	r3, [r3, #20]
 800d942:	3b01      	subs	r3, #1
 800d944:	2b0f      	cmp	r3, #15
 800d946:	d86f      	bhi.n	800da28 <StartTaskModbusSlave+0x1b0>
 800d948:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <StartTaskModbusSlave+0xd8>)
 800d94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94e:	bf00      	nop
 800d950:	0800d991 	.word	0x0800d991
 800d954:	0800d9a5 	.word	0x0800d9a5
 800d958:	0800d9b9 	.word	0x0800d9b9
 800d95c:	0800d9cd 	.word	0x0800d9cd
 800d960:	0800d9e1 	.word	0x0800d9e1
 800d964:	0800d9f3 	.word	0x0800d9f3
 800d968:	0800da29 	.word	0x0800da29
 800d96c:	0800da29 	.word	0x0800da29
 800d970:	0800da29 	.word	0x0800da29
 800d974:	0800da29 	.word	0x0800da29
 800d978:	0800da29 	.word	0x0800da29
 800d97c:	0800da29 	.word	0x0800da29
 800d980:	0800da29 	.word	0x0800da29
 800d984:	0800da29 	.word	0x0800da29
 800d988:	0800da05 	.word	0x0800da05
 800d98c:	0800da17 	.word	0x0800da17
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800d990:	2101      	movs	r1, #1
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f000 fe5b 	bl	800e64e <process_FC1>
 800d998:	4603      	mov	r3, r0
 800d99a:	461a      	mov	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9a2:	e042      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800d9a4:	2102      	movs	r1, #2
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 fe51 	bl	800e64e <process_FC1>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9b6:	e038      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800d9b8:	2103      	movs	r1, #3
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 ff0b 	bl	800e7d6 <process_FC3>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9ca:	e02e      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800d9cc:	2104      	movs	r1, #4
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 ff01 	bl	800e7d6 <process_FC3>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9de:	e024      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f000 ff70 	bl	800e8c6 <process_FC5>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d9f0:	e01b      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 ffc0 	bl	800e978 <process_FC6>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800da02:	e012      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 ffe9 	bl	800e9dc <process_FC15>
 800da0a:	4603      	mov	r3, r0
 800da0c:	461a      	mov	r2, r3
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800da14:	e009      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f001 f86e 	bl	800eaf8 <process_FC16>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800da26:	e000      	b.n	800da2a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800da28:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800da30:	2300      	movs	r3, #0
 800da32:	2200      	movs	r2, #0
 800da34:	2100      	movs	r1, #0
 800da36:	f7fc fcd5 	bl	800a3e4 <xQueueGenericSend>

	 continue;
 800da3a:	e000      	b.n	800da3e <StartTaskModbusSlave+0x1c6>
    	continue;
 800da3c:	bf00      	nop
  {
 800da3e:	e721      	b.n	800d884 <StartTaskModbusSlave+0xc>

0800da40 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800da40:	b084      	sub	sp, #16
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	f107 001c 	add.w	r0, r7, #28
 800da4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800da5c:	f04f 31ff 	mov.w	r1, #4294967295
 800da60:	4618      	mov	r0, r3
 800da62:	f7fc ff39 	bl	800a8d8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7a1b      	ldrb	r3, [r3, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <SendQuery+0x32>
 800da6e:	23ff      	movs	r3, #255	; 0xff
 800da70:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <SendQuery+0x40>
 800da7c:	23fe      	movs	r3, #254	; 0xfe
 800da7e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800da80:	7f3b      	ldrb	r3, [r7, #28]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d002      	beq.n	800da8c <SendQuery+0x4c>
 800da86:	7f3b      	ldrb	r3, [r7, #28]
 800da88:	2bf7      	cmp	r3, #247	; 0xf7
 800da8a:	d901      	bls.n	800da90 <SendQuery+0x50>
 800da8c:	23f7      	movs	r3, #247	; 0xf7
 800da8e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800da90:	7bbb      	ldrb	r3, [r7, #14]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00e      	beq.n	800dab4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800da96:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800daa4:	2300      	movs	r3, #0
 800daa6:	2200      	movs	r2, #0
 800daa8:	2100      	movs	r1, #0
 800daaa:	f7fc fc9b 	bl	800a3e4 <xQueueGenericSend>
		 return error;
 800daae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dab2:	e147      	b.n	800dd44 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800dab4:	7f7b      	ldrb	r3, [r7, #29]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d008      	beq.n	800dacc <SendQuery+0x8c>
 800daba:	7f7b      	ldrb	r3, [r7, #29]
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	d005      	beq.n	800dacc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dac0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800dac2:	2b05      	cmp	r3, #5
 800dac4:	d002      	beq.n	800dacc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800dac6:	7f7b      	ldrb	r3, [r7, #29]
 800dac8:	2b0f      	cmp	r3, #15
 800daca:	d104      	bne.n	800dad6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800dacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800dad4:	e00f      	b.n	800daf6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800dad6:	7f7b      	ldrb	r3, [r7, #29]
 800dad8:	2b03      	cmp	r3, #3
 800dada:	d008      	beq.n	800daee <SendQuery+0xae>
 800dadc:	7f7b      	ldrb	r3, [r7, #29]
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d005      	beq.n	800daee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dae2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800dae4:	2b06      	cmp	r3, #6
 800dae6:	d002      	beq.n	800daee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dae8:	7f7b      	ldrb	r3, [r7, #29]
 800daea:	2b10      	cmp	r3, #16
 800daec:	d103      	bne.n	800daf6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800daee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800daf6:	7f3a      	ldrb	r2, [r7, #28]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800dafc:	7f7a      	ldrb	r2, [r7, #29]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800db02:	8bfb      	ldrh	r3, [r7, #30]
 800db04:	0a1b      	lsrs	r3, r3, #8
 800db06:	b29b      	uxth	r3, r3
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800db0e:	8bfb      	ldrh	r3, [r7, #30]
 800db10:	b2da      	uxtb	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800db16:	7f7b      	ldrb	r3, [r7, #29]
 800db18:	3b01      	subs	r3, #1
 800db1a:	2b0f      	cmp	r3, #15
 800db1c:	f200 80ff 	bhi.w	800dd1e <SendQuery+0x2de>
 800db20:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <SendQuery+0xe8>)
 800db22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db26:	bf00      	nop
 800db28:	0800db69 	.word	0x0800db69
 800db2c:	0800db69 	.word	0x0800db69
 800db30:	0800db69 	.word	0x0800db69
 800db34:	0800db69 	.word	0x0800db69
 800db38:	0800db87 	.word	0x0800db87
 800db3c:	0800dba9 	.word	0x0800dba9
 800db40:	0800dd1f 	.word	0x0800dd1f
 800db44:	0800dd1f 	.word	0x0800dd1f
 800db48:	0800dd1f 	.word	0x0800dd1f
 800db4c:	0800dd1f 	.word	0x0800dd1f
 800db50:	0800dd1f 	.word	0x0800dd1f
 800db54:	0800dd1f 	.word	0x0800dd1f
 800db58:	0800dd1f 	.word	0x0800dd1f
 800db5c:	0800dd1f 	.word	0x0800dd1f
 800db60:	0800dbcb 	.word	0x0800dbcb
 800db64:	0800dc89 	.word	0x0800dc89
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800db68:	8c3b      	ldrh	r3, [r7, #32]
 800db6a:	0a1b      	lsrs	r3, r3, #8
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800db74:	8c3b      	ldrh	r3, [r7, #32]
 800db76:	b2da      	uxtb	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2206      	movs	r2, #6
 800db80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800db84:	e0cb      	b.n	800dd1e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d001      	beq.n	800db92 <SendQuery+0x152>
 800db8e:	22ff      	movs	r2, #255	; 0xff
 800db90:	e000      	b.n	800db94 <SendQuery+0x154>
 800db92:	2200      	movs	r2, #0
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2206      	movs	r2, #6
 800dba2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dba6:	e0ba      	b.n	800dd1e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	881b      	ldrh	r3, [r3, #0]
 800dbac:	0a1b      	lsrs	r3, r3, #8
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2206      	movs	r2, #6
 800dbc4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dbc8:	e0a9      	b.n	800dd1e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800dbca:	8c3b      	ldrh	r3, [r7, #32]
 800dbcc:	091b      	lsrs	r3, r3, #4
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800dbd2:	7a7b      	ldrb	r3, [r7, #9]
 800dbd4:	005b      	lsls	r3, r3, #1
 800dbd6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800dbd8:	8c3b      	ldrh	r3, [r7, #32]
 800dbda:	f003 030f 	and.w	r3, r3, #15
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d005      	beq.n	800dbf0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800dbea:	7a7b      	ldrb	r3, [r7, #9]
 800dbec:	3301      	adds	r3, #1
 800dbee:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dbf0:	8c3b      	ldrh	r3, [r7, #32]
 800dbf2:	0a1b      	lsrs	r3, r3, #8
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dbfc:	8c3b      	ldrh	r3, [r7, #32]
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	7bfa      	ldrb	r2, [r7, #15]
 800dc08:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2207      	movs	r2, #7
 800dc0e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dc12:	2300      	movs	r3, #0
 800dc14:	81bb      	strh	r3, [r7, #12]
 800dc16:	e031      	b.n	800dc7c <SendQuery+0x23c>
	    {
	        if(i%2)
 800dc18:	89bb      	ldrh	r3, [r7, #12]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00f      	beq.n	800dc44 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800dc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc26:	89bb      	ldrh	r3, [r7, #12]
 800dc28:	085b      	lsrs	r3, r3, #1
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	4413      	add	r3, r2
 800dc30:	881a      	ldrh	r2, [r3, #0]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc38:	4619      	mov	r1, r3
 800dc3a:	b2d2      	uxtb	r2, r2
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	440b      	add	r3, r1
 800dc40:	74da      	strb	r2, [r3, #19]
 800dc42:	e010      	b.n	800dc66 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800dc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc46:	89bb      	ldrh	r3, [r7, #12]
 800dc48:	085b      	lsrs	r3, r3, #1
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	4413      	add	r3, r2
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	0a1b      	lsrs	r3, r3, #8
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	b2d2      	uxtb	r2, r2
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	440b      	add	r3, r1
 800dc64:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dc76:	89bb      	ldrh	r3, [r7, #12]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	81bb      	strh	r3, [r7, #12]
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	89ba      	ldrh	r2, [r7, #12]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d3c8      	bcc.n	800dc18 <SendQuery+0x1d8>
	    }
	    break;
 800dc86:	e04a      	b.n	800dd1e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dc88:	8c3b      	ldrh	r3, [r7, #32]
 800dc8a:	0a1b      	lsrs	r3, r3, #8
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dc94:	8c3b      	ldrh	r3, [r7, #32]
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800dc9c:	8c3b      	ldrh	r3, [r7, #32]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	b2da      	uxtb	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2207      	movs	r2, #7
 800dcac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	817b      	strh	r3, [r7, #10]
 800dcb4:	e02e      	b.n	800dd14 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dcb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb8:	897b      	ldrh	r3, [r7, #10]
 800dcba:	005b      	lsls	r3, r3, #1
 800dcbc:	4413      	add	r3, r2
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	0a1b      	lsrs	r3, r3, #8
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dcca:	4619      	mov	r1, r3
 800dccc:	b2d2      	uxtb	r2, r2
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	440b      	add	r3, r1
 800dcd2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dcda:	3301      	adds	r3, #1
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800dce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dce6:	897b      	ldrh	r3, [r7, #10]
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	4413      	add	r3, r2
 800dcec:	881a      	ldrh	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	440b      	add	r3, r1
 800dcfc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dd04:	3301      	adds	r3, #1
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dd0e:	897b      	ldrh	r3, [r7, #10]
 800dd10:	3301      	adds	r3, #1
 800dd12:	817b      	strh	r3, [r7, #10]
 800dd14:	8c3b      	ldrh	r3, [r7, #32]
 800dd16:	897a      	ldrh	r2, [r7, #10]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d3cc      	bcc.n	800dcb6 <SendQuery+0x276>
	    }
	    break;
 800dd1c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fbf3 	bl	800e50a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	f7fc fb58 	bl	800a3e4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	749a      	strb	r2, [r3, #18]
	return 0;
 800dd42:	2300      	movs	r3, #0


}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd4e:	b004      	add	sp, #16
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop

0800dd54 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b08c      	sub	sp, #48	; 0x30
 800dd58:	af02      	add	r7, sp, #8
 800dd5a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dd66:	f107 010c 	add.w	r1, r7, #12
 800dd6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fc fcd2 	bl	800a718 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	f107 030c 	add.w	r3, r7, #12
 800dd7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd80:	f7ff fe5e 	bl	800da40 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dd84:	f04f 31ff 	mov.w	r1, #4294967295
 800dd88:	2001      	movs	r0, #1
 800dd8a:	f7fe f83f 	bl	800be0c <ulTaskNotifyTake>
 800dd8e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	2200      	movs	r2, #0
 800dd94:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d018      	beq.n	800ddce <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda6:	22f8      	movs	r2, #248	; 0xf8
 800dda8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800ddba:	69b8      	ldr	r0, [r7, #24]
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbe:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2203      	movs	r2, #3
 800ddc8:	f7fe f8c2 	bl	800bf50 <xTaskGenericNotify>
    	  continue;
 800ddcc:	e09a      	b.n	800df04 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800ddce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddd0:	f000 f98e 	bl	800e0f0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d818      	bhi.n	800de10 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	22fa      	movs	r2, #250	; 0xfa
 800ddea:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800ddfc:	69b8      	ldr	r0, [r7, #24]
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800de04:	4619      	mov	r1, r3
 800de06:	2300      	movs	r3, #0
 800de08:	2203      	movs	r2, #3
 800de0a:	f7fe f8a1 	bl	800bf50 <xTaskGenericNotify>
		  continue;
 800de0e:	e079      	b.n	800df04 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de12:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800de16:	2300      	movs	r3, #0
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	2300      	movs	r3, #0
 800de1c:	2200      	movs	r2, #0
 800de1e:	2103      	movs	r1, #3
 800de20:	f7fe fb60 	bl	800c4e4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800de24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de26:	f000 f8f5 	bl	800e014 <validateAnswer>
 800de2a:	4603      	mov	r3, r0
 800de2c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800de2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d010      	beq.n	800de58 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	7ffa      	ldrb	r2, [r7, #31]
 800de42:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800de44:	69b8      	ldr	r0, [r7, #24]
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800de4c:	4619      	mov	r1, r3
 800de4e:	2300      	movs	r3, #0
 800de50:	2203      	movs	r2, #3
 800de52:	f7fe f87d 	bl	800bf50 <xTaskGenericNotify>
	     continue;
 800de56:	e055      	b.n	800df04 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	7ffa      	ldrb	r2, [r7, #31]
 800de5c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800de64:	f04f 31ff 	mov.w	r1, #4294967295
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fc fd35 	bl	800a8d8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	7d1b      	ldrb	r3, [r3, #20]
 800de72:	3b01      	subs	r3, #1
 800de74:	2b0f      	cmp	r3, #15
 800de76:	d82b      	bhi.n	800ded0 <StartTaskModbusMaster+0x17c>
 800de78:	a201      	add	r2, pc, #4	; (adr r2, 800de80 <StartTaskModbusMaster+0x12c>)
 800de7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7e:	bf00      	nop
 800de80:	0800dec1 	.word	0x0800dec1
 800de84:	0800dec1 	.word	0x0800dec1
 800de88:	0800dec9 	.word	0x0800dec9
 800de8c:	0800dec9 	.word	0x0800dec9
 800de90:	0800ded1 	.word	0x0800ded1
 800de94:	0800ded1 	.word	0x0800ded1
 800de98:	0800ded1 	.word	0x0800ded1
 800de9c:	0800ded1 	.word	0x0800ded1
 800dea0:	0800ded1 	.word	0x0800ded1
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	0800ded1 	.word	0x0800ded1
 800deac:	0800ded1 	.word	0x0800ded1
 800deb0:	0800ded1 	.word	0x0800ded1
 800deb4:	0800ded1 	.word	0x0800ded1
 800deb8:	0800ded1 	.word	0x0800ded1
 800debc:	0800ded1 	.word	0x0800ded1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800dec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dec2:	f000 f821 	bl	800df08 <get_FC1>
	      break;
 800dec6:	e004      	b.n	800ded2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800dec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deca:	f000 f874 	bl	800dfb6 <get_FC3>
	      break;
 800dece:	e000      	b.n	800ded2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800ded0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800ded2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10e      	bne.n	800df02 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800deea:	2300      	movs	r3, #0
 800deec:	2200      	movs	r2, #0
 800deee:	2100      	movs	r1, #0
 800def0:	f7fc fa78 	bl	800a3e4 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800def4:	69b8      	ldr	r0, [r7, #24]
 800def6:	2300      	movs	r3, #0
 800def8:	2203      	movs	r2, #3
 800defa:	f06f 010a 	mvn.w	r1, #10
 800defe:	f7fe f827 	bl	800bf50 <xTaskGenericNotify>
	  }


	  continue;
 800df02:	bf00      	nop
  {
 800df04:	e72c      	b.n	800dd60 <StartTaskModbusMaster+0xc>
 800df06:	bf00      	nop

0800df08 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800df10:	2303      	movs	r3, #3
 800df12:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800df14:	2300      	movs	r3, #0
 800df16:	73fb      	strb	r3, [r7, #15]
 800df18:	e043      	b.n	800dfa2 <get_FC1+0x9a>

        if(i%2)
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	d01c      	beq.n	800df60 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800df26:	7bfa      	ldrb	r2, [r7, #15]
 800df28:	7bbb      	ldrb	r3, [r7, #14]
 800df2a:	4413      	add	r3, r2
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	4413      	add	r3, r2
 800df30:	7cd8      	ldrb	r0, [r3, #19]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800df38:	7bfb      	ldrb	r3, [r7, #15]
 800df3a:	085b      	lsrs	r3, r3, #1
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	4413      	add	r3, r2
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	b2d9      	uxtb	r1, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800df4c:	7bfb      	ldrb	r3, [r7, #15]
 800df4e:	085b      	lsrs	r3, r3, #1
 800df50:	b2db      	uxtb	r3, r3
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	18d4      	adds	r4, r2, r3
 800df56:	f000 fa5f 	bl	800e418 <word>
 800df5a:	4603      	mov	r3, r0
 800df5c:	8023      	strh	r3, [r4, #0]
 800df5e:	e01d      	b.n	800df9c <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	085b      	lsrs	r3, r3, #1
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	4413      	add	r3, r2
 800df70:	881b      	ldrh	r3, [r3, #0]
 800df72:	0a1b      	lsrs	r3, r3, #8
 800df74:	b29b      	uxth	r3, r3
 800df76:	b2d8      	uxtb	r0, r3
 800df78:	7bfa      	ldrb	r2, [r7, #15]
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	4413      	add	r3, r2
 800df7e:	687a      	ldr	r2, [r7, #4]
 800df80:	4413      	add	r3, r2
 800df82:	7cd9      	ldrb	r1, [r3, #19]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	085b      	lsrs	r3, r3, #1
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	18d4      	adds	r4, r2, r3
 800df94:	f000 fa40 	bl	800e418 <word>
 800df98:	4603      	mov	r3, r0
 800df9a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	73fb      	strb	r3, [r7, #15]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7d5b      	ldrb	r3, [r3, #21]
 800dfa6:	7bfa      	ldrb	r2, [r7, #15]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d3b6      	bcc.n	800df1a <get_FC1+0x12>
        }

     }
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}

0800dfb6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800dfb6:	b590      	push	{r4, r7, lr}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	73bb      	strb	r3, [r7, #14]
 800dfc6:	e018      	b.n	800dffa <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	4413      	add	r3, r2
 800dfce:	7cd8      	ldrb	r0, [r3, #19]
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	7cd9      	ldrb	r1, [r3, #19]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800dfe0:	7bbb      	ldrb	r3, [r7, #14]
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	18d4      	adds	r4, r2, r3
 800dfe6:	f000 fa17 	bl	800e418 <word>
 800dfea:	4603      	mov	r3, r0
 800dfec:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800dfee:	7bfb      	ldrb	r3, [r7, #15]
 800dff0:	3302      	adds	r3, #2
 800dff2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	3301      	adds	r3, #1
 800dff8:	73bb      	strb	r3, [r7, #14]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	7d5b      	ldrb	r3, [r3, #21]
 800dffe:	085b      	lsrs	r3, r3, #1
 800e000:	b2db      	uxtb	r3, r3
 800e002:	7bba      	ldrb	r2, [r7, #14]
 800e004:	429a      	cmp	r2, r3
 800e006:	d3df      	bcc.n	800dfc8 <get_FC3+0x12>
    }
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd90      	pop	{r4, r7, pc}
	...

0800e014 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e022:	3b02      	subs	r3, #2
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	4413      	add	r3, r2
 800e028:	7cdb      	ldrb	r3, [r3, #19]
 800e02a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e02c:	b21a      	sxth	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e034:	3b01      	subs	r3, #1
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	440b      	add	r3, r1
 800e03a:	7cdb      	ldrb	r3, [r3, #19]
 800e03c:	b21b      	sxth	r3, r3
 800e03e:	4313      	orrs	r3, r2
 800e040:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e042:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f103 0213 	add.w	r2, r3, #19
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e050:	3b02      	subs	r3, #2
 800e052:	b2db      	uxtb	r3, r3
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f000 f9f1 	bl	800e43e <calcCRC>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461a      	mov	r2, r3
 800e060:	89bb      	ldrh	r3, [r7, #12]
 800e062:	4293      	cmp	r3, r2
 800e064:	d009      	beq.n	800e07a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e06c:	3301      	adds	r3, #1
 800e06e:	b29a      	uxth	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e076:	23fc      	movs	r3, #252	; 0xfc
 800e078:	e034      	b.n	800e0e4 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
 800e07e:	b25b      	sxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	da09      	bge.n	800e098 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e08a:	3301      	adds	r3, #1
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e094:	23fb      	movs	r3, #251	; 0xfb
 800e096:	e025      	b.n	800e0e4 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800e098:	2300      	movs	r3, #0
 800e09a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e09c:	2300      	movs	r3, #0
 800e09e:	73bb      	strb	r3, [r7, #14]
 800e0a0:	e00c      	b.n	800e0bc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e0a2:	7bbb      	ldrb	r3, [r7, #14]
 800e0a4:	4a11      	ldr	r2, [pc, #68]	; (800e0ec <validateAnswer+0xd8>)
 800e0a6:	5cd2      	ldrb	r2, [r2, r3]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d102      	bne.n	800e0b6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	73fb      	strb	r3, [r7, #15]
            break;
 800e0b4:	e005      	b.n	800e0c2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e0b6:	7bbb      	ldrb	r3, [r7, #14]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	73bb      	strb	r3, [r7, #14]
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	2b07      	cmp	r3, #7
 800e0c0:	d9ef      	bls.n	800e0a2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	f083 0301 	eor.w	r3, r3, #1
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d009      	beq.n	800e0e2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	0800f1f4 	.word	0x0800f1f4

0800e0f0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d104      	bne.n	800e10c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	4618      	mov	r0, r3
 800e108:	f7f8 fd44 	bl	8006b94 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e112:	2b00      	cmp	r3, #0
 800e114:	d008      	beq.n	800e128 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	33d0      	adds	r3, #208	; 0xd0
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff f9eb 	bl	800d4f6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e120:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e124:	81fb      	strh	r3, [r7, #14]
 800e126:	e019      	b.n	800e15c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	3313      	adds	r3, #19
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7ff f978 	bl	800d42a <RingGetAllBytes>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e14a:	3301      	adds	r3, #1
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e15a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e162:	2b01      	cmp	r3, #1
 800e164:	d107      	bne.n	800e176 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6858      	ldr	r0, [r3, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	33b8      	adds	r3, #184	; 0xb8
 800e16e:	2201      	movs	r2, #1
 800e170:	4619      	mov	r1, r3
 800e172:	f7f8 fbad 	bl	80068d0 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
	...

0800e184 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e192:	3b02      	subs	r3, #2
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	4413      	add	r3, r2
 800e198:	7cdb      	ldrb	r3, [r3, #19]
 800e19a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e19c:	b21a      	sxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	440b      	add	r3, r1
 800e1aa:	7cdb      	ldrb	r3, [r3, #19]
 800e1ac:	b21b      	sxth	r3, r3
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e1b2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f103 0213 	add.w	r2, r3, #19
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e1c0:	3b02      	subs	r3, #2
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	f000 f939 	bl	800e43e <calcCRC>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	893b      	ldrh	r3, [r7, #8]
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d009      	beq.n	800e1ea <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e1dc:	3301      	adds	r3, #1
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e1e6:	23fc      	movs	r3, #252	; 0xfc
 800e1e8:	e10f      	b.n	800e40a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73bb      	strb	r3, [r7, #14]
 800e1f2:	e00c      	b.n	800e20e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e1f4:	7bbb      	ldrb	r3, [r7, #14]
 800e1f6:	4a87      	ldr	r2, [pc, #540]	; (800e414 <validateRequest+0x290>)
 800e1f8:	5cd2      	ldrb	r2, [r2, r3]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7d1b      	ldrb	r3, [r3, #20]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d102      	bne.n	800e208 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e202:	2301      	movs	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
	            break;
 800e206:	e005      	b.n	800e214 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e208:	7bbb      	ldrb	r3, [r7, #14]
 800e20a:	3301      	adds	r3, #1
 800e20c:	73bb      	strb	r3, [r7, #14]
 800e20e:	7bbb      	ldrb	r3, [r7, #14]
 800e210:	2b07      	cmp	r3, #7
 800e212:	d9ef      	bls.n	800e1f4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	f083 0301 	eor.w	r3, r3, #1
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d009      	beq.n	800e234 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e226:	3301      	adds	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e230:	2301      	movs	r3, #1
 800e232:	e0ea      	b.n	800e40a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7d1b      	ldrb	r3, [r3, #20]
 800e240:	3b01      	subs	r3, #1
 800e242:	2b0f      	cmp	r3, #15
 800e244:	f200 80e0 	bhi.w	800e408 <validateRequest+0x284>
 800e248:	a201      	add	r2, pc, #4	; (adr r2, 800e250 <validateRequest+0xcc>)
 800e24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24e:	bf00      	nop
 800e250:	0800e291 	.word	0x0800e291
 800e254:	0800e291 	.word	0x0800e291
 800e258:	0800e3a9 	.word	0x0800e3a9
 800e25c:	0800e3a9 	.word	0x0800e3a9
 800e260:	0800e33d 	.word	0x0800e33d
 800e264:	0800e385 	.word	0x0800e385
 800e268:	0800e409 	.word	0x0800e409
 800e26c:	0800e409 	.word	0x0800e409
 800e270:	0800e409 	.word	0x0800e409
 800e274:	0800e409 	.word	0x0800e409
 800e278:	0800e409 	.word	0x0800e409
 800e27c:	0800e409 	.word	0x0800e409
 800e280:	0800e409 	.word	0x0800e409
 800e284:	0800e409 	.word	0x0800e409
 800e288:	0800e291 	.word	0x0800e291
 800e28c:	0800e3a9 	.word	0x0800e3a9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	7d5a      	ldrb	r2, [r3, #21]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7d9b      	ldrb	r3, [r3, #22]
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f000 f8bc 	bl	800e418 <word>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	091b      	lsrs	r3, r3, #4
 800e2a4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	7dda      	ldrb	r2, [r3, #23]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7e1b      	ldrb	r3, [r3, #24]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f000 f8b1 	bl	800e418 <word>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	091b      	lsrs	r3, r3, #4
 800e2ba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7dda      	ldrb	r2, [r3, #23]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7e1b      	ldrb	r3, [r3, #24]
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	f000 f8a6 	bl	800e418 <word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	f003 030f 	and.w	r3, r3, #15
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <validateRequest+0x15a>
 800e2d8:	897b      	ldrh	r3, [r7, #10]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e2de:	89ba      	ldrh	r2, [r7, #12]
 800e2e0:	897b      	ldrh	r3, [r7, #10]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	dd01      	ble.n	800e2f2 <validateRequest+0x16e>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e08b      	b.n	800e40a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	7dda      	ldrb	r2, [r3, #23]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	7e1b      	ldrb	r3, [r3, #24]
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	f000 f88b 	bl	800e418 <word>
 800e302:	4603      	mov	r3, r0
 800e304:	08db      	lsrs	r3, r3, #3
 800e306:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7dda      	ldrb	r2, [r3, #23]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	7e1b      	ldrb	r3, [r3, #24]
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f000 f880 	bl	800e418 <word>
 800e318:	4603      	mov	r3, r0
 800e31a:	f003 0307 	and.w	r3, r3, #7
 800e31e:	b29b      	uxth	r3, r3
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <validateRequest+0x1a6>
 800e324:	897b      	ldrh	r3, [r7, #10]
 800e326:	3301      	adds	r3, #1
 800e328:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e32a:	897b      	ldrh	r3, [r7, #10]
 800e32c:	3305      	adds	r3, #5
 800e32e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e330:	897b      	ldrh	r3, [r7, #10]
 800e332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e336:	d960      	bls.n	800e3fa <validateRequest+0x276>
 800e338:	2303      	movs	r3, #3
 800e33a:	e066      	b.n	800e40a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	7d5a      	ldrb	r2, [r3, #21]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	7d9b      	ldrb	r3, [r3, #22]
 800e344:	4619      	mov	r1, r3
 800e346:	4610      	mov	r0, r2
 800e348:	f000 f866 	bl	800e418 <word>
 800e34c:	4603      	mov	r3, r0
 800e34e:	091b      	lsrs	r3, r3, #4
 800e350:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	7d5a      	ldrb	r2, [r3, #21]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7d9b      	ldrb	r3, [r3, #22]
 800e35a:	4619      	mov	r1, r3
 800e35c:	4610      	mov	r0, r2
 800e35e:	f000 f85b 	bl	800e418 <word>
 800e362:	4603      	mov	r3, r0
 800e364:	f003 030f 	and.w	r3, r3, #15
 800e368:	b29b      	uxth	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <validateRequest+0x1f0>
 800e36e:	89bb      	ldrh	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e37a:	89ba      	ldrh	r2, [r7, #12]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d93e      	bls.n	800e3fe <validateRequest+0x27a>
 800e380:	2302      	movs	r3, #2
 800e382:	e042      	b.n	800e40a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	7d5a      	ldrb	r2, [r3, #21]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	7d9b      	ldrb	r3, [r3, #22]
 800e38c:	4619      	mov	r1, r3
 800e38e:	4610      	mov	r0, r2
 800e390:	f000 f842 	bl	800e418 <word>
 800e394:	4603      	mov	r3, r0
 800e396:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e39e:	89ba      	ldrh	r2, [r7, #12]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d92e      	bls.n	800e402 <validateRequest+0x27e>
 800e3a4:	2302      	movs	r3, #2
 800e3a6:	e030      	b.n	800e40a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7d5a      	ldrb	r2, [r3, #21]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	7d9b      	ldrb	r3, [r3, #22]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f000 f830 	bl	800e418 <word>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7dda      	ldrb	r2, [r3, #23]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7e1b      	ldrb	r3, [r3, #24]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f000 f826 	bl	800e418 <word>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e3d0:	89ba      	ldrh	r2, [r7, #12]
 800e3d2:	897b      	ldrh	r3, [r7, #10]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	dd01      	ble.n	800e3e4 <validateRequest+0x260>
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	e012      	b.n	800e40a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e3e4:	897b      	ldrh	r3, [r7, #10]
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	3305      	adds	r3, #5
 800e3ec:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e3ee:	897b      	ldrh	r3, [r7, #10]
 800e3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3f4:	d907      	bls.n	800e406 <validateRequest+0x282>
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	e007      	b.n	800e40a <validateRequest+0x286>
	        break;
 800e3fa:	bf00      	nop
 800e3fc:	e004      	b.n	800e408 <validateRequest+0x284>
	        break;
 800e3fe:	bf00      	nop
 800e400:	e002      	b.n	800e408 <validateRequest+0x284>
	        break;
 800e402:	bf00      	nop
 800e404:	e000      	b.n	800e408 <validateRequest+0x284>
	        break;
 800e406:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e408:	2300      	movs	r3, #0

}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	0800f1f4 	.word	0x0800f1f4

0800e418 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	4603      	mov	r3, r0
 800e420:	460a      	mov	r2, r1
 800e422:	71fb      	strb	r3, [r7, #7]
 800e424:	4613      	mov	r3, r2
 800e426:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e428:	79bb      	ldrb	r3, [r7, #6]
 800e42a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e430:	89bb      	ldrh	r3, [r7, #12]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3714      	adds	r7, #20
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr

0800e43e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e43e:	b480      	push	{r7}
 800e440:	b087      	sub	sp, #28
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
 800e446:	460b      	mov	r3, r1
 800e448:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e44e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e450:	2300      	movs	r3, #0
 800e452:	74fb      	strb	r3, [r7, #19]
 800e454:	e023      	b.n	800e49e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e456:	7cfb      	ldrb	r3, [r7, #19]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	4413      	add	r3, r2
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	4053      	eors	r3, r2
 800e464:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e466:	2301      	movs	r3, #1
 800e468:	74bb      	strb	r3, [r7, #18]
 800e46a:	e012      	b.n	800e492 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	085b      	lsrs	r3, r3, #1
 800e478:	617b      	str	r3, [r7, #20]
            if (flag)
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <calcCRC+0x4e>
                temp ^= 0xA001;
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e486:	f083 0301 	eor.w	r3, r3, #1
 800e48a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e48c:	7cbb      	ldrb	r3, [r7, #18]
 800e48e:	3301      	adds	r3, #1
 800e490:	74bb      	strb	r3, [r7, #18]
 800e492:	7cbb      	ldrb	r3, [r7, #18]
 800e494:	2b08      	cmp	r3, #8
 800e496:	d9e9      	bls.n	800e46c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e498:	7cfb      	ldrb	r3, [r7, #19]
 800e49a:	3301      	adds	r3, #1
 800e49c:	74fb      	strb	r3, [r7, #19]
 800e49e:	7cfa      	ldrb	r2, [r7, #19]
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d3d7      	bcc.n	800e456 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	0a1b      	lsrs	r3, r3, #8
 800e4aa:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	021b      	lsls	r3, r3, #8
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	b29b      	uxth	r3, r3

}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	371c      	adds	r7, #28
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	6039      	str	r1, [r7, #0]
 800e4d6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	7d1b      	ldrb	r3, [r3, #20]
 800e4dc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	7a1a      	ldrb	r2, [r3, #8]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
 800e4e8:	3b80      	subs	r3, #128	; 0x80
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	79fa      	ldrb	r2, [r7, #7]
 800e4f4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2203      	movs	r2, #3
 800e4fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e4fe:	bf00      	nop
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e50a:	b590      	push	{r4, r7, lr}
 800e50c:	b087      	sub	sp, #28
 800e50e:	af02      	add	r7, sp, #8
 800e510:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f103 0213 	add.w	r2, r3, #19
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e51e:	4619      	mov	r1, r3
 800e520:	4610      	mov	r0, r2
 800e522:	f7ff ff8c 	bl	800e43e <calcCRC>
 800e526:	4603      	mov	r3, r0
 800e528:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e52a:	89fb      	ldrh	r3, [r7, #14]
 800e52c:	0a1b      	lsrs	r3, r3, #8
 800e52e:	b29a      	uxth	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e536:	4619      	mov	r1, r3
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	440b      	add	r3, r1
 800e53e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e546:	3301      	adds	r3, #1
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e556:	4619      	mov	r1, r3
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	440b      	add	r3, r1
 800e560:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e568:	3301      	adds	r3, #1
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00c      	beq.n	800e594 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f8 ff18 	bl	80073b4 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68d8      	ldr	r0, [r3, #12]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8a1b      	ldrh	r3, [r3, #16]
 800e58c:	2201      	movs	r2, #1
 800e58e:	4619      	mov	r1, r3
 800e590:	f7f5 fdb8 	bl	8004104 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d10c      	bne.n	800e5b8 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6858      	ldr	r0, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f103 0113 	add.w	r1, r3, #19
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	f7f8 f8f9 	bl	80067a8 <HAL_UART_Transmit_IT>
 800e5b6:	e00b      	b.n	800e5d0 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6858      	ldr	r0, [r3, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f103 0113 	add.w	r1, r3, #19
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	f7f8 f9cc 	bl	8006968 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e5d0:	21fa      	movs	r1, #250	; 0xfa
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	f7fd fc1a 	bl	800be0c <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e5d8:	bf00      	nop
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d0f7      	beq.n	800e5da <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00c      	beq.n	800e60c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	68d8      	ldr	r0, [r3, #12]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	8a1b      	ldrh	r3, [r3, #16]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	f7f5 fd81 	bl	8004104 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	4618      	mov	r0, r3
 800e608:	f7f8 ff28 	bl	800745c <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	2b04      	cmp	r3, #4
 800e612:	d10c      	bne.n	800e62e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e61a:	f7fc ff25 	bl	800b468 <xTaskGetTickCount>
 800e61e:	4602      	mov	r2, r0
 800e620:	2300      	movs	r3, #0
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	2300      	movs	r3, #0
 800e626:	2102      	movs	r1, #2
 800e628:	4620      	mov	r0, r4
 800e62a:	f7fd ff5b 	bl	800c4e4 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e63c:	3301      	adds	r3, #1
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e646:	bf00      	nop
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd90      	pop	{r4, r7, pc}

0800e64e <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b088      	sub	sp, #32
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	460b      	mov	r3, r1
 800e658:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7d5a      	ldrb	r2, [r3, #21]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	7d9b      	ldrb	r3, [r3, #22]
 800e662:	4619      	mov	r1, r3
 800e664:	4610      	mov	r0, r2
 800e666:	f7ff fed7 	bl	800e418 <word>
 800e66a:	4603      	mov	r3, r0
 800e66c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7dda      	ldrb	r2, [r3, #23]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7e1b      	ldrb	r3, [r3, #24]
 800e676:	4619      	mov	r1, r3
 800e678:	4610      	mov	r0, r2
 800e67a:	f7ff fecd 	bl	800e418 <word>
 800e67e:	4603      	mov	r3, r0
 800e680:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e682:	8abb      	ldrh	r3, [r7, #20]
 800e684:	08db      	lsrs	r3, r3, #3
 800e686:	b29b      	uxth	r3, r3
 800e688:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e68a:	8abb      	ldrh	r3, [r7, #20]
 800e68c:	f003 0307 	and.w	r3, r3, #7
 800e690:	b29b      	uxth	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <process_FC1+0x4e>
 800e696:	7ffb      	ldrb	r3, [r7, #31]
 800e698:	3301      	adds	r3, #1
 800e69a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	7ffa      	ldrb	r2, [r7, #31]
 800e6a0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2203      	movs	r2, #3
 800e6a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	7ffb      	ldrb	r3, [r7, #31]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	2200      	movs	r2, #0
 800e6be:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e6c4:	78fb      	ldrb	r3, [r7, #3]
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d104      	bne.n	800e6d4 <process_FC1+0x86>
    	u16regs = modH->u16regsCoils;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e6d0:	61bb      	str	r3, [r7, #24]
 800e6d2:	e006      	b.n	800e6e2 <process_FC1+0x94>
    }
    else if (Database == 2){
 800e6d4:	78fb      	ldrb	r3, [r7, #3]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d103      	bne.n	800e6e2 <process_FC1+0x94>
    	u16regs = modH->u16regsCoilsRO;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e6e0:	61bb      	str	r3, [r7, #24]
    }

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	83bb      	strh	r3, [r7, #28]
 800e6e6:	e056      	b.n	800e796 <process_FC1+0x148>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e6e8:	8afa      	ldrh	r2, [r7, #22]
 800e6ea:	8bbb      	ldrh	r3, [r7, #28]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e6f0:	8a3b      	ldrh	r3, [r7, #16]
 800e6f2:	091b      	lsrs	r3, r3, #4
 800e6f4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e6f6:	8a3b      	ldrh	r3, [r7, #16]
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	f003 030f 	and.w	r3, r3, #15
 800e6fe:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e700:	89fb      	ldrh	r3, [r7, #14]
 800e702:	005b      	lsls	r3, r3, #1
 800e704:	69ba      	ldr	r2, [r7, #24]
 800e706:	4413      	add	r3, r2
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	7b7b      	ldrb	r3, [r7, #13]
 800e70e:	fa42 f303 	asr.w	r3, r2, r3
 800e712:	f003 0301 	and.w	r3, r3, #1
 800e716:	2b00      	cmp	r3, #0
 800e718:	d014      	beq.n	800e744 <process_FC1+0xf6>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e720:	461a      	mov	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4413      	add	r3, r2
 800e726:	7cda      	ldrb	r2, [r3, #19]
 800e728:	7fbb      	ldrb	r3, [r7, #30]
 800e72a:	2101      	movs	r1, #1
 800e72c:	fa01 f303 	lsl.w	r3, r1, r3
 800e730:	b2db      	uxtb	r3, r3
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e738:	4313      	orrs	r3, r2
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	440b      	add	r3, r1
 800e740:	74da      	strb	r2, [r3, #19]
 800e742:	e015      	b.n	800e770 <process_FC1+0x122>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e74a:	461a      	mov	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	4413      	add	r3, r2
 800e750:	7cda      	ldrb	r2, [r3, #19]
 800e752:	7fbb      	ldrb	r3, [r7, #30]
 800e754:	2101      	movs	r1, #1
 800e756:	fa01 f303 	lsl.w	r3, r1, r3
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	43db      	mvns	r3, r3
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	6879      	ldr	r1, [r7, #4]
 800e762:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e766:	4013      	ands	r3, r2
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	440b      	add	r3, r1
 800e76e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e770:	7fbb      	ldrb	r3, [r7, #30]
 800e772:	3301      	adds	r3, #1
 800e774:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e776:	7fbb      	ldrb	r3, [r7, #30]
 800e778:	2b07      	cmp	r3, #7
 800e77a:	d909      	bls.n	800e790 <process_FC1+0x142>
        {
            u8bitsno = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e786:	3301      	adds	r3, #1
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e790:	8bbb      	ldrh	r3, [r7, #28]
 800e792:	3301      	adds	r3, #1
 800e794:	83bb      	strh	r3, [r7, #28]
 800e796:	8bba      	ldrh	r2, [r7, #28]
 800e798:	8abb      	ldrh	r3, [r7, #20]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d3a4      	bcc.n	800e6e8 <process_FC1+0x9a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e79e:	8abb      	ldrh	r3, [r7, #20]
 800e7a0:	f003 0307 	and.w	r3, r3, #7
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d007      	beq.n	800e7ba <process_FC1+0x16c>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7c0:	3302      	adds	r3, #2
 800e7c2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff fea0 	bl	800e50a <sendTxBuffer>
    return u8CopyBufferSize;
 800e7ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b086      	sub	sp, #24
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	460b      	mov	r3, r1
 800e7e0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7d5a      	ldrb	r2, [r3, #21]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7d9b      	ldrb	r3, [r3, #22]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7ff fe13 	bl	800e418 <word>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	7dda      	ldrb	r2, [r3, #23]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	7e1b      	ldrb	r3, [r3, #24]
 800e7fe:	4619      	mov	r1, r3
 800e800:	4610      	mov	r0, r2
 800e802:	f7ff fe09 	bl	800e418 <word>
 800e806:	4603      	mov	r3, r0
 800e808:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e80a:	7b7b      	ldrb	r3, [r7, #13]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2203      	movs	r2, #3
 800e818:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800e81c:	78fb      	ldrb	r3, [r7, #3]
 800e81e:	2b03      	cmp	r3, #3
 800e820:	d104      	bne.n	800e82c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e828:	613b      	str	r3, [r7, #16]
 800e82a:	e006      	b.n	800e83a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800e82c:	78fb      	ldrb	r3, [r7, #3]
 800e82e:	2b04      	cmp	r3, #4
 800e830:	d103      	bne.n	800e83a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e838:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e83a:	89fb      	ldrh	r3, [r7, #14]
 800e83c:	82fb      	strh	r3, [r7, #22]
 800e83e:	e02e      	b.n	800e89e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800e840:	8afb      	ldrh	r3, [r7, #22]
 800e842:	005b      	lsls	r3, r3, #1
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	4413      	add	r3, r2
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	0a1b      	lsrs	r3, r3, #8
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e854:	4619      	mov	r1, r3
 800e856:	b2d2      	uxtb	r2, r2
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	440b      	add	r3, r1
 800e85c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e864:	3301      	adds	r3, #1
 800e866:	b2da      	uxtb	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800e86e:	8afb      	ldrh	r3, [r7, #22]
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	693a      	ldr	r2, [r7, #16]
 800e874:	4413      	add	r3, r2
 800e876:	881a      	ldrh	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e87e:	4619      	mov	r1, r3
 800e880:	b2d2      	uxtb	r2, r2
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	440b      	add	r3, r1
 800e886:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e88e:	3301      	adds	r3, #1
 800e890:	b2da      	uxtb	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e898:	8afb      	ldrh	r3, [r7, #22]
 800e89a:	3301      	adds	r3, #1
 800e89c:	82fb      	strh	r3, [r7, #22]
 800e89e:	8afa      	ldrh	r2, [r7, #22]
 800e8a0:	89f9      	ldrh	r1, [r7, #14]
 800e8a2:	7b7b      	ldrb	r3, [r7, #13]
 800e8a4:	440b      	add	r3, r1
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	dbca      	blt.n	800e840 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8b0:	3302      	adds	r3, #2
 800e8b2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7ff fe28 	bl	800e50a <sendTxBuffer>

    return u8CopyBufferSize;
 800e8ba:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7d5a      	ldrb	r2, [r3, #21]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	7d9b      	ldrb	r3, [r3, #22]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f7ff fd9d 	bl	800e418 <word>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e8e2:	89fb      	ldrh	r3, [r7, #14]
 800e8e4:	091b      	lsrs	r3, r3, #4
 800e8e6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e8e8:	89fb      	ldrh	r3, [r7, #14]
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	f003 030f 	and.w	r3, r3, #15
 800e8f0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	7ddb      	ldrb	r3, [r3, #23]
 800e8f6:	2bff      	cmp	r3, #255	; 0xff
 800e8f8:	d115      	bne.n	800e926 <process_FC5+0x60>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e900:	89bb      	ldrh	r3, [r7, #12]
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	4413      	add	r3, r2
 800e906:	8819      	ldrh	r1, [r3, #0]
 800e908:	7afb      	ldrb	r3, [r7, #11]
 800e90a:	2201      	movs	r2, #1
 800e90c:	fa02 f303 	lsl.w	r3, r2, r3
 800e910:	b29a      	uxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e918:	89bb      	ldrh	r3, [r7, #12]
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	4403      	add	r3, r0
 800e91e:	430a      	orrs	r2, r1
 800e920:	b292      	uxth	r2, r2
 800e922:	801a      	strh	r2, [r3, #0]
 800e924:	e016      	b.n	800e954 <process_FC5+0x8e>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e92c:	89bb      	ldrh	r3, [r7, #12]
 800e92e:	005b      	lsls	r3, r3, #1
 800e930:	4413      	add	r3, r2
 800e932:	8819      	ldrh	r1, [r3, #0]
 800e934:	7afb      	ldrb	r3, [r7, #11]
 800e936:	2201      	movs	r2, #1
 800e938:	fa02 f303 	lsl.w	r3, r2, r3
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	43db      	mvns	r3, r3
 800e940:	b29a      	uxth	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e948:	89bb      	ldrh	r3, [r7, #12]
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4403      	add	r3, r0
 800e94e:	400a      	ands	r2, r1
 800e950:	b292      	uxth	r2, r2
 800e952:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2206      	movs	r2, #6
 800e958:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e962:	3302      	adds	r3, #2
 800e964:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff fdcf 	bl	800e50a <sendTxBuffer>

    return u8CopyBufferSize;
 800e96c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	7d5a      	ldrb	r2, [r3, #21]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7d9b      	ldrb	r3, [r3, #22]
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7ff fd44 	bl	800e418 <word>
 800e990:	4603      	mov	r3, r0
 800e992:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	7dda      	ldrb	r2, [r3, #23]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7e1b      	ldrb	r3, [r3, #24]
 800e99c:	4619      	mov	r1, r3
 800e99e:	4610      	mov	r0, r2
 800e9a0:	f7ff fd3a 	bl	800e418 <word>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e9ae:	89fb      	ldrh	r3, [r7, #14]
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	89ba      	ldrh	r2, [r7, #12]
 800e9b6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2206      	movs	r2, #6
 800e9bc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9c6:	3302      	adds	r3, #2
 800e9c8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7ff fd9d 	bl	800e50a <sendTxBuffer>

    return u8CopyBufferSize;
 800e9d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3710      	adds	r7, #16
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	7d5a      	ldrb	r2, [r3, #21]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	7d9b      	ldrb	r3, [r3, #22]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	f7ff fd12 	bl	800e418 <word>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7dda      	ldrb	r2, [r3, #23]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	7e1b      	ldrb	r3, [r3, #24]
 800ea00:	4619      	mov	r1, r3
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7ff fd08 	bl	800e418 <word>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800ea10:	2307      	movs	r3, #7
 800ea12:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ea14:	2300      	movs	r3, #0
 800ea16:	82bb      	strh	r3, [r7, #20]
 800ea18:	e058      	b.n	800eacc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800ea1a:	8a7a      	ldrh	r2, [r7, #18]
 800ea1c:	8abb      	ldrh	r3, [r7, #20]
 800ea1e:	4413      	add	r3, r2
 800ea20:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800ea22:	89bb      	ldrh	r3, [r7, #12]
 800ea24:	091b      	lsrs	r3, r3, #4
 800ea26:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ea28:	89bb      	ldrh	r3, [r7, #12]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 030f 	and.w	r3, r3, #15
 800ea30:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	4413      	add	r3, r2
 800ea38:	7cdb      	ldrb	r3, [r3, #19]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	7dbb      	ldrb	r3, [r7, #22]
 800ea3e:	fa42 f303 	asr.w	r3, r2, r3
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	bf14      	ite	ne
 800ea4a:	2301      	movne	r3, #1
 800ea4c:	2300      	moveq	r3, #0
 800ea4e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800ea50:	7a3b      	ldrb	r3, [r7, #8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d015      	beq.n	800ea82 <process_FC15+0xa6>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ea5c:	897b      	ldrh	r3, [r7, #10]
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	4413      	add	r3, r2
 800ea62:	8819      	ldrh	r1, [r3, #0]
 800ea64:	7a7b      	ldrb	r3, [r7, #9]
 800ea66:	2201      	movs	r2, #1
 800ea68:	fa02 f303 	lsl.w	r3, r2, r3
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ea74:	897b      	ldrh	r3, [r7, #10]
 800ea76:	005b      	lsls	r3, r3, #1
 800ea78:	4403      	add	r3, r0
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	b292      	uxth	r2, r2
 800ea7e:	801a      	strh	r2, [r3, #0]
 800ea80:	e016      	b.n	800eab0 <process_FC15+0xd4>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ea88:	897b      	ldrh	r3, [r7, #10]
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	4413      	add	r3, r2
 800ea8e:	8819      	ldrh	r1, [r3, #0]
 800ea90:	7a7b      	ldrb	r3, [r7, #9]
 800ea92:	2201      	movs	r2, #1
 800ea94:	fa02 f303 	lsl.w	r3, r2, r3
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	43db      	mvns	r3, r3
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800eaa4:	897b      	ldrh	r3, [r7, #10]
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	4403      	add	r3, r0
 800eaaa:	400a      	ands	r2, r1
 800eaac:	b292      	uxth	r2, r2
 800eaae:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800eab0:	7dbb      	ldrb	r3, [r7, #22]
 800eab2:	3301      	adds	r3, #1
 800eab4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800eab6:	7dbb      	ldrb	r3, [r7, #22]
 800eab8:	2b07      	cmp	r3, #7
 800eaba:	d904      	bls.n	800eac6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	3301      	adds	r3, #1
 800eac4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eac6:	8abb      	ldrh	r3, [r7, #20]
 800eac8:	3301      	adds	r3, #1
 800eaca:	82bb      	strh	r3, [r7, #20]
 800eacc:	8aba      	ldrh	r2, [r7, #20]
 800eace:	8a3b      	ldrh	r3, [r7, #16]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d3a2      	bcc.n	800ea1a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2206      	movs	r2, #6
 800ead8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eae2:	3302      	adds	r3, #2
 800eae4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff fd0f 	bl	800e50a <sendTxBuffer>
    return u8CopyBufferSize;
 800eaec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7d5b      	ldrb	r3, [r3, #21]
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	b21a      	sxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	7d9b      	ldrb	r3, [r3, #22]
 800eb0c:	b21b      	sxth	r3, r3
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	b21b      	sxth	r3, r3
 800eb12:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	7ddb      	ldrb	r3, [r3, #23]
 800eb18:	021b      	lsls	r3, r3, #8
 800eb1a:	b21a      	sxth	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7e1b      	ldrb	r3, [r3, #24]
 800eb20:	b21b      	sxth	r3, r3
 800eb22:	4313      	orrs	r3, r2
 800eb24:	b21b      	sxth	r3, r3
 800eb26:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800eb2e:	8a7b      	ldrh	r3, [r7, #18]
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2206      	movs	r2, #6
 800eb3a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800eb3e:	2300      	movs	r3, #0
 800eb40:	82fb      	strh	r3, [r7, #22]
 800eb42:	e01d      	b.n	800eb80 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800eb44:	8afb      	ldrh	r3, [r7, #22]
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	3307      	adds	r3, #7
        temp = word(
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800eb50:	8afb      	ldrh	r3, [r7, #22]
 800eb52:	3304      	adds	r3, #4
 800eb54:	005b      	lsls	r3, r3, #1
        temp = word(
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	4413      	add	r3, r2
 800eb5a:	7cdb      	ldrb	r3, [r3, #19]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	f7ff fc5b 	bl	800e418 <word>
 800eb62:	4603      	mov	r3, r0
 800eb64:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800eb6c:	8ab9      	ldrh	r1, [r7, #20]
 800eb6e:	8afb      	ldrh	r3, [r7, #22]
 800eb70:	440b      	add	r3, r1
 800eb72:	005b      	lsls	r3, r3, #1
 800eb74:	4413      	add	r3, r2
 800eb76:	89fa      	ldrh	r2, [r7, #14]
 800eb78:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800eb7a:	8afb      	ldrh	r3, [r7, #22]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	82fb      	strh	r3, [r7, #22]
 800eb80:	8afa      	ldrh	r2, [r7, #22]
 800eb82:	8a7b      	ldrh	r3, [r7, #18]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d3dd      	bcc.n	800eb44 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb8e:	3302      	adds	r3, #2
 800eb90:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fcb9 	bl	800e50a <sendTxBuffer>

    return u8CopyBufferSize;
 800eb98:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af02      	add	r7, sp, #8
 800ebaa:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ebac:	2300      	movs	r3, #0
 800ebae:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e019      	b.n	800ebea <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800ebb6:	4a17      	ldr	r2, [pc, #92]	; (800ec14 <HAL_UART_TxCpltCallback+0x70>)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d10e      	bne.n	800ebe4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800ebc6:	4a13      	ldr	r2, [pc, #76]	; (800ec14 <HAL_UART_TxCpltCallback+0x70>)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ebd2:	f107 0308 	add.w	r3, r7, #8
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	2300      	movs	r3, #0
 800ebda:	2200      	movs	r2, #0
 800ebdc:	2100      	movs	r1, #0
 800ebde:	f7fd fa6f 	bl	800c0c0 <xTaskGenericNotifyFromISR>
	   		break;
 800ebe2:	e008      	b.n	800ebf6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	4b0b      	ldr	r3, [pc, #44]	; (800ec18 <HAL_UART_TxCpltCallback+0x74>)
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	dbdf      	blt.n	800ebb6 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d007      	beq.n	800ec0c <HAL_UART_TxCpltCallback+0x68>
 800ebfc:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <HAL_UART_TxCpltCallback+0x78>)
 800ebfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	20002108 	.word	0x20002108
 800ec18:	20002110 	.word	0x20002110
 800ec1c:	e000ed04 	.word	0xe000ed04

0800ec20 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800ec20:	b590      	push	{r4, r7, lr}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af02      	add	r7, sp, #8
 800ec26:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	e042      	b.n	800ecb8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800ec32:	4a2d      	ldr	r2, [pc, #180]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d137      	bne.n	800ecb2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800ec42:	4a29      	ldr	r2, [pc, #164]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d139      	bne.n	800ecc6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800ec52:	4a25      	ldr	r2, [pc, #148]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec5a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ec5e:	4922      	ldr	r1, [pc, #136]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec66:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7fe fb95 	bl	800d39c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800ec72:	4a1d      	ldr	r2, [pc, #116]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec7a:	6858      	ldr	r0, [r3, #4]
 800ec7c:	4a1a      	ldr	r2, [pc, #104]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec84:	33b8      	adds	r3, #184	; 0xb8
 800ec86:	2201      	movs	r2, #1
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7f7 fe21 	bl	80068d0 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800ec8e:	4a16      	ldr	r2, [pc, #88]	; (800ece8 <HAL_UART_RxCpltCallback+0xc8>)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec96:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800ec9a:	f7fc fbf5 	bl	800b488 <xTaskGetTickCountFromISR>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	f107 0308 	add.w	r3, r7, #8
 800eca4:	2100      	movs	r1, #0
 800eca6:	9100      	str	r1, [sp, #0]
 800eca8:	2107      	movs	r1, #7
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f7fd fc1a 	bl	800c4e4 <xTimerGenericCommand>
    		}
    		break;
 800ecb0:	e009      	b.n	800ecc6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	60fb      	str	r3, [r7, #12]
 800ecb8:	4b0c      	ldr	r3, [pc, #48]	; (800ecec <HAL_UART_RxCpltCallback+0xcc>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	dbb6      	blt.n	800ec32 <HAL_UART_RxCpltCallback+0x12>
 800ecc4:	e000      	b.n	800ecc8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800ecc6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d007      	beq.n	800ecde <HAL_UART_RxCpltCallback+0xbe>
 800ecce:	4b08      	ldr	r3, [pc, #32]	; (800ecf0 <HAL_UART_RxCpltCallback+0xd0>)
 800ecd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	f3bf 8f4f 	dsb	sy
 800ecda:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800ecde:	bf00      	nop
 800ece0:	3714      	adds	r7, #20
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd90      	pop	{r4, r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20002108 	.word	0x20002108
 800ecec:	20002110 	.word	0x20002110
 800ecf0:	e000ed04 	.word	0xe000ed04

0800ecf4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	60fb      	str	r3, [r7, #12]
 800ed00:	e041      	b.n	800ed86 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800ed02:	4a27      	ldr	r2, [pc, #156]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d136      	bne.n	800ed80 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ed12:	4a23      	ldr	r2, [pc, #140]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed1a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ed1e:	2b04      	cmp	r3, #4
 800ed20:	d138      	bne.n	800ed94 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ed22:	e007      	b.n	800ed34 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ed24:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7f7 fe9a 	bl	8006a68 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ed34:	4a1a      	ldr	r2, [pc, #104]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed3c:	6858      	ldr	r0, [r3, #4]
 800ed3e:	4a18      	ldr	r2, [pc, #96]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed46:	33d0      	adds	r3, #208	; 0xd0
 800ed48:	2280      	movs	r2, #128	; 0x80
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	f7fa fb83 	bl	8009456 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1e6      	bne.n	800ed24 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ed56:	4a12      	ldr	r2, [pc, #72]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	490d      	ldr	r1, [pc, #52]	; (800eda0 <HAL_UART_ErrorCallback+0xac>)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f022 0204 	bic.w	r2, r2, #4
 800ed7c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800ed7e:	e009      	b.n	800ed94 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	3301      	adds	r3, #1
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	4b07      	ldr	r3, [pc, #28]	; (800eda4 <HAL_UART_ErrorCallback+0xb0>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	dbb7      	blt.n	800ed02 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800ed92:	e000      	b.n	800ed96 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800ed94:	bf00      	nop
}
 800ed96:	bf00      	nop
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	20002108 	.word	0x20002108
 800eda4:	20002110 	.word	0x20002110

0800eda8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af02      	add	r7, sp, #8
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800edb4:	2300      	movs	r3, #0
 800edb6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800edb8:	2300      	movs	r3, #0
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e061      	b.n	800ee82 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800edbe:	4a3c      	ldr	r2, [pc, #240]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d156      	bne.n	800ee7c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800edce:	4a38      	ldr	r2, [pc, #224]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edd6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800edda:	2b04      	cmp	r3, #4
 800eddc:	d158      	bne.n	800ee90 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800edde:	887b      	ldrh	r3, [r7, #2]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d055      	beq.n	800ee90 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800ede4:	4a32      	ldr	r2, [pc, #200]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edec:	887a      	ldrh	r2, [r7, #2]
 800edee:	b2d2      	uxtb	r2, r2
 800edf0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800edf4:	4a2e      	ldr	r2, [pc, #184]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ee02:	e007      	b.n	800ee14 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ee04:	4a2a      	ldr	r2, [pc, #168]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f7 fe2a 	bl	8006a68 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ee14:	4a26      	ldr	r2, [pc, #152]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee1c:	6858      	ldr	r0, [r3, #4]
 800ee1e:	4a24      	ldr	r2, [pc, #144]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee26:	33d0      	adds	r3, #208	; 0xd0
 800ee28:	2280      	movs	r2, #128	; 0x80
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	f7fa fb13 	bl	8009456 <HAL_UARTEx_ReceiveToIdle_DMA>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1e6      	bne.n	800ee04 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ee36:	4a1e      	ldr	r2, [pc, #120]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4919      	ldr	r1, [pc, #100]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f022 0204 	bic.w	r2, r2, #4
 800ee5c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ee5e:	4a14      	ldr	r2, [pc, #80]	; (800eeb0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee66:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ee6a:	f107 0308 	add.w	r3, r7, #8
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	2300      	movs	r3, #0
 800ee72:	2203      	movs	r2, #3
 800ee74:	2100      	movs	r1, #0
 800ee76:	f7fd f923 	bl	800c0c0 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800ee7a:	e009      	b.n	800ee90 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	db97      	blt.n	800edbe <HAL_UARTEx_RxEventCallback+0x16>
 800ee8e:	e000      	b.n	800ee92 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ee90:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d007      	beq.n	800eea8 <HAL_UARTEx_RxEventCallback+0x100>
 800ee98:	4b07      	ldr	r3, [pc, #28]	; (800eeb8 <HAL_UARTEx_RxEventCallback+0x110>)
 800ee9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee9e:	601a      	str	r2, [r3, #0]
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	f3bf 8f6f 	isb	sy
}
 800eea8:	bf00      	nop
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	20002108 	.word	0x20002108
 800eeb4:	20002110 	.word	0x20002110
 800eeb8:	e000ed04 	.word	0xe000ed04

0800eebc <memset>:
 800eebc:	4402      	add	r2, r0
 800eebe:	4603      	mov	r3, r0
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d100      	bne.n	800eec6 <memset+0xa>
 800eec4:	4770      	bx	lr
 800eec6:	f803 1b01 	strb.w	r1, [r3], #1
 800eeca:	e7f9      	b.n	800eec0 <memset+0x4>

0800eecc <__libc_init_array>:
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	4d0d      	ldr	r5, [pc, #52]	; (800ef04 <__libc_init_array+0x38>)
 800eed0:	4c0d      	ldr	r4, [pc, #52]	; (800ef08 <__libc_init_array+0x3c>)
 800eed2:	1b64      	subs	r4, r4, r5
 800eed4:	10a4      	asrs	r4, r4, #2
 800eed6:	2600      	movs	r6, #0
 800eed8:	42a6      	cmp	r6, r4
 800eeda:	d109      	bne.n	800eef0 <__libc_init_array+0x24>
 800eedc:	4d0b      	ldr	r5, [pc, #44]	; (800ef0c <__libc_init_array+0x40>)
 800eede:	4c0c      	ldr	r4, [pc, #48]	; (800ef10 <__libc_init_array+0x44>)
 800eee0:	f000 f826 	bl	800ef30 <_init>
 800eee4:	1b64      	subs	r4, r4, r5
 800eee6:	10a4      	asrs	r4, r4, #2
 800eee8:	2600      	movs	r6, #0
 800eeea:	42a6      	cmp	r6, r4
 800eeec:	d105      	bne.n	800eefa <__libc_init_array+0x2e>
 800eeee:	bd70      	pop	{r4, r5, r6, pc}
 800eef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef4:	4798      	blx	r3
 800eef6:	3601      	adds	r6, #1
 800eef8:	e7ee      	b.n	800eed8 <__libc_init_array+0xc>
 800eefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800eefe:	4798      	blx	r3
 800ef00:	3601      	adds	r6, #1
 800ef02:	e7f2      	b.n	800eeea <__libc_init_array+0x1e>
 800ef04:	0800f204 	.word	0x0800f204
 800ef08:	0800f204 	.word	0x0800f204
 800ef0c:	0800f204 	.word	0x0800f204
 800ef10:	0800f208 	.word	0x0800f208

0800ef14 <memcpy>:
 800ef14:	440a      	add	r2, r1
 800ef16:	4291      	cmp	r1, r2
 800ef18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef1c:	d100      	bne.n	800ef20 <memcpy+0xc>
 800ef1e:	4770      	bx	lr
 800ef20:	b510      	push	{r4, lr}
 800ef22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef2a:	4291      	cmp	r1, r2
 800ef2c:	d1f9      	bne.n	800ef22 <memcpy+0xe>
 800ef2e:	bd10      	pop	{r4, pc}

0800ef30 <_init>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	bf00      	nop
 800ef34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef36:	bc08      	pop	{r3}
 800ef38:	469e      	mov	lr, r3
 800ef3a:	4770      	bx	lr

0800ef3c <_fini>:
 800ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3e:	bf00      	nop
 800ef40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef42:	bc08      	pop	{r3}
 800ef44:	469e      	mov	lr, r3
 800ef46:	4770      	bx	lr
