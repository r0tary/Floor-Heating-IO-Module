
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800ee38  0800ee38  0001ee38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0ec  0800f0ec  0001f0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0f4  0800f0f4  0001f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f0f8  0800f0f8  0001f0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000004c  20000008  0800f0fc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000020c0  20000058  0800f148  00020058  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002118  0800f148  00022118  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   000300d7  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005dd4  00000000  00000000  0005019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b60  00000000  00000000  00055f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000218d  00000000  00000000  00058ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028917  00000000  00000000  0005ac65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ea0c  00000000  00000000  0008357c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001013ca  00000000  00000000  000b1f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bb68  00000000  00000000  001b3354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001beebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000058 	.word	0x20000058
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ee20 	.word	0x0800ee20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000005c 	.word	0x2000005c
 800017c:	0800ee20 	.word	0x0800ee20

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <HAL_ADC_ConvCpltCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 fd90 	bl	800974c <osThreadFlagsSet>

}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000074 	.word	0x20000074

08000c38 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <ADC_Temp_Thread_Start+0x24>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <ADC_Temp_Thread_Start+0x28>)
 8000c42:	f008 fcf1 	bl	8009628 <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <ADC_Temp_Thread_Start+0x2c>)
 8000c4a:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c4c:	4806      	ldr	r0, [pc, #24]	; (8000c68 <ADC_Temp_Thread_Start+0x30>)
 8000c4e:	f008 ff27 	bl	8009aa0 <osEventFlagsNew>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <ADC_Temp_Thread_Start+0x34>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	0800ef20 	.word	0x0800ef20
 8000c60:	08000cb9 	.word	0x08000cb9
 8000c64:	20000074 	.word	0x20000074
 8000c68:	0800ef78 	.word	0x0800ef78
 8000c6c:	20000080 	.word	0x20000080

08000c70 <Control_Thread_Init>:

// Initializes required components for Control algorithm thread

void Control_Thread_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <Control_Thread_Init+0x2c>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <Control_Thread_Init+0x30>)
 8000c7a:	f008 fcd5 	bl	8009628 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <Control_Thread_Init+0x34>)
 8000c82:	6013      	str	r3, [r2, #0]
	controlTimerHandle = osTimerNew(ControlExecTim, osTimerPeriodic, NULL, &controlTimer_attributes);
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <Control_Thread_Init+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4808      	ldr	r0, [pc, #32]	; (8000cac <Control_Thread_Init+0x3c>)
 8000c8c:	f008 fe5e 	bl	800994c <osTimerNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <Control_Thread_Init+0x40>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800ef44 	.word	0x0800ef44
 8000ca0:	08000d7d 	.word	0x08000d7d
 8000ca4:	20000078 	.word	0x20000078
 8000ca8:	0800ef68 	.word	0x0800ef68
 8000cac:	08000db9 	.word	0x08000db9
 8000cb0:	2000007c 	.word	0x2000007c
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <CalculateTemp_Thread>:

// System Threads

void CalculateTemp_Thread(void *argument){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cc0:	217f      	movs	r1, #127	; 0x7f
 8000cc2:	4829      	ldr	r0, [pc, #164]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000cc4:	f002 fb78 	bl	80033b8 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4928      	ldr	r1, [pc, #160]	; (8000d6c <CalculateTemp_Thread+0xb4>)
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000cce:	f001 fa9d 	bl	800220c <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f008 fd85 	bl	80097e8 <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <CalculateTemp_Thread+0xb4>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb9d 	bl	8000424 <__aeabi_i2d>
 8000cea:	a319      	add	r3, pc, #100	; (adr r3, 8000d50 <CalculateTemp_Thread+0x98>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fc02 	bl	80004f8 <__aeabi_dmul>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	491d      	ldr	r1, [pc, #116]	; (8000d70 <CalculateTemp_Thread+0xb8>)
 8000cfa:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <CalculateTemp_Thread+0xb8>)
 8000d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d04:	a314      	add	r3, pc, #80	; (adr r3, 8000d58 <CalculateTemp_Thread+0xa0>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fa3d 	bl	8000188 <__aeabi_dsub>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <CalculateTemp_Thread+0xbc>)
 8000d1c:	f7ff fbec 	bl	80004f8 <__aeabi_dmul>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	a30d      	add	r3, pc, #52	; (adr r3, 8000d60 <CalculateTemp_Thread+0xa8>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff fd0d 	bl	800074c <__aeabi_ddiv>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4910      	ldr	r1, [pc, #64]	; (8000d78 <CalculateTemp_Thread+0xc0>)
 8000d38:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <CalculateTemp_Thread+0xb0>)
 8000d3e:	f001 fae9 	bl	8002314 <HAL_ADC_Stop_DMA>
		osDelay(1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f008 fdd1 	bl	80098ea <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d48:	e7be      	b.n	8000cc8 <CalculateTemp_Thread+0x10>
 8000d4a:	bf00      	nop
 8000d4c:	f3af 8000 	nop.w
 8000d50:	f9353597 	.word	0xf9353597
 8000d54:	3f47fffb 	.word	0x3f47fffb
 8000d58:	083126e9 	.word	0x083126e9
 8000d5c:	3fda1cac 	.word	0x3fda1cac
 8000d60:	851eb852 	.word	0x851eb852
 8000d64:	400051eb 	.word	0x400051eb
 8000d68:	200000b0 	.word	0x200000b0
 8000d6c:	20000084 	.word	0x20000084
 8000d70:	20000088 	.word	0x20000088
 8000d74:	40590000 	.word	0x40590000
 8000d78:	20000090 	.word	0x20000090

08000d7c <ControlTask>:
	}

}

void ControlTask(void *argument){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	// Add the control algorithm and schedule the task properly to execute every period of time
	// TODO
	osTimerStart(controlTimerHandle, CONTROLFREQ);
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <ControlTask+0x34>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f008 fe59 	bl	8009a44 <osTimerStart>

	for(;;)
	{
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	2100      	movs	r1, #0
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f008 fd25 	bl	80097e8 <osThreadFlagsWait>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <ControlTask+0x38>)
 8000da2:	f003 f943 	bl	800402c <HAL_GPIO_TogglePin>
		pid_Px = KPx * pid_error;
		pid_Ix = pid_Ix + (KIx * pid_error);
		pid_Dx = KDx * ((pid_error - last_x_error) / dt);
		pid_X = pid_Px + pid_Ix + pid_Dx;
		last_x_error = pid_error;*/
		osDelay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f008 fd9f 	bl	80098ea <osDelay>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000dac:	e7f1      	b.n	8000d92 <ControlTask+0x16>
 8000dae:	bf00      	nop
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	48000400 	.word	0x48000400

08000db8 <ControlExecTim>:

}

/* ControlExecTim function */
void ControlExecTim(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlExecTim */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	osThreadFlagsSet(ControlHandle, 0x01);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <ControlExecTim+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 fcc0 	bl	800974c <osThreadFlagsSet>
  /* USER CODE END ControlExecTim */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000078 	.word	0x20000078

08000dd8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000de8:	f023 0218 	bic.w	r2, r3, #24
 8000dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fe00 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f872 	bl	8000f58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e74:	f000 f8e6 	bl	8001044 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 fa50 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e7c:	f000 fa2c 	bl	80012d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e80:	f000 f9b6 	bl	80011f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e84:	f000 fa00 	bl	8001288 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000e88:	f000 f90e 	bl	80010a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e8c:	f000 f970 	bl	8001170 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ModbusH.uModbusType = MB_SLAVE;
 8000e90:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <main+0xc8>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <main+0xc8>)
 8000e98:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <main+0xcc>)
 8000e9a:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <main+0xc8>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <main+0xc8>)
 8000ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <main+0xc8>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <main+0xd0>)
 8000eb0:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <main+0xc8>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <main+0xc8>)
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <main+0xd4>)
 8000ebc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0xc8>)
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <main+0xd8>)
 8000ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <main+0xc8>)
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <main+0xdc>)
 8000ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0xc8>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <main+0xe0>)
 8000ed4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <main+0xc8>)
 8000eda:	220a      	movs	r2, #10
 8000edc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <main+0xc8>)
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <main+0xc8>)
 8000eea:	2205      	movs	r2, #5
 8000eec:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <main+0xc8>)
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
  ModbusH.xTypeHW = USART_HW_DMA;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <main+0xc8>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <main+0xc8>)
 8000f02:	f00c fa93 	bl	800d42c <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <main+0xc8>)
 8000f08:	f00c fb32 	bl	800d570 <ModbusStart>
  //ssd1306_TestAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f0c:	f008 fb42 	bl	8009594 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <main+0xe4>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <main+0xe8>)
 8000f16:	f008 fb87 	bl	8009628 <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <main+0xec>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000f20:	f7ff fe8a 	bl	8000c38 <ADC_Temp_Thread_Start>
  Control_Thread_Init();
 8000f24:	f7ff fea4 	bl	8000c70 <Control_Thread_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f28:	f008 fb58 	bl	80095dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0xc4>
 8000f2e:	bf00      	nop
 8000f30:	20000614 	.word	0x20000614
 8000f34:	200001c8 	.word	0x200001c8
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000098 	.word	0x20000098
 8000f48:	200000a4 	.word	0x200000a4
 8000f4c:	0800ef88 	.word	0x0800ef88
 8000f50:	080013fd 	.word	0x080013fd
 8000f54:	20000610 	.word	0x20000610

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09a      	sub	sp, #104	; 0x68
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2248      	movs	r2, #72	; 0x48
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00d ff20 	bl	800edac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f023 0303 	bic.w	r3, r3, #3
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fa2:	f003 fa93 	bl	80044cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ff16 	bl	8000dd8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <SystemClock_Config+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SystemClock_Config+0xe8>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SystemClock_Config+0xe8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000fc8:	2327      	movs	r3, #39	; 0x27
 8000fca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fe09 	bl	8004c0c <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001000:	f000 fa16 	bl	8001430 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001004:	236f      	movs	r3, #111	; 0x6f
 8001006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f965 	bl	80052f4 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001030:	f000 f9fe 	bl	8001430 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001034:	f004 ff52 	bl	8005edc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001038:	bf00      	nop
 800103a:	3768      	adds	r7, #104	; 0x68
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58000400 	.word	0x58000400

08001044 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2250      	movs	r2, #80	; 0x50
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00d feab 	bl	800edac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001056:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800105a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800105c:	2318      	movs	r3, #24
 800105e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800106c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001070:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001072:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001076:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800107e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001088:	2300      	movs	r3, #0
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fdae 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800109a:	f000 f9c9 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_ADC1_Init+0xc0>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010de:	2204      	movs	r2, #4
 80010e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0xbc>)
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001120:	f000 ff28 	bl	8001f74 <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800112a:	f000 f981 	bl	8001430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0xc4>)
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001132:	2306      	movs	r3, #6
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113a:	237f      	movs	r3, #127	; 0x7f
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113e:	2304      	movs	r3, #4
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC1_Init+0xbc>)
 800114c:	f001 fb18 	bl	8002780 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001156:	f000 f96b 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000b0 	.word	0x200000b0
 8001168:	50040000 	.word	0x50040000
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C1_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C1_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011ac:	f002 ff58 	bl	8004060 <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 f93b 	bl	8001430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011be:	f002 ffea 	bl	8004196 <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 f932 	bl	8001430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011d0:	f003 f82c 	bl	800422c <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 f929 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000174 	.word	0x20000174
 80011e8:	40005400 	.word	0x40005400
 80011ec:	00300f38 	.word	0x00300f38

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART1_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800123a:	f005 f9e1 	bl	8006600 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8f4 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800124c:	f008 f803 	bl	8009256 <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f8eb 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800125e:	f008 f838 	bl	80092d2 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f8e2 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800126e:	f007 ffb9 	bl	80091e4 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f8da 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001c8 	.word	0x200001c8
 8001284:	40013800 	.word	0x40013800

08001288 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <MX_USB_PCD_Init+0x4c>)
 8001290:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 8001294:	2208      	movs	r2, #8
 8001296:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800129a:	2202      	movs	r2, #2
 800129c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012be:	f003 f801 	bl	80042c4 <HAL_PCD_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80012c8:	f000 f8b2 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000031c 	.word	0x2000031c
 80012d4:	40006800 	.word	0x40006800

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fd91 	bl	8000e04 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fd8e 	bl	8000e04 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	200b      	movs	r0, #11
 80012ee:	f002 f9af 	bl	8003650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f2:	200b      	movs	r0, #11
 80012f4:	f002 f9c6 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2105      	movs	r1, #5
 80012fc:	200c      	movs	r0, #12
 80012fe:	f002 f9a7 	bl	8003650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001302:	200c      	movs	r0, #12
 8001304:	f002 f9be 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2105      	movs	r1, #5
 800130c:	200d      	movs	r0, #13
 800130e:	f002 f99f 	bl	8003650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001312:	200d      	movs	r0, #13
 8001314:	f002 f9b6 	bl	8003684 <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff fd80 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fd7d 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fd7a 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fd77 	bl	8000e36 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2108      	movs	r1, #8
 800134c:	4828      	ldr	r0, [pc, #160]	; (80013f0 <MX_GPIO_Init+0xd4>)
 800134e:	f002 fe55 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f002 fe4f 	bl	8003ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 800135e:	2200      	movs	r2, #0
 8001360:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001364:	4823      	ldr	r0, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xd8>)
 8001366:	f002 fe49 	bl	8003ffc <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 800136a:	2308      	movs	r3, #8
 800136c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	; (80013f0 <MX_GPIO_Init+0xd4>)
 8001380:	f002 fccc 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001384:	2302      	movs	r3, #2
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f002 fcbe 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_GPIO_Init+0xd4>)
 80013b2:	f002 fcb3 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 80013b6:	f24f 0303 	movw	r3, #61443	; 0xf003
 80013ba:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <MX_GPIO_Init+0xd8>)
 80013ce:	f002 fca5 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80013d2:	2303      	movs	r3, #3
 80013d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_GPIO_Init+0xdc>)
 80013e4:	f002 fc9a 	bl	8003d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000c00 	.word	0x48000c00

080013fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f008 fa70 	bl	80098ea <osDelay>
 800140a:	e7fb      	b.n	8001404 <StartDefaultTask+0x8>

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f000 fb47 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40014400 	.word	0x40014400

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>

0800143a <LL_AHB2_GRP1_EnableClock>:
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4313      	orrs	r3, r2
 8001450:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	210f      	movs	r1, #15
 80014d8:	f06f 0001 	mvn.w	r0, #1
 80014dc:	f002 f8b8 	bl	8003650 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_ADC_MspInit+0xb8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d146      	bne.n	8001594 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001506:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150a:	f7ff ff96 	bl	800143a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ff93 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001514:	2301      	movs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f002 fbf7 	bl	8003d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_ADC_MspInit+0xc0>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001536:	2205      	movs	r2, #5
 8001538:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800154e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001552:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800155e:	2220      	movs	r2, #32
 8001560:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800156a:	f002 f899 	bl	80036a0 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001574:	f7ff ff5c 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800157c:	64da      	str	r2, [r3, #76]	; 0x4c
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2105      	movs	r1, #5
 8001588:	2012      	movs	r0, #18
 800158a:	f002 f861 	bl	8003650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800158e:	2012      	movs	r0, #18
 8001590:	f002 f878 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	50040000 	.word	0x50040000
 80015a0:	20000114 	.word	0x20000114
 80015a4:	40020030 	.word	0x40020030

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09c      	sub	sp, #112	; 0x70
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2250      	movs	r2, #80	; 0x50
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00d fbef 	bl	800edac <memset>
  if(hi2c->Instance==I2C1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d126      	bne.n	8001626 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d8:	2304      	movs	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fb02 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff ff1d 	bl	8001430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2002      	movs	r0, #2
 80015f8:	f7ff ff1f 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001600:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001616:	4619      	mov	r1, r3
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 800161a:	f002 fb7f 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001622:	f7ff ff23 	bl	800146c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3770      	adds	r7, #112	; 0x70
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	48000400 	.word	0x48000400

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	; 0x70
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2250      	movs	r2, #80	; 0x50
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00d fba7 	bl	800edac <memset>
  if(huart->Instance==USART1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a43      	ldr	r2, [pc, #268]	; (8001770 <HAL_UART_MspInit+0x138>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d17f      	bne.n	8001768 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fabb 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001680:	f7ff fed6 	bl	8001430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001688:	f7ff ff09 	bl	800149e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fed4 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a2:	2307      	movs	r3, #7
 80016a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016aa:	4619      	mov	r1, r3
 80016ac:	4831      	ldr	r0, [pc, #196]	; (8001774 <HAL_UART_MspInit+0x13c>)
 80016ae:	f002 fb35 	bl	8003d1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_UART_MspInit+0x144>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016ba:	220e      	movs	r2, #14
 80016bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e8:	4823      	ldr	r0, [pc, #140]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016ea:	f001 ffd9 	bl	80036a0 <HAL_DMA_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80016f4:	f7ff fe9c 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_UART_MspInit+0x140>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <HAL_UART_MspInit+0x14c>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0x148>)
 800170e:	220f      	movs	r2, #15
 8001710:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001714:	2210      	movs	r2, #16
 8001716:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x148>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x148>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x148>)
 800173e:	f001 ffaf 	bl	80036a0 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001748:	f7ff fe72 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001750:	67da      	str	r2, [r3, #124]	; 0x7c
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2105      	movs	r1, #5
 800175c:	2024      	movs	r0, #36	; 0x24
 800175e:	f001 ff77 	bl	8003650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001762:	2024      	movs	r0, #36	; 0x24
 8001764:	f001 ff8e 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3770      	adds	r7, #112	; 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40013800 	.word	0x40013800
 8001774:	48000400 	.word	0x48000400
 8001778:	2000025c 	.word	0x2000025c
 800177c:	40020008 	.word	0x40020008
 8001780:	200002bc 	.word	0x200002bc
 8001784:	4002001c 	.word	0x4002001c

08001788 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_PCD_MspInit+0x5c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d118      	bne.n	80017dc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fe45 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80017c2:	230a      	movs	r3, #10
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f002 faa4 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80017d8:	f7ff fe48 	bl	800146c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40006800 	.word	0x40006800

080017e8 <LL_APB2_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2019      	movs	r0, #25
 8001832:	f001 ff0d 	bl	8003650 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001836:	2019      	movs	r0, #25
 8001838:	f001 ff24 	bl	8003684 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800183c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001840:	f7ff ffd2 	bl	80017e8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f003 ff3c 	bl	80056cc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001854:	f003 ff24 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8001858:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_InitTick+0x8c>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3b01      	subs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_InitTick+0x90>)
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_InitTick+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_InitTick+0x90>)
 8001870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001876:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_InitTick+0x90>)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_InitTick+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_InitTick+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <HAL_InitTick+0x90>)
 800188a:	f004 fc3e 	bl	800610a <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_InitTick+0x90>)
 8001896:	f004 fc99 	bl	80061cc <HAL_TIM_Base_Start_IT>
 800189a:	4603      	mov	r3, r0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	2000076c 	.word	0x2000076c
 80018b0:	40014400 	.word	0x40014400

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f002 f8bc 	bl	8003a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000025c 	.word	0x2000025c

080018f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel2_IRQHandler+0x10>)
 80018fa:	f002 f8b2 	bl	8003a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002bc 	.word	0x200002bc

08001908 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA1_Channel3_IRQHandler+0x10>)
 800190e:	f002 f8a8 	bl	8003a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000114 	.word	0x20000114

0800191c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <ADC1_IRQHandler+0x10>)
 8001922:	f000 fd58 	bl	80023d6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000b0 	.word	0x200000b0

08001930 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001936:	f004 fc97 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000076c 	.word	0x2000076c

08001944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART1_IRQHandler+0x10>)
 800194a:	f005 f96d 	bl	8006c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001c8 	.word	0x200001c8

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <SystemInit+0x98>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <SystemInit+0x98>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001984:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <SystemInit+0x9c>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a2:	f023 0305 	bic.w	r3, r3, #5
 80019a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <SystemInit+0xa0>)
 80019c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <SystemInit+0xa0>)
 80019cc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	faf6fefb 	.word	0xfaf6fefb
 80019f8:	22041000 	.word	0x22041000

080019fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a00:	3304      	adds	r3, #4

08001a02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a06:	d3f9      	bcc.n	80019fc <CopyDataInit>
  bx lr
 8001a08:	4770      	bx	lr

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a0c:	3004      	adds	r0, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>
  bx lr
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a18:	f7ff ff9e 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopForever+0x6>)
 8001a1e:	490c      	ldr	r1, [pc, #48]	; (8001a50 <LoopForever+0xa>)
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <LoopForever+0xe>)
 8001a22:	2300      	movs	r3, #0
 8001a24:	f7ff ffed 	bl	8001a02 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopForever+0x12>)
 8001a2a:	490c      	ldr	r1, [pc, #48]	; (8001a5c <LoopForever+0x16>)
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <LoopForever+0x1a>)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f7ff ffe7 	bl	8001a02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <LoopForever+0x1e>)
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <LoopForever+0x22>)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f7ff ffe8 	bl	8001a0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a3e:	f00d f9bd 	bl	800edbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a42:	f7ff fa11 	bl	8000e68 <main>

08001a46 <LoopForever>:

LoopForever:
  b LoopForever
 8001a46:	e7fe      	b.n	8001a46 <LoopForever>
  ldr   r0, =_estack
 8001a48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000054 	.word	0x20000054
 8001a54:	0800f0fc 	.word	0x0800f0fc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	20030000 	.word	0x20030000
 8001a60:	0800f148 	.word	0x0800f148
  INIT_BSS _sbss, _ebss
 8001a64:	20000058 	.word	0x20000058
 8001a68:	20002118 	.word	0x20002118

08001a6c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <AES1_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_Init+0x3c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_Init+0x3c>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f001 fdd7 	bl	800363a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8c:	200f      	movs	r0, #15
 8001a8e:	f7ff fec5 	bl	800181c <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	e001      	b.n	8001aa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a9e:	f7ff fd17 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58004000 	.word	0x58004000

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000004c 	.word	0x2000004c
 8001ad4:	200007b8 	.word	0x200007b8

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200007b8 	.word	0x200007b8

08001af0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTickPrio+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000048 	.word	0x20000048

08001b08 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LL_ADC_SetOffset+0x44>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	03fff000 	.word	0x03fff000

08001bb8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3360      	adds	r3, #96	; 0x60
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3360      	adds	r3, #96	; 0x60
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c32:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3330      	adds	r3, #48	; 0x30
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	4413      	add	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	211f      	movs	r1, #31
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	401a      	ands	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0e9b      	lsrs	r3, r3, #26
 8001c78:	f003 011f 	and.w	r1, r3, #31
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3314      	adds	r3, #20
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0e5b      	lsrs	r3, r3, #25
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0d1b      	lsrs	r3, r3, #20
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	2107      	movs	r1, #7
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	401a      	ands	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0d1b      	lsrs	r3, r3, #20
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0318 	and.w	r3, r3, #24
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d54:	40d9      	lsrs	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	400b      	ands	r3, r1
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	0007ffff 	.word	0x0007ffff

08001d78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <LL_ADC_IsEnabled+0x18>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_ADC_IsEnabled+0x1a>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_IsDisableOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d101      	bne.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d101      	bne.n	8001f66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e12e      	b.n	80021f0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fa9f 	bl	80014e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff feef 	bl	8001d9c <LL_ADC_IsDeepPowerDownEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fed5 	bl	8001d78 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff0a 	bl	8001dec <LL_ADC_IsInternalRegulatorEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff feee 	bl	8001dc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <HAL_ADC_Init+0x284>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	4a83      	ldr	r2, [pc, #524]	; (80021fc <HAL_ADC_Init+0x288>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff feec 	bl	8001dec <LL_ADC_IsInternalRegulatorEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff60 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002040:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 80c7 	bne.w	80021de <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80c3 	bne.w	80021de <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fef9 	bl	8001e64 <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002078:	4861      	ldr	r0, [pc, #388]	; (8002200 <HAL_ADC_Init+0x28c>)
 800207a:	f7ff fef3 	bl	8001e64 <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	485e      	ldr	r0, [pc, #376]	; (8002204 <HAL_ADC_Init+0x290>)
 800208c:	f7ff fd3c 	bl	8001b08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80020b0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d106      	bne.n	80020d0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	045b      	lsls	r3, r3, #17
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_ADC_Init+0x294>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fefb 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 800210a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff1c 	bl	8001f4e <LL_ADC_INJ_IsConversionOngoing>
 8002116:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d13d      	bne.n	800219a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13a      	bne.n	800219a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002128:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002130:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002140:	f023 0302 	bic.w	r3, r3, #2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	69b9      	ldr	r1, [r7, #24]
 800214a:	430b      	orrs	r3, r1
 800214c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002154:	2b01      	cmp	r3, #1
 8002156:	d118      	bne.n	800218a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002174:	4311      	orrs	r1, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800217a:	430a      	orrs	r2, r1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	e007      	b.n	800219a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10c      	bne.n	80021bc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f023 010f 	bic.w	r1, r3, #15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ba:	e007      	b.n	80021cc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 020f 	bic.w	r2, r2, #15
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f023 0303 	bic.w	r3, r3, #3
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
 80021dc:	e007      	b.n	80021ee <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0210 	orr.w	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000044 	.word	0x20000044
 80021fc:	053e2d63 	.word	0x053e2d63
 8002200:	50040000 	.word	0x50040000
 8002204:	50040300 	.word	0x50040300
 8002208:	fff0c007 	.word	0xfff0c007

0800220c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe6f 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d167      	bne.n	80022f8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_Start_DMA+0x2a>
 8002232:	2302      	movs	r3, #2
 8002234:	e063      	b.n	80022fe <HAL_ADC_Start_DMA+0xf2>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 ff20 	bl	8003084 <ADC_Enable>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d14f      	bne.n	80022ee <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f023 0206 	bic.w	r2, r3, #6
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58
 800227a:	e002      	b.n	8002282 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_ADC_Start_DMA+0xfc>)
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_ADC_Start_DMA+0x100>)
 8002290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_ADC_Start_DMA+0x104>)
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	221c      	movs	r2, #28
 80022a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0210 	orr.w	r2, r2, #16
 80022b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3340      	adds	r3, #64	; 0x40
 80022d4:	4619      	mov	r1, r3
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f001 fa89 	bl	80037f0 <HAL_DMA_Start_IT>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fde2 	bl	8001eb0 <LL_ADC_REG_StartConversion>
 80022ec:	e006      	b.n	80022fc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80022f6:	e001      	b.n	80022fc <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08003237 	.word	0x08003237
 800230c:	0800330f 	.word	0x0800330f
 8002310:	0800332b 	.word	0x0800332b

08002314 <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Stop_DMA+0x16>
 8002326:	2302      	movs	r3, #2
 8002328:	e051      	b.n	80023ce <HAL_ADC_Stop_DMA+0xba>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002332:	2103      	movs	r1, #3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fde9 	bl	8002f0c <ADC_ConversionStop>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d13f      	bne.n	80023c4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d10f      	bne.n	8002382 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fabd 	bl	80038e6 <HAL_DMA_Abort>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0210 	bic.w	r2, r2, #16
 8002390:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 feed 	bl	8003178 <ADC_Disable>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e002      	b.n	80023aa <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fee7 	bl	8003178 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d017      	beq.n	800242c <HAL_ADC_IRQHandler+0x56>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d012      	beq.n	800242c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f001 f854 	bl	80034cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_ADC_IRQHandler+0x6a>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002446:	2b00      	cmp	r3, #0
 8002448:	d05d      	beq.n	8002506 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d058      	beq.n	8002506 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fbd2 	bl	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03d      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	d035      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b08      	cmp	r3, #8
 8002498:	d12e      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fd2e 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11a      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 020c 	bic.w	r2, r2, #12
 80024b8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d112      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54
 80024de:	e00b      	b.n	80024f8 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fe fb8d 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_ADC_IRQHandler+0x144>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002520:	2b00      	cmp	r3, #0
 8002522:	d074      	beq.n	800260e <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06f      	beq.n	800260e <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fbb2 	bl	8001cb4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002550:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fb5f 	bl	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart>
 800255c:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d049      	beq.n	8002600 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_ADC_IRQHandler+0x1b0>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d041      	beq.n	8002600 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d13c      	bne.n	8002600 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d135      	bne.n	8002600 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12e      	bne.n	8002600 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fcd1 	bl	8001f4e <LL_ADC_INJ_IsConversionOngoing>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11a      	bne.n	80025e8 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d112      	bne.n	8002600 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
 80025e6:	e00b      	b.n	8002600 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ff3b 	bl	800347c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2260      	movs	r2, #96	; 0x60
 800260c:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d011      	beq.n	800263c <HAL_ADC_IRQHandler+0x266>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f891 	bl	8002756 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <HAL_ADC_IRQHandler+0x296>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 ff21 	bl	80034a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_ADC_IRQHandler+0x2c6>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 ff13 	bl	80034b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02b      	beq.n	80026fe <HAL_ADC_IRQHandler+0x328>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d026      	beq.n	80026fe <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80026b8:	2301      	movs	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	e009      	b.n	80026d2 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fae8 	bl	8001c98 <LL_ADC_REG_GetDMATransfer>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10e      	bne.n	80026f6 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f043 0202 	orr.w	r2, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f83a 	bl	800276a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2210      	movs	r2, #16
 80026fc:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <HAL_ADC_IRQHandler+0x364>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f043 0208 	orr.w	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 feab 	bl	8003490 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800273a:	bf00      	nop
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0b6      	sub	sp, #216	; 0xd8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x22>
 800279e:	2302      	movs	r3, #2
 80027a0:	e39f      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x762>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fba6 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8384 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f7ff fa39 	bl	8001c40 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fb94 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fbb4 	bl	8001f4e <LL_ADC_INJ_IsConversionOngoing>
 80027e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 81a6 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 81a1 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff fa65 	bl	8001cda <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00a      	beq.n	8002848 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002842:	f7ff f995 	bl	8001b70 <LL_ADC_SetOffset>
 8002846:	e17b      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9b2 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_ADC_ConfigChannel+0xf4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f9a7 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 021f 	and.w	r2, r3, #31
 8002872:	e01e      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x132>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f99c 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800289a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e004      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80028a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x14a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	e018      	b.n	80028fc <HAL_ADC_ConfigChannel+0x17c>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80028f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff f96b 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f94f 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x1ba>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f944 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	e01e      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1f8>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f939 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002958:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800295c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800296c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x210>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	e018      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x242>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80029b4:	2320      	movs	r3, #32
 80029b6:	e004      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80029b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d106      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f908 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f8ec 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x280>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f8e1 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	f003 021f 	and.w	r2, r3, #31
 80029fe:	e01e      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x2be>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f8d6 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2d6>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e9b      	lsrs	r3, r3, #26
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	e016      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x304>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f8a7 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2103      	movs	r1, #3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f88b 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x342>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f880 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	e017      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x372>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f875 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002adc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x38a>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	e011      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x3ae>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d106      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2103      	movs	r1, #3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f852 	bl	8001be4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f98d 	bl	8001e64 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 81c2 	bne.w	8002ed6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f7ff f8e6 	bl	8001d30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a8e      	ldr	r2, [pc, #568]	; (8002da4 <HAL_ADC_ConfigChannel+0x624>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f040 8130 	bne.w	8002dd0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x418>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e019      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x44c>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	bf94      	ite	ls
 8002bc6:	2301      	movls	r3, #1
 8002bc8:	2300      	movhi	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d079      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x46c>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	069b      	lsls	r3, r3, #26
 8002be6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bea:	e015      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x498>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c04:	2320      	movs	r3, #32
 8002c06:	e003      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	069b      	lsls	r3, r3, #26
 8002c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x4b8>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	e017      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x4e8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	ea42 0103 	orr.w	r1, r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x50e>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	051b      	lsls	r3, r3, #20
 8002c8c:	e018      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x540>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	e080      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x560>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	069b      	lsls	r3, r3, #26
 8002cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cde:	e015      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x58c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e003      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	069b      	lsls	r3, r3, #26
 8002d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x5ac>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	e017      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x5dc>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	61fb      	str	r3, [r7, #28]
  return result;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002d44:	2320      	movs	r3, #32
 8002d46:	e003      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x608>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	3301      	adds	r3, #1
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b1e      	subs	r3, #30
 8002d80:	051b      	lsls	r3, r3, #20
 8002d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d86:	e01d      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x644>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	613b      	str	r3, [r7, #16]
  return result;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d103      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e005      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x630>
 8002da4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 021f 	and.w	r2, r3, #31
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b1e      	subs	r3, #30
 8002dbe:	051b      	lsls	r3, r3, #20
 8002dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fe ff85 	bl	8001cda <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_ADC_ConfigChannel+0x76c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d07c      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ddc:	4844      	ldr	r0, [pc, #272]	; (8002ef0 <HAL_ADC_ConfigChannel+0x770>)
 8002dde:	f7fe feb9 	bl	8001b54 <LL_ADC_GetCommonPathInternalCh>
 8002de2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de6:	4843      	ldr	r0, [pc, #268]	; (8002ef4 <HAL_ADC_ConfigChannel+0x774>)
 8002de8:	f7ff f83c 	bl	8001e64 <LL_ADC_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d15e      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <HAL_ADC_ConfigChannel+0x778>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d127      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x6cc>
 8002dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d121      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_ADC_ConfigChannel+0x774>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d161      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4834      	ldr	r0, [pc, #208]	; (8002ef0 <HAL_ADC_ConfigChannel+0x770>)
 8002e1e:	f7fe fe86 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_ADC_ConfigChannel+0x77c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <HAL_ADC_ConfigChannel+0x780>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e3c:	e002      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f9      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e4a:	e044      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <HAL_ADC_ConfigChannel+0x784>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d113      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x6fe>
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_ADC_ConfigChannel+0x774>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d134      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e74:	4619      	mov	r1, r3
 8002e76:	481e      	ldr	r0, [pc, #120]	; (8002ef0 <HAL_ADC_ConfigChannel+0x770>)
 8002e78:	f7fe fe59 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7c:	e02b      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_ADC_ConfigChannel+0x788>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d126      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
 8002e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d120      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_ADC_ConfigChannel+0x774>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d11b      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4811      	ldr	r0, [pc, #68]	; (8002ef0 <HAL_ADC_ConfigChannel+0x770>)
 8002eaa:	f7fe fe40 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
 8002eae:	e012      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ec2:	e008      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	37d8      	adds	r7, #216	; 0xd8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	80080000 	.word	0x80080000
 8002ef0:	50040300 	.word	0x50040300
 8002ef4:	50040000 	.word	0x50040000
 8002ef8:	c7520000 	.word	0xc7520000
 8002efc:	20000044 	.word	0x20000044
 8002f00:	053e2d63 	.word	0x053e2d63
 8002f04:	cb840000 	.word	0xcb840000
 8002f08:	80000001 	.word	0x80000001

08002f0c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe ffec 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002f28:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f80d 	bl	8001f4e <LL_ADC_INJ_IsConversionOngoing>
 8002f34:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8098 	beq.w	8003074 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d02a      	beq.n	8002fa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7e5b      	ldrb	r3, [r3, #25]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d126      	bne.n	8002fa8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7e1b      	ldrb	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d122      	bne.n	8002fa8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f66:	e014      	b.n	8002f92 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4a45      	ldr	r2, [pc, #276]	; (8003080 <ADC_ConversionStop+0x174>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d90d      	bls.n	8002f8c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f74:	f043 0210 	orr.w	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e074      	b.n	8003076 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d1e3      	bne.n	8002f68 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2240      	movs	r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d014      	beq.n	8002fd8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe ffa4 	bl	8001f00 <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe ff61 	bl	8001e8a <LL_ADC_IsDisableOngoing>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ff80 	bl	8001ed8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d014      	beq.n	8003008 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe ffb3 	bl	8001f4e <LL_ADC_INJ_IsConversionOngoing>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe ff49 	bl	8001e8a <LL_ADC_IsDisableOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ff8f 	bl	8001f26 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d005      	beq.n	800301a <ADC_ConversionStop+0x10e>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d105      	bne.n	8003020 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003014:	230c      	movs	r3, #12
 8003016:	617b      	str	r3, [r7, #20]
        break;
 8003018:	e005      	b.n	8003026 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800301a:	2308      	movs	r3, #8
 800301c:	617b      	str	r3, [r7, #20]
        break;
 800301e:	e002      	b.n	8003026 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003020:	2304      	movs	r3, #4
 8003022:	617b      	str	r3, [r7, #20]
        break;
 8003024:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003026:	f7fe fd57 	bl	8001ad8 <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800302c:	e01b      	b.n	8003066 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800302e:	f7fe fd53 	bl	8001ad8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b05      	cmp	r3, #5
 800303a:	d914      	bls.n	8003066 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0210 	orr.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e007      	b.n	8003076 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1dc      	bne.n	800302e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	a33fffff 	.word	0xa33fffff

08003084 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fee5 	bl	8001e64 <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d15e      	bne.n	800315e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	4b30      	ldr	r3, [pc, #192]	; (8003168 <ADC_Enable+0xe4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f043 0210 	orr.w	r2, r3, #16
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e04a      	b.n	8003160 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fea0 	bl	8001e14 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030d4:	4825      	ldr	r0, [pc, #148]	; (800316c <ADC_Enable+0xe8>)
 80030d6:	f7fe fd3d 	bl	8001b54 <LL_ADC_GetCommonPathInternalCh>
 80030da:	4603      	mov	r3, r0
 80030dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <ADC_Enable+0xec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <ADC_Enable+0xf0>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	3301      	adds	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003104:	f7fe fce8 	bl	8001ad8 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310a:	e021      	b.n	8003150 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fea7 	bl	8001e64 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fe77 	bl	8001e14 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003126:	f7fe fcd7 	bl	8001ad8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d90d      	bls.n	8003150 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d1d6      	bne.n	800310c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	8000003f 	.word	0x8000003f
 800316c:	50040300 	.word	0x50040300
 8003170:	20000044 	.word	0x20000044
 8003174:	053e2d63 	.word	0x053e2d63

08003178 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fe80 	bl	8001e8a <LL_ADC_IsDisableOngoing>
 800318a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe fe67 	bl	8001e64 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d047      	beq.n	800322c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d144      	bne.n	800322c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030d 	and.w	r3, r3, #13
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10c      	bne.n	80031ca <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fe41 	bl	8001e3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2203      	movs	r2, #3
 80031c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c2:	f7fe fc89 	bl	8001ad8 <HAL_GetTick>
 80031c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031c8:	e029      	b.n	800321e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0210 	orr.w	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e023      	b.n	800322e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031e6:	f7fe fc77 	bl	8001ad8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d914      	bls.n	800321e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1dc      	bne.n	80031e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800324c:	2b00      	cmp	r3, #0
 800324e:	d14b      	bne.n	80032e8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d021      	beq.n	80032ae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fcd3 	bl	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d032      	beq.n	80032e0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11f      	bne.n	80032e0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
 80032ac:	e018      	b.n	80032e0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7fd fc99 	bl	8000c18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032e6:	e00e      	b.n	8003306 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fa38 	bl	800276a <HAL_ADC_ErrorCallback>
}
 80032fa:	e004      	b.n	8003306 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff fa10 	bl	8002742 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff fa0a 	bl	800276a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <LL_ADC_StartCalibration>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800337a:	4313      	orrs	r3, r2
 800337c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_IsCalibrationOnGoing>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a4:	d101      	bne.n	80033aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADCEx_Calibration_Start+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e04d      	b.n	8003470 <HAL_ADCEx_Calibration_Start+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fecb 	bl	8003178 <ADC_Disable>
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d136      	bne.n	800345a <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033f4:	f023 0302 	bic.w	r3, r3, #2
 80033f8:	f043 0202 	orr.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6839      	ldr	r1, [r7, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffa9 	bl	800335e <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800340c:	e014      	b.n	8003438 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d90d      	bls.n	8003438 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f023 0312 	bic.w	r3, r3, #18
 8003424:	f043 0210 	orr.w	r2, r3, #16
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e01b      	b.n	8003470 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ffa7 	bl	8003390 <LL_ADC_IsCalibrationOnGoing>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e2      	bne.n	800340e <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f023 0303 	bic.w	r3, r3, #3
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	655a      	str	r2, [r3, #84]	; 0x54
 8003458:	e005      	b.n	8003466 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00026aaa 	.word	0x00026aaa

0800347c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	; (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4907      	ldr	r1, [pc, #28]	; (800357c <__NVIC_EnableIRQ+0x38>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db0a      	blt.n	80035aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	490c      	ldr	r1, [pc, #48]	; (80035cc <__NVIC_SetPriority+0x4c>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	440b      	add	r3, r1
 80035a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a8:	e00a      	b.n	80035c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4908      	ldr	r1, [pc, #32]	; (80035d0 <__NVIC_SetPriority+0x50>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3b04      	subs	r3, #4
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	440b      	add	r3, r1
 80035be:	761a      	strb	r2, [r3, #24]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf28      	it	cs
 80035f2:	2304      	movcs	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d902      	bls.n	8003604 <NVIC_EncodePriority+0x30>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3b03      	subs	r3, #3
 8003602:	e000      	b.n	8003606 <NVIC_EncodePriority+0x32>
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	401a      	ands	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361c:	f04f 31ff 	mov.w	r1, #4294967295
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43d9      	mvns	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	4313      	orrs	r3, r2
         );
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ff4c 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365e:	f7ff ff63 	bl	8003528 <__NVIC_GetPriorityGrouping>
 8003662:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	f7ff ffb3 	bl	80035d4 <NVIC_EncodePriority>
 800366e:	4602      	mov	r2, r0
 8003670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff82 	bl	8003580 <__NVIC_SetPriority>
}
 800367c:	bf00      	nop
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff56 	bl	8003544 <__NVIC_EnableIRQ>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e08e      	b.n	80037d0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_DMA_Init+0x138>)
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d80f      	bhi.n	80036de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b45      	ldr	r3, [pc, #276]	; (80037dc <HAL_DMA_Init+0x13c>)
 80036c6:	4413      	add	r3, r2
 80036c8:	4a45      	ldr	r2, [pc, #276]	; (80037e0 <HAL_DMA_Init+0x140>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	009a      	lsls	r2, r3, #2
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a42      	ldr	r2, [pc, #264]	; (80037e4 <HAL_DMA_Init+0x144>)
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
 80036dc:	e00e      	b.n	80036fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <HAL_DMA_Init+0x148>)
 80036e6:	4413      	add	r3, r2
 80036e8:	4a3d      	ldr	r2, [pc, #244]	; (80037e0 <HAL_DMA_Init+0x140>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a3c      	ldr	r2, [pc, #240]	; (80037ec <HAL_DMA_Init+0x14c>)
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa80 	bl	8003c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800375c:	d102      	bne.n	8003764 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003770:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800377a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_DMA_Init+0x106>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d80c      	bhi.n	80037a6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa9f 	bl	8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	e008      	b.n	80037b8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40020407 	.word	0x40020407
 80037dc:	bffdfff8 	.word	0xbffdfff8
 80037e0:	cccccccd 	.word	0xcccccccd
 80037e4:	40020000 	.word	0x40020000
 80037e8:	bffdfbf8 	.word	0xbffdfbf8
 80037ec:	40020400 	.word	0x40020400

080037f0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_DMA_Start_IT+0x20>
 800380c:	2302      	movs	r3, #2
 800380e:	e066      	b.n	80038de <HAL_DMA_Start_IT+0xee>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d155      	bne.n	80038d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f9c5 	bl	8003bd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 020e 	orr.w	r2, r2, #14
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e00f      	b.n	8003888 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 020a 	orr.w	r2, r2, #10
 8003886:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e005      	b.n	80038dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
 80038da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04f      	b.n	8003998 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d008      	beq.n	8003916 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2204      	movs	r2, #4
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e040      	b.n	8003998 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 020e 	bic.w	r2, r2, #14
 8003924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003962:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00c      	beq.n	8003986 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003984:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d005      	beq.n	80039c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e047      	b.n	8003a58 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 020e 	bic.w	r2, r2, #14
 80039d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f003 021c 	and.w	r2, r3, #28
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
    }
  }
  return status;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f003 031c 	and.w	r3, r3, #28
 8003a82:	2204      	movs	r2, #4
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d026      	beq.n	8003adc <HAL_DMA_IRQHandler+0x7a>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d021      	beq.n	8003adc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0204 	bic.w	r2, r2, #4
 8003ab4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f003 021c 	and.w	r2, r3, #28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d071      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ada:	e06c      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f003 031c 	and.w	r3, r3, #28
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02e      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xec>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d029      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10b      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 020a 	bic.w	r2, r2, #10
 8003b16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 021c 	and.w	r2, r3, #28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b4c:	e033      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f003 031c 	and.w	r3, r3, #28
 8003b56:	2208      	movs	r2, #8
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02a      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x156>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d025      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 020e 	bic.w	r2, r2, #14
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f003 021c 	and.w	r2, r3, #28
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
}
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f003 021c 	and.w	r2, r3, #28
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f202 	lsl.w	r2, r1, r2
 8003c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d108      	bne.n	8003c38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c36:	e007      	b.n	8003c48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d80a      	bhi.n	8003c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c74:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6493      	str	r3, [r2, #72]	; 0x48
 8003c7c:	e007      	b.n	8003c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	009a      	lsls	r2, r3, #2
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	3b08      	subs	r3, #8
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ca4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40020407 	.word	0x40020407
 8003cc4:	4002081c 	.word	0x4002081c
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	40020880 	.word	0x40020880

08003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	1000823f 	.word	0x1000823f
 8003d18:	40020940 	.word	0x40020940

08003d1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2a:	e14c      	b.n	8003fc6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 813e 	beq.w	8003fc0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d005      	beq.n	8003d5c <HAL_GPIO_Init+0x40>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d130      	bne.n	8003dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d92:	2201      	movs	r2, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0201 	and.w	r2, r3, #1
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d017      	beq.n	8003dfa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d123      	bne.n	8003e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	08da      	lsrs	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3208      	adds	r2, #8
 8003e48:	6939      	ldr	r1, [r7, #16]
 8003e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0203 	and.w	r2, r3, #3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8098 	beq.w	8003fc0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_GPIO_Init+0x2c8>)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	3302      	adds	r3, #2
 8003e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	220f      	movs	r2, #15
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eba:	d019      	beq.n	8003ef0 <HAL_GPIO_Init+0x1d4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	; (8003fe8 <HAL_GPIO_Init+0x2cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_GPIO_Init+0x1d0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a49      	ldr	r2, [pc, #292]	; (8003fec <HAL_GPIO_Init+0x2d0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00d      	beq.n	8003ee8 <HAL_GPIO_Init+0x1cc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a48      	ldr	r2, [pc, #288]	; (8003ff0 <HAL_GPIO_Init+0x2d4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <HAL_GPIO_Init+0x1c8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a47      	ldr	r2, [pc, #284]	; (8003ff4 <HAL_GPIO_Init+0x2d8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_GPIO_Init+0x1c4>
 8003edc:	2304      	movs	r3, #4
 8003ede:	e008      	b.n	8003ef2 <HAL_GPIO_Init+0x1d6>
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	e006      	b.n	8003ef2 <HAL_GPIO_Init+0x1d6>
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e004      	b.n	8003ef2 <HAL_GPIO_Init+0x1d6>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e002      	b.n	8003ef2 <HAL_GPIO_Init+0x1d6>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_Init+0x1d6>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	f002 0203 	and.w	r2, r2, #3
 8003ef8:	0092      	lsls	r2, r2, #2
 8003efa:	4093      	lsls	r3, r2
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f02:	4938      	ldr	r1, [pc, #224]	; (8003fe4 <HAL_GPIO_Init+0x2c8>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f34:	4a30      	ldr	r2, [pc, #192]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f5e:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_GPIO_Init+0x2dc>)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f47f aeab 	bne.w	8003d2c <HAL_GPIO_Init+0x10>
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	48000400 	.word	0x48000400
 8003fec:	48000800 	.word	0x48000800
 8003ff0:	48000c00 	.word	0x48000c00
 8003ff4:	48001000 	.word	0x48001000
 8003ff8:	58000800 	.word	0x58000800

08003ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
 8004008:	4613      	mov	r3, r2
 800400a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800400c:	787b      	ldrb	r3, [r7, #1]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004018:	e002      	b.n	8004020 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	041a      	lsls	r2, r3, #16
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	43d9      	mvns	r1, r3
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	400b      	ands	r3, r1
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e08d      	b.n	800418e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fa8e 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e006      	b.n	80040e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d108      	bne.n	8004102 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	e007      	b.n	8004112 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d138      	bne.n	800421e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e032      	b.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	d139      	bne.n	80042b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800424c:	2302      	movs	r3, #2
 800424e:	e033      	b.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800427e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b08b      	sub	sp, #44	; 0x2c
 80042c8:	af06      	add	r7, sp, #24
 80042ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0cb      	b.n	800446e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fa4c 	bl	8001788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2203      	movs	r2, #3
 80042f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f005 f8c9 	bl	8009494 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	e040      	b.n	800438a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	3301      	adds	r3, #1
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	3303      	adds	r3, #3
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	440b      	add	r3, r1
 8004356:	3338      	adds	r3, #56	; 0x38
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	333c      	adds	r3, #60	; 0x3c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	3340      	adds	r3, #64	; 0x40
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	3301      	adds	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d3b9      	bcc.n	8004308 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e044      	b.n	8004424 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	440b      	add	r3, r1
 80043d4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	440b      	add	r3, r1
 80043ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	440b      	add	r3, r1
 8004400:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	3301      	adds	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d3b5      	bcc.n	800439a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	687e      	ldr	r6, [r7, #4]
 8004436:	466d      	mov	r5, sp
 8004438:	f106 0410 	add.w	r4, r6, #16
 800443c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800443e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	602b      	str	r3, [r5, #0]
 8004444:	1d33      	adds	r3, r6, #4
 8004446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004448:	6838      	ldr	r0, [r7, #0]
 800444a:	f005 f83e 	bl	80094ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d102      	bne.n	800446c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f805 	bl	8004476 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004476 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800449a:	b29b      	uxth	r3, r3
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58000400 	.word	0x58000400

080044ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_PWREx_GetVoltageRange+0x18>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58000400 	.word	0x58000400

08004508 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800450c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d101      	bne.n	8004520 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_RCC_HSE_Enable>:
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <LL_RCC_HSE_Disable>:
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_RCC_HSE_IsReady>:
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800456c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800457a:	d101      	bne.n	8004580 <LL_RCC_HSE_IsReady+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_RCC_HSE_IsReady+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <LL_RCC_HSI_Enable>:
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_HSI_Disable>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	6013      	str	r3, [r2, #0]
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_HSI_IsReady>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045da:	d101      	bne.n	80045e0 <LL_RCC_HSI_IsReady+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_RCC_HSI_IsReady+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_HSI_SetCalibTrimming>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_RCC_HSI48_Enable>:
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800462e:	bf00      	nop
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_HSI48_Disable>:
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800463c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_RCC_HSI48_IsReady>:
{
 800465a:	b480      	push	{r7}
 800465c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d101      	bne.n	8004672 <LL_RCC_HSI48_IsReady+0x18>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <LL_RCC_HSI48_IsReady+0x1a>
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_RCC_LSE_Enable>:
{
 800467e:	b480      	push	{r7}
 8004680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004696:	bf00      	nop
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_RCC_LSE_Disable>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <LL_RCC_LSE_EnableBypass>:
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d2:	f043 0304 	orr.w	r3, r3, #4
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_LSE_DisableBypass>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004706:	b480      	push	{r7}
 8004708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d101      	bne.n	800471e <LL_RCC_LSE_IsReady+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_RCC_LSE_IsReady+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800472a:	b480      	push	{r7}
 800472c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800472e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d101      	bne.n	8004786 <LL_RCC_LSI1_IsReady+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_RCC_LSI1_IsReady+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a2:	f043 0304 	orr.w	r3, r3, #4
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d101      	bne.n	80047ee <LL_RCC_LSI2_IsReady+0x18>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_RCC_LSI2_IsReady+0x1a>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	6013      	str	r3, [r2, #0]
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d101      	bne.n	800487a <LL_RCC_MSI_IsReady+0x16>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <LL_RCC_MSI_IsReady+0x18>
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2bb0      	cmp	r3, #176	; 0xb0
 80048c4:	d901      	bls.n	80048ca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80048c6:	23b0      	movs	r3, #176	; 0xb0
 80048c8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80048ca:	687b      	ldr	r3, [r7, #4]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 0203 	bic.w	r2, r3, #3
 8004914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 030c 	and.w	r3, r3, #12
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800497a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	608b      	str	r3, [r1, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ae0:	d101      	bne.n	8004ae6 <LL_RCC_PLL_IsReady+0x18>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <LL_RCC_PLL_IsReady+0x1a>
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0303 	and.w	r3, r3, #3
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b66:	d101      	bne.n	8004b6c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8c:	d101      	bne.n	8004b92 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d101      	bne.n	8004bb8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd6:	d101      	bne.n	8004bdc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bfa:	d101      	bne.n	8004c00 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b08d      	sub	sp, #52	; 0x34
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e363      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 808d 	beq.w	8004d46 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2c:	f7ff fe7d 	bl	800492a <LL_RCC_GetSysClkSource>
 8004c30:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c32:	f7ff ff83 	bl	8004b3c <LL_RCC_PLL_GetMainSource>
 8004c36:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x3e>
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d147      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d144      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e347      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c5a:	f7ff fe28 	bl	80048ae <LL_RCC_MSI_GetRange>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	429c      	cmp	r4, r3
 8004c62:	d914      	bls.n	8004c8e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fd61 	bl	8005730 <RCC_SetFlashLatencyFromMSIRange>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e336      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fe02 	bl	8004886 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fe26 	bl	80048d8 <LL_RCC_MSI_SetCalibTrimming>
 8004c8c:	e013      	b.n	8004cb6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fdf7 	bl	8004886 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fe1b 	bl	80048d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd42 	bl	8005730 <RCC_SetFlashLatencyFromMSIRange>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e317      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cb6:	f000 fcc9 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4aa4      	ldr	r2, [pc, #656]	; (8004f50 <HAL_RCC_OscConfig+0x344>)
 8004cbe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cc0:	4ba4      	ldr	r3, [pc, #656]	; (8004f54 <HAL_RCC_OscConfig+0x348>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc fda9 	bl	800181c <HAL_InitTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d039      	beq.n	8004d44 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e308      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01e      	beq.n	8004d1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cdc:	f7ff fda4 	bl	8004828 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ce0:	f7fc fefa 	bl	8001ad8 <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce8:	f7fc fef6 	bl	8001ad8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e2f5      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cfa:	f7ff fdb3 	bl	8004864 <LL_RCC_MSI_IsReady>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f1      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fdbc 	bl	8004886 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fde0 	bl	80048d8 <LL_RCC_MSI_SetCalibTrimming>
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d1a:	f7ff fd94 	bl	8004846 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d1e:	f7fc fedb 	bl	8001ad8 <HAL_GetTick>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d26:	f7fc fed7 	bl	8001ad8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e2d6      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d38:	f7ff fd94 	bl	8004864 <LL_RCC_MSI_IsReady>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f1      	bne.n	8004d26 <HAL_RCC_OscConfig+0x11a>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d44:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d047      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	f7ff fdea 	bl	800492a <LL_RCC_GetSysClkSource>
 8004d56:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	f7ff fef0 	bl	8004b3c <LL_RCC_PLL_GetMainSource>
 8004d5c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x164>
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d108      	bne.n	8004d7c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d134      	bne.n	8004de2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e2b4      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d102      	bne.n	8004d8c <HAL_RCC_OscConfig+0x180>
 8004d86:	f7ff fbd1 	bl	800452c <LL_RCC_HSE_Enable>
 8004d8a:	e001      	b.n	8004d90 <HAL_RCC_OscConfig+0x184>
 8004d8c:	f7ff fbdd 	bl	800454a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d012      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc fe9e 	bl	8001ad8 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fc fe9a 	bl	8001ad8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e299      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004db2:	f7ff fbd9 	bl	8004568 <LL_RCC_HSE_IsReady>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f1      	beq.n	8004da0 <HAL_RCC_OscConfig+0x194>
 8004dbc:	e011      	b.n	8004de2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fc fe8b 	bl	8001ad8 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc6:	f7fc fe87 	bl	8001ad8 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b64      	cmp	r3, #100	; 0x64
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e286      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dd8:	f7ff fbc6 	bl	8004568 <LL_RCC_HSE_IsReady>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f1      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dee:	f7ff fd9c 	bl	800492a <LL_RCC_GetSysClkSource>
 8004df2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df4:	f7ff fea2 	bl	8004b3c <LL_RCC_PLL_GetMainSource>
 8004df8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_OscConfig+0x200>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d10e      	bne.n	8004e24 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e266      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fbe5 	bl	80045ec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e22:	e031      	b.n	8004e88 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d019      	beq.n	8004e60 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	f7ff fbae 	bl	800458c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc fe52 	bl	8001ad8 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fc fe4e 	bl	8001ad8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e24d      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e4a:	f7ff fbbd 	bl	80045c8 <LL_RCC_HSI_IsReady>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f1      	beq.n	8004e38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff fbc7 	bl	80045ec <LL_RCC_HSI_SetCalibTrimming>
 8004e5e:	e013      	b.n	8004e88 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e60:	f7ff fba3 	bl	80045aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fc fe38 	bl	8001ad8 <HAL_GetTick>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fe34 	bl	8001ad8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e233      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e7e:	f7ff fba3 	bl	80045c8 <LL_RCC_HSI_IsReady>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f1      	bne.n	8004e6c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a3 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d076      	beq.n	8004f98 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d046      	beq.n	8004f44 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004eb6:	f7ff fc5a 	bl	800476e <LL_RCC_LSI1_IsReady>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d113      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ec0:	f7ff fc33 	bl	800472a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec4:	f7fc fe08 	bl	8001ad8 <HAL_GetTick>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ecc:	f7fc fe04 	bl	8001ad8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e203      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ede:	f7ff fc46 	bl	800476e <LL_RCC_LSI1_IsReady>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f1      	beq.n	8004ecc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ee8:	f7ff fc53 	bl	8004792 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fdf4 	bl	8001ad8 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ef4:	f7fc fdf0 	bl	8001ad8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1ef      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f06:	f7ff fc66 	bl	80047d6 <LL_RCC_LSI2_IsReady>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f1      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fc70 	bl	80047fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f1a:	f7ff fc17 	bl	800474c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fddb 	bl	8001ad8 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f26:	f7fc fdd7 	bl	8001ad8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e1d6      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f38:	f7ff fc19 	bl	800476e <LL_RCC_LSI1_IsReady>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f1      	bne.n	8004f26 <HAL_RCC_OscConfig+0x31a>
 8004f42:	e051      	b.n	8004fe8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f44:	f7ff fbf1 	bl	800472a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fdc6 	bl	8001ad8 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f4e:	e00c      	b.n	8004f6a <HAL_RCC_OscConfig+0x35e>
 8004f50:	20000044 	.word	0x20000044
 8004f54:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f58:	f7fc fdbe 	bl	8001ad8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1bd      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f6a:	f7ff fc00 	bl	800476e <LL_RCC_LSI1_IsReady>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f1      	beq.n	8004f58 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f74:	f7ff fc1e 	bl	80047b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f7a:	f7fc fdad 	bl	8001ad8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1ac      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f8c:	f7ff fc23 	bl	80047d6 <LL_RCC_LSI2_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <HAL_RCC_OscConfig+0x36e>
 8004f96:	e027      	b.n	8004fe8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f98:	f7ff fc0c 	bl	80047b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fc fd9c 	bl	8001ad8 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fa4:	f7fc fd98 	bl	8001ad8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e197      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fb6:	f7ff fc0e 	bl	80047d6 <LL_RCC_LSI2_IsReady>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f1      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004fc0:	f7ff fbc4 	bl	800474c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc fd88 	bl	8001ad8 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fcc:	f7fc fd84 	bl	8001ad8 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e183      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fde:	f7ff fbc6 	bl	800476e <LL_RCC_LSI1_IsReady>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f1      	bne.n	8004fcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	4ba7      	ldr	r3, [pc, #668]	; (8005294 <HAL_RCC_OscConfig+0x688>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d114      	bne.n	800502a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005000:	f7ff fa64 	bl	80044cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005004:	f7fc fd68 	bl	8001ad8 <HAL_GetTick>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500c:	f7fc fd64 	bl	8001ad8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e163      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501e:	4b9d      	ldr	r3, [pc, #628]	; (8005294 <HAL_RCC_OscConfig+0x688>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d102      	bne.n	8005038 <HAL_RCC_OscConfig+0x42c>
 8005032:	f7ff fb24 	bl	800467e <LL_RCC_LSE_Enable>
 8005036:	e00c      	b.n	8005052 <HAL_RCC_OscConfig+0x446>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b05      	cmp	r3, #5
 800503e:	d104      	bne.n	800504a <HAL_RCC_OscConfig+0x43e>
 8005040:	f7ff fb3f 	bl	80046c2 <LL_RCC_LSE_EnableBypass>
 8005044:	f7ff fb1b 	bl	800467e <LL_RCC_LSE_Enable>
 8005048:	e003      	b.n	8005052 <HAL_RCC_OscConfig+0x446>
 800504a:	f7ff fb29 	bl	80046a0 <LL_RCC_LSE_Disable>
 800504e:	f7ff fb49 	bl	80046e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d014      	beq.n	8005084 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505a:	f7fc fd3d 	bl	8001ad8 <HAL_GetTick>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fd39 	bl	8001ad8 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e136      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005078:	f7ff fb45 	bl	8004706 <LL_RCC_LSE_IsReady>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ef      	beq.n	8005062 <HAL_RCC_OscConfig+0x456>
 8005082:	e013      	b.n	80050ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fc fd28 	bl	8001ad8 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800508a:	e00a      	b.n	80050a2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508c:	f7fc fd24 	bl	8001ad8 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	f241 3288 	movw	r2, #5000	; 0x1388
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e121      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80050a2:	f7ff fb30 	bl	8004706 <LL_RCC_LSE_IsReady>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ef      	bne.n	800508c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02c      	beq.n	8005112 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d014      	beq.n	80050ea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050c0:	f7ff faa9 	bl	8004616 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fc fd08 	bl	8001ad8 <HAL_GetTick>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050cc:	f7fc fd04 	bl	8001ad8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e103      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050de:	f7ff fabc 	bl	800465a <LL_RCC_HSI48_IsReady>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f1      	beq.n	80050cc <HAL_RCC_OscConfig+0x4c0>
 80050e8:	e013      	b.n	8005112 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ea:	f7ff faa5 	bl	8004638 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ee:	f7fc fcf3 	bl	8001ad8 <HAL_GetTick>
 80050f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f6:	f7fc fcef 	bl	8001ad8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0ee      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005108:	f7ff faa7 	bl	800465a <LL_RCC_HSI48_IsReady>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f1      	bne.n	80050f6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80e4 	beq.w	80052e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511c:	f7ff fc05 	bl	800492a <LL_RCC_GetSysClkSource>
 8005120:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	2b02      	cmp	r3, #2
 8005130:	f040 80b4 	bne.w	800529c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0203 	and.w	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	429a      	cmp	r2, r3
 8005140:	d123      	bne.n	800518a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d11c      	bne.n	800518a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d114      	bne.n	800518a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d10d      	bne.n	800518a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d05d      	beq.n	8005246 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d058      	beq.n	8005242 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0a1      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051a2:	f7ff fc85 	bl	8004ab0 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a6:	f7fc fc97 	bl	8001ad8 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fc fc93 	bl	8001ad8 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e092      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ef      	bne.n	80051ae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	4b30      	ldr	r3, [pc, #192]	; (8005298 <HAL_RCC_OscConfig+0x68c>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e6:	0212      	lsls	r2, r2, #8
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051fa:	430a      	orrs	r2, r1
 80051fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005204:	f7ff fc45 	bl	8004a92 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005218:	f7fc fc5e 	bl	8001ad8 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fc fc5a 	bl	8001ad8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e059      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0ef      	beq.n	8005220 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005240:	e050      	b.n	80052e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e04f      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d147      	bne.n	80052e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005254:	f7ff fc1d 	bl	8004a92 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005268:	f7fc fc36 	bl	8001ad8 <HAL_GetTick>
 800526c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fc fc32 	bl	8001ad8 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e031      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ef      	beq.n	8005270 <HAL_RCC_OscConfig+0x664>
 8005290:	e028      	b.n	80052e4 <HAL_RCC_OscConfig+0x6d8>
 8005292:	bf00      	nop
 8005294:	58000400 	.word	0x58000400
 8005298:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d01e      	beq.n	80052e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	f7ff fc05 	bl	8004ab0 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fc fc17 	bl	8001ad8 <HAL_GetTick>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ae:	f7fc fc13 	bl	8001ad8 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e012      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_OscConfig+0x6e4>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60cb      	str	r3, [r1, #12]
 80052de:	e001      	b.n	80052e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3734      	adds	r7, #52	; 0x34
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	eefefffc 	.word	0xeefefffc

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e12d      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b98      	ldr	r3, [pc, #608]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d91b      	bls.n	800534e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b95      	ldr	r3, [pc, #596]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0207 	bic.w	r2, r3, #7
 800531e:	4993      	ldr	r1, [pc, #588]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fc fbd7 	bl	8001ad8 <HAL_GetTick>
 800532a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532c:	e008      	b.n	8005340 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800532e:	f7fc fbd3 	bl	8001ad8 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e111      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005340:	4b8a      	ldr	r3, [pc, #552]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d1ef      	bne.n	800532e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d016      	beq.n	8005388 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff faef 	bl	8004942 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005364:	f7fc fbb8 	bl	8001ad8 <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800536c:	f7fc fbb4 	bl	8001ad8 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e0f2      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800537e:	f7ff fbe9 	bl	8004b54 <LL_RCC_IsActiveFlag_HPRE>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f1      	beq.n	800536c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d016      	beq.n	80053c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fae6 	bl	800496a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800539e:	f7fc fb9b 	bl	8001ad8 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053a4:	e008      	b.n	80053b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053a6:	f7fc fb97 	bl	8001ad8 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e0d5      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053b8:	f7ff fbde 	bl	8004b78 <LL_RCC_IsActiveFlag_C2HPRE>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f1      	beq.n	80053a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fadf 	bl	8004996 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d8:	f7fc fb7e 	bl	8001ad8 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053e0:	f7fc fb7a 	bl	8001ad8 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0b8      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053f2:	f7ff fbd4 	bl	8004b9e <LL_RCC_IsActiveFlag_SHDHPRE>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f1      	beq.n	80053e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fad9 	bl	80049c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005412:	f7fc fb61 	bl	8001ad8 <HAL_GetTick>
 8005416:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800541a:	f7fc fb5d 	bl	8001ad8 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e09b      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800542c:	f7ff fbca 	bl	8004bc4 <LL_RCC_IsActiveFlag_PPRE1>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f1      	beq.n	800541a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff facf 	bl	80049ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800544e:	f7fc fb43 	bl	8001ad8 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005456:	f7fc fb3f 	bl	8001ad8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e07d      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005468:	f7ff fbbe 	bl	8004be8 <LL_RCC_IsActiveFlag_PPRE2>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f1      	beq.n	8005456 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d043      	beq.n	8005506 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d106      	bne.n	8005494 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005486:	f7ff f86f 	bl	8004568 <LL_RCC_HSE_IsReady>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11e      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e067      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d106      	bne.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800549c:	f7ff fb17 	bl	8004ace <LL_RCC_PLL_IsReady>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d113      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e05c      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80054b2:	f7ff f9d7 	bl	8004864 <LL_RCC_MSI_IsReady>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d108      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e051      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80054c0:	f7ff f882 	bl	80045c8 <LL_RCC_HSI_IsReady>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e04a      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fa15 	bl	8004902 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7fc fafe 	bl	8001ad8 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e0:	f7fc fafa 	bl	8001ad8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e036      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	f7ff fa18 	bl	800492a <LL_RCC_GetSysClkSource>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	429a      	cmp	r2, r3
 8005504:	d1ec      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d21b      	bcs.n	800554c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005514:	4b15      	ldr	r3, [pc, #84]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f023 0207 	bic.w	r2, r3, #7
 800551c:	4913      	ldr	r1, [pc, #76]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fc fad8 	bl	8001ad8 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	e008      	b.n	800553e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800552c:	f7fc fad4 	bl	8001ad8 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e012      	b.n	8005564 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCC_ClockConfig+0x278>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d1ef      	bne.n	800552c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800554c:	f000 f87e 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8005550:	4603      	mov	r3, r0
 8005552:	4a07      	ldr	r2, [pc, #28]	; (8005570 <HAL_RCC_ClockConfig+0x27c>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005556:	f7fc facb 	bl	8001af0 <HAL_GetTickPrio>
 800555a:	4603      	mov	r3, r0
 800555c:	4618      	mov	r0, r3
 800555e:	f7fc f95d 	bl	800181c <HAL_InitTick>
 8005562:	4603      	mov	r3, r0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	58004000 	.word	0x58004000
 8005570:	20000044 	.word	0x20000044

08005574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557a:	f7ff f9d6 	bl	800492a <LL_RCC_GetSysClkSource>
 800557e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005586:	f7ff f992 	bl	80048ae <LL_RCC_MSI_GetRange>
 800558a:	4603      	mov	r3, r0
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e04b      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d102      	bne.n	80055a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055a2:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e045      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d10a      	bne.n	80055c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055ae:	f7fe ffab 	bl	8004508 <LL_RCC_HSE_IsEnabledDiv2>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80055b8:	4b22      	ldr	r3, [pc, #136]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e03a      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80055be:	4b22      	ldr	r3, [pc, #136]	; (8005648 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e037      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80055c4:	f7ff faba 	bl	8004b3c <LL_RCC_PLL_GetMainSource>
 80055c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d003      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0x64>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d003      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x6a>
 80055d6:	e00d      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055da:	60bb      	str	r3, [r7, #8]
        break;
 80055dc:	e015      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055de:	f7fe ff93 	bl	8004508 <LL_RCC_HSE_IsEnabledDiv2>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055e8:	4b16      	ldr	r3, [pc, #88]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80055ec:	e00d      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055f0:	60bb      	str	r3, [r7, #8]
        break;
 80055f2:	e00a      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055f4:	f7ff f95b 	bl	80048ae <LL_RCC_MSI_GetRange>
 80055f8:	4603      	mov	r3, r0
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005606:	60bb      	str	r3, [r7, #8]
        break;
 8005608:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800560a:	f7ff fa72 	bl	8004af2 <LL_RCC_PLL_GetN>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	fb03 f402 	mul.w	r4, r3, r2
 8005616:	f7ff fa85 	bl	8004b24 <LL_RCC_PLL_GetDivider>
 800561a:	4603      	mov	r3, r0
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	3301      	adds	r3, #1
 8005620:	fbb4 f4f3 	udiv	r4, r4, r3
 8005624:	f7ff fa72 	bl	8004b0c <LL_RCC_PLL_GetR>
 8005628:	4603      	mov	r3, r0
 800562a:	0f5b      	lsrs	r3, r3, #29
 800562c:	3301      	adds	r3, #1
 800562e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005632:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bd90      	pop	{r4, r7, pc}
 800563e:	bf00      	nop
 8005640:	0800f00c 	.word	0x0800f00c
 8005644:	00f42400 	.word	0x00f42400
 8005648:	01e84800 	.word	0x01e84800

0800564c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800564c:	b598      	push	{r3, r4, r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005650:	f7ff ff90 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8005654:	4604      	mov	r4, r0
 8005656:	f7ff f9dd 	bl	8004a14 <LL_RCC_GetAHBPrescaler>
 800565a:	4603      	mov	r3, r0
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	4a03      	ldr	r2, [pc, #12]	; (8005670 <HAL_RCC_GetHCLKFreq+0x24>)
 8005664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005668:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd98      	pop	{r3, r4, r7, pc}
 8005670:	0800efac 	.word	0x0800efac

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b598      	push	{r3, r4, r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005678:	f7ff ffe8 	bl	800564c <HAL_RCC_GetHCLKFreq>
 800567c:	4604      	mov	r4, r0
 800567e:	f7ff f9f0 	bl	8004a62 <LL_RCC_GetAPB1Prescaler>
 8005682:	4603      	mov	r3, r0
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_RCC_GetPCLK1Freq+0x28>)
 800568c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd98      	pop	{r3, r4, r7, pc}
 800569c:	0800efec 	.word	0x0800efec

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b598      	push	{r3, r4, r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80056a4:	f7ff ffd2 	bl	800564c <HAL_RCC_GetHCLKFreq>
 80056a8:	4604      	mov	r4, r0
 80056aa:	f7ff f9e6 	bl	8004a7a <LL_RCC_GetAPB2Prescaler>
 80056ae:	4603      	mov	r3, r0
 80056b0:	0adb      	lsrs	r3, r3, #11
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd98      	pop	{r3, r4, r7, pc}
 80056c8:	0800efec 	.word	0x0800efec

080056cc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	226f      	movs	r2, #111	; 0x6f
 80056da:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80056dc:	f7ff f925 	bl	800492a <LL_RCC_GetSysClkSource>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80056e6:	f7ff f995 	bl	8004a14 <LL_RCC_GetAHBPrescaler>
 80056ea:	4602      	mov	r2, r0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80056f0:	f7ff f9b7 	bl	8004a62 <LL_RCC_GetAPB1Prescaler>
 80056f4:	4602      	mov	r2, r0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80056fa:	f7ff f9be 	bl	8004a7a <LL_RCC_GetAPB2Prescaler>
 80056fe:	4602      	mov	r2, r0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005704:	f7ff f992 	bl	8004a2c <LL_C2_RCC_GetAHBPrescaler>
 8005708:	4602      	mov	r2, r0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800570e:	f7ff f99a 	bl	8004a46 <LL_RCC_GetAHB4Prescaler>
 8005712:	4602      	mov	r2, r0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <HAL_RCC_GetClockConfig+0x60>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0207 	and.w	r2, r3, #7
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	58004000 	.word	0x58004000

08005730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2bb0      	cmp	r3, #176	; 0xb0
 800573c:	d903      	bls.n	8005746 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e007      	b.n	8005756 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	4a11      	ldr	r2, [pc, #68]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005756:	f7ff f976 	bl	8004a46 <LL_RCC_GetAHB4Prescaler>
 800575a:	4603      	mov	r3, r0
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	4a0d      	ldr	r2, [pc, #52]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	0c9c      	lsrs	r4, r3, #18
 800577a:	f7fe feb7 	bl	80044ec <HAL_PWREx_GetVoltageRange>
 800577e:	4603      	mov	r3, r0
 8005780:	4619      	mov	r1, r3
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f80c 	bl	80057a0 <RCC_SetFlashLatency>
 8005788:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bd90      	pop	{r4, r7, pc}
 8005792:	bf00      	nop
 8005794:	0800f00c 	.word	0x0800f00c
 8005798:	0800efac 	.word	0x0800efac
 800579c:	431bde83 	.word	0x431bde83

080057a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b093      	sub	sp, #76	; 0x4c
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80057aa:	4b37      	ldr	r3, [pc, #220]	; (8005888 <RCC_SetFlashLatency+0xe8>)
 80057ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80057b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80057b6:	4a35      	ldr	r2, [pc, #212]	; (800588c <RCC_SetFlashLatency+0xec>)
 80057b8:	f107 031c 	add.w	r3, r7, #28
 80057bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80057be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80057c2:	4b33      	ldr	r3, [pc, #204]	; (8005890 <RCC_SetFlashLatency+0xf0>)
 80057c4:	f107 040c 	add.w	r4, r7, #12
 80057c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057ce:	2300      	movs	r3, #0
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d8:	d11a      	bne.n	8005810 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057da:	2300      	movs	r3, #0
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
 80057de:	e013      	b.n	8005808 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	3348      	adds	r3, #72	; 0x48
 80057e6:	443b      	add	r3, r7
 80057e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d807      	bhi.n	8005802 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	3348      	adds	r3, #72	; 0x48
 80057f8:	443b      	add	r3, r7
 80057fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057fe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005800:	e020      	b.n	8005844 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	3301      	adds	r3, #1
 8005806:	643b      	str	r3, [r7, #64]	; 0x40
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580a:	2b03      	cmp	r3, #3
 800580c:	d9e8      	bls.n	80057e0 <RCC_SetFlashLatency+0x40>
 800580e:	e019      	b.n	8005844 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	e013      	b.n	800583e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	3348      	adds	r3, #72	; 0x48
 800581c:	443b      	add	r3, r7
 800581e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d807      	bhi.n	8005838 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	3348      	adds	r3, #72	; 0x48
 800582e:	443b      	add	r3, r7
 8005830:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005834:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005836:	e005      	b.n	8005844 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	3301      	adds	r3, #1
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	2b02      	cmp	r3, #2
 8005842:	d9e8      	bls.n	8005816 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <RCC_SetFlashLatency+0xf4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 0207 	bic.w	r2, r3, #7
 800584c:	4911      	ldr	r1, [pc, #68]	; (8005894 <RCC_SetFlashLatency+0xf4>)
 800584e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005854:	f7fc f940 	bl	8001ad8 <HAL_GetTick>
 8005858:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800585a:	e008      	b.n	800586e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800585c:	f7fc f93c 	bl	8001ad8 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e007      	b.n	800587e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800586e:	4b09      	ldr	r3, [pc, #36]	; (8005894 <RCC_SetFlashLatency+0xf4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005878:	429a      	cmp	r2, r3
 800587a:	d1ef      	bne.n	800585c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	374c      	adds	r7, #76	; 0x4c
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}
 8005886:	bf00      	nop
 8005888:	0800ee7c 	.word	0x0800ee7c
 800588c:	0800ee8c 	.word	0x0800ee8c
 8005890:	0800ee98 	.word	0x0800ee98
 8005894:	58004000 	.word	0x58004000

08005898 <LL_RCC_LSE_IsEnabled>:
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <LL_RCC_LSE_IsEnabled+0x18>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_LSE_IsReady>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d101      	bne.n	80058d4 <LL_RCC_LSE_IsReady+0x18>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <LL_RCC_LSE_IsReady+0x1a>
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_MSI_EnablePLLMode>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ee:	f043 0304 	orr.w	r3, r3, #4
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_RCC_SetRFWKPClockSource>:
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800590e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <LL_RCC_SetSMPSClockSource>:
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	f023 0203 	bic.w	r2, r3, #3
 800593c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4313      	orrs	r3, r2
 8005944:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <LL_RCC_SetSMPSPrescaler>:
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4313      	orrs	r3, r2
 800596c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <LL_RCC_SetUSARTClockSource>:
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <LL_RCC_SetLPUARTClockSource>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_SetI2CClockSource>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059ea:	43db      	mvns	r3, r3
 80059ec:	401a      	ands	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_SetLPTIMClockSource>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	43db      	mvns	r3, r3
 8005a24:	401a      	ands	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <LL_RCC_SetSAIClockSource>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <LL_RCC_SetRNGClockSource>:
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_RCC_SetCLK48ClockSource>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_RCC_SetUSBClockSource>:
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ffe3 	bl	8005a98 <LL_RCC_SetCLK48ClockSource>
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <LL_RCC_SetADCClockSource>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <LL_RCC_SetRTCClockSource>:
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_GetRTCClockSource>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_RCC_ForceBackupDomainReset>:
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b86:	bf00      	nop
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_PLLSAI1_Enable>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_RCC_PLLSAI1_Disable>:
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_PLLSAI1_IsReady>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bde:	d101      	bne.n	8005be4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d034      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c14:	d021      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005c16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c1a:	d81b      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c20:	d01d      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005c22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c26:	d815      	bhi.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c30:	d110      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c42:	e00d      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f94d 	bl	8005ee8 <RCCEx_PLLSAI1_ConfigNP>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c52:	e005      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
        break;
 8005c58:	e002      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c60:	7ffb      	ldrb	r3, [r7, #31]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fee8 	bl	8005a40 <LL_RCC_SetSAIClockSource>
 8005c70:	e001      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d046      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005c82:	f7ff ff56 	bl	8005b32 <LL_RCC_GetRTCClockSource>
 8005c86:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d03c      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c92:	f7fe fc1b 	bl	80044cc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff30 	bl	8005b06 <LL_RCC_SetRTCClockSource>
 8005ca6:	e02e      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005cb2:	f7ff ff4b 	bl	8005b4c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005cb6:	f7ff ff5a 	bl	8005b6e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005cd2:	f7ff fde1 	bl	8005898 <LL_RCC_LSE_IsEnabled>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d114      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cdc:	f7fb fefc 	bl	8001ad8 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce4:	f7fb fef8 	bl	8001ad8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d902      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	77fb      	strb	r3, [r7, #31]
              break;
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cfc:	f7ff fdde 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	77bb      	strb	r3, [r7, #30]
 8005d0a:	e001      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7ffb      	ldrb	r3, [r7, #31]
 8005d0e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fe2a 	bl	800597a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fe35 	bl	80059a6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fe5d 	bl	8005a0c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fe52 	bl	8005a0c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fe2a 	bl	80059d2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fe1f 	bl	80059d2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d022      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fe8d 	bl	8005ac4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dcc:	d10b      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f8e3 	bl	8005f9e <RCCEx_PLLSAI1_ConfigNQ>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005de2:	7ffb      	ldrb	r3, [r7, #31]
 8005de4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02b      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e04:	d003      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fe2a 	bl	8005a6c <LL_RCC_SetRNGClockSource>
 8005e18:	e00a      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7ff fe21 	bl	8005a6c <LL_RCC_SetRNGClockSource>
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fe34 	bl	8005a98 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e38:	d107      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e48:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d022      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fe3d 	bl	8005ada <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e68:	d107      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e82:	d10b      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f8e3 	bl	8006054 <RCCEx_PLLSAI1_ConfigNR>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fd26 	bl	80058fe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d009      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fd45 	bl	8005952 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fd2c 	bl	800592a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005ed2:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005ee0:	f7ff fcfe 	bl	80058e0 <LL_RCC_MSI_EnablePLLMode>
}
 8005ee4:	bf00      	nop
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ef4:	f7ff fe5b 	bl	8005bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ef8:	f7fb fdee 	bl	8001ad8 <HAL_GetTick>
 8005efc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005efe:	e009      	b.n	8005f14 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f00:	f7fb fdea 	bl	8001ad8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	73fb      	strb	r3, [r7, #15]
      break;
 8005f12:	e004      	b.n	8005f1e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f14:	f7ff fe5a 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1f0      	bne.n	8005f00 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d137      	bne.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f52:	f7ff fe1d 	bl	8005b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f56:	f7fb fdbf 	bl	8001ad8 <HAL_GetTick>
 8005f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f5c:	e009      	b.n	8005f72 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f5e:	f7fb fdbb 	bl	8001ad8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d902      	bls.n	8005f72 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	73fb      	strb	r3, [r7, #15]
        break;
 8005f70:	e004      	b.n	8005f7c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f72:	f7ff fe2b 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d1f0      	bne.n	8005f5e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f90:	4313      	orrs	r3, r2
 8005f92:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005faa:	f7ff fe00 	bl	8005bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fae:	f7fb fd93 	bl	8001ad8 <HAL_GetTick>
 8005fb2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fb4:	e009      	b.n	8005fca <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb6:	f7fb fd8f 	bl	8001ad8 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d902      	bls.n	8005fca <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc8:	e004      	b.n	8005fd4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fca:	f7ff fdff 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f0      	bne.n	8005fb6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d137      	bne.n	800604a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006004:	4313      	orrs	r3, r2
 8006006:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006008:	f7ff fdc2 	bl	8005b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600c:	f7fb fd64 	bl	8001ad8 <HAL_GetTick>
 8006010:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006012:	e009      	b.n	8006028 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006014:	f7fb fd60 	bl	8001ad8 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d902      	bls.n	8006028 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	73fb      	strb	r3, [r7, #15]
        break;
 8006026:	e004      	b.n	8006032 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006028:	f7ff fdd0 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 800602c:	4603      	mov	r3, r0
 800602e:	2b01      	cmp	r3, #1
 8006030:	d1f0      	bne.n	8006014 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d108      	bne.n	800604a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006046:	4313      	orrs	r3, r2
 8006048:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800604a:	7bfb      	ldrb	r3, [r7, #15]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006060:	f7ff fda5 	bl	8005bae <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006064:	f7fb fd38 	bl	8001ad8 <HAL_GetTick>
 8006068:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800606a:	e009      	b.n	8006080 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800606c:	f7fb fd34 	bl	8001ad8 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d902      	bls.n	8006080 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	73fb      	strb	r3, [r7, #15]
      break;
 800607e:	e004      	b.n	800608a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006080:	f7ff fda4 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d137      	bne.n	8006100 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a4:	4313      	orrs	r3, r2
 80060a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ba:	4313      	orrs	r3, r2
 80060bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80060be:	f7ff fd67 	bl	8005b90 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c2:	f7fb fd09 	bl	8001ad8 <HAL_GetTick>
 80060c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060c8:	e009      	b.n	80060de <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ca:	f7fb fd05 	bl	8001ad8 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d902      	bls.n	80060de <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	73fb      	strb	r3, [r7, #15]
        break;
 80060dc:	e004      	b.n	80060e8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060de:	f7ff fd75 	bl	8005bcc <LL_RCC_PLLSAI1_IsReady>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d1f0      	bne.n	80060ca <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fc:	4313      	orrs	r3, r2
 80060fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e049      	b.n	80061b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f841 	bl	80061b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f000 f9b7 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d001      	beq.n	80061e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e036      	b.n	8006252 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a17      	ldr	r2, [pc, #92]	; (8006260 <HAL_TIM_Base_Start_IT+0x94>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x44>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d115      	bne.n	800623c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	4b13      	ldr	r3, [pc, #76]	; (8006264 <HAL_TIM_Base_Start_IT+0x98>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b06      	cmp	r3, #6
 8006220:	d015      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x82>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d011      	beq.n	800624e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	e008      	b.n	800624e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e000      	b.n	8006250 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40012c00 	.word	0x40012c00
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d020      	beq.n	80062cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0202 	mvn.w	r2, #2
 800629c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8e4 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f8d6 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f8e7 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d020      	beq.n	8006318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0204 	mvn.w	r2, #4
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f8be 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f8b0 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8c1 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d020      	beq.n	8006364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0208 	mvn.w	r2, #8
 8006334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2204      	movs	r2, #4
 800633a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f898 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f88a 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f89b 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d020      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01b      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0210 	mvn.w	r2, #16
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f872 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f864 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f875 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0201 	mvn.w	r2, #1
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fb f81c 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8d0 	bl	8006598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d007      	beq.n	800641c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8c8 	bl	80065ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f834 	bl	80064a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0220 	mvn.w	r2, #32
 800645c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f890 	bl	8006584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a2a      	ldr	r2, [pc, #168]	; (8006578 <TIM_Base_SetConfig+0xbc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0x20>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d108      	bne.n	80064ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a21      	ldr	r2, [pc, #132]	; (8006578 <TIM_Base_SetConfig+0xbc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00b      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d007      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1e      	ldr	r2, [pc, #120]	; (800657c <TIM_Base_SetConfig+0xc0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d003      	beq.n	800650e <TIM_Base_SetConfig+0x52>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <TIM_Base_SetConfig+0xc4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d108      	bne.n	8006520 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0c      	ldr	r2, [pc, #48]	; (8006578 <TIM_Base_SetConfig+0xbc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_Base_SetConfig+0xa0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a0b      	ldr	r2, [pc, #44]	; (800657c <TIM_Base_SetConfig+0xc0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_Base_SetConfig+0xa0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <TIM_Base_SetConfig+0xc4>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d103      	bne.n	8006564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	615a      	str	r2, [r3, #20]
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_RCC_GetUSARTClockSource>:
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4013      	ands	r3, r2
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <LL_RCC_GetLPUARTClockSource>:
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4013      	ands	r3, r2
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e042      	b.n	8006698 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fb f807 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2224      	movs	r2, #36	; 0x24
 800662e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 f914 	bl	8007878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fee9 	bl	8007428 <UART_SetConfig>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e01b      	b.n	8006698 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f993 	bl	80079bc <UART_CheckIdleState>
 8006696:	4603      	mov	r3, r0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b091      	sub	sp, #68	; 0x44
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d178      	bne.n	80067aa <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_UART_Transmit_IT+0x24>
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e071      	b.n	80067ac <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	88fa      	ldrh	r2, [r7, #6]
 80066d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2221      	movs	r2, #33	; 0x21
 80066f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fc:	d12a      	bne.n	8006754 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d107      	bne.n	8006718 <HAL_UART_Transmit_IT+0x78>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d103      	bne.n	8006718 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a29      	ldr	r2, [pc, #164]	; (80067b8 <HAL_UART_Transmit_IT+0x118>)
 8006714:	679a      	str	r2, [r3, #120]	; 0x78
 8006716:	e002      	b.n	800671e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a28      	ldr	r2, [pc, #160]	; (80067bc <HAL_UART_Transmit_IT+0x11c>)
 800671c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673e:	637a      	str	r2, [r7, #52]	; 0x34
 8006740:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <HAL_UART_Transmit_IT+0x7e>
 8006752:	e028      	b.n	80067a6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675c:	d107      	bne.n	800676e <HAL_UART_Transmit_IT+0xce>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <HAL_UART_Transmit_IT+0x120>)
 800676a:	679a      	str	r2, [r3, #120]	; 0x78
 800676c:	e002      	b.n	8006774 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a14      	ldr	r2, [pc, #80]	; (80067c4 <HAL_UART_Transmit_IT+0x124>)
 8006772:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	613b      	str	r3, [r7, #16]
   return(result);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	69f9      	ldr	r1, [r7, #28]
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e000      	b.n	80067ac <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
  }
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3744      	adds	r7, #68	; 0x44
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	0800862f 	.word	0x0800862f
 80067bc:	0800854f 	.word	0x0800854f
 80067c0:	0800848d 	.word	0x0800848d
 80067c4:	080083d5 	.word	0x080083d5

080067c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d137      	bne.n	8006850 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_UART_Receive_IT+0x24>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e030      	b.n	8006852 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a18      	ldr	r2, [pc, #96]	; (800685c <HAL_UART_Receive_IT+0x94>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d01f      	beq.n	8006840 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	613b      	str	r3, [r7, #16]
   return(result);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69f9      	ldr	r1, [r7, #28]
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	61bb      	str	r3, [r7, #24]
   return(result);
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e6      	bne.n	800680e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	461a      	mov	r2, r3
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f001 f9ca 	bl	8007be0 <UART_Start_Receive_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	e000      	b.n	8006852 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
  }
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40008000 	.word	0x40008000

08006860 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	; 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006874:	2b20      	cmp	r3, #32
 8006876:	d167      	bne.n	8006948 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_UART_Transmit_DMA+0x24>
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e060      	b.n	800694a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	88fa      	ldrh	r2, [r7, #6]
 800689a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2221      	movs	r2, #33	; 0x21
 80068aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d028      	beq.n	8006908 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ba:	4a26      	ldr	r2, [pc, #152]	; (8006954 <HAL_UART_Transmit_DMA+0xf4>)
 80068bc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c2:	4a25      	ldr	r2, [pc, #148]	; (8006958 <HAL_UART_Transmit_DMA+0xf8>)
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ca:	4a24      	ldr	r2, [pc, #144]	; (800695c <HAL_UART_Transmit_DMA+0xfc>)
 80068cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d2:	2200      	movs	r2, #0
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	4619      	mov	r1, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3328      	adds	r3, #40	; 0x28
 80068e6:	461a      	mov	r2, r3
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	f7fc ff81 	bl	80037f0 <HAL_DMA_Start_IT>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2210      	movs	r2, #16
 80068f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e020      	b.n	800694a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2240      	movs	r2, #64	; 0x40
 800690e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	623a      	str	r2, [r7, #32]
 8006932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	69f9      	ldr	r1, [r7, #28]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	61bb      	str	r3, [r7, #24]
   return(result);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	e000      	b.n	800694a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006948:	2302      	movs	r3, #2
  }
}
 800694a:	4618      	mov	r0, r3
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	080080bf 	.word	0x080080bf
 8006958:	08008159 	.word	0x08008159
 800695c:	080082df 	.word	0x080082df

08006960 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b090      	sub	sp, #64	; 0x40
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d139      	bne.n	80069fa <HAL_UART_DMAStop+0x9a>
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	2b21      	cmp	r3, #33	; 0x21
 800698a:	d136      	bne.n	80069fa <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	61fb      	str	r3, [r7, #28]
   return(result);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e5      	bne.n	800698c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d015      	beq.n	80069f4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fc ff8a 	bl	80038e6 <HAL_DMA_Abort>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00d      	beq.n	80069f4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fd f8ef 	bl	8003bc0 <HAL_DMA_GetError>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d105      	bne.n	80069f4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2210      	movs	r2, #16
 80069ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e047      	b.n	8006a84 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fabb 	bl	8007f70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d13c      	bne.n	8006a82 <HAL_UART_DMAStop+0x122>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b22      	cmp	r3, #34	; 0x22
 8006a0c:	d139      	bne.n	8006a82 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	61ba      	str	r2, [r7, #24]
 8006a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d017      	beq.n	8006a7c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fc ff47 	bl	80038e6 <HAL_DMA_Abort>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd f8ab 	bl	8003bc0 <HAL_DMA_GetError>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d105      	bne.n	8006a7c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2210      	movs	r2, #16
 8006a74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e003      	b.n	8006a84 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fab8 	bl	8007ff2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3740      	adds	r7, #64	; 0x40
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b09a      	sub	sp, #104	; 0x68
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ab4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aea:	643a      	str	r2, [r7, #64]	; 0x40
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e3      	bne.n	8006ac6 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d118      	bne.n	8006b38 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e6      	bne.n	8006b06 <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	d154      	bne.n	8006bf0 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b66:	61ba      	str	r2, [r7, #24]
 8006b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6979      	ldr	r1, [r7, #20]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	613b      	str	r3, [r7, #16]
   return(result);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d017      	beq.n	8006bb4 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8a:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <HAL_UART_AbortReceive_IT+0x198>)
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fc ff05 	bl	80039a4 <HAL_DMA_Abort_IT>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03c      	beq.n	8006c1a <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006bae:	4610      	mov	r0, r2
 8006bb0:	4798      	blx	r3
 8006bb2:	e032      	b.n	8006c1a <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	220f      	movs	r2, #15
 8006bc8:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0208 	orr.w	r2, r2, #8
 8006bd8:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb55 	bl	8007298 <HAL_UART_AbortReceiveCpltCallback>
 8006bee:	e014      	b.n	8006c1a <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	220f      	movs	r2, #15
 8006c04:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fb3f 	bl	8007298 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3768      	adds	r7, #104	; 0x68
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	0800838b 	.word	0x0800838b

08006c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b0ba      	sub	sp, #232	; 0xe8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c56:	4013      	ands	r3, r2
 8006c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11b      	bne.n	8006c9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d015      	beq.n	8006c9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 82e3 	beq.w	8007258 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
      }
      return;
 8006c9a:	e2dd      	b.n	8007258 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8123 	beq.w	8006eec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ca6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006caa:	4b8d      	ldr	r3, [pc, #564]	; (8006ee0 <HAL_UART_IRQHandler+0x2b8>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cb6:	4b8b      	ldr	r3, [pc, #556]	; (8006ee4 <HAL_UART_IRQHandler+0x2bc>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8116 	beq.w	8006eec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d011      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xc8>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d011      	beq.n	8006d20 <HAL_UART_IRQHandler+0xf8>
 8006cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	f043 0204 	orr.w	r2, r3, #4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_UART_IRQHandler+0x128>
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f043 0202 	orr.w	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d017      	beq.n	8006d8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d105      	bne.n	8006d74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ee0 <HAL_UART_IRQHandler+0x2b8>)
 8006d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f043 0208 	orr.w	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d012      	beq.n	8006dbe <HAL_UART_IRQHandler+0x196>
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00c      	beq.n	8006dbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db4:	f043 0220 	orr.w	r2, r3, #32
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8249 	beq.w	800725c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d013      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d005      	beq.n	8006e22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d054      	beq.n	8006ecc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f8e5 	bl	8007ff2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d146      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1d9      	bne.n	8006e36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e92:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <HAL_UART_IRQHandler+0x2c0>)
 8006e94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fc fd81 	bl	80039a4 <HAL_DMA_Abort_IT>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d019      	beq.n	8006edc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e00f      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f007 fe91 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	e00b      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f007 fe8d 	bl	800ebe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eca:	e007      	b.n	8006edc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f007 fe89 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006eda:	e1bf      	b.n	800725c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	bf00      	nop
    return;
 8006ede:	e1bd      	b.n	800725c <HAL_UART_IRQHandler+0x634>
 8006ee0:	10000001 	.word	0x10000001
 8006ee4:	04000120 	.word	0x04000120
 8006ee8:	0800835f 	.word	0x0800835f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	f040 8153 	bne.w	800719c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 814c 	beq.w	800719c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8145 	beq.w	800719c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2210      	movs	r2, #16
 8006f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	f040 80bb 	bne.w	80070a0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 818f 	beq.w	8007260 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f080 8187 	bcs.w	8007260 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8087 	bne.w	800707e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1da      	bne.n	8006f70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e1      	bne.n	8006fba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800701a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800701c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e3      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800705e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007060:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007064:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e4      	bne.n	800703c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007078:	4618      	mov	r0, r3
 800707a:	f7fc fc34 	bl	80038e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007090:	b29b      	uxth	r3, r3
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f007 fdfd 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800709e:	e0df      	b.n	8007260 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80d1 	beq.w	8007264 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80cc 	beq.w	8007264 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ee:	647b      	str	r3, [r7, #68]	; 0x44
 80070f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e4      	bne.n	80070cc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	623b      	str	r3, [r7, #32]
   return(result);
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800712a:	633a      	str	r2, [r7, #48]	; 0x30
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e1      	bne.n	8007102 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0310 	bic.w	r3, r3, #16
 8007166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	617b      	str	r3, [r7, #20]
   return(result);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e4      	bne.n	8007152 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800718e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f007 fd7f 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800719a:	e063      	b.n	8007264 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800719c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00e      	beq.n	80071c6 <HAL_UART_IRQHandler+0x59e>
 80071a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fff2 	bl	80091a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071c4:	e051      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d03a      	beq.n	8007268 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
    }
    return;
 80071fa:	e035      	b.n	8007268 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d009      	beq.n	800721c <HAL_UART_IRQHandler+0x5f4>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fa7f 	bl	8008718 <UART_EndTransmit_IT>
    return;
 800721a:	e026      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d009      	beq.n	800723c <HAL_UART_IRQHandler+0x614>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 ffcb 	bl	80091d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800723a:	e016      	b.n	800726a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d010      	beq.n	800726a <HAL_UART_IRQHandler+0x642>
 8007248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724c:	2b00      	cmp	r3, #0
 800724e:	da0c      	bge.n	800726a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 ffb3 	bl	80091bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007256:	e008      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007258:	bf00      	nop
 800725a:	e006      	b.n	800726a <HAL_UART_IRQHandler+0x642>
    return;
 800725c:	bf00      	nop
 800725e:	e004      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <HAL_UART_IRQHandler+0x642>
      return;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_UART_IRQHandler+0x642>
    return;
 8007268:	bf00      	nop
  }
}
 800726a:	37e8      	adds	r7, #232	; 0xe8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b08f      	sub	sp, #60	; 0x3c
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80072be:	2302      	movs	r3, #2
 80072c0:	e042      	b.n	8007348 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2224      	movs	r2, #36	; 0x24
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f023 030c 	bic.w	r3, r3, #12
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e6      	bne.n	80072d2 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	60bb      	str	r3, [r7, #8]
   return(result);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f043 0308 	orr.w	r3, r3, #8
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	613b      	str	r3, [r7, #16]
   return(result);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	373c      	adds	r7, #60	; 0x3c
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b08f      	sub	sp, #60	; 0x3c
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_HalfDuplex_EnableReceiver+0x16>
 8007366:	2302      	movs	r3, #2
 8007368:	e042      	b.n	80073f0 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	; 0x24
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	61fb      	str	r3, [r7, #28]
   return(result);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f023 030c 	bic.w	r3, r3, #12
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f043 0304 	orr.w	r3, r3, #4
 80073c0:	633b      	str	r3, [r7, #48]	; 0x30
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	613b      	str	r3, [r7, #16]
   return(result);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e6      	bne.n	80073ac <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	373c      	adds	r7, #60	; 0x3c
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007412:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4313      	orrs	r3, r2
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800742c:	b08c      	sub	sp, #48	; 0x30
 800742e:	af00      	add	r7, sp, #0
 8007430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	431a      	orrs	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	431a      	orrs	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	4313      	orrs	r3, r2
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4baf      	ldr	r3, [pc, #700]	; (8007714 <UART_SetConfig+0x2ec>)
 8007458:	4013      	ands	r3, r2
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007460:	430b      	orrs	r3, r1
 8007462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4aa4      	ldr	r2, [pc, #656]	; (8007718 <UART_SetConfig+0x2f0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007490:	4313      	orrs	r3, r2
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800749e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	f023 010f 	bic.w	r1, r3, #15
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a95      	ldr	r2, [pc, #596]	; (800771c <UART_SetConfig+0x2f4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d125      	bne.n	8007518 <UART_SetConfig+0xf0>
 80074cc:	2003      	movs	r0, #3
 80074ce:	f7ff f877 	bl	80065c0 <LL_RCC_GetUSARTClockSource>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d81b      	bhi.n	8007510 <UART_SetConfig+0xe8>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <UART_SetConfig+0xb8>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	08007501 	.word	0x08007501
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	08007509 	.word	0x08007509
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f6:	e042      	b.n	800757e <UART_SetConfig+0x156>
 80074f8:	2302      	movs	r3, #2
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fe:	e03e      	b.n	800757e <UART_SetConfig+0x156>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007506:	e03a      	b.n	800757e <UART_SetConfig+0x156>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750e:	e036      	b.n	800757e <UART_SetConfig+0x156>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007516:	e032      	b.n	800757e <UART_SetConfig+0x156>
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a7e      	ldr	r2, [pc, #504]	; (8007718 <UART_SetConfig+0x2f0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d12a      	bne.n	8007578 <UART_SetConfig+0x150>
 8007522:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007526:	f7ff f85b 	bl	80065e0 <LL_RCC_GetLPUARTClockSource>
 800752a:	4603      	mov	r3, r0
 800752c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007530:	d01a      	beq.n	8007568 <UART_SetConfig+0x140>
 8007532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007536:	d81b      	bhi.n	8007570 <UART_SetConfig+0x148>
 8007538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753c:	d00c      	beq.n	8007558 <UART_SetConfig+0x130>
 800753e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007542:	d815      	bhi.n	8007570 <UART_SetConfig+0x148>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <UART_SetConfig+0x128>
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d008      	beq.n	8007560 <UART_SetConfig+0x138>
 800754e:	e00f      	b.n	8007570 <UART_SetConfig+0x148>
 8007550:	2300      	movs	r3, #0
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007556:	e012      	b.n	800757e <UART_SetConfig+0x156>
 8007558:	2302      	movs	r3, #2
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800755e:	e00e      	b.n	800757e <UART_SetConfig+0x156>
 8007560:	2304      	movs	r3, #4
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007566:	e00a      	b.n	800757e <UART_SetConfig+0x156>
 8007568:	2308      	movs	r3, #8
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800756e:	e006      	b.n	800757e <UART_SetConfig+0x156>
 8007570:	2310      	movs	r3, #16
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007576:	e002      	b.n	800757e <UART_SetConfig+0x156>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a65      	ldr	r2, [pc, #404]	; (8007718 <UART_SetConfig+0x2f0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	f040 8097 	bne.w	80076b8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800758a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800758e:	2b08      	cmp	r3, #8
 8007590:	d823      	bhi.n	80075da <UART_SetConfig+0x1b2>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x170>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075db 	.word	0x080075db
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075db 	.word	0x080075db
 80075a8:	080075cb 	.word	0x080075cb
 80075ac:	080075db 	.word	0x080075db
 80075b0:	080075db 	.word	0x080075db
 80075b4:	080075db 	.word	0x080075db
 80075b8:	080075d3 	.word	0x080075d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fe f85a 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075c2:	e010      	b.n	80075e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c4:	4b56      	ldr	r3, [pc, #344]	; (8007720 <UART_SetConfig+0x2f8>)
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c8:	e00d      	b.n	80075e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ca:	f7fd ffd3 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 80075ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075d0:	e009      	b.n	80075e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d8:	e005      	b.n	80075e6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 812b 	beq.w	8007844 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	4a4c      	ldr	r2, [pc, #304]	; (8007724 <UART_SetConfig+0x2fc>)
 80075f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007600:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4413      	add	r3, r2
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	429a      	cmp	r2, r3
 8007610:	d305      	bcc.n	800761e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	429a      	cmp	r2, r3
 800761c:	d903      	bls.n	8007626 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007624:	e10e      	b.n	8007844 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2200      	movs	r2, #0
 800762a:	60bb      	str	r3, [r7, #8]
 800762c:	60fa      	str	r2, [r7, #12]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <UART_SetConfig+0x2fc>)
 8007634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007638:	b29b      	uxth	r3, r3
 800763a:	2200      	movs	r2, #0
 800763c:	603b      	str	r3, [r7, #0]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007644:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007648:	f7f9 f968 	bl	800091c <__aeabi_uldivmod>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4610      	mov	r0, r2
 8007652:	4619      	mov	r1, r3
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	020b      	lsls	r3, r1, #8
 800765e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007662:	0202      	lsls	r2, r0, #8
 8007664:	6979      	ldr	r1, [r7, #20]
 8007666:	6849      	ldr	r1, [r1, #4]
 8007668:	0849      	lsrs	r1, r1, #1
 800766a:	2000      	movs	r0, #0
 800766c:	460c      	mov	r4, r1
 800766e:	4605      	mov	r5, r0
 8007670:	eb12 0804 	adds.w	r8, r2, r4
 8007674:	eb43 0905 	adc.w	r9, r3, r5
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	469a      	mov	sl, r3
 8007680:	4693      	mov	fp, r2
 8007682:	4652      	mov	r2, sl
 8007684:	465b      	mov	r3, fp
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f9 f947 	bl	800091c <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4613      	mov	r3, r2
 8007694:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800769c:	d308      	bcc.n	80076b0 <UART_SetConfig+0x288>
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a4:	d204      	bcs.n	80076b0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	e0c9      	b.n	8007844 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076b6:	e0c5      	b.n	8007844 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c0:	d16d      	bne.n	800779e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80076c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076c6:	3b01      	subs	r3, #1
 80076c8:	2b07      	cmp	r3, #7
 80076ca:	d82d      	bhi.n	8007728 <UART_SetConfig+0x300>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0x2ac>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007703 	.word	0x08007703
 80076e4:	08007729 	.word	0x08007729
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007729 	.word	0x08007729
 80076f0:	0800770b 	.word	0x0800770b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f4:	f7fd ffd4 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 80076f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076fa:	e01b      	b.n	8007734 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076fc:	4b08      	ldr	r3, [pc, #32]	; (8007720 <UART_SetConfig+0x2f8>)
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007700:	e018      	b.n	8007734 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007702:	f7fd ff37 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 8007706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007708:	e014      	b.n	8007734 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007710:	e010      	b.n	8007734 <UART_SetConfig+0x30c>
 8007712:	bf00      	nop
 8007714:	cfff69f3 	.word	0xcfff69f3
 8007718:	40008000 	.word	0x40008000
 800771c:	40013800 	.word	0x40013800
 8007720:	00f42400 	.word	0x00f42400
 8007724:	0800f04c 	.word	0x0800f04c
      default:
        pclk = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8084 	beq.w	8007844 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	4a4b      	ldr	r2, [pc, #300]	; (8007870 <UART_SetConfig+0x448>)
 8007742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007746:	461a      	mov	r2, r3
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	fbb3 f3f2 	udiv	r3, r3, r2
 800774e:	005a      	lsls	r2, r3, #1
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	441a      	add	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007760:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	2b0f      	cmp	r3, #15
 8007766:	d916      	bls.n	8007796 <UART_SetConfig+0x36e>
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776e:	d212      	bcs.n	8007796 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	b29b      	uxth	r3, r3
 8007774:	f023 030f 	bic.w	r3, r3, #15
 8007778:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	b29b      	uxth	r3, r3
 8007780:	f003 0307 	and.w	r3, r3, #7
 8007784:	b29a      	uxth	r2, r3
 8007786:	8bfb      	ldrh	r3, [r7, #30]
 8007788:	4313      	orrs	r3, r2
 800778a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	8bfa      	ldrh	r2, [r7, #30]
 8007792:	60da      	str	r2, [r3, #12]
 8007794:	e056      	b.n	8007844 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800779c:	e052      	b.n	8007844 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800779e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077a2:	3b01      	subs	r3, #1
 80077a4:	2b07      	cmp	r3, #7
 80077a6:	d822      	bhi.n	80077ee <UART_SetConfig+0x3c6>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <UART_SetConfig+0x388>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077d1 	.word	0x080077d1
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077ef 	.word	0x080077ef
 80077bc:	080077df 	.word	0x080077df
 80077c0:	080077ef 	.word	0x080077ef
 80077c4:	080077ef 	.word	0x080077ef
 80077c8:	080077ef 	.word	0x080077ef
 80077cc:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fd ff66 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 80077d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077d6:	e010      	b.n	80077fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b26      	ldr	r3, [pc, #152]	; (8007874 <UART_SetConfig+0x44c>)
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077dc:	e00d      	b.n	80077fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7fd fec9 	bl	8005574 <HAL_RCC_GetSysClockFreq>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077e4:	e009      	b.n	80077fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077ec:	e005      	b.n	80077fa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077f8:	bf00      	nop
    }

    if (pclk != 0U)
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d021      	beq.n	8007844 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <UART_SetConfig+0x448>)
 8007806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780a:	461a      	mov	r2, r3
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	441a      	add	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007822:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	2b0f      	cmp	r3, #15
 8007828:	d909      	bls.n	800783e <UART_SetConfig+0x416>
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d205      	bcs.n	800783e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	b29a      	uxth	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60da      	str	r2, [r3, #12]
 800783c:	e002      	b.n	8007844 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2201      	movs	r2, #1
 8007850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2200      	movs	r2, #0
 8007858:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2200      	movs	r2, #0
 800785e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007860:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007864:	4618      	mov	r0, r3
 8007866:	3730      	adds	r7, #48	; 0x30
 8007868:	46bd      	mov	sp, r7
 800786a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786e:	bf00      	nop
 8007870:	0800f04c 	.word	0x0800f04c
 8007874:	00f42400 	.word	0x00f42400

08007878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01a      	beq.n	800798e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007976:	d10a      	bne.n	800798e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
  }
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b098      	sub	sp, #96	; 0x60
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079cc:	f7fa f884 	bl	8001ad8 <HAL_GetTick>
 80079d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0308 	and.w	r3, r3, #8
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d12f      	bne.n	8007a40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f88e 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d022      	beq.n	8007a40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a18:	647b      	str	r3, [r7, #68]	; 0x44
 8007a1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e6      	bne.n	80079fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e063      	b.n	8007b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d149      	bne.n	8007ae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	2200      	movs	r2, #0
 8007a58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f857 	bl	8007b10 <UART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d03c      	beq.n	8007ae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	623b      	str	r3, [r7, #32]
   return(result);
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
 8007a88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e6      	bne.n	8007a68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aba:	61fa      	str	r2, [r7, #28]
 8007abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	69b9      	ldr	r1, [r7, #24]
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e5      	bne.n	8007a9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e012      	b.n	8007b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3758      	adds	r7, #88	; 0x58
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b20:	e049      	b.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d045      	beq.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b2a:	f7f9 ffd5 	bl	8001ad8 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e048      	b.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d031      	beq.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d110      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2208      	movs	r2, #8
 8007b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fa42 	bl	8007ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2208      	movs	r2, #8
 8007b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e029      	b.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b90:	d111      	bne.n	8007bb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fa28 	bl	8007ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e00f      	b.n	8007bd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	bf0c      	ite	eq
 8007bc6:	2301      	moveq	r3, #1
 8007bc8:	2300      	movne	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d0a6      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b0a3      	sub	sp, #140	; 0x8c
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	4613      	mov	r3, r2
 8007bec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c12:	d10e      	bne.n	8007c32 <UART_Start_Receive_IT+0x52>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <UART_Start_Receive_IT+0x48>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c26:	e02d      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c30:	e028      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10d      	bne.n	8007c56 <UART_Start_Receive_IT+0x76>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <UART_Start_Receive_IT+0x6c>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c4a:	e01b      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	227f      	movs	r2, #127	; 0x7f
 8007c50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c54:	e016      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5e:	d10d      	bne.n	8007c7c <UART_Start_Receive_IT+0x9c>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <UART_Start_Receive_IT+0x92>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	227f      	movs	r2, #127	; 0x7f
 8007c6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c70:	e008      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	223f      	movs	r2, #63	; 0x3f
 8007c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c7a:	e003      	b.n	8007c84 <UART_Start_Receive_IT+0xa4>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2222      	movs	r2, #34	; 0x22
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007cb8:	673a      	str	r2, [r7, #112]	; 0x70
 8007cba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007cbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e3      	bne.n	8007c94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd4:	d14f      	bne.n	8007d76 <UART_Start_Receive_IT+0x196>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d349      	bcc.n	8007d76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cea:	d107      	bne.n	8007cfc <UART_Start_Receive_IT+0x11c>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a47      	ldr	r2, [pc, #284]	; (8007e14 <UART_Start_Receive_IT+0x234>)
 8007cf8:	675a      	str	r2, [r3, #116]	; 0x74
 8007cfa:	e002      	b.n	8007d02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4a46      	ldr	r2, [pc, #280]	; (8007e18 <UART_Start_Receive_IT+0x238>)
 8007d00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d01a      	beq.n	8007d40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e4      	bne.n	8007d0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d60:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <UART_Start_Receive_IT+0x160>
 8007d74:	e046      	b.n	8007e04 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	d107      	bne.n	8007d90 <UART_Start_Receive_IT+0x1b0>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4a24      	ldr	r2, [pc, #144]	; (8007e1c <UART_Start_Receive_IT+0x23c>)
 8007d8c:	675a      	str	r2, [r3, #116]	; 0x74
 8007d8e:	e002      	b.n	8007d96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4a23      	ldr	r2, [pc, #140]	; (8007e20 <UART_Start_Receive_IT+0x240>)
 8007d94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d019      	beq.n	8007dd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007db2:	677b      	str	r3, [r7, #116]	; 0x74
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e6      	bne.n	8007d9e <UART_Start_Receive_IT+0x1be>
 8007dd0:	e018      	b.n	8007e04 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	613b      	str	r3, [r7, #16]
   return(result);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f043 0320 	orr.w	r3, r3, #32
 8007de6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df0:	623b      	str	r3, [r7, #32]
 8007df2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	6a3a      	ldr	r2, [r7, #32]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e6      	bne.n	8007dd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	378c      	adds	r7, #140	; 0x8c
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	08008e41 	.word	0x08008e41
 8007e18:	08008ae1 	.word	0x08008ae1
 8007e1c:	08008929 	.word	0x08008929
 8007e20:	08008771 	.word	0x08008771

08007e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b096      	sub	sp, #88	; 0x58
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2222      	movs	r2, #34	; 0x22
 8007e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d02d      	beq.n	8007eb6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e60:	4a40      	ldr	r2, [pc, #256]	; (8007f64 <UART_Start_Receive_DMA+0x140>)
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6a:	4a3f      	ldr	r2, [pc, #252]	; (8007f68 <UART_Start_Receive_DMA+0x144>)
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e74:	4a3d      	ldr	r2, [pc, #244]	; (8007f6c <UART_Start_Receive_DMA+0x148>)
 8007e76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7e:	2200      	movs	r2, #0
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3324      	adds	r3, #36	; 0x24
 8007e8e:	4619      	mov	r1, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	461a      	mov	r2, r3
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	f7fb fcaa 	bl	80037f0 <HAL_DMA_Start_IT>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e051      	b.n	8007f5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d018      	beq.n	8007ef0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ede:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e6      	bne.n	8007ebe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	653b      	str	r3, [r7, #80]	; 0x50
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f10:	637a      	str	r2, [r7, #52]	; 0x34
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e5      	bne.n	8007ef0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	613b      	str	r3, [r7, #16]
   return(result);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f44:	623a      	str	r2, [r7, #32]
 8007f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	69f9      	ldr	r1, [r7, #28]
 8007f4a:	6a3a      	ldr	r2, [r7, #32]
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e5      	bne.n	8007f24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3758      	adds	r7, #88	; 0x58
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	08008175 	.word	0x08008175
 8007f68:	080082a1 	.word	0x080082a1
 8007f6c:	080082df 	.word	0x080082df

08007f70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b08f      	sub	sp, #60	; 0x3c
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e6      	bne.n	8007f78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	61ba      	str	r2, [r7, #24]
 8007fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6979      	ldr	r1, [r7, #20]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e5      	bne.n	8007faa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007fe6:	bf00      	nop
 8007fe8:	373c      	adds	r7, #60	; 0x3c
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b095      	sub	sp, #84	; 0x54
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800800e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008018:	643b      	str	r3, [r7, #64]	; 0x40
 800801a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800801e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3308      	adds	r3, #8
 8008032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	61fb      	str	r3, [r7, #28]
   return(result);
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	64bb      	str	r3, [r7, #72]	; 0x48
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e3      	bne.n	800802c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008068:	2b01      	cmp	r3, #1
 800806a:	d118      	bne.n	800809e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	60bb      	str	r3, [r7, #8]
   return(result);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	647b      	str	r3, [r7, #68]	; 0x44
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6979      	ldr	r1, [r7, #20]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	613b      	str	r3, [r7, #16]
   return(result);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080b2:	bf00      	nop
 80080b4:	3754      	adds	r7, #84	; 0x54
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b090      	sub	sp, #64	; 0x40
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d137      	bne.n	800814a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80080da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080dc:	2200      	movs	r2, #0
 80080de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	623b      	str	r3, [r7, #32]
   return(result);
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008102:	633a      	str	r2, [r7, #48]	; 0x30
 8008104:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e5      	bne.n	80080e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60fb      	str	r3, [r7, #12]
   return(result);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	69fa      	ldr	r2, [r7, #28]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e6      	bne.n	8008116 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008148:	e002      	b.n	8008150 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800814a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800814c:	f006 fca2 	bl	800ea94 <HAL_UART_TxCpltCallback>
}
 8008150:	bf00      	nop
 8008152:	3740      	adds	r7, #64	; 0x40
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f7ff f882 	bl	8007270 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b09c      	sub	sp, #112	; 0x70
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b00      	cmp	r3, #0
 800818e:	d171      	bne.n	8008274 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008192:	2200      	movs	r2, #0
 8008194:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	667b      	str	r3, [r7, #100]	; 0x64
 80081e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081ea:	647a      	str	r2, [r7, #68]	; 0x44
 80081ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	623b      	str	r3, [r7, #32]
   return(result);
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008214:	663b      	str	r3, [r7, #96]	; 0x60
 8008216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3308      	adds	r3, #8
 800821c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800821e:	633a      	str	r2, [r7, #48]	; 0x30
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e5      	bne.n	80081fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d118      	bne.n	8008274 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0310 	bic.w	r3, r3, #16
 8008256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	69b9      	ldr	r1, [r7, #24]
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	617b      	str	r3, [r7, #20]
   return(result);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008276:	2200      	movs	r2, #0
 8008278:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827e:	2b01      	cmp	r3, #1
 8008280:	d107      	bne.n	8008292 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008288:	4619      	mov	r1, r3
 800828a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800828c:	f006 fd04 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008290:	e002      	b.n	8008298 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008292:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008294:	f006 fc3c 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008298:	bf00      	nop
 800829a:	3770      	adds	r7, #112	; 0x70
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d109      	bne.n	80082d0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f006 fce5 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082ce:	e002      	b.n	80082d6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7fe ffd7 	bl	8007284 <HAL_UART_RxHalfCpltCallback>
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d109      	bne.n	800831e <UART_DMAError+0x40>
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	2b21      	cmp	r3, #33	; 0x21
 800830e:	d106      	bne.n	800831e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008318:	6978      	ldr	r0, [r7, #20]
 800831a:	f7ff fe29 	bl	8007f70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d109      	bne.n	8008340 <UART_DMAError+0x62>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b22      	cmp	r3, #34	; 0x22
 8008330:	d106      	bne.n	8008340 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2200      	movs	r2, #0
 8008336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f7ff fe59 	bl	8007ff2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008346:	f043 0210 	orr.w	r2, r3, #16
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008350:	6978      	ldr	r0, [r7, #20]
 8008352:	f006 fc47 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008356:	bf00      	nop
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f006 fc31 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	220f      	movs	r2, #15
 80083a6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0208 	orr.w	r2, r2, #8
 80083b6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7fe ff66 	bl	8007298 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b08f      	sub	sp, #60	; 0x3c
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e2:	2b21      	cmp	r3, #33	; 0x21
 80083e4:	d14c      	bne.n	8008480 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d132      	bne.n	8008458 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008412:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e6      	bne.n	80083f2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	60bb      	str	r3, [r7, #8]
   return(result);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008438:	633b      	str	r3, [r7, #48]	; 0x30
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	61bb      	str	r3, [r7, #24]
 8008444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	613b      	str	r3, [r7, #16]
   return(result);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e6      	bne.n	8008424 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008456:	e013      	b.n	8008480 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	781a      	ldrb	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008480:	bf00      	nop
 8008482:	373c      	adds	r7, #60	; 0x3c
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800848c:	b480      	push	{r7}
 800848e:	b091      	sub	sp, #68	; 0x44
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	2b21      	cmp	r3, #33	; 0x21
 800849c:	d151      	bne.n	8008542 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d132      	bne.n	8008510 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	623b      	str	r3, [r7, #32]
   return(result);
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	61fb      	str	r3, [r7, #28]
 80084fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	69b9      	ldr	r1, [r7, #24]
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	617b      	str	r3, [r7, #20]
   return(result);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800850e:	e018      	b.n	8008542 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008524:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008542:	bf00      	nop
 8008544:	3744      	adds	r7, #68	; 0x44
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800854e:	b480      	push	{r7}
 8008550:	b091      	sub	sp, #68	; 0x44
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855c:	2b21      	cmp	r3, #33	; 0x21
 800855e:	d160      	bne.n	8008622 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008566:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008568:	e057      	b.n	800861a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d133      	bne.n	80085de <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	623b      	str	r3, [r7, #32]
   return(result);
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800858c:	63bb      	str	r3, [r7, #56]	; 0x38
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008596:	633a      	str	r2, [r7, #48]	; 0x30
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800859c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085be:	637b      	str	r3, [r7, #52]	; 0x34
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	617b      	str	r3, [r7, #20]
   return(result);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80085dc:	e021      	b.n	8008622 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d013      	beq.n	8008614 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008616:	3b01      	subs	r3, #1
 8008618:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800861a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1a4      	bne.n	800856a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008620:	e7ff      	b.n	8008622 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008622:	bf00      	nop
 8008624:	3744      	adds	r7, #68	; 0x44
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800862e:	b480      	push	{r7}
 8008630:	b091      	sub	sp, #68	; 0x44
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863c:	2b21      	cmp	r3, #33	; 0x21
 800863e:	d165      	bne.n	800870c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008646:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008648:	e05c      	b.n	8008704 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d133      	bne.n	80086be <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	61fb      	str	r3, [r7, #28]
   return(result);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800866c:	637b      	str	r3, [r7, #52]	; 0x34
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	60bb      	str	r3, [r7, #8]
   return(result);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869e:	633b      	str	r3, [r7, #48]	; 0x30
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6979      	ldr	r1, [r7, #20]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	613b      	str	r3, [r7, #16]
   return(result);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e6      	bne.n	800868a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80086bc:	e026      	b.n	800870c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d018      	beq.n	80086fe <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086e0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e6:	1c9a      	adds	r2, r3, #2
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80086fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008700:	3b01      	subs	r3, #1
 8008702:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008704:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008706:	2b00      	cmp	r3, #0
 8008708:	d19f      	bne.n	800864a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800870a:	e7ff      	b.n	800870c <UART_TxISR_16BIT_FIFOEN+0xde>
 800870c:	bf00      	nop
 800870e:	3744      	adds	r7, #68	; 0x44
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	60bb      	str	r3, [r7, #8]
   return(result);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6979      	ldr	r1, [r7, #20]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	613b      	str	r3, [r7, #16]
   return(result);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e6      	bne.n	8008720 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2220      	movs	r2, #32
 8008756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f006 f997 	bl	800ea94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008766:	bf00      	nop
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b09c      	sub	sp, #112	; 0x70
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008788:	2b22      	cmp	r3, #34	; 0x22
 800878a:	f040 80be 	bne.w	800890a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800879c:	b2d9      	uxtb	r1, r3
 800879e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a8:	400a      	ands	r2, r1
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 80a1 	bne.w	800891a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80087f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	667b      	str	r3, [r7, #100]	; 0x64
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800882a:	647a      	str	r2, [r7, #68]	; 0x44
 800882c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a33      	ldr	r2, [pc, #204]	; (8008924 <UART_RxISR_8BIT+0x1b4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d01f      	beq.n	800889c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d018      	beq.n	800889c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	623b      	str	r3, [r7, #32]
   return(result);
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800887e:	663b      	str	r3, [r7, #96]	; 0x60
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008888:	633b      	str	r3, [r7, #48]	; 0x30
 800888a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800888e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d12e      	bne.n	8008902 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0310 	bic.w	r3, r3, #16
 80088be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c8:	61fb      	str	r3, [r7, #28]
 80088ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	69b9      	ldr	r1, [r7, #24]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	617b      	str	r3, [r7, #20]
   return(result);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e6      	bne.n	80088aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b10      	cmp	r3, #16
 80088e8:	d103      	bne.n	80088f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2210      	movs	r2, #16
 80088f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f006 f9cc 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008900:	e00b      	b.n	800891a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f006 f904 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008908:	e007      	b.n	800891a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	699a      	ldr	r2, [r3, #24]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0208 	orr.w	r2, r2, #8
 8008918:	619a      	str	r2, [r3, #24]
}
 800891a:	bf00      	nop
 800891c:	3770      	adds	r7, #112	; 0x70
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	40008000 	.word	0x40008000

08008928 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b09c      	sub	sp, #112	; 0x70
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008936:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008940:	2b22      	cmp	r3, #34	; 0x22
 8008942:	f040 80be 	bne.w	8008ac2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008956:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800895a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800895e:	4013      	ands	r3, r2
 8008960:	b29a      	uxth	r2, r3
 8008962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008964:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896a:	1c9a      	adds	r2, r3, #2
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	f040 80a1 	bne.w	8008ad2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800899e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089a4:	667b      	str	r3, [r7, #100]	; 0x64
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089ae:	657b      	str	r3, [r7, #84]	; 0x54
 80089b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e6      	bne.n	8008990 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3308      	adds	r3, #8
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	f023 0301 	bic.w	r3, r3, #1
 80089d8:	663b      	str	r3, [r7, #96]	; 0x60
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089e2:	643a      	str	r2, [r7, #64]	; 0x40
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e5      	bne.n	80089c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a33      	ldr	r2, [pc, #204]	; (8008adc <UART_RxISR_16BIT+0x1b4>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d01f      	beq.n	8008a54 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d018      	beq.n	8008a54 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d12e      	bne.n	8008aba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f023 0310 	bic.w	r3, r3, #16
 8008a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6979      	ldr	r1, [r7, #20]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	2b10      	cmp	r3, #16
 8008aa0:	d103      	bne.n	8008aaa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2210      	movs	r2, #16
 8008aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f006 f8f0 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ab8:	e00b      	b.n	8008ad2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f006 f828 	bl	800eb10 <HAL_UART_RxCpltCallback>
}
 8008ac0:	e007      	b.n	8008ad2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699a      	ldr	r2, [r3, #24]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0208 	orr.w	r2, r2, #8
 8008ad0:	619a      	str	r2, [r3, #24]
}
 8008ad2:	bf00      	nop
 8008ad4:	3770      	adds	r7, #112	; 0x70
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40008000 	.word	0x40008000

08008ae0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b0ac      	sub	sp, #176	; 0xb0
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008aee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b16:	2b22      	cmp	r3, #34	; 0x22
 8008b18:	f040 8182 	bne.w	8008e20 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b22:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b26:	e125      	b.n	8008d74 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008b36:	b2d9      	uxtb	r1, r3
 8008b38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b42:	400a      	ands	r2, r1
 8008b44:	b2d2      	uxtb	r2, r2
 8008b46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d053      	beq.n	8008c22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d011      	beq.n	8008baa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2201      	movs	r2, #1
 8008b98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba0:	f043 0201 	orr.w	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d011      	beq.n	8008bda <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	f043 0204 	orr.w	r2, r3, #4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bde:	f003 0304 	and.w	r3, r3, #4
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d011      	beq.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00b      	beq.n	8008c0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c00:	f043 0202 	orr.w	r2, r3, #2
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f005 ffe5 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 80a2 	bne.w	8008d74 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c54:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008c58:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e4      	bne.n	8008c30 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008c90:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e1      	bne.n	8008c66 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a5f      	ldr	r2, [pc, #380]	; (8008e38 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d021      	beq.n	8008d04 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d01a      	beq.n	8008d04 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cf0:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e4      	bne.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d130      	bne.n	8008d6e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	f023 0310 	bic.w	r3, r3, #16
 8008d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d34:	643b      	str	r3, [r7, #64]	; 0x40
 8008d36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e4      	bne.n	8008d12 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f003 0310 	and.w	r3, r3, #16
 8008d52:	2b10      	cmp	r3, #16
 8008d54:	d103      	bne.n	8008d5e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f005 ff96 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
 8008d6c:	e002      	b.n	8008d74 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f005 fece 	bl	800eb10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d74:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f47f aecf 	bne.w	8008b28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d049      	beq.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008da2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d242      	bcs.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3308      	adds	r3, #8
 8008dca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e3      	bne.n	8008daa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a15      	ldr	r2, [pc, #84]	; (8008e3c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008de6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f043 0320 	orr.w	r3, r3, #32
 8008dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6979      	ldr	r1, [r7, #20]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e4      	bne.n	8008de8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e1e:	e007      	b.n	8008e30 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0208 	orr.w	r2, r2, #8
 8008e2e:	619a      	str	r2, [r3, #24]
}
 8008e30:	bf00      	nop
 8008e32:	37b0      	adds	r7, #176	; 0xb0
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40008000 	.word	0x40008000
 8008e3c:	08008771 	.word	0x08008771

08008e40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b0ae      	sub	sp, #184	; 0xb8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e76:	2b22      	cmp	r3, #34	; 0x22
 8008e78:	f040 8186 	bne.w	8009188 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e82:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e86:	e129      	b.n	80090dc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008e9e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	1c9a      	adds	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d053      	beq.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d011      	beq.n	8008f0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2201      	movs	r2, #1
 8008efc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f04:	f043 0201 	orr.w	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d011      	beq.n	8008f3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f34:	f043 0204 	orr.w	r2, r3, #4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d011      	beq.n	8008f6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f64:	f043 0202 	orr.w	r2, r3, #2
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d006      	beq.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f005 fe33 	bl	800ebe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f040 80a4 	bne.w	80090dc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008fbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008fc2:	e841 2300 	strex	r3, r2, [r1]
 8008fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e2      	bne.n	8008f94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	f023 0301 	bic.w	r3, r3, #1
 8008fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ff6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ff8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e1      	bne.n	8008fce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a5f      	ldr	r2, [pc, #380]	; (80091a0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d021      	beq.n	800906c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01a      	beq.n	800906c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800904a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009058:	65bb      	str	r3, [r7, #88]	; 0x58
 800905a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800905e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e4      	bne.n	8009036 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d130      	bne.n	80090d6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908a:	f023 0310 	bic.w	r3, r3, #16
 800908e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800909c:	647b      	str	r3, [r7, #68]	; 0x44
 800909e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e4      	bne.n	800907a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d103      	bne.n	80090c6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2210      	movs	r2, #16
 80090c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f005 fde2 	bl	800ec98 <HAL_UARTEx_RxEventCallback>
 80090d4:	e002      	b.n	80090dc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f005 fd1a 	bl	800eb10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d006      	beq.n	80090f2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80090e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f47f aecb 	bne.w	8008e88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009100:	2b00      	cmp	r3, #0
 8009102:	d049      	beq.n	8009198 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800910a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800910e:	429a      	cmp	r2, r3
 8009110:	d242      	bcs.n	8009198 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	623b      	str	r3, [r7, #32]
   return(result);
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3308      	adds	r3, #8
 8009132:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009136:	633a      	str	r2, [r7, #48]	; 0x30
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800913c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e3      	bne.n	8009112 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a15      	ldr	r2, [pc, #84]	; (80091a4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800914e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	60fb      	str	r3, [r7, #12]
   return(result);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f043 0320 	orr.w	r3, r3, #32
 8009164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	617b      	str	r3, [r7, #20]
   return(result);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e4      	bne.n	8009150 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009186:	e007      	b.n	8009198 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0208 	orr.w	r2, r2, #8
 8009196:	619a      	str	r2, [r3, #24]
}
 8009198:	bf00      	nop
 800919a:	37b8      	adds	r7, #184	; 0xb8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40008000 	.word	0x40008000
 80091a4:	08008929 	.word	0x08008929

080091a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <HAL_UARTEx_DisableFifoMode+0x16>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e027      	b.n	800924a <HAL_UARTEx_DisableFifoMode+0x66>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2224      	movs	r2, #36	; 0x24
 8009206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0201 	bic.w	r2, r2, #1
 8009220:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009228:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800926a:	2302      	movs	r3, #2
 800926c:	e02d      	b.n	80092ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2224      	movs	r2, #36	; 0x24
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f8a4 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b084      	sub	sp, #16
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e02d      	b.n	8009346 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2224      	movs	r2, #36	; 0x24
 80092f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f866 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b08c      	sub	sp, #48	; 0x30
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	4613      	mov	r3, r2
 800935a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009362:	2b20      	cmp	r3, #32
 8009364:	d142      	bne.n	80093ec <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e03b      	b.n	80093ee <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	461a      	mov	r2, r3
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7fe fd4b 	bl	8007e24 <UART_Start_Receive_DMA>
 800938e:	4603      	mov	r3, r0
 8009390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009398:	2b00      	cmp	r3, #0
 800939a:	d124      	bne.n	80093e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d11d      	bne.n	80093e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2210      	movs	r2, #16
 80093aa:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f043 0310 	orr.w	r3, r3, #16
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
 80093cc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6a39      	ldr	r1, [r7, #32]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e6      	bne.n	80093ac <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80093de:	e002      	b.n	80093e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80093e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80093ea:	e000      	b.n	80093ee <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80093ec:	2302      	movs	r3, #2
  }
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3730      	adds	r7, #48	; 0x30
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009418:	e031      	b.n	800947e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800941a:	2308      	movs	r3, #8
 800941c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800941e:	2308      	movs	r3, #8
 8009420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	0e5b      	lsrs	r3, r3, #25
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	0f5b      	lsrs	r3, r3, #29
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	7b3a      	ldrb	r2, [r7, #12]
 8009446:	4911      	ldr	r1, [pc, #68]	; (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009448:	5c8a      	ldrb	r2, [r1, r2]
 800944a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800944e:	7b3a      	ldrb	r2, [r7, #12]
 8009450:	490f      	ldr	r1, [pc, #60]	; (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009454:	fb93 f3f2 	sdiv	r3, r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	7b7a      	ldrb	r2, [r7, #13]
 8009464:	4909      	ldr	r1, [pc, #36]	; (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009466:	5c8a      	ldrb	r2, [r1, r2]
 8009468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800946c:	7b7a      	ldrb	r2, [r7, #13]
 800946e:	4908      	ldr	r1, [pc, #32]	; (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009472:	fb93 f3f2 	sdiv	r3, r3, r2
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	0800f064 	.word	0x0800f064
 8009490:	0800f06c 	.word	0x0800f06c

08009494 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800949c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80094a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	43db      	mvns	r3, r3
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4013      	ands	r3, r2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80094ca:	b084      	sub	sp, #16
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	f107 0014 	add.w	r0, r7, #20
 80094d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	b004      	add	sp, #16
 800950a:	4770      	bx	lr

0800950c <__NVIC_SetPriority>:
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	6039      	str	r1, [r7, #0]
 8009516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800951c:	2b00      	cmp	r3, #0
 800951e:	db0a      	blt.n	8009536 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	490c      	ldr	r1, [pc, #48]	; (8009558 <__NVIC_SetPriority+0x4c>)
 8009526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952a:	0112      	lsls	r2, r2, #4
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	440b      	add	r3, r1
 8009530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009534:	e00a      	b.n	800954c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	4908      	ldr	r1, [pc, #32]	; (800955c <__NVIC_SetPriority+0x50>)
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	3b04      	subs	r3, #4
 8009544:	0112      	lsls	r2, r2, #4
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	440b      	add	r3, r1
 800954a:	761a      	strb	r2, [r3, #24]
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	e000e100 	.word	0xe000e100
 800955c:	e000ed00 	.word	0xe000ed00

08009560 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <SysTick_Handler+0x1c>)
 8009566:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009568:	f002 fa42 	bl	800b9f0 <xTaskGetSchedulerState>
 800956c:	4603      	mov	r3, r0
 800956e:	2b01      	cmp	r3, #1
 8009570:	d001      	beq.n	8009576 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009572:	f003 fc19 	bl	800cda8 <xPortSysTickHandler>
  }
}
 8009576:	bf00      	nop
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	e000e010 	.word	0xe000e010

08009580 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009584:	2100      	movs	r1, #0
 8009586:	f06f 0004 	mvn.w	r0, #4
 800958a:	f7ff ffbf 	bl	800950c <__NVIC_SetPriority>
#endif
}
 800958e:	bf00      	nop
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959a:	f3ef 8305 	mrs	r3, IPSR
 800959e:	603b      	str	r3, [r7, #0]
  return(result);
 80095a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095a6:	f06f 0305 	mvn.w	r3, #5
 80095aa:	607b      	str	r3, [r7, #4]
 80095ac:	e00c      	b.n	80095c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095ae:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <osKernelInitialize+0x44>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d105      	bne.n	80095c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80095b6:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <osKernelInitialize+0x44>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095bc:	2300      	movs	r3, #0
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	e002      	b.n	80095c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
 80095c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095c8:	687b      	ldr	r3, [r7, #4]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	200007bc 	.word	0x200007bc

080095dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095e2:	f3ef 8305 	mrs	r3, IPSR
 80095e6:	603b      	str	r3, [r7, #0]
  return(result);
 80095e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80095ee:	f06f 0305 	mvn.w	r3, #5
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	e010      	b.n	8009618 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095f6:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <osKernelStart+0x48>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d109      	bne.n	8009612 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80095fe:	f7ff ffbf 	bl	8009580 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <osKernelStart+0x48>)
 8009604:	2202      	movs	r2, #2
 8009606:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009608:	f001 fd98 	bl	800b13c <vTaskStartScheduler>
      stat = osOK;
 800960c:	2300      	movs	r3, #0
 800960e:	607b      	str	r3, [r7, #4]
 8009610:	e002      	b.n	8009618 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009612:	f04f 33ff 	mov.w	r3, #4294967295
 8009616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009618:	687b      	ldr	r3, [r7, #4]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200007bc 	.word	0x200007bc

08009628 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	; 0x38
 800962c:	af04      	add	r7, sp, #16
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009638:	f3ef 8305 	mrs	r3, IPSR
 800963c:	617b      	str	r3, [r7, #20]
  return(result);
 800963e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009640:	2b00      	cmp	r3, #0
 8009642:	d17e      	bne.n	8009742 <osThreadNew+0x11a>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d07b      	beq.n	8009742 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800964a:	2380      	movs	r3, #128	; 0x80
 800964c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800964e:	2318      	movs	r3, #24
 8009650:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009656:	f04f 33ff 	mov.w	r3, #4294967295
 800965a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d045      	beq.n	80096ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <osThreadNew+0x48>
        name = attr->name;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d008      	beq.n	8009696 <osThreadNew+0x6e>
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2b38      	cmp	r3, #56	; 0x38
 8009688:	d805      	bhi.n	8009696 <osThreadNew+0x6e>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <osThreadNew+0x72>
        return (NULL);
 8009696:	2300      	movs	r3, #0
 8009698:	e054      	b.n	8009744 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	089b      	lsrs	r3, r3, #2
 80096a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00e      	beq.n	80096d0 <osThreadNew+0xa8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	2b5b      	cmp	r3, #91	; 0x5b
 80096b8:	d90a      	bls.n	80096d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d006      	beq.n	80096d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <osThreadNew+0xa8>
        mem = 1;
 80096ca:	2301      	movs	r3, #1
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	e010      	b.n	80096f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10c      	bne.n	80096f2 <osThreadNew+0xca>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d108      	bne.n	80096f2 <osThreadNew+0xca>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <osThreadNew+0xca>
          mem = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	e001      	b.n	80096f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d110      	bne.n	800971a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009700:	9202      	str	r2, [sp, #8]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6a3a      	ldr	r2, [r7, #32]
 800970c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f001 fb3e 	bl	800ad90 <xTaskCreateStatic>
 8009714:	4603      	mov	r3, r0
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	e013      	b.n	8009742 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d110      	bne.n	8009742 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	b29a      	uxth	r2, r3
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f001 fb89 	bl	800ae4a <xTaskCreate>
 8009738:	4603      	mov	r3, r0
 800973a:	2b01      	cmp	r3, #1
 800973c:	d001      	beq.n	8009742 <osThreadNew+0x11a>
            hTask = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009742:	693b      	ldr	r3, [r7, #16]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3728      	adds	r7, #40	; 0x28
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af02      	add	r7, sp, #8
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <osThreadFlagsSet+0x1a>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da03      	bge.n	800976e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009766:	f06f 0303 	mvn.w	r3, #3
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	e035      	b.n	80097da <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009774:	f3ef 8305 	mrs	r3, IPSR
 8009778:	613b      	str	r3, [r7, #16]
  return(result);
 800977a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01f      	beq.n	80097c0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009780:	2300      	movs	r3, #0
 8009782:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	2300      	movs	r3, #0
 800978c:	2201      	movs	r2, #1
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6978      	ldr	r0, [r7, #20]
 8009792:	f002 fc11 	bl	800bfb8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009796:	f107 030c 	add.w	r3, r7, #12
 800979a:	2200      	movs	r2, #0
 800979c:	9200      	str	r2, [sp, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	6978      	ldr	r0, [r7, #20]
 80097a4:	f002 fc08 	bl	800bfb8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d015      	beq.n	80097da <osThreadFlagsSet+0x8e>
 80097ae:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <osThreadFlagsSet+0x98>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	e00c      	b.n	80097da <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80097c0:	2300      	movs	r3, #0
 80097c2:	2201      	movs	r2, #1
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6978      	ldr	r0, [r7, #20]
 80097c8:	f002 fb3e 	bl	800be48 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80097cc:	f107 030c 	add.w	r3, r7, #12
 80097d0:	2200      	movs	r2, #0
 80097d2:	2100      	movs	r1, #0
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	f002 fb37 	bl	800be48 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	; 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f4:	f3ef 8305 	mrs	r3, IPSR
 80097f8:	617b      	str	r3, [r7, #20]
  return(result);
 80097fa:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009800:	f06f 0305 	mvn.w	r3, #5
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009806:	e06b      	b.n	80098e0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	da03      	bge.n	8009816 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800980e:	f06f 0303 	mvn.w	r3, #3
 8009812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009814:	e064      	b.n	80098e0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28
 8009824:	e001      	b.n	800982a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009832:	f001 fd95 	bl	800b360 <xTaskGetTickCount>
 8009836:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009838:	f107 0210 	add.w	r2, r7, #16
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009840:	2000      	movs	r0, #0
 8009842:	f002 faa7 	bl	800bd94 <xTaskNotifyWait>
 8009846:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d137      	bne.n	80098be <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800984e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4013      	ands	r3, r2
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800985a:	4313      	orrs	r3, r2
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00c      	beq.n	8009882 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	4013      	ands	r3, r2
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	429a      	cmp	r2, r3
 8009872:	d032      	beq.n	80098da <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10f      	bne.n	800989a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800987a:	f06f 0302 	mvn.w	r3, #2
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009880:	e02e      	b.n	80098e0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d128      	bne.n	80098de <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d103      	bne.n	800989a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009892:	f06f 0302 	mvn.w	r3, #2
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009898:	e022      	b.n	80098e0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800989a:	f001 fd61 	bl	800b360 <xTaskGetTickCount>
 800989e:	4602      	mov	r2, r0
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d902      	bls.n	80098b4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
 80098b2:	e00e      	b.n	80098d2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
 80098bc:	e009      	b.n	80098d2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80098c4:	f06f 0302 	mvn.w	r3, #2
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ca:	e002      	b.n	80098d2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80098cc:	f06f 0301 	mvn.w	r3, #1
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1af      	bne.n	8009838 <osThreadFlagsWait+0x50>
 80098d8:	e002      	b.n	80098e0 <osThreadFlagsWait+0xf8>
            break;
 80098da:	bf00      	nop
 80098dc:	e000      	b.n	80098e0 <osThreadFlagsWait+0xf8>
            break;
 80098de:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3730      	adds	r7, #48	; 0x30
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f2:	f3ef 8305 	mrs	r3, IPSR
 80098f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80098f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osDelay+0x1c>
    stat = osErrorISR;
 80098fe:	f06f 0305 	mvn.w	r3, #5
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	e007      	b.n	8009916 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 fbdf 	bl	800b0d4 <vTaskDelay>
    }
  }

  return (stat);
 8009916:	68fb      	ldr	r3, [r7, #12]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f003 f85d 	bl	800c9e8 <pvTimerGetTimerID>
 800992e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	6852      	ldr	r2, [r2, #4]
 800993e:	4610      	mov	r0, r2
 8009940:	4798      	blx	r3
  }
}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	; 0x30
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	460b      	mov	r3, r1
 800995a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009960:	f3ef 8305 	mrs	r3, IPSR
 8009964:	613b      	str	r3, [r7, #16]
  return(result);
 8009966:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009968:	2b00      	cmp	r3, #0
 800996a:	d163      	bne.n	8009a34 <osTimerNew+0xe8>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d060      	beq.n	8009a34 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009972:	2008      	movs	r0, #8
 8009974:	f003 faa8 	bl	800cec8 <pvPortMalloc>
 8009978:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d059      	beq.n	8009a34 <osTimerNew+0xe8>
      callb->func = func;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e001      	b.n	800999c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01c      	beq.n	80099e6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <osTimerNew+0x6e>
          name = attr->name;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d006      	beq.n	80099d0 <osTimerNew+0x84>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	2b2b      	cmp	r3, #43	; 0x2b
 80099c8:	d902      	bls.n	80099d0 <osTimerNew+0x84>
          mem = 1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	e00c      	b.n	80099ea <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d108      	bne.n	80099ea <osTimerNew+0x9e>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <osTimerNew+0x9e>
            mem = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
 80099e4:	e001      	b.n	80099ea <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d10c      	bne.n	8009a0a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	4b12      	ldr	r3, [pc, #72]	; (8009a40 <osTimerNew+0xf4>)
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	69fa      	ldr	r2, [r7, #28]
 80099fe:	2101      	movs	r1, #1
 8009a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a02:	f002 fc72 	bl	800c2ea <xTimerCreateStatic>
 8009a06:	6238      	str	r0, [r7, #32]
 8009a08:	e00b      	b.n	8009a22 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d108      	bne.n	8009a22 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <osTimerNew+0xf4>)
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	2101      	movs	r1, #1
 8009a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a1c:	f002 fc44 	bl	800c2a8 <xTimerCreate>
 8009a20:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d105      	bne.n	8009a34 <osTimerNew+0xe8>
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <osTimerNew+0xe8>
        vPortFree (callb);
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	f003 fb16 	bl	800d060 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009a34:	6a3b      	ldr	r3, [r7, #32]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3728      	adds	r7, #40	; 0x28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	08009921 	.word	0x08009921

08009a44 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a52:	f3ef 8305 	mrs	r3, IPSR
 8009a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a58:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <osTimerStart+0x22>
    stat = osErrorISR;
 8009a5e:	f06f 0305 	mvn.w	r3, #5
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e017      	b.n	8009a96 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d103      	bne.n	8009a74 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009a6c:	f06f 0303 	mvn.w	r3, #3
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e010      	b.n	8009a96 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009a74:	2300      	movs	r3, #0
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	6938      	ldr	r0, [r7, #16]
 8009a80:	f002 fcac 	bl	800c3dc <xTimerGenericCommand>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d102      	bne.n	8009a90 <osTimerStart+0x4c>
      stat = osOK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
 8009a8e:	e002      	b.n	8009a96 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009a90:	f06f 0302 	mvn.w	r3, #2
 8009a94:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009a96:	697b      	ldr	r3, [r7, #20]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aac:	f3ef 8305 	mrs	r3, IPSR
 8009ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ab2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d12d      	bne.n	8009b14 <osEventFlagsNew+0x74>
    mem = -1;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d015      	beq.n	8009af0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d006      	beq.n	8009ada <osEventFlagsNew+0x3a>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	2b1f      	cmp	r3, #31
 8009ad2:	d902      	bls.n	8009ada <osEventFlagsNew+0x3a>
        mem = 1;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	e00c      	b.n	8009af4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d108      	bne.n	8009af4 <osEventFlagsNew+0x54>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <osEventFlagsNew+0x54>
          mem = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	e001      	b.n	8009af4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d106      	bne.n	8009b08 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 f93e 	bl	8009d80 <xEventGroupCreateStatic>
 8009b04:	6178      	str	r0, [r7, #20]
 8009b06:	e005      	b.n	8009b14 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009b0e:	f000 f96e 	bl	8009dee <xEventGroupCreate>
 8009b12:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009b14:	697b      	ldr	r3, [r7, #20]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b08a      	sub	sp, #40	; 0x28
 8009b22:	af02      	add	r7, sp, #8
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2e:	f3ef 8305 	mrs	r3, IPSR
 8009b32:	613b      	str	r3, [r7, #16]
  return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d175      	bne.n	8009c26 <osSemaphoreNew+0x108>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d072      	beq.n	8009c26 <osSemaphoreNew+0x108>
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d86e      	bhi.n	8009c26 <osSemaphoreNew+0x108>
    mem = -1;
 8009b48:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d015      	beq.n	8009b80 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d006      	beq.n	8009b6a <osSemaphoreNew+0x4c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	2b4f      	cmp	r3, #79	; 0x4f
 8009b62:	d902      	bls.n	8009b6a <osSemaphoreNew+0x4c>
        mem = 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	61bb      	str	r3, [r7, #24]
 8009b68:	e00c      	b.n	8009b84 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d108      	bne.n	8009b84 <osSemaphoreNew+0x66>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d104      	bne.n	8009b84 <osSemaphoreNew+0x66>
          mem = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	e001      	b.n	8009b84 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d04c      	beq.n	8009c26 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d128      	bne.n	8009be4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d10a      	bne.n	8009bae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	9200      	str	r2, [sp, #0]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	f000 fa59 	bl	800a05c <xQueueGenericCreateStatic>
 8009baa:	61f8      	str	r0, [r7, #28]
 8009bac:	e005      	b.n	8009bba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009bae:	2203      	movs	r2, #3
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2001      	movs	r0, #1
 8009bb4:	f000 faca 	bl	800a14c <xQueueGenericCreate>
 8009bb8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d022      	beq.n	8009c06 <osSemaphoreNew+0xe8>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01f      	beq.n	8009c06 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	69f8      	ldr	r0, [r7, #28]
 8009bce:	f000 fb85 	bl	800a2dc <xQueueGenericSend>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d016      	beq.n	8009c06 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bd8:	69f8      	ldr	r0, [r7, #28]
 8009bda:	f000 ff05 	bl	800a9e8 <vQueueDelete>
            hSemaphore = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	e010      	b.n	8009c06 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d108      	bne.n	8009bfc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fb07 	bl	800a206 <xQueueCreateCountingSemaphoreStatic>
 8009bf8:	61f8      	str	r0, [r7, #28]
 8009bfa:	e004      	b.n	8009c06 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fb38 	bl	800a274 <xQueueCreateCountingSemaphore>
 8009c04:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00c      	beq.n	8009c26 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e001      	b.n	8009c1e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	69f8      	ldr	r0, [r7, #28]
 8009c22:	f001 f82d 	bl	800ac80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c26:	69fb      	ldr	r3, [r7, #28]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3720      	adds	r7, #32
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c40:	f3ef 8305 	mrs	r3, IPSR
 8009c44:	613b      	str	r3, [r7, #16]
  return(result);
 8009c46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d15f      	bne.n	8009d0c <osMessageQueueNew+0xdc>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d05c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d059      	beq.n	8009d0c <osMessageQueueNew+0xdc>
    mem = -1;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <osMessageQueueNew+0x62>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b4f      	cmp	r3, #79	; 0x4f
 8009c72:	d90e      	bls.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	695a      	ldr	r2, [r3, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d302      	bcc.n	8009c92 <osMessageQueueNew+0x62>
        mem = 1;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	e014      	b.n	8009cbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d110      	bne.n	8009cbc <osMessageQueueNew+0x8c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10c      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d108      	bne.n	8009cbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <osMessageQueueNew+0x8c>
          mem = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e001      	b.n	8009cbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10b      	bne.n	8009cda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	9100      	str	r1, [sp, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f9c3 	bl	800a05c <xQueueGenericCreateStatic>
 8009cd6:	61f8      	str	r0, [r7, #28]
 8009cd8:	e008      	b.n	8009cec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d105      	bne.n	8009cec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fa31 	bl	800a14c <xQueueGenericCreate>
 8009cea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00c      	beq.n	8009d0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e001      	b.n	8009d04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	69f8      	ldr	r0, [r7, #28]
 8009d08:	f000 ffba 	bl	800ac80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4a07      	ldr	r2, [pc, #28]	; (8009d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4a06      	ldr	r2, [pc, #24]	; (8009d48 <vApplicationGetIdleTaskMemory+0x30>)
 8009d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2280      	movs	r2, #128	; 0x80
 8009d34:	601a      	str	r2, [r3, #0]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	200007c0 	.word	0x200007c0
 8009d48:	2000081c 	.word	0x2000081c

08009d4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a07      	ldr	r2, [pc, #28]	; (8009d78 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4a06      	ldr	r2, [pc, #24]	; (8009d7c <vApplicationGetTimerTaskMemory+0x30>)
 8009d62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d6a:	601a      	str	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	20000a1c 	.word	0x20000a1c
 8009d7c:	20000a78 	.word	0x20000a78

08009d80 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009da4:	2320      	movs	r3, #32
 8009da6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	d00a      	beq.n	8009dc4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f822 	bl	8009e22 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2201      	movs	r2, #1
 8009de2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009de4:	697b      	ldr	r3, [r7, #20]
	}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009df4:	2020      	movs	r0, #32
 8009df6:	f003 f867 	bl	800cec8 <pvPortMalloc>
 8009dfa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f808 	bl	8009e22 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009e18:	687b      	ldr	r3, [r7, #4]
	}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f103 0208 	add.w	r2, r3, #8
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f103 0208 	add.w	r2, r3, #8
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0208 	add.w	r2, r3, #8
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d103      	bne.n	8009ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e00c      	b.n	8009efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e002      	b.n	8009ef2 <vListInsert+0x2e>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d2f6      	bcs.n	8009eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	601a      	str	r2, [r3, #0]
}
 8009f2a:	bf00      	nop
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6892      	ldr	r2, [r2, #8]
 8009f4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6852      	ldr	r2, [r2, #4]
 8009f56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d103      	bne.n	8009f6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689a      	ldr	r2, [r3, #8]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	1e5a      	subs	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
	...

08009f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xQueueGenericReset+0x2a>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60bb      	str	r3, [r7, #8]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fb6:	f002 fe65 	bl	800cc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fc6:	fb01 f303 	mul.w	r3, r1, r3
 8009fca:	441a      	add	r2, r3
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	441a      	add	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	22ff      	movs	r2, #255	; 0xff
 8009ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3310      	adds	r3, #16
 800a018:	4618      	mov	r0, r3
 800a01a:	f001 fb2b 	bl	800b674 <xTaskRemoveFromEventList>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <xQueueGenericReset+0xcc>)
 800a026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	e009      	b.n	800a04a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3310      	adds	r3, #16
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff fef1 	bl	8009e22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3324      	adds	r3, #36	; 0x24
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff feec 	bl	8009e22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a04a:	f002 fe4b 	bl	800cce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a04e:	2301      	movs	r3, #1
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08e      	sub	sp, #56	; 0x38
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <xQueueGenericCreateStatic+0x52>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <xQueueGenericCreateStatic+0x56>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e000      	b.n	800a0b4 <xQueueGenericCreateStatic+0x58>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <xQueueGenericCreateStatic+0x7e>
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <xQueueGenericCreateStatic+0x82>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e000      	b.n	800a0e0 <xQueueGenericCreateStatic+0x84>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	61fb      	str	r3, [r7, #28]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0fa:	2350      	movs	r3, #80	; 0x50
 800a0fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b50      	cmp	r3, #80	; 0x50
 800a102:	d00a      	beq.n	800a11a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a11a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a12e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f83f 	bl	800a1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a144:	4618      	mov	r0, r3
 800a146:	3730      	adds	r7, #48	; 0x30
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af02      	add	r7, sp, #8
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	613b      	str	r3, [r7, #16]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
 800a17e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	3350      	adds	r3, #80	; 0x50
 800a184:	4618      	mov	r0, r3
 800a186:	f002 fe9f 	bl	800cec8 <pvPortMalloc>
 800a18a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d011      	beq.n	800a1b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	3350      	adds	r3, #80	; 0x50
 800a19a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f805 	bl	800a1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
 800a1cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	69b8      	ldr	r0, [r7, #24]
 800a1f2:	f7ff fecb 	bl	8009f8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a206:	b580      	push	{r7, lr}
 800a208:	b08a      	sub	sp, #40	; 0x28
 800a20a:	af02      	add	r7, sp, #8
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	61bb      	str	r3, [r7, #24]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	429a      	cmp	r2, r3
 800a234:	d90a      	bls.n	800a24c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	617b      	str	r3, [r7, #20]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a24c:	2302      	movs	r3, #2
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff ff00 	bl	800a05c <xQueueGenericCreateStatic>
 800a25c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a26a:	69fb      	ldr	r3, [r7, #28]
	}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	613b      	str	r3, [r7, #16]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d90a      	bls.n	800a2b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	60fb      	str	r3, [r7, #12]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff ff45 	bl	800a14c <xQueueGenericCreate>
 800a2c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2d0:	697b      	ldr	r3, [r7, #20]
	}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08e      	sub	sp, #56	; 0x38
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueGenericSend+0x32>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d103      	bne.n	800a31c <xQueueGenericSend+0x40>
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <xQueueGenericSend+0x44>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <xQueueGenericSend+0x46>
 800a320:	2300      	movs	r3, #0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10a      	bne.n	800a33c <xQueueGenericSend+0x60>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a338:	bf00      	nop
 800a33a:	e7fe      	b.n	800a33a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d103      	bne.n	800a34a <xQueueGenericSend+0x6e>
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a346:	2b01      	cmp	r3, #1
 800a348:	d101      	bne.n	800a34e <xQueueGenericSend+0x72>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericSend+0x74>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueGenericSend+0x8e>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a36a:	f001 fb41 	bl	800b9f0 <xTaskGetSchedulerState>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <xQueueGenericSend+0x9e>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <xQueueGenericSend+0xa2>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e000      	b.n	800a380 <xQueueGenericSend+0xa4>
 800a37e:	2300      	movs	r3, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <xQueueGenericSend+0xbe>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	61fb      	str	r3, [r7, #28]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a39a:	f002 fc73 	bl	800cc84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <xQueueGenericSend+0xd4>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d129      	bne.n	800a404 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3b6:	f000 fb52 	bl	800aa5e <prvCopyDataToQueue>
 800a3ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	3324      	adds	r3, #36	; 0x24
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 f953 	bl	800b674 <xTaskRemoveFromEventList>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d013      	beq.n	800a3fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3d4:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <xQueueGenericSend+0x1f8>)
 800a3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	e00a      	b.n	800a3fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3ec:	4b39      	ldr	r3, [pc, #228]	; (800a4d4 <xQueueGenericSend+0x1f8>)
 800a3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3fc:	f002 fc72 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a400:	2301      	movs	r3, #1
 800a402:	e063      	b.n	800a4cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d103      	bne.n	800a412 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a40a:	f002 fc6b 	bl	800cce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	e05c      	b.n	800a4cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a418:	f107 0314 	add.w	r3, r7, #20
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 f98d 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a422:	2301      	movs	r3, #1
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a426:	f002 fc5d 	bl	800cce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a42a:	f000 feed 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42e:	f002 fc29 	bl	800cc84 <vPortEnterCritical>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d103      	bne.n	800a448 <xQueueGenericSend+0x16c>
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d103      	bne.n	800a45e <xQueueGenericSend+0x182>
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a45e:	f002 fc41 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	f107 0314 	add.w	r3, r7, #20
 800a468:	4611      	mov	r1, r2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f001 f97c 	bl	800b768 <xTaskCheckForTimeOut>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d124      	bne.n	800a4c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a478:	f000 fbe9 	bl	800ac4e <prvIsQueueFull>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d018      	beq.n	800a4b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	3310      	adds	r3, #16
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f001 f8a2 	bl	800b5d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a492:	f000 fb74 	bl	800ab7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a496:	f000 fec5 	bl	800b224 <xTaskResumeAll>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f47f af7c 	bne.w	800a39a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <xQueueGenericSend+0x1f8>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	e772      	b.n	800a39a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b6:	f000 fb62 	bl	800ab7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ba:	f000 feb3 	bl	800b224 <xTaskResumeAll>
 800a4be:	e76c      	b.n	800a39a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c2:	f000 fb5c 	bl	800ab7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c6:	f000 fead 	bl	800b224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3738      	adds	r7, #56	; 0x38
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b090      	sub	sp, #64	; 0x40
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10a      	bne.n	800a506 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <xQueueGenericSendFromISR+0x3c>
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <xQueueGenericSendFromISR+0x40>
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <xQueueGenericSendFromISR+0x42>
 800a518:	2300      	movs	r3, #0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b02      	cmp	r3, #2
 800a538:	d103      	bne.n	800a542 <xQueueGenericSendFromISR+0x6a>
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <xQueueGenericSendFromISR+0x6e>
 800a542:	2301      	movs	r3, #1
 800a544:	e000      	b.n	800a548 <xQueueGenericSendFromISR+0x70>
 800a546:	2300      	movs	r3, #0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	623b      	str	r3, [r7, #32]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a562:	f002 fc71 	bl	800ce48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a566:	f3ef 8211 	mrs	r2, BASEPRI
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	61fa      	str	r2, [r7, #28]
 800a57c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a57e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d302      	bcc.n	800a594 <xQueueGenericSendFromISR+0xbc>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b02      	cmp	r3, #2
 800a592:	d12f      	bne.n	800a5f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5aa:	f000 fa58 	bl	800aa5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	d112      	bne.n	800a5de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d016      	beq.n	800a5ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	3324      	adds	r3, #36	; 0x24
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 f855 	bl	800b674 <xTaskRemoveFromEventList>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00e      	beq.n	800a5ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e007      	b.n	800a5ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	b25a      	sxtb	r2, r3
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5f2:	e001      	b.n	800a5f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a602:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a606:	4618      	mov	r0, r3
 800a608:	3740      	adds	r7, #64	; 0x40
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08c      	sub	sp, #48	; 0x30
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <xQueueReceive+0x30>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	623b      	str	r3, [r7, #32]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <xQueueReceive+0x3e>
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <xQueueReceive+0x42>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueReceive+0x44>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueReceive+0x5e>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	61fb      	str	r3, [r7, #28]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a66e:	f001 f9bf 	bl	800b9f0 <xTaskGetSchedulerState>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d102      	bne.n	800a67e <xQueueReceive+0x6e>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueReceive+0x72>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueReceive+0x74>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueReceive+0x8e>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61bb      	str	r3, [r7, #24]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a69e:	f002 faf1 	bl	800cc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d01f      	beq.n	800a6ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b2:	f000 fa3e 	bl	800ab32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	1e5a      	subs	r2, r3, #1
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00f      	beq.n	800a6e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	3310      	adds	r3, #16
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 ffd2 	bl	800b674 <xTaskRemoveFromEventList>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6d6:	4b3d      	ldr	r3, [pc, #244]	; (800a7cc <xQueueReceive+0x1bc>)
 800a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6e6:	f002 fafd 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e069      	b.n	800a7c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6f4:	f002 faf6 	bl	800cce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e062      	b.n	800a7c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d106      	bne.n	800a710 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a702:	f107 0310 	add.w	r3, r7, #16
 800a706:	4618      	mov	r0, r3
 800a708:	f001 f818 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a70c:	2301      	movs	r3, #1
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a710:	f002 fae8 	bl	800cce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a714:	f000 fd78 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a718:	f002 fab4 	bl	800cc84 <vPortEnterCritical>
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a722:	b25b      	sxtb	r3, r3
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d103      	bne.n	800a732 <xQueueReceive+0x122>
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a738:	b25b      	sxtb	r3, r3
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d103      	bne.n	800a748 <xQueueReceive+0x138>
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a748:	f002 facc 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a74c:	1d3a      	adds	r2, r7, #4
 800a74e:	f107 0310 	add.w	r3, r7, #16
 800a752:	4611      	mov	r1, r2
 800a754:	4618      	mov	r0, r3
 800a756:	f001 f807 	bl	800b768 <xTaskCheckForTimeOut>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d123      	bne.n	800a7a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a762:	f000 fa5e 	bl	800ac22 <prvIsQueueEmpty>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d017      	beq.n	800a79c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	3324      	adds	r3, #36	; 0x24
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	4611      	mov	r1, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f000 ff2d 	bl	800b5d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a77c:	f000 f9ff 	bl	800ab7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a780:	f000 fd50 	bl	800b224 <xTaskResumeAll>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d189      	bne.n	800a69e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a78a:	4b10      	ldr	r3, [pc, #64]	; (800a7cc <xQueueReceive+0x1bc>)
 800a78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	e780      	b.n	800a69e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79e:	f000 f9ee 	bl	800ab7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7a2:	f000 fd3f 	bl	800b224 <xTaskResumeAll>
 800a7a6:	e77a      	b.n	800a69e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7aa:	f000 f9e8 	bl	800ab7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ae:	f000 fd39 	bl	800b224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b4:	f000 fa35 	bl	800ac22 <prvIsQueueEmpty>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f43f af6f 	beq.w	800a69e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3730      	adds	r7, #48	; 0x30
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	e000ed04 	.word	0xe000ed04

0800a7d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	; 0x38
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10a      	bne.n	800a802 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	623b      	str	r3, [r7, #32]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	61fb      	str	r3, [r7, #28]
}
 800a81c:	bf00      	nop
 800a81e:	e7fe      	b.n	800a81e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a820:	f001 f8e6 	bl	800b9f0 <xTaskGetSchedulerState>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <xQueueSemaphoreTake+0x60>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <xQueueSemaphoreTake+0x64>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <xQueueSemaphoreTake+0x66>
 800a834:	2300      	movs	r3, #0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61bb      	str	r3, [r7, #24]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a850:	f002 fa18 	bl	800cc84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d024      	beq.n	800a8aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	1e5a      	subs	r2, r3, #1
 800a864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a866:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d104      	bne.n	800a87a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a870:	f001 fa34 	bl	800bcdc <pvTaskIncrementMutexHeldCount>
 800a874:	4602      	mov	r2, r0
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00f      	beq.n	800a8a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	3310      	adds	r3, #16
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fef4 	bl	800b674 <xTaskRemoveFromEventList>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d007      	beq.n	800a8a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a892:	4b54      	ldr	r3, [pc, #336]	; (800a9e4 <xQueueSemaphoreTake+0x214>)
 800a894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8a2:	f002 fa1f 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e097      	b.n	800a9da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d111      	bne.n	800a8d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	617b      	str	r3, [r7, #20]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8cc:	f002 fa0a 	bl	800cce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e082      	b.n	800a9da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d106      	bne.n	800a8e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8da:	f107 030c 	add.w	r3, r7, #12
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 ff2c 	bl	800b73c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e8:	f002 f9fc 	bl	800cce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8ec:	f000 fc8c 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8f0:	f002 f9c8 	bl	800cc84 <vPortEnterCritical>
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fa:	b25b      	sxtb	r3, r3
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d103      	bne.n	800a90a <xQueueSemaphoreTake+0x13a>
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a910:	b25b      	sxtb	r3, r3
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d103      	bne.n	800a920 <xQueueSemaphoreTake+0x150>
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a920:	f002 f9e0 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a924:	463a      	mov	r2, r7
 800a926:	f107 030c 	add.w	r3, r7, #12
 800a92a:	4611      	mov	r1, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 ff1b 	bl	800b768 <xTaskCheckForTimeOut>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d132      	bne.n	800a99e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a93a:	f000 f972 	bl	800ac22 <prvIsQueueEmpty>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d026      	beq.n	800a992 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d109      	bne.n	800a960 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a94c:	f002 f99a 	bl	800cc84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	4618      	mov	r0, r3
 800a956:	f001 f869 	bl	800ba2c <xTaskPriorityInherit>
 800a95a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a95c:	f002 f9c2 	bl	800cce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	3324      	adds	r3, #36	; 0x24
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fe33 	bl	800b5d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a970:	f000 f905 	bl	800ab7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a974:	f000 fc56 	bl	800b224 <xTaskResumeAll>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f47f af68 	bne.w	800a850 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a980:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <xQueueSemaphoreTake+0x214>)
 800a982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	e75e      	b.n	800a850 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a994:	f000 f8f3 	bl	800ab7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a998:	f000 fc44 	bl	800b224 <xTaskResumeAll>
 800a99c:	e758      	b.n	800a850 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a0:	f000 f8ed 	bl	800ab7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a4:	f000 fc3e 	bl	800b224 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9aa:	f000 f93a 	bl	800ac22 <prvIsQueueEmpty>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f43f af4d 	beq.w	800a850 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00d      	beq.n	800a9d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a9bc:	f002 f962 	bl	800cc84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c2:	f000 f834 	bl	800aa2e <prvGetDisinheritPriorityAfterTimeout>
 800a9c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 f902 	bl	800bbd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9d4:	f002 f986 	bl	800cce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3738      	adds	r7, #56	; 0x38
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10a      	bne.n	800aa10 <vQueueDelete+0x28>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	60bb      	str	r3, [r7, #8]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f95f 	bl	800acd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f002 fb1d 	bl	800d060 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d006      	beq.n	800aa4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e001      	b.n	800aa50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa50:	68fb      	ldr	r3, [r7, #12]
	}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10d      	bne.n	800aa98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d14d      	bne.n	800ab20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f837 	bl	800bafc <xTaskPriorityDisinherit>
 800aa8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	609a      	str	r2, [r3, #8]
 800aa96:	e043      	b.n	800ab20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d119      	bne.n	800aad2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6858      	ldr	r0, [r3, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	f004 f9ab 	bl	800ee04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	441a      	add	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d32b      	bcc.n	800ab20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	605a      	str	r2, [r3, #4]
 800aad0:	e026      	b.n	800ab20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68d8      	ldr	r0, [r3, #12]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	461a      	mov	r2, r3
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	f004 f991 	bl	800ee04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaea:	425b      	negs	r3, r3
 800aaec:	441a      	add	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d207      	bcs.n	800ab0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	425b      	negs	r3, r3
 800ab08:	441a      	add	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d105      	bne.n	800ab20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ab28:	697b      	ldr	r3, [r7, #20]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d018      	beq.n	800ab76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	441a      	add	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68da      	ldr	r2, [r3, #12]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d303      	bcc.n	800ab66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68d9      	ldr	r1, [r3, #12]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	461a      	mov	r2, r3
 800ab70:	6838      	ldr	r0, [r7, #0]
 800ab72:	f004 f947 	bl	800ee04 <memcpy>
	}
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab86:	f002 f87d 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab92:	e011      	b.n	800abb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d012      	beq.n	800abc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fd67 	bl	800b674 <xTaskRemoveFromEventList>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abac:	f000 fe3e 	bl	800b82c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dce9      	bgt.n	800ab94 <prvUnlockQueue+0x16>
 800abc0:	e000      	b.n	800abc4 <prvUnlockQueue+0x46>
					break;
 800abc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	22ff      	movs	r2, #255	; 0xff
 800abc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abcc:	f002 f88a 	bl	800cce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abd0:	f002 f858 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abdc:	e011      	b.n	800ac02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d012      	beq.n	800ac0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3310      	adds	r3, #16
 800abea:	4618      	mov	r0, r3
 800abec:	f000 fd42 	bl	800b674 <xTaskRemoveFromEventList>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abf6:	f000 fe19 	bl	800b82c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dce9      	bgt.n	800abde <prvUnlockQueue+0x60>
 800ac0a:	e000      	b.n	800ac0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	22ff      	movs	r2, #255	; 0xff
 800ac12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac16:	f002 f865 	bl	800cce4 <vPortExitCritical>
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac2a:	f002 f82b 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac36:	2301      	movs	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]
 800ac3a:	e001      	b.n	800ac40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac40:	f002 f850 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800ac44:	68fb      	ldr	r3, [r7, #12]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac56:	f002 f815 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d102      	bne.n	800ac6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac66:	2301      	movs	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	e001      	b.n	800ac70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac70:	f002 f838 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800ac74:	68fb      	ldr	r3, [r7, #12]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	e014      	b.n	800acba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac90:	4a0f      	ldr	r2, [pc, #60]	; (800acd0 <vQueueAddToRegistry+0x50>)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10b      	bne.n	800acb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac9c:	490c      	ldr	r1, [pc, #48]	; (800acd0 <vQueueAddToRegistry+0x50>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aca6:	4a0a      	ldr	r2, [pc, #40]	; (800acd0 <vQueueAddToRegistry+0x50>)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	00db      	lsls	r3, r3, #3
 800acac:	4413      	add	r3, r2
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acb2:	e006      	b.n	800acc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b07      	cmp	r3, #7
 800acbe:	d9e7      	bls.n	800ac90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000e78 	.word	0x20000e78

0800acd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	e016      	b.n	800ad10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ace2:	4a10      	ldr	r2, [pc, #64]	; (800ad24 <vQueueUnregisterQueue+0x50>)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	4413      	add	r3, r2
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d10b      	bne.n	800ad0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800acf2:	4a0c      	ldr	r2, [pc, #48]	; (800ad24 <vQueueUnregisterQueue+0x50>)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2100      	movs	r1, #0
 800acf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <vQueueUnregisterQueue+0x50>)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	00db      	lsls	r3, r3, #3
 800ad02:	4413      	add	r3, r2
 800ad04:	2200      	movs	r2, #0
 800ad06:	605a      	str	r2, [r3, #4]
				break;
 800ad08:	e006      	b.n	800ad18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	d9e5      	bls.n	800ace2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20000e78 	.word	0x20000e78

0800ad28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad38:	f001 ffa4 	bl	800cc84 <vPortEnterCritical>
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d103      	bne.n	800ad52 <vQueueWaitForMessageRestricted+0x2a>
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad58:	b25b      	sxtb	r3, r3
 800ad5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5e:	d103      	bne.n	800ad68 <vQueueWaitForMessageRestricted+0x40>
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad68:	f001 ffbc 	bl	800cce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	3324      	adds	r3, #36	; 0x24
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	68b9      	ldr	r1, [r7, #8]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fc4d 	bl	800b61c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad82:	6978      	ldr	r0, [r7, #20]
 800ad84:	f7ff fefb 	bl	800ab7e <prvUnlockQueue>
	}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08e      	sub	sp, #56	; 0x38
 800ad94:	af04      	add	r7, sp, #16
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xTaskCreateStatic+0x2a>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	623b      	str	r3, [r7, #32]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10a      	bne.n	800add6 <xTaskCreateStatic+0x46>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	61fb      	str	r3, [r7, #28]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800add6:	235c      	movs	r3, #92	; 0x5c
 800add8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	2b5c      	cmp	r3, #92	; 0x5c
 800adde:	d00a      	beq.n	800adf6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	61bb      	str	r3, [r7, #24]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800adf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01e      	beq.n	800ae3c <xTaskCreateStatic+0xac>
 800adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d01b      	beq.n	800ae3c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	2202      	movs	r2, #2
 800ae12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae16:	2300      	movs	r3, #0
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	9302      	str	r3, [sp, #8]
 800ae1e:	f107 0314 	add.w	r3, r7, #20
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f850 	bl	800aed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae36:	f000 f8dd 	bl	800aff4 <prvAddNewTaskToReadyList>
 800ae3a:	e001      	b.n	800ae40 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae40:	697b      	ldr	r3, [r7, #20]
	}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3728      	adds	r7, #40	; 0x28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b08c      	sub	sp, #48	; 0x30
 800ae4e:	af04      	add	r7, sp, #16
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	603b      	str	r3, [r7, #0]
 800ae56:	4613      	mov	r3, r2
 800ae58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f002 f832 	bl	800cec8 <pvPortMalloc>
 800ae64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00e      	beq.n	800ae8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae6c:	205c      	movs	r0, #92	; 0x5c
 800ae6e:	f002 f82b 	bl	800cec8 <pvPortMalloc>
 800ae72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae80:	e005      	b.n	800ae8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae82:	6978      	ldr	r0, [r7, #20]
 800ae84:	f002 f8ec 	bl	800d060 <vPortFree>
 800ae88:	e001      	b.n	800ae8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d017      	beq.n	800aec4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae9c:	88fa      	ldrh	r2, [r7, #6]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9303      	str	r3, [sp, #12]
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f80e 	bl	800aed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeb8:	69f8      	ldr	r0, [r7, #28]
 800aeba:	f000 f89b 	bl	800aff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aebe:	2301      	movs	r3, #1
 800aec0:	61bb      	str	r3, [r7, #24]
 800aec2:	e002      	b.n	800aeca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aec4:	f04f 33ff 	mov.w	r3, #4294967295
 800aec8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aeca:	69bb      	ldr	r3, [r7, #24]
	}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	461a      	mov	r2, r3
 800aeec:	21a5      	movs	r1, #165	; 0xa5
 800aeee:	f003 ff5d 	bl	800edac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aefc:	3b01      	subs	r3, #1
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	f023 0307 	bic.w	r3, r3, #7
 800af0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	617b      	str	r3, [r7, #20]
}
 800af28:	bf00      	nop
 800af2a:	e7fe      	b.n	800af2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d01f      	beq.n	800af72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af32:	2300      	movs	r3, #0
 800af34:	61fb      	str	r3, [r7, #28]
 800af36:	e012      	b.n	800af5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	4413      	add	r3, r2
 800af3e:	7819      	ldrb	r1, [r3, #0]
 800af40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	4413      	add	r3, r2
 800af46:	3334      	adds	r3, #52	; 0x34
 800af48:	460a      	mov	r2, r1
 800af4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	4413      	add	r3, r2
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d006      	beq.n	800af66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	3301      	adds	r3, #1
 800af5c:	61fb      	str	r3, [r7, #28]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	2b0f      	cmp	r3, #15
 800af62:	d9e9      	bls.n	800af38 <prvInitialiseNewTask+0x64>
 800af64:	e000      	b.n	800af68 <prvInitialiseNewTask+0x94>
			{
				break;
 800af66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af70:	e003      	b.n	800af7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	2200      	movs	r2, #0
 800af76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	2b37      	cmp	r3, #55	; 0x37
 800af7e:	d901      	bls.n	800af84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af80:	2337      	movs	r3, #55	; 0x37
 800af82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	2200      	movs	r2, #0
 800af94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	3304      	adds	r3, #4
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe ff61 	bl	8009e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	3318      	adds	r3, #24
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fe ff5c 	bl	8009e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	2200      	movs	r2, #0
 800afc4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	68f9      	ldr	r1, [r7, #12]
 800afd2:	69b8      	ldr	r0, [r7, #24]
 800afd4:	f001 fd28 	bl	800ca28 <pxPortInitialiseStack>
 800afd8:	4602      	mov	r2, r0
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afea:	bf00      	nop
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800affc:	f001 fe42 	bl	800cc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b000:	4b2d      	ldr	r3, [pc, #180]	; (800b0b8 <prvAddNewTaskToReadyList+0xc4>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	4a2c      	ldr	r2, [pc, #176]	; (800b0b8 <prvAddNewTaskToReadyList+0xc4>)
 800b008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b00a:	4b2c      	ldr	r3, [pc, #176]	; (800b0bc <prvAddNewTaskToReadyList+0xc8>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d109      	bne.n	800b026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b012:	4a2a      	ldr	r2, [pc, #168]	; (800b0bc <prvAddNewTaskToReadyList+0xc8>)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b018:	4b27      	ldr	r3, [pc, #156]	; (800b0b8 <prvAddNewTaskToReadyList+0xc4>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d110      	bne.n	800b042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b020:	f000 fc28 	bl	800b874 <prvInitialiseTaskLists>
 800b024:	e00d      	b.n	800b042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b026:	4b26      	ldr	r3, [pc, #152]	; (800b0c0 <prvAddNewTaskToReadyList+0xcc>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d109      	bne.n	800b042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b02e:	4b23      	ldr	r3, [pc, #140]	; (800b0bc <prvAddNewTaskToReadyList+0xc8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b038:	429a      	cmp	r2, r3
 800b03a:	d802      	bhi.n	800b042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b03c:	4a1f      	ldr	r2, [pc, #124]	; (800b0bc <prvAddNewTaskToReadyList+0xc8>)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b042:	4b20      	ldr	r3, [pc, #128]	; (800b0c4 <prvAddNewTaskToReadyList+0xd0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3301      	adds	r3, #1
 800b048:	4a1e      	ldr	r2, [pc, #120]	; (800b0c4 <prvAddNewTaskToReadyList+0xd0>)
 800b04a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b04c:	4b1d      	ldr	r3, [pc, #116]	; (800b0c4 <prvAddNewTaskToReadyList+0xd0>)
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b058:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <prvAddNewTaskToReadyList+0xd4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d903      	bls.n	800b068 <prvAddNewTaskToReadyList+0x74>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <prvAddNewTaskToReadyList+0xd4>)
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06c:	4613      	mov	r3, r2
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4a15      	ldr	r2, [pc, #84]	; (800b0cc <prvAddNewTaskToReadyList+0xd8>)
 800b076:	441a      	add	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4619      	mov	r1, r3
 800b07e:	4610      	mov	r0, r2
 800b080:	f7fe fefc 	bl	8009e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b084:	f001 fe2e 	bl	800cce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b088:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <prvAddNewTaskToReadyList+0xcc>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00e      	beq.n	800b0ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <prvAddNewTaskToReadyList+0xc8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d207      	bcs.n	800b0ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <prvAddNewTaskToReadyList+0xdc>)
 800b0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000138c 	.word	0x2000138c
 800b0bc:	20000eb8 	.word	0x20000eb8
 800b0c0:	20001398 	.word	0x20001398
 800b0c4:	200013a8 	.word	0x200013a8
 800b0c8:	20001394 	.word	0x20001394
 800b0cc:	20000ebc 	.word	0x20000ebc
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d017      	beq.n	800b116 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0e6:	4b13      	ldr	r3, [pc, #76]	; (800b134 <vTaskDelay+0x60>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <vTaskDelay+0x30>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60bb      	str	r3, [r7, #8]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b104:	f000 f880 	bl	800b208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b108:	2100      	movs	r1, #0
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 f830 	bl	800c170 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b110:	f000 f888 	bl	800b224 <xTaskResumeAll>
 800b114:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d107      	bne.n	800b12c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <vTaskDelay+0x64>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b12c:	bf00      	nop
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	200013b4 	.word	0x200013b4
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08a      	sub	sp, #40	; 0x28
 800b140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b14a:	463a      	mov	r2, r7
 800b14c:	1d39      	adds	r1, r7, #4
 800b14e:	f107 0308 	add.w	r3, r7, #8
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fde0 	bl	8009d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	9202      	str	r2, [sp, #8]
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	2300      	movs	r3, #0
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	2300      	movs	r3, #0
 800b168:	460a      	mov	r2, r1
 800b16a:	4921      	ldr	r1, [pc, #132]	; (800b1f0 <vTaskStartScheduler+0xb4>)
 800b16c:	4821      	ldr	r0, [pc, #132]	; (800b1f4 <vTaskStartScheduler+0xb8>)
 800b16e:	f7ff fe0f 	bl	800ad90 <xTaskCreateStatic>
 800b172:	4603      	mov	r3, r0
 800b174:	4a20      	ldr	r2, [pc, #128]	; (800b1f8 <vTaskStartScheduler+0xbc>)
 800b176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b178:	4b1f      	ldr	r3, [pc, #124]	; (800b1f8 <vTaskStartScheduler+0xbc>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b180:	2301      	movs	r3, #1
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e001      	b.n	800b18a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d102      	bne.n	800b196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b190:	f001 f842 	bl	800c218 <xTimerCreateTimerTask>
 800b194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d116      	bne.n	800b1ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	613b      	str	r3, [r7, #16]
}
 800b1ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1b0:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <vTaskStartScheduler+0xc0>)
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1b8:	4b11      	ldr	r3, [pc, #68]	; (800b200 <vTaskStartScheduler+0xc4>)
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1be:	4b11      	ldr	r3, [pc, #68]	; (800b204 <vTaskStartScheduler+0xc8>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1c4:	f001 fcbc 	bl	800cb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1c8:	e00e      	b.n	800b1e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d0:	d10a      	bne.n	800b1e8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <vTaskStartScheduler+0xaa>
}
 800b1e8:	bf00      	nop
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	0800eea8 	.word	0x0800eea8
 800b1f4:	0800b845 	.word	0x0800b845
 800b1f8:	200013b0 	.word	0x200013b0
 800b1fc:	200013ac 	.word	0x200013ac
 800b200:	20001398 	.word	0x20001398
 800b204:	20001390 	.word	0x20001390

0800b208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <vTaskSuspendAll+0x18>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	4a03      	ldr	r2, [pc, #12]	; (800b220 <vTaskSuspendAll+0x18>)
 800b214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b216:	bf00      	nop
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	200013b4 	.word	0x200013b4

0800b224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b232:	4b42      	ldr	r3, [pc, #264]	; (800b33c <xTaskResumeAll+0x118>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10a      	bne.n	800b250 <xTaskResumeAll+0x2c>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	603b      	str	r3, [r7, #0]
}
 800b24c:	bf00      	nop
 800b24e:	e7fe      	b.n	800b24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b250:	f001 fd18 	bl	800cc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b254:	4b39      	ldr	r3, [pc, #228]	; (800b33c <xTaskResumeAll+0x118>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3b01      	subs	r3, #1
 800b25a:	4a38      	ldr	r2, [pc, #224]	; (800b33c <xTaskResumeAll+0x118>)
 800b25c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b25e:	4b37      	ldr	r3, [pc, #220]	; (800b33c <xTaskResumeAll+0x118>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d162      	bne.n	800b32c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b266:	4b36      	ldr	r3, [pc, #216]	; (800b340 <xTaskResumeAll+0x11c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d05e      	beq.n	800b32c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b26e:	e02f      	b.n	800b2d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b270:	4b34      	ldr	r3, [pc, #208]	; (800b344 <xTaskResumeAll+0x120>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3318      	adds	r3, #24
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fe5a 	bl	8009f36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3304      	adds	r3, #4
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe fe55 	bl	8009f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b290:	4b2d      	ldr	r3, [pc, #180]	; (800b348 <xTaskResumeAll+0x124>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	429a      	cmp	r2, r3
 800b296:	d903      	bls.n	800b2a0 <xTaskResumeAll+0x7c>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29c:	4a2a      	ldr	r2, [pc, #168]	; (800b348 <xTaskResumeAll+0x124>)
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4a27      	ldr	r2, [pc, #156]	; (800b34c <xTaskResumeAll+0x128>)
 800b2ae:	441a      	add	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f7fe fde0 	bl	8009e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c0:	4b23      	ldr	r3, [pc, #140]	; (800b350 <xTaskResumeAll+0x12c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d302      	bcc.n	800b2d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b2ca:	4b22      	ldr	r3, [pc, #136]	; (800b354 <xTaskResumeAll+0x130>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d0:	4b1c      	ldr	r3, [pc, #112]	; (800b344 <xTaskResumeAll+0x120>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1cb      	bne.n	800b270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2de:	f000 fb67 	bl	800b9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2e2:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <xTaskResumeAll+0x134>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d010      	beq.n	800b310 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2ee:	f000 f859 	bl	800b3a4 <xTaskIncrementTick>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2f8:	4b16      	ldr	r3, [pc, #88]	; (800b354 <xTaskResumeAll+0x130>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3b01      	subs	r3, #1
 800b302:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f1      	bne.n	800b2ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b30a:	4b13      	ldr	r3, [pc, #76]	; (800b358 <xTaskResumeAll+0x134>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b310:	4b10      	ldr	r3, [pc, #64]	; (800b354 <xTaskResumeAll+0x130>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d009      	beq.n	800b32c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b318:	2301      	movs	r3, #1
 800b31a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b31c:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <xTaskResumeAll+0x138>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b32c:	f001 fcda 	bl	800cce4 <vPortExitCritical>

	return xAlreadyYielded;
 800b330:	68bb      	ldr	r3, [r7, #8]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	200013b4 	.word	0x200013b4
 800b340:	2000138c 	.word	0x2000138c
 800b344:	2000134c 	.word	0x2000134c
 800b348:	20001394 	.word	0x20001394
 800b34c:	20000ebc 	.word	0x20000ebc
 800b350:	20000eb8 	.word	0x20000eb8
 800b354:	200013a0 	.word	0x200013a0
 800b358:	2000139c 	.word	0x2000139c
 800b35c:	e000ed04 	.word	0xe000ed04

0800b360 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <xTaskGetTickCount+0x1c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b36c:	687b      	ldr	r3, [r7, #4]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	20001390 	.word	0x20001390

0800b380 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b386:	f001 fd5f 	bl	800ce48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b38a:	2300      	movs	r3, #0
 800b38c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b38e:	4b04      	ldr	r3, [pc, #16]	; (800b3a0 <xTaskGetTickCountFromISR+0x20>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b394:	683b      	ldr	r3, [r7, #0]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20001390 	.word	0x20001390

0800b3a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ae:	4b4f      	ldr	r3, [pc, #316]	; (800b4ec <xTaskIncrementTick+0x148>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f040 808f 	bne.w	800b4d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3b8:	4b4d      	ldr	r3, [pc, #308]	; (800b4f0 <xTaskIncrementTick+0x14c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3c0:	4a4b      	ldr	r2, [pc, #300]	; (800b4f0 <xTaskIncrementTick+0x14c>)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d120      	bne.n	800b40e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3cc:	4b49      	ldr	r3, [pc, #292]	; (800b4f4 <xTaskIncrementTick+0x150>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <xTaskIncrementTick+0x48>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	603b      	str	r3, [r7, #0]
}
 800b3e8:	bf00      	nop
 800b3ea:	e7fe      	b.n	800b3ea <xTaskIncrementTick+0x46>
 800b3ec:	4b41      	ldr	r3, [pc, #260]	; (800b4f4 <xTaskIncrementTick+0x150>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	4b41      	ldr	r3, [pc, #260]	; (800b4f8 <xTaskIncrementTick+0x154>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a3f      	ldr	r2, [pc, #252]	; (800b4f4 <xTaskIncrementTick+0x150>)
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	4a3f      	ldr	r2, [pc, #252]	; (800b4f8 <xTaskIncrementTick+0x154>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	4b3e      	ldr	r3, [pc, #248]	; (800b4fc <xTaskIncrementTick+0x158>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a3d      	ldr	r2, [pc, #244]	; (800b4fc <xTaskIncrementTick+0x158>)
 800b408:	6013      	str	r3, [r2, #0]
 800b40a:	f000 fad1 	bl	800b9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b40e:	4b3c      	ldr	r3, [pc, #240]	; (800b500 <xTaskIncrementTick+0x15c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	429a      	cmp	r2, r3
 800b416:	d349      	bcc.n	800b4ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b418:	4b36      	ldr	r3, [pc, #216]	; (800b4f4 <xTaskIncrementTick+0x150>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d104      	bne.n	800b42c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b422:	4b37      	ldr	r3, [pc, #220]	; (800b500 <xTaskIncrementTick+0x15c>)
 800b424:	f04f 32ff 	mov.w	r2, #4294967295
 800b428:	601a      	str	r2, [r3, #0]
					break;
 800b42a:	e03f      	b.n	800b4ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b31      	ldr	r3, [pc, #196]	; (800b4f4 <xTaskIncrementTick+0x150>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d203      	bcs.n	800b44c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b444:	4a2e      	ldr	r2, [pc, #184]	; (800b500 <xTaskIncrementTick+0x15c>)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b44a:	e02f      	b.n	800b4ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3304      	adds	r3, #4
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe fd70 	bl	8009f36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	3318      	adds	r3, #24
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fd67 	bl	8009f36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	4b25      	ldr	r3, [pc, #148]	; (800b504 <xTaskIncrementTick+0x160>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d903      	bls.n	800b47c <xTaskIncrementTick+0xd8>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	4a22      	ldr	r2, [pc, #136]	; (800b504 <xTaskIncrementTick+0x160>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4a1f      	ldr	r2, [pc, #124]	; (800b508 <xTaskIncrementTick+0x164>)
 800b48a:	441a      	add	r2, r3
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	3304      	adds	r3, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f7fe fcf2 	bl	8009e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49c:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <xTaskIncrementTick+0x168>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d3b8      	bcc.n	800b418 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4aa:	e7b5      	b.n	800b418 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4ac:	4b17      	ldr	r3, [pc, #92]	; (800b50c <xTaskIncrementTick+0x168>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b2:	4915      	ldr	r1, [pc, #84]	; (800b508 <xTaskIncrementTick+0x164>)
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	440b      	add	r3, r1
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d901      	bls.n	800b4c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4c8:	4b11      	ldr	r3, [pc, #68]	; (800b510 <xTaskIncrementTick+0x16c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d007      	beq.n	800b4e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e004      	b.n	800b4e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4d6:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <xTaskIncrementTick+0x170>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	4a0d      	ldr	r2, [pc, #52]	; (800b514 <xTaskIncrementTick+0x170>)
 800b4de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4e0:	697b      	ldr	r3, [r7, #20]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	200013b4 	.word	0x200013b4
 800b4f0:	20001390 	.word	0x20001390
 800b4f4:	20001344 	.word	0x20001344
 800b4f8:	20001348 	.word	0x20001348
 800b4fc:	200013a4 	.word	0x200013a4
 800b500:	200013ac 	.word	0x200013ac
 800b504:	20001394 	.word	0x20001394
 800b508:	20000ebc 	.word	0x20000ebc
 800b50c:	20000eb8 	.word	0x20000eb8
 800b510:	200013a0 	.word	0x200013a0
 800b514:	2000139c 	.word	0x2000139c

0800b518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b51e:	4b28      	ldr	r3, [pc, #160]	; (800b5c0 <vTaskSwitchContext+0xa8>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b526:	4b27      	ldr	r3, [pc, #156]	; (800b5c4 <vTaskSwitchContext+0xac>)
 800b528:	2201      	movs	r2, #1
 800b52a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b52c:	e041      	b.n	800b5b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b52e:	4b25      	ldr	r3, [pc, #148]	; (800b5c4 <vTaskSwitchContext+0xac>)
 800b530:	2200      	movs	r2, #0
 800b532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <vTaskSwitchContext+0xb0>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e010      	b.n	800b55e <vTaskSwitchContext+0x46>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <vTaskSwitchContext+0x40>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	607b      	str	r3, [r7, #4]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <vTaskSwitchContext+0x3e>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	491b      	ldr	r1, [pc, #108]	; (800b5cc <vTaskSwitchContext+0xb4>)
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	440b      	add	r3, r1
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0e4      	beq.n	800b53c <vTaskSwitchContext+0x24>
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	4613      	mov	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4a13      	ldr	r2, [pc, #76]	; (800b5cc <vTaskSwitchContext+0xb4>)
 800b57e:	4413      	add	r3, r2
 800b580:	60bb      	str	r3, [r7, #8]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	605a      	str	r2, [r3, #4]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	3308      	adds	r3, #8
 800b594:	429a      	cmp	r2, r3
 800b596:	d104      	bne.n	800b5a2 <vTaskSwitchContext+0x8a>
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	4a09      	ldr	r2, [pc, #36]	; (800b5d0 <vTaskSwitchContext+0xb8>)
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	4a06      	ldr	r2, [pc, #24]	; (800b5c8 <vTaskSwitchContext+0xb0>)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6013      	str	r3, [r2, #0]
}
 800b5b2:	bf00      	nop
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	200013b4 	.word	0x200013b4
 800b5c4:	200013a0 	.word	0x200013a0
 800b5c8:	20001394 	.word	0x20001394
 800b5cc:	20000ebc 	.word	0x20000ebc
 800b5d0:	20000eb8 	.word	0x20000eb8

0800b5d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	60fb      	str	r3, [r7, #12]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5fa:	4b07      	ldr	r3, [pc, #28]	; (800b618 <vTaskPlaceOnEventList+0x44>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3318      	adds	r3, #24
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7fe fc5e 	bl	8009ec4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b608:	2101      	movs	r1, #1
 800b60a:	6838      	ldr	r0, [r7, #0]
 800b60c:	f000 fdb0 	bl	800c170 <prvAddCurrentTaskToDelayedList>
}
 800b610:	bf00      	nop
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000eb8 	.word	0x20000eb8

0800b61c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10a      	bne.n	800b644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	617b      	str	r3, [r7, #20]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <vTaskPlaceOnEventListRestricted+0x54>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3318      	adds	r3, #24
 800b64a:	4619      	mov	r1, r3
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7fe fc15 	bl	8009e7c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b658:	f04f 33ff 	mov.w	r3, #4294967295
 800b65c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	68b8      	ldr	r0, [r7, #8]
 800b662:	f000 fd85 	bl	800c170 <prvAddCurrentTaskToDelayedList>
	}
 800b666:	bf00      	nop
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000eb8 	.word	0x20000eb8

0800b674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60fb      	str	r3, [r7, #12]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	3318      	adds	r3, #24
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fc46 	bl	8009f36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6aa:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <xTaskRemoveFromEventList+0xb0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d11d      	bne.n	800b6ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fc3d 	bl	8009f36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c0:	4b19      	ldr	r3, [pc, #100]	; (800b728 <xTaskRemoveFromEventList+0xb4>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d903      	bls.n	800b6d0 <xTaskRemoveFromEventList+0x5c>
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	4a16      	ldr	r2, [pc, #88]	; (800b728 <xTaskRemoveFromEventList+0xb4>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4a13      	ldr	r2, [pc, #76]	; (800b72c <xTaskRemoveFromEventList+0xb8>)
 800b6de:	441a      	add	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	f7fe fbc8 	bl	8009e7c <vListInsertEnd>
 800b6ec:	e005      	b.n	800b6fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	3318      	adds	r3, #24
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	480e      	ldr	r0, [pc, #56]	; (800b730 <xTaskRemoveFromEventList+0xbc>)
 800b6f6:	f7fe fbc1 	bl	8009e7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <xTaskRemoveFromEventList+0xc0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	429a      	cmp	r2, r3
 800b706:	d905      	bls.n	800b714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b70c:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <xTaskRemoveFromEventList+0xc4>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e001      	b.n	800b718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b718:	697b      	ldr	r3, [r7, #20]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3718      	adds	r7, #24
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	200013b4 	.word	0x200013b4
 800b728:	20001394 	.word	0x20001394
 800b72c:	20000ebc 	.word	0x20000ebc
 800b730:	2000134c 	.word	0x2000134c
 800b734:	20000eb8 	.word	0x20000eb8
 800b738:	200013a0 	.word	0x200013a0

0800b73c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <vTaskInternalSetTimeOutState+0x24>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b74c:	4b05      	ldr	r3, [pc, #20]	; (800b764 <vTaskInternalSetTimeOutState+0x28>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	605a      	str	r2, [r3, #4]
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	200013a4 	.word	0x200013a4
 800b764:	20001390 	.word	0x20001390

0800b768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	613b      	str	r3, [r7, #16]
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10a      	bne.n	800b7aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	60fb      	str	r3, [r7, #12]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b7aa:	f001 fa6b 	bl	800cc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7ae:	4b1d      	ldr	r3, [pc, #116]	; (800b824 <xTaskCheckForTimeOut+0xbc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c6:	d102      	bne.n	800b7ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e023      	b.n	800b816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <xTaskCheckForTimeOut+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d007      	beq.n	800b7ea <xTaskCheckForTimeOut+0x82>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d302      	bcc.n	800b7ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e015      	b.n	800b816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d20b      	bcs.n	800b80c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	1ad2      	subs	r2, r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff ff9b 	bl	800b73c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	61fb      	str	r3, [r7, #28]
 800b80a:	e004      	b.n	800b816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b812:	2301      	movs	r3, #1
 800b814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b816:	f001 fa65 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800b81a:	69fb      	ldr	r3, [r7, #28]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3720      	adds	r7, #32
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20001390 	.word	0x20001390
 800b828:	200013a4 	.word	0x200013a4

0800b82c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b830:	4b03      	ldr	r3, [pc, #12]	; (800b840 <vTaskMissedYield+0x14>)
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
}
 800b836:	bf00      	nop
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	200013a0 	.word	0x200013a0

0800b844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b84c:	f000 f852 	bl	800b8f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b850:	4b06      	ldr	r3, [pc, #24]	; (800b86c <prvIdleTask+0x28>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d9f9      	bls.n	800b84c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b858:	4b05      	ldr	r3, [pc, #20]	; (800b870 <prvIdleTask+0x2c>)
 800b85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b868:	e7f0      	b.n	800b84c <prvIdleTask+0x8>
 800b86a:	bf00      	nop
 800b86c:	20000ebc 	.word	0x20000ebc
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
 800b87e:	e00c      	b.n	800b89a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4613      	mov	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	4a12      	ldr	r2, [pc, #72]	; (800b8d4 <prvInitialiseTaskLists+0x60>)
 800b88c:	4413      	add	r3, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fac7 	bl	8009e22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3301      	adds	r3, #1
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b37      	cmp	r3, #55	; 0x37
 800b89e:	d9ef      	bls.n	800b880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8a0:	480d      	ldr	r0, [pc, #52]	; (800b8d8 <prvInitialiseTaskLists+0x64>)
 800b8a2:	f7fe fabe 	bl	8009e22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8a6:	480d      	ldr	r0, [pc, #52]	; (800b8dc <prvInitialiseTaskLists+0x68>)
 800b8a8:	f7fe fabb 	bl	8009e22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8ac:	480c      	ldr	r0, [pc, #48]	; (800b8e0 <prvInitialiseTaskLists+0x6c>)
 800b8ae:	f7fe fab8 	bl	8009e22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8b2:	480c      	ldr	r0, [pc, #48]	; (800b8e4 <prvInitialiseTaskLists+0x70>)
 800b8b4:	f7fe fab5 	bl	8009e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8b8:	480b      	ldr	r0, [pc, #44]	; (800b8e8 <prvInitialiseTaskLists+0x74>)
 800b8ba:	f7fe fab2 	bl	8009e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8be:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <prvInitialiseTaskLists+0x78>)
 800b8c0:	4a05      	ldr	r2, [pc, #20]	; (800b8d8 <prvInitialiseTaskLists+0x64>)
 800b8c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8c4:	4b0a      	ldr	r3, [pc, #40]	; (800b8f0 <prvInitialiseTaskLists+0x7c>)
 800b8c6:	4a05      	ldr	r2, [pc, #20]	; (800b8dc <prvInitialiseTaskLists+0x68>)
 800b8c8:	601a      	str	r2, [r3, #0]
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20000ebc 	.word	0x20000ebc
 800b8d8:	2000131c 	.word	0x2000131c
 800b8dc:	20001330 	.word	0x20001330
 800b8e0:	2000134c 	.word	0x2000134c
 800b8e4:	20001360 	.word	0x20001360
 800b8e8:	20001378 	.word	0x20001378
 800b8ec:	20001344 	.word	0x20001344
 800b8f0:	20001348 	.word	0x20001348

0800b8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8fa:	e019      	b.n	800b930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8fc:	f001 f9c2 	bl	800cc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b900:	4b10      	ldr	r3, [pc, #64]	; (800b944 <prvCheckTasksWaitingTermination+0x50>)
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fb12 	bl	8009f36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b912:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <prvCheckTasksWaitingTermination+0x54>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3b01      	subs	r3, #1
 800b918:	4a0b      	ldr	r2, [pc, #44]	; (800b948 <prvCheckTasksWaitingTermination+0x54>)
 800b91a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b91c:	4b0b      	ldr	r3, [pc, #44]	; (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3b01      	subs	r3, #1
 800b922:	4a0a      	ldr	r2, [pc, #40]	; (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b926:	f001 f9dd 	bl	800cce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f810 	bl	800b950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b930:	4b06      	ldr	r3, [pc, #24]	; (800b94c <prvCheckTasksWaitingTermination+0x58>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e1      	bne.n	800b8fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	20001360 	.word	0x20001360
 800b948:	2000138c 	.word	0x2000138c
 800b94c:	20001374 	.word	0x20001374

0800b950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d108      	bne.n	800b974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b966:	4618      	mov	r0, r3
 800b968:	f001 fb7a 	bl	800d060 <vPortFree>
				vPortFree( pxTCB );
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 fb77 	bl	800d060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b972:	e018      	b.n	800b9a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d103      	bne.n	800b986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f001 fb6e 	bl	800d060 <vPortFree>
	}
 800b984:	e00f      	b.n	800b9a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d00a      	beq.n	800b9a6 <prvDeleteTCB+0x56>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	60fb      	str	r3, [r7, #12]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <prvDeleteTCB+0x54>
	}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b6:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <prvResetNextTaskUnblockTime+0x38>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <prvResetNextTaskUnblockTime+0x3c>)
 800b9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9c8:	e008      	b.n	800b9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ca:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <prvResetNextTaskUnblockTime+0x38>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	4a04      	ldr	r2, [pc, #16]	; (800b9ec <prvResetNextTaskUnblockTime+0x3c>)
 800b9da:	6013      	str	r3, [r2, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20001344 	.word	0x20001344
 800b9ec:	200013ac 	.word	0x200013ac

0800b9f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <xTaskGetSchedulerState+0x34>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d102      	bne.n	800ba04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	e008      	b.n	800ba16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba04:	4b08      	ldr	r3, [pc, #32]	; (800ba28 <xTaskGetSchedulerState+0x38>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d102      	bne.n	800ba12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	607b      	str	r3, [r7, #4]
 800ba10:	e001      	b.n	800ba16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba12:	2300      	movs	r3, #0
 800ba14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba16:	687b      	ldr	r3, [r7, #4]
	}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20001398 	.word	0x20001398
 800ba28:	200013b4 	.word	0x200013b4

0800ba2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d051      	beq.n	800bae6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba46:	4b2a      	ldr	r3, [pc, #168]	; (800baf0 <xTaskPriorityInherit+0xc4>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d241      	bcs.n	800bad4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	699b      	ldr	r3, [r3, #24]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	db06      	blt.n	800ba66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba58:	4b25      	ldr	r3, [pc, #148]	; (800baf0 <xTaskPriorityInherit+0xc4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6959      	ldr	r1, [r3, #20]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4a1f      	ldr	r2, [pc, #124]	; (800baf4 <xTaskPriorityInherit+0xc8>)
 800ba78:	4413      	add	r3, r2
 800ba7a:	4299      	cmp	r1, r3
 800ba7c:	d122      	bne.n	800bac4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fa57 	bl	8009f36 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba88:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <xTaskPriorityInherit+0xc4>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	4b18      	ldr	r3, [pc, #96]	; (800baf8 <xTaskPriorityInherit+0xcc>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d903      	bls.n	800baa6 <xTaskPriorityInherit+0x7a>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <xTaskPriorityInherit+0xcc>)
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4a10      	ldr	r2, [pc, #64]	; (800baf4 <xTaskPriorityInherit+0xc8>)
 800bab4:	441a      	add	r2, r3
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	3304      	adds	r3, #4
 800baba:	4619      	mov	r1, r3
 800babc:	4610      	mov	r0, r2
 800babe:	f7fe f9dd 	bl	8009e7c <vListInsertEnd>
 800bac2:	e004      	b.n	800bace <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bac4:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <xTaskPriorityInherit+0xc4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	60fb      	str	r3, [r7, #12]
 800bad2:	e008      	b.n	800bae6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bad8:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <xTaskPriorityInherit+0xc4>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	429a      	cmp	r2, r3
 800bae0:	d201      	bcs.n	800bae6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bae2:	2301      	movs	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bae6:	68fb      	ldr	r3, [r7, #12]
	}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20000eb8 	.word	0x20000eb8
 800baf4:	20000ebc 	.word	0x20000ebc
 800baf8:	20001394 	.word	0x20001394

0800bafc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d056      	beq.n	800bbc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb12:	4b2e      	ldr	r3, [pc, #184]	; (800bbcc <xTaskPriorityDisinherit+0xd0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d00a      	beq.n	800bb32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60fb      	str	r3, [r7, #12]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10a      	bne.n	800bb50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60bb      	str	r3, [r7, #8]
}
 800bb4c:	bf00      	nop
 800bb4e:	e7fe      	b.n	800bb4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb54:	1e5a      	subs	r2, r3, #1
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d02c      	beq.n	800bbc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d128      	bne.n	800bbc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe f9df 	bl	8009f36 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb90:	4b0f      	ldr	r3, [pc, #60]	; (800bbd0 <xTaskPriorityDisinherit+0xd4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d903      	bls.n	800bba0 <xTaskPriorityDisinherit+0xa4>
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	4a0c      	ldr	r2, [pc, #48]	; (800bbd0 <xTaskPriorityDisinherit+0xd4>)
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	4613      	mov	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	4a09      	ldr	r2, [pc, #36]	; (800bbd4 <xTaskPriorityDisinherit+0xd8>)
 800bbae:	441a      	add	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f7fe f960 	bl	8009e7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbc0:	697b      	ldr	r3, [r7, #20]
	}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20000eb8 	.word	0x20000eb8
 800bbd0:	20001394 	.word	0x20001394
 800bbd4:	20000ebc 	.word	0x20000ebc

0800bbd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d06a      	beq.n	800bcc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10a      	bne.n	800bc0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	60fb      	str	r3, [r7, #12]
}
 800bc0a:	bf00      	nop
 800bc0c:	e7fe      	b.n	800bc0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d902      	bls.n	800bc1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	e002      	b.n	800bc24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	69fa      	ldr	r2, [r7, #28]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d04b      	beq.n	800bcc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d146      	bne.n	800bcc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc38:	4b25      	ldr	r3, [pc, #148]	; (800bcd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d10a      	bne.n	800bc58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	60bb      	str	r3, [r7, #8]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	69fa      	ldr	r2, [r7, #28]
 800bc62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	db04      	blt.n	800bc76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	6959      	ldr	r1, [r3, #20]
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	4a13      	ldr	r2, [pc, #76]	; (800bcd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc86:	4413      	add	r3, r2
 800bc88:	4299      	cmp	r1, r3
 800bc8a:	d11c      	bne.n	800bcc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe f950 	bl	8009f36 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	; (800bcd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d903      	bls.n	800bcaa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	4a0c      	ldr	r2, [pc, #48]	; (800bcd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bca8:	6013      	str	r3, [r2, #0]
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4a07      	ldr	r2, [pc, #28]	; (800bcd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcb8:	441a      	add	r2, r3
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f7fe f8db 	bl	8009e7c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcc6:	bf00      	nop
 800bcc8:	3720      	adds	r7, #32
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000eb8 	.word	0x20000eb8
 800bcd4:	20000ebc 	.word	0x20000ebc
 800bcd8:	20001394 	.word	0x20001394

0800bcdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <pvTaskIncrementMutexHeldCount+0x24>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcee:	3201      	adds	r2, #1
 800bcf0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bcf2:	4b03      	ldr	r3, [pc, #12]	; (800bd00 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
	}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	20000eb8 	.word	0x20000eb8

0800bd04 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bd0e:	f000 ffb9 	bl	800cc84 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bd12:	4b1e      	ldr	r3, [pc, #120]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d113      	bne.n	800bd44 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bd1c:	4b1b      	ldr	r3, [pc, #108]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	6838      	ldr	r0, [r7, #0]
 800bd30:	f000 fa1e 	bl	800c170 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bd34:	4b16      	ldr	r3, [pc, #88]	; (800bd90 <ulTaskNotifyTake+0x8c>)
 800bd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd44:	f000 ffce 	bl	800cce4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bd48:	f000 ff9c 	bl	800cc84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd52:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00c      	beq.n	800bd74 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d004      	beq.n	800bd6a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bd60:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2200      	movs	r2, #0
 800bd66:	655a      	str	r2, [r3, #84]	; 0x54
 800bd68:	e004      	b.n	800bd74 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bd6a:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	3a01      	subs	r2, #1
 800bd72:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <ulTaskNotifyTake+0x88>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bd7e:	f000 ffb1 	bl	800cce4 <vPortExitCritical>

		return ulReturn;
 800bd82:	68fb      	ldr	r3, [r7, #12]
	}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20000eb8 	.word	0x20000eb8
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bda2:	f000 ff6f 	bl	800cc84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bda6:	4b26      	ldr	r3, [pc, #152]	; (800be40 <xTaskNotifyWait+0xac>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d01a      	beq.n	800bdea <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bdb4:	4b22      	ldr	r3, [pc, #136]	; (800be40 <xTaskNotifyWait+0xac>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	43d2      	mvns	r2, r2
 800bdbe:	400a      	ands	r2, r1
 800bdc0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bdc2:	4b1f      	ldr	r3, [pc, #124]	; (800be40 <xTaskNotifyWait+0xac>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00b      	beq.n	800bdea <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	6838      	ldr	r0, [r7, #0]
 800bdd6:	f000 f9cb 	bl	800c170 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bdda:	4b1a      	ldr	r3, [pc, #104]	; (800be44 <xTaskNotifyWait+0xb0>)
 800bddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bdea:	f000 ff7b 	bl	800cce4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800bdee:	f000 ff49 	bl	800cc84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bdf8:	4b11      	ldr	r3, [pc, #68]	; (800be40 <xTaskNotifyWait+0xac>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800be02:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <xTaskNotifyWait+0xac>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d002      	beq.n	800be16 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	e008      	b.n	800be28 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800be16:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <xTaskNotifyWait+0xac>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	43d2      	mvns	r2, r2
 800be20:	400a      	ands	r2, r1
 800be22:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800be24:	2301      	movs	r3, #1
 800be26:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be28:	4b05      	ldr	r3, [pc, #20]	; (800be40 <xTaskNotifyWait+0xac>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800be32:	f000 ff57 	bl	800cce4 <vPortExitCritical>

		return xReturn;
 800be36:	697b      	ldr	r3, [r7, #20]
	}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20000eb8 	.word	0x20000eb8
 800be44:	e000ed04 	.word	0xe000ed04

0800be48 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	4613      	mov	r3, r2
 800be56:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800be58:	2301      	movs	r3, #1
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d10a      	bne.n	800be78 <xTaskGenericNotify+0x30>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	61bb      	str	r3, [r7, #24]
}
 800be74:	bf00      	nop
 800be76:	e7fe      	b.n	800be76 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800be7c:	f000 ff02 	bl	800cc84 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be94:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	2202      	movs	r2, #2
 800be9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	d828      	bhi.n	800bef6 <xTaskGenericNotify+0xae>
 800bea4:	a201      	add	r2, pc, #4	; (adr r2, 800beac <xTaskGenericNotify+0x64>)
 800bea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beaa:	bf00      	nop
 800beac:	0800bf17 	.word	0x0800bf17
 800beb0:	0800bec1 	.word	0x0800bec1
 800beb4:	0800becf 	.word	0x0800becf
 800beb8:	0800bedb 	.word	0x0800bedb
 800bebc:	0800bee3 	.word	0x0800bee3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800becc:	e026      	b.n	800bf1c <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bed8:	e020      	b.n	800bf1c <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800beda:	6a3b      	ldr	r3, [r7, #32]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800bee0:	e01c      	b.n	800bf1c <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bee2:	7ffb      	ldrb	r3, [r7, #31]
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d003      	beq.n	800bef0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800beee:	e015      	b.n	800bf1c <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800bef0:	2300      	movs	r3, #0
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800bef4:	e012      	b.n	800bf1c <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befe:	d00c      	beq.n	800bf1a <xTaskGenericNotify+0xd2>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	617b      	str	r3, [r7, #20]
}
 800bf12:	bf00      	nop
 800bf14:	e7fe      	b.n	800bf14 <xTaskGenericNotify+0xcc>
					break;
 800bf16:	bf00      	nop
 800bf18:	e000      	b.n	800bf1c <xTaskGenericNotify+0xd4>

					break;
 800bf1a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bf1c:	7ffb      	ldrb	r3, [r7, #31]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d13a      	bne.n	800bf98 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	3304      	adds	r3, #4
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe f805 	bl	8009f36 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf30:	4b1d      	ldr	r3, [pc, #116]	; (800bfa8 <xTaskGenericNotify+0x160>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d903      	bls.n	800bf40 <xTaskGenericNotify+0xf8>
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	4a1a      	ldr	r2, [pc, #104]	; (800bfa8 <xTaskGenericNotify+0x160>)
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf44:	4613      	mov	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4a17      	ldr	r2, [pc, #92]	; (800bfac <xTaskGenericNotify+0x164>)
 800bf4e:	441a      	add	r2, r3
 800bf50:	6a3b      	ldr	r3, [r7, #32]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fd ff90 	bl	8009e7c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00a      	beq.n	800bf7a <xTaskGenericNotify+0x132>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	613b      	str	r3, [r7, #16]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7e:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <xTaskGenericNotify+0x168>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d907      	bls.n	800bf98 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bf88:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <xTaskGenericNotify+0x16c>)
 800bf8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bf98:	f000 fea4 	bl	800cce4 <vPortExitCritical>

		return xReturn;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3728      	adds	r7, #40	; 0x28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20001394 	.word	0x20001394
 800bfac:	20000ebc 	.word	0x20000ebc
 800bfb0:	20000eb8 	.word	0x20000eb8
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08e      	sub	sp, #56	; 0x38
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfe8:	f000 ff2e 	bl	800ce48 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bff0:	f3ef 8211 	mrs	r2, BASEPRI
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	623a      	str	r2, [r7, #32]
 800c006:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c008:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c00a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	2202      	movs	r2, #2
 800c028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	2b04      	cmp	r3, #4
 800c030:	d828      	bhi.n	800c084 <xTaskGenericNotifyFromISR+0xcc>
 800c032:	a201      	add	r2, pc, #4	; (adr r2, 800c038 <xTaskGenericNotifyFromISR+0x80>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c0a5 	.word	0x0800c0a5
 800c03c:	0800c04d 	.word	0x0800c04d
 800c040:	0800c05b 	.word	0x0800c05b
 800c044:	0800c067 	.word	0x0800c067
 800c048:	0800c06f 	.word	0x0800c06f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	431a      	orrs	r2, r3
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c058:	e027      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c064:	e021      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c06c:	e01d      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c06e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c072:	2b02      	cmp	r3, #2
 800c074:	d003      	beq.n	800c07e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c07c:	e015      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c07e:	2300      	movs	r3, #0
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c082:	e012      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08c:	d00c      	beq.n	800c0a8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	61bb      	str	r3, [r7, #24]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c0a4:	bf00      	nop
 800c0a6:	e000      	b.n	800c0aa <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c0a8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d146      	bne.n	800c140 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	617b      	str	r3, [r7, #20]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0d0:	4b21      	ldr	r3, [pc, #132]	; (800c158 <xTaskGenericNotifyFromISR+0x1a0>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d11d      	bne.n	800c114 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fd ff2a 	bl	8009f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e6:	4b1d      	ldr	r3, [pc, #116]	; (800c15c <xTaskGenericNotifyFromISR+0x1a4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d903      	bls.n	800c0f6 <xTaskGenericNotifyFromISR+0x13e>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	4a1a      	ldr	r2, [pc, #104]	; (800c15c <xTaskGenericNotifyFromISR+0x1a4>)
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a17      	ldr	r2, [pc, #92]	; (800c160 <xTaskGenericNotifyFromISR+0x1a8>)
 800c104:	441a      	add	r2, r3
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	3304      	adds	r3, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7fd feb5 	bl	8009e7c <vListInsertEnd>
 800c112:	e005      	b.n	800c120 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c116:	3318      	adds	r3, #24
 800c118:	4619      	mov	r1, r3
 800c11a:	4812      	ldr	r0, [pc, #72]	; (800c164 <xTaskGenericNotifyFromISR+0x1ac>)
 800c11c:	f7fd feae 	bl	8009e7c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c124:	4b10      	ldr	r3, [pc, #64]	; (800c168 <xTaskGenericNotifyFromISR+0x1b0>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d908      	bls.n	800c140 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c130:	2b00      	cmp	r3, #0
 800c132:	d002      	beq.n	800c13a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c136:	2201      	movs	r2, #1
 800c138:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c13a:	4b0c      	ldr	r3, [pc, #48]	; (800c16c <xTaskGenericNotifyFromISR+0x1b4>)
 800c13c:	2201      	movs	r2, #1
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	f383 8811 	msr	BASEPRI, r3
}
 800c14a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c14e:	4618      	mov	r0, r3
 800c150:	3738      	adds	r7, #56	; 0x38
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200013b4 	.word	0x200013b4
 800c15c:	20001394 	.word	0x20001394
 800c160:	20000ebc 	.word	0x20000ebc
 800c164:	2000134c 	.word	0x2000134c
 800c168:	20000eb8 	.word	0x20000eb8
 800c16c:	200013a0 	.word	0x200013a0

0800c170 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c17a:	4b21      	ldr	r3, [pc, #132]	; (800c200 <prvAddCurrentTaskToDelayedList+0x90>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c180:	4b20      	ldr	r3, [pc, #128]	; (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3304      	adds	r3, #4
 800c186:	4618      	mov	r0, r3
 800c188:	f7fd fed5 	bl	8009f36 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d10a      	bne.n	800c1aa <prvAddCurrentTaskToDelayedList+0x3a>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d007      	beq.n	800c1aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c19a:	4b1a      	ldr	r3, [pc, #104]	; (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4819      	ldr	r0, [pc, #100]	; (800c208 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1a4:	f7fd fe6a 	bl	8009e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1a8:	e026      	b.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d209      	bcs.n	800c1d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1c2:	4b12      	ldr	r3, [pc, #72]	; (800c20c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	4b0f      	ldr	r3, [pc, #60]	; (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	4610      	mov	r0, r2
 800c1d0:	f7fd fe78 	bl	8009ec4 <vListInsert>
}
 800c1d4:	e010      	b.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1d6:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f7fd fe6e 	bl	8009ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1e8:	4b0a      	ldr	r3, [pc, #40]	; (800c214 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d202      	bcs.n	800c1f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1f2:	4a08      	ldr	r2, [pc, #32]	; (800c214 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6013      	str	r3, [r2, #0]
}
 800c1f8:	bf00      	nop
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20001390 	.word	0x20001390
 800c204:	20000eb8 	.word	0x20000eb8
 800c208:	20001378 	.word	0x20001378
 800c20c:	20001348 	.word	0x20001348
 800c210:	20001344 	.word	0x20001344
 800c214:	200013ac 	.word	0x200013ac

0800c218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	; 0x28
 800c21c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c21e:	2300      	movs	r3, #0
 800c220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c222:	f000 fba1 	bl	800c968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c226:	4b1c      	ldr	r3, [pc, #112]	; (800c298 <xTimerCreateTimerTask+0x80>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d021      	beq.n	800c272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c236:	1d3a      	adds	r2, r7, #4
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	f107 030c 	add.w	r3, r7, #12
 800c240:	4618      	mov	r0, r3
 800c242:	f7fd fd83 	bl	8009d4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c246:	6879      	ldr	r1, [r7, #4]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	9202      	str	r2, [sp, #8]
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	2302      	movs	r3, #2
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	2300      	movs	r3, #0
 800c256:	460a      	mov	r2, r1
 800c258:	4910      	ldr	r1, [pc, #64]	; (800c29c <xTimerCreateTimerTask+0x84>)
 800c25a:	4811      	ldr	r0, [pc, #68]	; (800c2a0 <xTimerCreateTimerTask+0x88>)
 800c25c:	f7fe fd98 	bl	800ad90 <xTaskCreateStatic>
 800c260:	4603      	mov	r3, r0
 800c262:	4a10      	ldr	r2, [pc, #64]	; (800c2a4 <xTimerCreateTimerTask+0x8c>)
 800c264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c266:	4b0f      	ldr	r3, [pc, #60]	; (800c2a4 <xTimerCreateTimerTask+0x8c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c26e:	2301      	movs	r3, #1
 800c270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	613b      	str	r3, [r7, #16]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c28e:	697b      	ldr	r3, [r7, #20]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	200013e8 	.word	0x200013e8
 800c29c:	0800eeb0 	.word	0x0800eeb0
 800c2a0:	0800c511 	.word	0x0800c511
 800c2a4:	200013ec 	.word	0x200013ec

0800c2a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af02      	add	r7, sp, #8
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
 800c2b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c2b6:	202c      	movs	r0, #44	; 0x2c
 800c2b8:	f000 fe06 	bl	800cec8 <pvPortMalloc>
 800c2bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00d      	beq.n	800c2e0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	9301      	str	r3, [sp, #4]
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f843 	bl	800c366 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c2e0:	697b      	ldr	r3, [r7, #20]
	}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b08a      	sub	sp, #40	; 0x28
 800c2ee:	af02      	add	r7, sp, #8
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c2f8:	232c      	movs	r3, #44	; 0x2c
 800c2fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	2b2c      	cmp	r3, #44	; 0x2c
 800c300:	d00a      	beq.n	800c318 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	61bb      	str	r3, [r7, #24]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c318:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	617b      	str	r3, [r7, #20]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	2202      	movs	r2, #2
 800c344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 f805 	bl	800c366 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c35c:	69fb      	ldr	r3, [r7, #28]
	}
 800c35e:	4618      	mov	r0, r3
 800c360:	3720      	adds	r7, #32
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10a      	bne.n	800c390 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	617b      	str	r3, [r7, #20]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	2b00      	cmp	r3, #0
 800c394:	d01e      	beq.n	800c3d4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c396:	f000 fae7 	bl	800c968 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fd53 	bl	8009e62 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d008      	beq.n	800c3d4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c8:	f043 0304 	orr.w	r3, r3, #4
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08a      	sub	sp, #40	; 0x28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10a      	bne.n	800c40a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	623b      	str	r3, [r7, #32]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c40a:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <xTimerGenericCommand+0x98>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02a      	beq.n	800c468 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b05      	cmp	r3, #5
 800c422:	dc18      	bgt.n	800c456 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c424:	f7ff fae4 	bl	800b9f0 <xTaskGetSchedulerState>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d109      	bne.n	800c442 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <xTimerGenericCommand+0x98>)
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f107 0110 	add.w	r1, r7, #16
 800c436:	2300      	movs	r3, #0
 800c438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43a:	f7fd ff4f 	bl	800a2dc <xQueueGenericSend>
 800c43e:	6278      	str	r0, [r7, #36]	; 0x24
 800c440:	e012      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c442:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <xTimerGenericCommand+0x98>)
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	f107 0110 	add.w	r1, r7, #16
 800c44a:	2300      	movs	r3, #0
 800c44c:	2200      	movs	r2, #0
 800c44e:	f7fd ff45 	bl	800a2dc <xQueueGenericSend>
 800c452:	6278      	str	r0, [r7, #36]	; 0x24
 800c454:	e008      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c456:	4b07      	ldr	r3, [pc, #28]	; (800c474 <xTimerGenericCommand+0x98>)
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f107 0110 	add.w	r1, r7, #16
 800c45e:	2300      	movs	r3, #0
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	f7fe f839 	bl	800a4d8 <xQueueGenericSendFromISR>
 800c466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3728      	adds	r7, #40	; 0x28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	200013e8 	.word	0x200013e8

0800c478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c482:	4b22      	ldr	r3, [pc, #136]	; (800c50c <prvProcessExpiredTimer+0x94>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	3304      	adds	r3, #4
 800c490:	4618      	mov	r0, r3
 800c492:	f7fd fd50 	bl	8009f36 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d022      	beq.n	800c4ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	699a      	ldr	r2, [r3, #24]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	18d1      	adds	r1, r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	6978      	ldr	r0, [r7, #20]
 800c4b2:	f000 f8d1 	bl	800c658 <prvInsertTimerInActiveList>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01f      	beq.n	800c4fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f7ff ff88 	bl	800c3dc <xTimerGenericCommand>
 800c4cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d113      	bne.n	800c4fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	6978      	ldr	r0, [r7, #20]
 800c502:	4798      	blx	r3
}
 800c504:	bf00      	nop
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	200013e0 	.word	0x200013e0

0800c510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 f857 	bl	800c5d0 <prvGetNextExpireTime>
 800c522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4619      	mov	r1, r3
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f803 	bl	800c534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c52e:	f000 f8d5 	bl	800c6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c532:	e7f1      	b.n	800c518 <prvTimerTask+0x8>

0800c534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c53e:	f7fe fe63 	bl	800b208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f866 	bl	800c618 <prvSampleTimeNow>
 800c54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d130      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d806      	bhi.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c562:	f7fe fe5f 	bl	800b224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c566:	68f9      	ldr	r1, [r7, #12]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ff85 	bl	800c478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c56e:	e024      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d008      	beq.n	800c588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <prvProcessTimerOrBlockTask+0x90>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <prvProcessTimerOrBlockTask+0x50>
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <prvProcessTimerOrBlockTask+0x52>
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <prvProcessTimerOrBlockTask+0x94>)
 800c58a:	6818      	ldr	r0, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	f7fe fbc7 	bl	800ad28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c59a:	f7fe fe43 	bl	800b224 <xTaskResumeAll>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <prvProcessTimerOrBlockTask+0x98>)
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
}
 800c5b4:	e001      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b6:	f7fe fe35 	bl	800b224 <xTaskResumeAll>
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200013e4 	.word	0x200013e4
 800c5c8:	200013e8 	.word	0x200013e8
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d8:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <prvGetNextExpireTime+0x16>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	e000      	b.n	800c5e8 <prvGetNextExpireTime+0x18>
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e001      	b.n	800c604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c604:	68fb      	ldr	r3, [r7, #12]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	200013e0 	.word	0x200013e0

0800c618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c620:	f7fe fe9e 	bl	800b360 <xTaskGetTickCount>
 800c624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d205      	bcs.n	800c63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c630:	f000 f936 	bl	800c8a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	601a      	str	r2, [r3, #0]
 800c63a:	e002      	b.n	800c642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c642:	4a04      	ldr	r2, [pc, #16]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	200013f0 	.word	0x200013f0

0800c658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d812      	bhi.n	800c6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	1ad2      	subs	r2, r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d302      	bcc.n	800c692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c68c:	2301      	movs	r3, #1
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e01b      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c692:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <prvInsertTimerInActiveList+0x7c>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3304      	adds	r3, #4
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7fd fc11 	bl	8009ec4 <vListInsert>
 800c6a2:	e012      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d206      	bcs.n	800c6ba <prvInsertTimerInActiveList+0x62>
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d302      	bcc.n	800c6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e007      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6ba:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <prvInsertTimerInActiveList+0x80>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f7fd fbfd 	bl	8009ec4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6ca:	697b      	ldr	r3, [r7, #20]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	200013e4 	.word	0x200013e4
 800c6d8:	200013e0 	.word	0x200013e0

0800c6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08e      	sub	sp, #56	; 0x38
 800c6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6e2:	e0ca      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	da18      	bge.n	800c71c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6ea:	1d3b      	adds	r3, r7, #4
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10a      	bne.n	800c70c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	61fb      	str	r3, [r7, #28]
}
 800c708:	bf00      	nop
 800c70a:	e7fe      	b.n	800c70a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6850      	ldr	r0, [r2, #4]
 800c714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c716:	6892      	ldr	r2, [r2, #8]
 800c718:	4611      	mov	r1, r2
 800c71a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f2c0 80ab 	blt.w	800c87a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	3304      	adds	r3, #4
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd fbfe 	bl	8009f36 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c73a:	463b      	mov	r3, r7
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ff6b 	bl	800c618 <prvSampleTimeNow>
 800c742:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b09      	cmp	r3, #9
 800c748:	f200 8096 	bhi.w	800c878 <prvProcessReceivedCommands+0x19c>
 800c74c:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <prvProcessReceivedCommands+0x78>)
 800c74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c77d 	.word	0x0800c77d
 800c75c:	0800c77d 	.word	0x0800c77d
 800c760:	0800c7f1 	.word	0x0800c7f1
 800c764:	0800c805 	.word	0x0800c805
 800c768:	0800c84f 	.word	0x0800c84f
 800c76c:	0800c77d 	.word	0x0800c77d
 800c770:	0800c77d 	.word	0x0800c77d
 800c774:	0800c7f1 	.word	0x0800c7f1
 800c778:	0800c805 	.word	0x0800c805
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	18d1      	adds	r1, r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79c:	f7ff ff5c 	bl	800c658 <prvInsertTimerInActiveList>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d069      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d05e      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	441a      	add	r2, r3
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ce:	f7ff fe05 	bl	800c3dc <xTimerGenericCommand>
 800c7d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d14f      	bne.n	800c87a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	61bb      	str	r3, [r7, #24]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c802:	e03a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	617b      	str	r3, [r7, #20]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	18d1      	adds	r1, r2, r3
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c848:	f7ff ff06 	bl	800c658 <prvInsertTimerInActiveList>
					break;
 800c84c:	e015      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f000 fbff 	bl	800d060 <vPortFree>
 800c862:	e00a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c876:	e000      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c87a:	4b08      	ldr	r3, [pc, #32]	; (800c89c <prvProcessReceivedCommands+0x1c0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1d39      	adds	r1, r7, #4
 800c880:	2200      	movs	r2, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fd fec4 	bl	800a610 <xQueueReceive>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f47f af2a 	bne.w	800c6e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	3730      	adds	r7, #48	; 0x30
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	200013e8 	.word	0x200013e8

0800c8a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8a6:	e048      	b.n	800c93a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a8:	4b2d      	ldr	r3, [pc, #180]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b2:	4b2b      	ldr	r3, [pc, #172]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd fb38 	bl	8009f36 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d02e      	beq.n	800c93a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d90e      	bls.n	800c90c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8fa:	4b19      	ldr	r3, [pc, #100]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7fd fadd 	bl	8009ec4 <vListInsert>
 800c90a:	e016      	b.n	800c93a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c90c:	2300      	movs	r3, #0
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	2100      	movs	r1, #0
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff fd60 	bl	800c3dc <xTimerGenericCommand>
 800c91c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	603b      	str	r3, [r7, #0]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1b1      	bne.n	800c8a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c952:	4a04      	ldr	r2, [pc, #16]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	6013      	str	r3, [r2, #0]
}
 800c958:	bf00      	nop
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200013e0 	.word	0x200013e0
 800c964:	200013e4 	.word	0x200013e4

0800c968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c96e:	f000 f989 	bl	800cc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d120      	bne.n	800c9bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c97a:	4814      	ldr	r0, [pc, #80]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c97c:	f7fd fa51 	bl	8009e22 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c980:	4813      	ldr	r0, [pc, #76]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c982:	f7fd fa4e 	bl	8009e22 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c986:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <prvCheckForValidListAndQueue+0x6c>)
 800c988:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c98a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <prvCheckForValidListAndQueue+0x70>)
 800c98e:	4a10      	ldr	r2, [pc, #64]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c992:	2300      	movs	r3, #0
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <prvCheckForValidListAndQueue+0x74>)
 800c998:	4a11      	ldr	r2, [pc, #68]	; (800c9e0 <prvCheckForValidListAndQueue+0x78>)
 800c99a:	2110      	movs	r1, #16
 800c99c:	200a      	movs	r0, #10
 800c99e:	f7fd fb5d 	bl	800a05c <xQueueGenericCreateStatic>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9a8:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	490b      	ldr	r1, [pc, #44]	; (800c9e4 <prvCheckForValidListAndQueue+0x7c>)
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe f962 	bl	800ac80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9bc:	f000 f992 	bl	800cce4 <vPortExitCritical>
}
 800c9c0:	bf00      	nop
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200013e8 	.word	0x200013e8
 800c9cc:	200013b8 	.word	0x200013b8
 800c9d0:	200013cc 	.word	0x200013cc
 800c9d4:	200013e0 	.word	0x200013e0
 800c9d8:	200013e4 	.word	0x200013e4
 800c9dc:	20001494 	.word	0x20001494
 800c9e0:	200013f4 	.word	0x200013f4
 800c9e4:	0800eeb8 	.word	0x0800eeb8

0800c9e8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10a      	bne.n	800ca10 <pvTimerGetTimerID+0x28>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	60fb      	str	r3, [r7, #12]
}
 800ca0c:	bf00      	nop
 800ca0e:	e7fe      	b.n	800ca0e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ca10:	f000 f938 	bl	800cc84 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ca1a:	f000 f963 	bl	800cce4 <vPortExitCritical>

	return pvReturn;
 800ca1e:	693b      	ldr	r3, [r7, #16]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3b04      	subs	r3, #4
 800ca38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3b04      	subs	r3, #4
 800ca46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	f023 0201 	bic.w	r2, r3, #1
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	3b04      	subs	r3, #4
 800ca56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca58:	4a0c      	ldr	r2, [pc, #48]	; (800ca8c <pxPortInitialiseStack+0x64>)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3b14      	subs	r3, #20
 800ca62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3b04      	subs	r3, #4
 800ca6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f06f 0202 	mvn.w	r2, #2
 800ca76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3b20      	subs	r3, #32
 800ca7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	0800ca91 	.word	0x0800ca91

0800ca90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca9a:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <prvTaskExitError+0x54>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d00a      	beq.n	800caba <prvTaskExitError+0x2a>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	60fb      	str	r3, [r7, #12]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <prvTaskExitError+0x28>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	60bb      	str	r3, [r7, #8]
}
 800cacc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cace:	bf00      	nop
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d0fc      	beq.n	800cad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cad6:	bf00      	nop
 800cad8:	bf00      	nop
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	20000050 	.word	0x20000050
	...

0800caf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <pxCurrentTCBConst2>)
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	6808      	ldr	r0, [r1, #0]
 800caf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafa:	f380 8809 	msr	PSP, r0
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f380 8811 	msr	BASEPRI, r0
 800cb0a:	4770      	bx	lr
 800cb0c:	f3af 8000 	nop.w

0800cb10 <pxCurrentTCBConst2>:
 800cb10:	20000eb8 	.word	0x20000eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb18:	4808      	ldr	r0, [pc, #32]	; (800cb3c <prvPortStartFirstTask+0x24>)
 800cb1a:	6800      	ldr	r0, [r0, #0]
 800cb1c:	6800      	ldr	r0, [r0, #0]
 800cb1e:	f380 8808 	msr	MSP, r0
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8814 	msr	CONTROL, r0
 800cb2a:	b662      	cpsie	i
 800cb2c:	b661      	cpsie	f
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	df00      	svc	0
 800cb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb3a:	bf00      	nop
 800cb3c:	e000ed08 	.word	0xe000ed08

0800cb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb46:	4b46      	ldr	r3, [pc, #280]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a46      	ldr	r2, [pc, #280]	; (800cc64 <xPortStartScheduler+0x124>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10a      	bne.n	800cb66 <xPortStartScheduler+0x26>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb66:	4b3e      	ldr	r3, [pc, #248]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <xPortStartScheduler+0x128>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d10a      	bne.n	800cb86 <xPortStartScheduler+0x46>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb86:	4b39      	ldr	r3, [pc, #228]	; (800cc6c <xPortStartScheduler+0x12c>)
 800cb88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	22ff      	movs	r2, #255	; 0xff
 800cb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	4b31      	ldr	r3, [pc, #196]	; (800cc70 <xPortStartScheduler+0x130>)
 800cbac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbae:	4b31      	ldr	r3, [pc, #196]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb0:	2207      	movs	r2, #7
 800cbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbb4:	e009      	b.n	800cbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbb6:	4b2f      	ldr	r3, [pc, #188]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a2d      	ldr	r2, [pc, #180]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd2:	2b80      	cmp	r3, #128	; 0x80
 800cbd4:	d0ef      	beq.n	800cbb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f1c3 0307 	rsb	r3, r3, #7
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d00a      	beq.n	800cbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	60bb      	str	r3, [r7, #8]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc0a:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc16:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a14      	ldr	r2, [pc, #80]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc2e:	f000 f8dd 	bl	800cdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc32:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <xPortStartScheduler+0x13c>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc38:	f000 f8fc 	bl	800ce34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc3c:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc48:	f7ff ff66 	bl	800cb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc4c:	f7fe fc64 	bl	800b518 <vTaskSwitchContext>
	prvTaskExitError();
 800cc50:	f7ff ff1e 	bl	800ca90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	e000ed00 	.word	0xe000ed00
 800cc64:	410fc271 	.word	0x410fc271
 800cc68:	410fc270 	.word	0x410fc270
 800cc6c:	e000e400 	.word	0xe000e400
 800cc70:	200014e4 	.word	0x200014e4
 800cc74:	200014e8 	.word	0x200014e8
 800cc78:	e000ed20 	.word	0xe000ed20
 800cc7c:	20000050 	.word	0x20000050
 800cc80:	e000ef34 	.word	0xe000ef34

0800cc84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	607b      	str	r3, [r7, #4]
}
 800cc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3301      	adds	r3, #1
 800cca4:	4a0d      	ldr	r2, [pc, #52]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cca8:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <vPortEnterCritical+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d10f      	bne.n	800ccd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccb0:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <vPortEnterCritical+0x5c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	603b      	str	r3, [r7, #0]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <vPortEnterCritical+0x4a>
	}
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	20000050 	.word	0x20000050
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccea:	4b12      	ldr	r3, [pc, #72]	; (800cd34 <vPortExitCritical+0x50>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vPortExitCritical+0x24>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	607b      	str	r3, [r7, #4]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <vPortExitCritical+0x50>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <vPortExitCritical+0x50>)
 800cd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd12:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <vPortExitCritical+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <vPortExitCritical+0x42>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f383 8811 	msr	BASEPRI, r3
}
 800cd24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	20000050 	.word	0x20000050
	...

0800cd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd40:	f3ef 8009 	mrs	r0, PSP
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <pxCurrentTCBConst>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f01e 0f10 	tst.w	lr, #16
 800cd50:	bf08      	it	eq
 800cd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	6010      	str	r0, [r2, #0]
 800cd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd64:	f380 8811 	msr	BASEPRI, r0
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f7fe fbd2 	bl	800b518 <vTaskSwitchContext>
 800cd74:	f04f 0000 	mov.w	r0, #0
 800cd78:	f380 8811 	msr	BASEPRI, r0
 800cd7c:	bc09      	pop	{r0, r3}
 800cd7e:	6819      	ldr	r1, [r3, #0]
 800cd80:	6808      	ldr	r0, [r1, #0]
 800cd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd86:	f01e 0f10 	tst.w	lr, #16
 800cd8a:	bf08      	it	eq
 800cd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd90:	f380 8809 	msr	PSP, r0
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	f3af 8000 	nop.w

0800cda0 <pxCurrentTCBConst>:
 800cda0:	20000eb8 	.word	0x20000eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	607b      	str	r3, [r7, #4]
}
 800cdc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdc2:	f7fe faef 	bl	800b3a4 <xTaskIncrementTick>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdcc:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <xPortSysTickHandler+0x40>)
 800cdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	f383 8811 	msr	BASEPRI, r3
}
 800cdde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdf0:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <vPortSetupTimerInterrupt+0x38>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <vPortSetupTimerInterrupt+0x3c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a0a      	ldr	r2, [pc, #40]	; (800ce2c <vPortSetupTimerInterrupt+0x40>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	099b      	lsrs	r3, r3, #6
 800ce08:	4a09      	ldr	r2, [pc, #36]	; (800ce30 <vPortSetupTimerInterrupt+0x44>)
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800ce10:	2207      	movs	r2, #7
 800ce12:	601a      	str	r2, [r3, #0]
}
 800ce14:	bf00      	nop
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	e000e010 	.word	0xe000e010
 800ce24:	e000e018 	.word	0xe000e018
 800ce28:	20000044 	.word	0x20000044
 800ce2c:	10624dd3 	.word	0x10624dd3
 800ce30:	e000e014 	.word	0xe000e014

0800ce34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce44 <vPortEnableVFP+0x10>
 800ce38:	6801      	ldr	r1, [r0, #0]
 800ce3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce3e:	6001      	str	r1, [r0, #0]
 800ce40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce42:	bf00      	nop
 800ce44:	e000ed88 	.word	0xe000ed88

0800ce48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	d914      	bls.n	800ce84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce5a:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <vPortValidateInterruptPriority+0x70>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce64:	4b15      	ldr	r3, [pc, #84]	; (800cebc <vPortValidateInterruptPriority+0x74>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	7afa      	ldrb	r2, [r7, #11]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d20a      	bcs.n	800ce84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <vPortValidateInterruptPriority+0x78>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	; (800cec4 <vPortValidateInterruptPriority+0x7c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d90a      	bls.n	800ceaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	603b      	str	r3, [r7, #0]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <vPortValidateInterruptPriority+0x60>
	}
 800ceaa:	bf00      	nop
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	e000e3f0 	.word	0xe000e3f0
 800cebc:	200014e4 	.word	0x200014e4
 800cec0:	e000ed0c 	.word	0xe000ed0c
 800cec4:	200014e8 	.word	0x200014e8

0800cec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08a      	sub	sp, #40	; 0x28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ced0:	2300      	movs	r3, #0
 800ced2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ced4:	f7fe f998 	bl	800b208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ced8:	4b5b      	ldr	r3, [pc, #364]	; (800d048 <pvPortMalloc+0x180>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cee0:	f000 f920 	bl	800d124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cee4:	4b59      	ldr	r3, [pc, #356]	; (800d04c <pvPortMalloc+0x184>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4013      	ands	r3, r2
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f040 8093 	bne.w	800d018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01d      	beq.n	800cf34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cef8:	2208      	movs	r2, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d014      	beq.n	800cf34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f023 0307 	bic.w	r3, r3, #7
 800cf10:	3308      	adds	r3, #8
 800cf12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <pvPortMalloc+0x6c>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	617b      	str	r3, [r7, #20]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d06e      	beq.n	800d018 <pvPortMalloc+0x150>
 800cf3a:	4b45      	ldr	r3, [pc, #276]	; (800d050 <pvPortMalloc+0x188>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d869      	bhi.n	800d018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf44:	4b43      	ldr	r3, [pc, #268]	; (800d054 <pvPortMalloc+0x18c>)
 800cf46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf48:	4b42      	ldr	r3, [pc, #264]	; (800d054 <pvPortMalloc+0x18c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf4e:	e004      	b.n	800cf5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d903      	bls.n	800cf6c <pvPortMalloc+0xa4>
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f1      	bne.n	800cf50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf6c:	4b36      	ldr	r3, [pc, #216]	; (800d048 <pvPortMalloc+0x180>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d050      	beq.n	800d018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	4413      	add	r3, r2
 800cf7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	685a      	ldr	r2, [r3, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	1ad2      	subs	r2, r2, r3
 800cf90:	2308      	movs	r3, #8
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d91f      	bls.n	800cfd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <pvPortMalloc+0xf8>
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	613b      	str	r3, [r7, #16]
}
 800cfbc:	bf00      	nop
 800cfbe:	e7fe      	b.n	800cfbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfd2:	69b8      	ldr	r0, [r7, #24]
 800cfd4:	f000 f908 	bl	800d1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <pvPortMalloc+0x188>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	4a1b      	ldr	r2, [pc, #108]	; (800d050 <pvPortMalloc+0x188>)
 800cfe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfe6:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <pvPortMalloc+0x188>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b1b      	ldr	r3, [pc, #108]	; (800d058 <pvPortMalloc+0x190>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d203      	bcs.n	800cffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cff2:	4b17      	ldr	r3, [pc, #92]	; (800d050 <pvPortMalloc+0x188>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a18      	ldr	r2, [pc, #96]	; (800d058 <pvPortMalloc+0x190>)
 800cff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	4b13      	ldr	r3, [pc, #76]	; (800d04c <pvPortMalloc+0x184>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	431a      	orrs	r2, r3
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d00e:	4b13      	ldr	r3, [pc, #76]	; (800d05c <pvPortMalloc+0x194>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	4a11      	ldr	r2, [pc, #68]	; (800d05c <pvPortMalloc+0x194>)
 800d016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d018:	f7fe f904 	bl	800b224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00a      	beq.n	800d03c <pvPortMalloc+0x174>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60fb      	str	r3, [r7, #12]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <pvPortMalloc+0x172>
	return pvReturn;
 800d03c:	69fb      	ldr	r3, [r7, #28]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3728      	adds	r7, #40	; 0x28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	200020f4 	.word	0x200020f4
 800d04c:	20002108 	.word	0x20002108
 800d050:	200020f8 	.word	0x200020f8
 800d054:	200020ec 	.word	0x200020ec
 800d058:	200020fc 	.word	0x200020fc
 800d05c:	20002100 	.word	0x20002100

0800d060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d04d      	beq.n	800d10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d072:	2308      	movs	r3, #8
 800d074:	425b      	negs	r3, r3
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	4413      	add	r3, r2
 800d07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	4b24      	ldr	r3, [pc, #144]	; (800d118 <vPortFree+0xb8>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4013      	ands	r3, r2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <vPortFree+0x44>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	60fb      	str	r3, [r7, #12]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00a      	beq.n	800d0c2 <vPortFree+0x62>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	60bb      	str	r3, [r7, #8]
}
 800d0be:	bf00      	nop
 800d0c0:	e7fe      	b.n	800d0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	4b14      	ldr	r3, [pc, #80]	; (800d118 <vPortFree+0xb8>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d01e      	beq.n	800d10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d11a      	bne.n	800d10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	4b0e      	ldr	r3, [pc, #56]	; (800d118 <vPortFree+0xb8>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	43db      	mvns	r3, r3
 800d0e2:	401a      	ands	r2, r3
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0e8:	f7fe f88e 	bl	800b208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <vPortFree+0xbc>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	4a09      	ldr	r2, [pc, #36]	; (800d11c <vPortFree+0xbc>)
 800d0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0fa:	6938      	ldr	r0, [r7, #16]
 800d0fc:	f000 f874 	bl	800d1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <vPortFree+0xc0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	4a06      	ldr	r2, [pc, #24]	; (800d120 <vPortFree+0xc0>)
 800d108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d10a:	f7fe f88b 	bl	800b224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d10e:	bf00      	nop
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20002108 	.word	0x20002108
 800d11c:	200020f8 	.word	0x200020f8
 800d120:	20002104 	.word	0x20002104

0800d124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d12a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d130:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <prvHeapInit+0xac>)
 800d132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3307      	adds	r3, #7
 800d142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d14c:	68ba      	ldr	r2, [r7, #8]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	4a1f      	ldr	r2, [pc, #124]	; (800d1d0 <prvHeapInit+0xac>)
 800d154:	4413      	add	r3, r2
 800d156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d15c:	4a1d      	ldr	r2, [pc, #116]	; (800d1d4 <prvHeapInit+0xb0>)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d162:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <prvHeapInit+0xb0>)
 800d164:	2200      	movs	r2, #0
 800d166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	4413      	add	r3, r2
 800d16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d170:	2208      	movs	r2, #8
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f023 0307 	bic.w	r3, r3, #7
 800d17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	4a15      	ldr	r2, [pc, #84]	; (800d1d8 <prvHeapInit+0xb4>)
 800d184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <prvHeapInit+0xb4>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d18e:	4b12      	ldr	r3, [pc, #72]	; (800d1d8 <prvHeapInit+0xb4>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	1ad2      	subs	r2, r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <prvHeapInit+0xb4>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	4a0a      	ldr	r2, [pc, #40]	; (800d1dc <prvHeapInit+0xb8>)
 800d1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4a09      	ldr	r2, [pc, #36]	; (800d1e0 <prvHeapInit+0xbc>)
 800d1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <prvHeapInit+0xc0>)
 800d1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1c2:	601a      	str	r2, [r3, #0]
}
 800d1c4:	bf00      	nop
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	200014ec 	.word	0x200014ec
 800d1d4:	200020ec 	.word	0x200020ec
 800d1d8:	200020f4 	.word	0x200020f4
 800d1dc:	200020fc 	.word	0x200020fc
 800d1e0:	200020f8 	.word	0x200020f8
 800d1e4:	20002108 	.word	0x20002108

0800d1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1f0:	4b28      	ldr	r3, [pc, #160]	; (800d294 <prvInsertBlockIntoFreeList+0xac>)
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e002      	b.n	800d1fc <prvInsertBlockIntoFreeList+0x14>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	429a      	cmp	r2, r3
 800d204:	d8f7      	bhi.n	800d1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	4413      	add	r3, r2
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	429a      	cmp	r2, r3
 800d216:	d108      	bne.n	800d22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	441a      	add	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	441a      	add	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d118      	bne.n	800d270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	4b15      	ldr	r3, [pc, #84]	; (800d298 <prvInsertBlockIntoFreeList+0xb0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d00d      	beq.n	800d266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	685a      	ldr	r2, [r3, #4]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	441a      	add	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	e008      	b.n	800d278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d266:	4b0c      	ldr	r3, [pc, #48]	; (800d298 <prvInsertBlockIntoFreeList+0xb0>)
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	e003      	b.n	800d278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d002      	beq.n	800d286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d286:	bf00      	nop
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	200020ec 	.word	0x200020ec
 800d298:	200020f4 	.word	0x200020f4

0800d29c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	78fa      	ldrb	r2, [r7, #3]
 800d2b4:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2bc:	3301      	adds	r3, #1
 800d2be:	425a      	negs	r2, r3
 800d2c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2c8:	bf58      	it	pl
 800d2ca:	4253      	negpl	r3, r2
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d2da:	2b80      	cmp	r3, #128	; 0x80
 800d2dc:	d113      	bne.n	800d306 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	425a      	negs	r2, r3
 800d2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2f8:	bf58      	it	pl
 800d2fa:	4253      	negpl	r3, r2
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d304:	e00b      	b.n	800d31e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d314:	3301      	adds	r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d31e:	bf00      	nop
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d33a:	461a      	mov	r2, r3
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f805 	bl	800d34e <RingGetNBytes>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b086      	sub	sp, #24
 800d352:	af00      	add	r7, sp, #0
 800d354:	60f8      	str	r0, [r7, #12]
 800d356:	60b9      	str	r1, [r7, #8]
 800d358:	4613      	mov	r3, r2
 800d35a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d362:	2b00      	cmp	r3, #0
 800d364:	d002      	beq.n	800d36c <RingGetNBytes+0x1e>
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <RingGetNBytes+0x22>
 800d36c:	2300      	movs	r3, #0
 800d36e:	e03e      	b.n	800d3ee <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	2b80      	cmp	r3, #128	; 0x80
 800d374:	d901      	bls.n	800d37a <RingGetNBytes+0x2c>
 800d376:	2300      	movs	r3, #0
 800d378:	e039      	b.n	800d3ee <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	75fb      	strb	r3, [r7, #23]
 800d37e:	e01b      	b.n	800d3b8 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d386:	4619      	mov	r1, r3
 800d388:	7dfb      	ldrb	r3, [r7, #23]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	4413      	add	r3, r2
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	5c52      	ldrb	r2, [r2, r1]
 800d392:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d39a:	3301      	adds	r3, #1
 800d39c:	425a      	negs	r2, r3
 800d39e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d3a6:	bf58      	it	pl
 800d3a8:	4253      	negpl	r3, r2
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	75fb      	strb	r3, [r7, #23]
 800d3b8:	7dfa      	ldrb	r2, [r7, #23]
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d205      	bcs.n	800d3cc <RingGetNBytes+0x7e>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d3c6:	7dfa      	ldrb	r2, [r7, #23]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d3d9      	bcc.n	800d380 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 f805 	bl	800d3f6 <RingClear>

	return uCounter;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d41e:	bf00      	nop
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
	...

0800d42c <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af02      	add	r7, sp, #8
 800d432:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d434:	4b42      	ldr	r3, [pc, #264]	; (800d540 <ModbusInit+0x114>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d87d      	bhi.n	800d538 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	33d0      	adds	r3, #208	; 0xd0
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff ffd8 	bl	800d3f6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	d109      	bne.n	800d462 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d44e:	4a3d      	ldr	r2, [pc, #244]	; (800d544 <ModbusInit+0x118>)
 800d450:	6879      	ldr	r1, [r7, #4]
 800d452:	483d      	ldr	r0, [pc, #244]	; (800d548 <ModbusInit+0x11c>)
 800d454:	f7fc f8e8 	bl	8009628 <osThreadNew>
 800d458:	4602      	mov	r2, r0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d460:	e033      	b.n	800d4ca <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b04      	cmp	r3, #4
 800d468:	d12e      	bne.n	800d4c8 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d46a:	4a38      	ldr	r2, [pc, #224]	; (800d54c <ModbusInit+0x120>)
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	4838      	ldr	r0, [pc, #224]	; (800d550 <ModbusInit+0x124>)
 800d470:	f7fc f8da 	bl	8009628 <osThreadNew>
 800d474:	4602      	mov	r2, r0
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d482:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d48a:	4a32      	ldr	r2, [pc, #200]	; (800d554 <ModbusInit+0x128>)
 800d48c:	9200      	str	r2, [sp, #0]
 800d48e:	2200      	movs	r2, #0
 800d490:	4831      	ldr	r0, [pc, #196]	; (800d558 <ModbusInit+0x12c>)
 800d492:	f7fe ff09 	bl	800c2a8 <xTimerCreate>
 800d496:	4602      	mov	r2, r0
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d100      	bne.n	800d4aa <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d4a8:	e7fe      	b.n	800d4a8 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d4aa:	4a2c      	ldr	r2, [pc, #176]	; (800d55c <ModbusInit+0x130>)
 800d4ac:	2110      	movs	r1, #16
 800d4ae:	2002      	movs	r0, #2
 800d4b0:	f7fc fbbe 	bl	8009c30 <osMessageQueueNew>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d4c6:	e7fe      	b.n	800d4c6 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d4c8:	e7fe      	b.n	800d4c8 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d100      	bne.n	800d4d6 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d4d4:	e7fe      	b.n	800d4d4 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d4dc:	4a20      	ldr	r2, [pc, #128]	; (800d560 <ModbusInit+0x134>)
 800d4de:	9200      	str	r2, [sp, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2105      	movs	r1, #5
 800d4e4:	481f      	ldr	r0, [pc, #124]	; (800d564 <ModbusInit+0x138>)
 800d4e6:	f7fe fedf 	bl	800c2a8 <xTimerCreate>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d100      	bne.n	800d4fe <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d4fc:	e7fe      	b.n	800d4fc <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d4fe:	4a1a      	ldr	r2, [pc, #104]	; (800d568 <ModbusInit+0x13c>)
 800d500:	2101      	movs	r1, #1
 800d502:	2001      	movs	r0, #1
 800d504:	f7fc fb0b 	bl	8009b1e <osSemaphoreNew>
 800d508:	4602      	mov	r2, r0
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d516:	2b00      	cmp	r3, #0
 800d518:	d100      	bne.n	800d51c <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d51a:	e7fe      	b.n	800d51a <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d51c:	4b08      	ldr	r3, [pc, #32]	; (800d540 <ModbusInit+0x114>)
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	4a12      	ldr	r2, [pc, #72]	; (800d56c <ModbusInit+0x140>)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d52a:	4b05      	ldr	r3, [pc, #20]	; (800d540 <ModbusInit+0x114>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	b2da      	uxtb	r2, r3
 800d532:	4b03      	ldr	r3, [pc, #12]	; (800d540 <ModbusInit+0x114>)
 800d534:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d536:	e000      	b.n	800d53a <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d538:	e7fe      	b.n	800d538 <ModbusInit+0x10c>
}
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20002114 	.word	0x20002114
 800d544:	0800f08c 	.word	0x0800f08c
 800d548:	0800d779 	.word	0x0800d779
 800d54c:	0800f0b0 	.word	0x0800f0b0
 800d550:	0800dc55 	.word	0x0800dc55
 800d554:	0800d71d 	.word	0x0800d71d
 800d558:	0800ef04 	.word	0x0800ef04
 800d55c:	0800f074 	.word	0x0800f074
 800d560:	0800d699 	.word	0x0800d699
 800d564:	0800ef14 	.word	0x0800ef14
 800d568:	0800f0d4 	.word	0x0800f0d4
 800d56c:	2000210c 	.word	0x2000210c

0800d570 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d005      	beq.n	800d58e <ModbusStart+0x1e>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d000      	beq.n	800d58e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800d58c:	e7fe      	b.n	800d58c <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d594:	2b01      	cmp	r3, #1
 800d596:	d004      	beq.n	800d5a2 <ModbusStart+0x32>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d15c      	bne.n	800d65c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68d8      	ldr	r0, [r3, #12]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	8a1b      	ldrh	r3, [r3, #16]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	f7f6 fd21 	bl	8003ffc <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d105      	bne.n	800d5ce <ModbusStart+0x5e>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d100      	bne.n	800d5ce <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800d5cc:	e7fe      	b.n	800d5cc <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800d5ce:	bf00      	nop
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7f9 ff11 	bl	80073fc <HAL_UART_GetState>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d1f7      	bne.n	800d5d0 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	d11a      	bne.n	800d620 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6858      	ldr	r0, [r3, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	33d0      	adds	r3, #208	; 0xd0
 800d5f2:	2280      	movs	r2, #128	; 0x80
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	f7fb feaa 	bl	800934e <HAL_UARTEx_ReceiveToIdle_DMA>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d000      	beq.n	800d602 <ModbusStart+0x92>
        	   {
        	         while(1)
 800d600:	e7fe      	b.n	800d600 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f022 0204 	bic.w	r2, r2, #4
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e00b      	b.n	800d638 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6858      	ldr	r0, [r3, #4]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	33b8      	adds	r3, #184	; 0xb8
 800d628:	2201      	movs	r2, #1
 800d62a:	4619      	mov	r1, r3
 800d62c:	f7f9 f8cc 	bl	80067c8 <HAL_UART_Receive_IT>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d000      	beq.n	800d638 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800d636:	e7fe      	b.n	800d636 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	7a1b      	ldrb	r3, [r3, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d004      	beq.n	800d64a <ModbusStart+0xda>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b04      	cmp	r3, #4
 800d646:	d100      	bne.n	800d64a <ModbusStart+0xda>
          {
        	  while(1)
 800d648:	e7fe      	b.n	800d648 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7a1b      	ldrb	r3, [r3, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d104      	bne.n	800d65c <ModbusStart+0xec>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b03      	cmp	r3, #3
 800d658:	d100      	bne.n	800d65c <ModbusStart+0xec>
          {
             	  while(1)
 800d65a:	e7fe      	b.n	800d65a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e02a      	b.n	800d6fc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800d6a6:	4a1b      	ldr	r2, [pc, #108]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d11e      	bne.n	800d6f6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800d6b8:	4a16      	ldr	r2, [pc, #88]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b04      	cmp	r3, #4
 800d6c4:	d10c      	bne.n	800d6e0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800d6c6:	4a13      	ldr	r2, [pc, #76]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2103      	movs	r1, #3
 800d6dc:	f7fe fe7e 	bl	800c3dc <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800d6e0:	4a0c      	ldr	r2, [pc, #48]	; (800d714 <vTimerCallbackT35+0x7c>)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6e8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	f7fe fba9 	bl	800be48 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	4b06      	ldr	r3, [pc, #24]	; (800d718 <vTimerCallbackT35+0x80>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4293      	cmp	r3, r2
 800d706:	dbce      	blt.n	800d6a6 <vTimerCallbackT35+0xe>
		}

	}
}
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	2000210c 	.word	0x2000210c
 800d718:	20002114 	.word	0x20002114

0800d71c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	e017      	b.n	800d75a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800d72a:	4a11      	ldr	r2, [pc, #68]	; (800d770 <vTimerCallbackTimeout+0x54>)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d732:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d10b      	bne.n	800d754 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800d73c:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <vTimerCallbackTimeout+0x54>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d744:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800d748:	2300      	movs	r3, #0
 800d74a:	2203      	movs	r2, #3
 800d74c:	f06f 0107 	mvn.w	r1, #7
 800d750:	f7fe fb7a 	bl	800be48 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	4b06      	ldr	r3, [pc, #24]	; (800d774 <vTimerCallbackTimeout+0x58>)
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	461a      	mov	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4293      	cmp	r3, r2
 800d764:	dbe1      	blt.n	800d72a <vTimerCallbackTimeout+0xe>
		}

	}

}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2000210c 	.word	0x2000210c
 800d774:	20002114 	.word	0x20002114

0800d778 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d790:	2b01      	cmp	r3, #1
 800d792:	d004      	beq.n	800d79e <StartTaskModbusSlave+0x26>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	d117      	bne.n	800d7ce <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800d79e:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	f7fe faae 	bl	800bd04 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 fc21 	bl	800dff0 <getRxBuffer>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	f113 0f03 	cmn.w	r3, #3
 800d7b4:	d10b      	bne.n	800d7ce <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	22fd      	movs	r2, #253	; 0xfd
 800d7ba:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800d7cc:	e0b7      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800d7d4:	2b06      	cmp	r3, #6
 800d7d6:	d80b      	bhi.n	800d7f0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	22fa      	movs	r2, #250	; 0xfa
 800d7dc:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800d7ee:	e0a6      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	7cda      	ldrb	r2, [r3, #19]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	7a1b      	ldrb	r3, [r3, #8]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	f040 809f 	bne.w	800d93c <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 fc40 	bl	800e084 <validateRequest>
 800d804:	4603      	mov	r3, r0
 800d806:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800d808:	7afb      	ldrb	r3, [r7, #11]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00c      	beq.n	800d828 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	68f9      	ldr	r1, [r7, #12]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fdda 	bl	800e3cc <buildException>
			sendTxBuffer(modH);
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f000 fdf6 	bl	800e40a <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800d81e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800d826:	e08a      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d834:	f04f 31ff 	mov.w	r1, #4294967295
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fc ffc9 	bl	800a7d0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	7d1b      	ldrb	r3, [r3, #20]
 800d842:	3b01      	subs	r3, #1
 800d844:	2b0f      	cmp	r3, #15
 800d846:	d86f      	bhi.n	800d928 <StartTaskModbusSlave+0x1b0>
 800d848:	a201      	add	r2, pc, #4	; (adr r2, 800d850 <StartTaskModbusSlave+0xd8>)
 800d84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84e:	bf00      	nop
 800d850:	0800d891 	.word	0x0800d891
 800d854:	0800d8a5 	.word	0x0800d8a5
 800d858:	0800d8b9 	.word	0x0800d8b9
 800d85c:	0800d8cd 	.word	0x0800d8cd
 800d860:	0800d8e1 	.word	0x0800d8e1
 800d864:	0800d8f3 	.word	0x0800d8f3
 800d868:	0800d929 	.word	0x0800d929
 800d86c:	0800d929 	.word	0x0800d929
 800d870:	0800d929 	.word	0x0800d929
 800d874:	0800d929 	.word	0x0800d929
 800d878:	0800d929 	.word	0x0800d929
 800d87c:	0800d929 	.word	0x0800d929
 800d880:	0800d929 	.word	0x0800d929
 800d884:	0800d929 	.word	0x0800d929
 800d888:	0800d905 	.word	0x0800d905
 800d88c:	0800d917 	.word	0x0800d917
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800d890:	2101      	movs	r1, #1
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 fe5b 	bl	800e54e <process_FC1>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8a2:	e042      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fe51 	bl	800e54e <process_FC1>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8b6:	e038      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800d8b8:	2103      	movs	r1, #3
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 ff03 	bl	800e6c6 <process_FC3>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8ca:	e02e      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800d8cc:	2104      	movs	r1, #4
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f000 fef9 	bl	800e6c6 <process_FC3>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8de:	e024      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f000 ff68 	bl	800e7b6 <process_FC5>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d8f0:	e01b      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 ffb8 	bl	800e868 <process_FC6>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d902:	e012      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	f000 ffe1 	bl	800e8cc <process_FC15>
 800d90a:	4603      	mov	r3, r0
 800d90c:	461a      	mov	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d914:	e009      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f001 f866 	bl	800e9e8 <process_FC16>
 800d91c:	4603      	mov	r3, r0
 800d91e:	461a      	mov	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800d926:	e000      	b.n	800d92a <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800d928:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	f7fc fcd1 	bl	800a2dc <xQueueGenericSend>

	 continue;
 800d93a:	e000      	b.n	800d93e <StartTaskModbusSlave+0x1c6>
    	continue;
 800d93c:	bf00      	nop
  {
 800d93e:	e721      	b.n	800d784 <StartTaskModbusSlave+0xc>

0800d940 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800d940:	b084      	sub	sp, #16
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	f107 001c 	add.w	r0, r7, #28
 800d94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d95c:	f04f 31ff 	mov.w	r1, #4294967295
 800d960:	4618      	mov	r0, r3
 800d962:	f7fc ff35 	bl	800a7d0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	7a1b      	ldrb	r3, [r3, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <SendQuery+0x32>
 800d96e:	23ff      	movs	r3, #255	; 0xff
 800d970:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <SendQuery+0x40>
 800d97c:	23fe      	movs	r3, #254	; 0xfe
 800d97e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800d980:	7f3b      	ldrb	r3, [r7, #28]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <SendQuery+0x4c>
 800d986:	7f3b      	ldrb	r3, [r7, #28]
 800d988:	2bf7      	cmp	r3, #247	; 0xf7
 800d98a:	d901      	bls.n	800d990 <SendQuery+0x50>
 800d98c:	23f7      	movs	r3, #247	; 0xf7
 800d98e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00e      	beq.n	800d9b4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800d996:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	f7fc fc97 	bl	800a2dc <xQueueGenericSend>
		 return error;
 800d9ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9b2:	e147      	b.n	800dc44 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800d9b4:	7f7b      	ldrb	r3, [r7, #29]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d008      	beq.n	800d9cc <SendQuery+0x8c>
 800d9ba:	7f7b      	ldrb	r3, [r7, #29]
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d005      	beq.n	800d9cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d9c0:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d002      	beq.n	800d9cc <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800d9c6:	7f7b      	ldrb	r3, [r7, #29]
 800d9c8:	2b0f      	cmp	r3, #15
 800d9ca:	d104      	bne.n	800d9d6 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800d9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800d9d4:	e00f      	b.n	800d9f6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d9d6:	7f7b      	ldrb	r3, [r7, #29]
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d008      	beq.n	800d9ee <SendQuery+0xae>
 800d9dc:	7f7b      	ldrb	r3, [r7, #29]
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d005      	beq.n	800d9ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d9e2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800d9e4:	2b06      	cmp	r3, #6
 800d9e6:	d002      	beq.n	800d9ee <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800d9e8:	7f7b      	ldrb	r3, [r7, #29]
 800d9ea:	2b10      	cmp	r3, #16
 800d9ec:	d103      	bne.n	800d9f6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800d9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800d9f6:	7f3a      	ldrb	r2, [r7, #28]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800d9fc:	7f7a      	ldrb	r2, [r7, #29]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800da02:	8bfb      	ldrh	r3, [r7, #30]
 800da04:	0a1b      	lsrs	r3, r3, #8
 800da06:	b29b      	uxth	r3, r3
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800da0e:	8bfb      	ldrh	r3, [r7, #30]
 800da10:	b2da      	uxtb	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800da16:	7f7b      	ldrb	r3, [r7, #29]
 800da18:	3b01      	subs	r3, #1
 800da1a:	2b0f      	cmp	r3, #15
 800da1c:	f200 80ff 	bhi.w	800dc1e <SendQuery+0x2de>
 800da20:	a201      	add	r2, pc, #4	; (adr r2, 800da28 <SendQuery+0xe8>)
 800da22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da26:	bf00      	nop
 800da28:	0800da69 	.word	0x0800da69
 800da2c:	0800da69 	.word	0x0800da69
 800da30:	0800da69 	.word	0x0800da69
 800da34:	0800da69 	.word	0x0800da69
 800da38:	0800da87 	.word	0x0800da87
 800da3c:	0800daa9 	.word	0x0800daa9
 800da40:	0800dc1f 	.word	0x0800dc1f
 800da44:	0800dc1f 	.word	0x0800dc1f
 800da48:	0800dc1f 	.word	0x0800dc1f
 800da4c:	0800dc1f 	.word	0x0800dc1f
 800da50:	0800dc1f 	.word	0x0800dc1f
 800da54:	0800dc1f 	.word	0x0800dc1f
 800da58:	0800dc1f 	.word	0x0800dc1f
 800da5c:	0800dc1f 	.word	0x0800dc1f
 800da60:	0800dacb 	.word	0x0800dacb
 800da64:	0800db89 	.word	0x0800db89
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800da68:	8c3b      	ldrh	r3, [r7, #32]
 800da6a:	0a1b      	lsrs	r3, r3, #8
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800da74:	8c3b      	ldrh	r3, [r7, #32]
 800da76:	b2da      	uxtb	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2206      	movs	r2, #6
 800da80:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800da84:	e0cb      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <SendQuery+0x152>
 800da8e:	22ff      	movs	r2, #255	; 0xff
 800da90:	e000      	b.n	800da94 <SendQuery+0x154>
 800da92:	2200      	movs	r2, #0
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2206      	movs	r2, #6
 800daa2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800daa6:	e0ba      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	881b      	ldrh	r3, [r3, #0]
 800daac:	0a1b      	lsrs	r3, r3, #8
 800daae:	b29b      	uxth	r3, r3
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2206      	movs	r2, #6
 800dac4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800dac8:	e0a9      	b.n	800dc1e <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800daca:	8c3b      	ldrh	r3, [r7, #32]
 800dacc:	091b      	lsrs	r3, r3, #4
 800dace:	b29b      	uxth	r3, r3
 800dad0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800dad2:	7a7b      	ldrb	r3, [r7, #9]
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800dad8:	8c3b      	ldrh	r3, [r7, #32]
 800dada:	f003 030f 	and.w	r3, r3, #15
 800dade:	b29b      	uxth	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d005      	beq.n	800daf0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	3301      	adds	r3, #1
 800dae8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800daea:	7a7b      	ldrb	r3, [r7, #9]
 800daec:	3301      	adds	r3, #1
 800daee:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800daf0:	8c3b      	ldrh	r3, [r7, #32]
 800daf2:	0a1b      	lsrs	r3, r3, #8
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dafc:	8c3b      	ldrh	r3, [r7, #32]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7bfa      	ldrb	r2, [r7, #15]
 800db08:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2207      	movs	r2, #7
 800db0e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800db12:	2300      	movs	r3, #0
 800db14:	81bb      	strh	r3, [r7, #12]
 800db16:	e031      	b.n	800db7c <SendQuery+0x23c>
	    {
	        if(i%2)
 800db18:	89bb      	ldrh	r3, [r7, #12]
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	b29b      	uxth	r3, r3
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00f      	beq.n	800db44 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800db24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db26:	89bb      	ldrh	r3, [r7, #12]
 800db28:	085b      	lsrs	r3, r3, #1
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	4413      	add	r3, r2
 800db30:	881a      	ldrh	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db38:	4619      	mov	r1, r3
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	440b      	add	r3, r1
 800db40:	74da      	strb	r2, [r3, #19]
 800db42:	e010      	b.n	800db66 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db46:	89bb      	ldrh	r3, [r7, #12]
 800db48:	085b      	lsrs	r3, r3, #1
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	005b      	lsls	r3, r3, #1
 800db4e:	4413      	add	r3, r2
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	0a1b      	lsrs	r3, r3, #8
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db5c:	4619      	mov	r1, r3
 800db5e:	b2d2      	uxtb	r2, r2
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	440b      	add	r3, r1
 800db64:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800db6c:	3301      	adds	r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800db76:	89bb      	ldrh	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	81bb      	strh	r3, [r7, #12]
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	b29b      	uxth	r3, r3
 800db80:	89ba      	ldrh	r2, [r7, #12]
 800db82:	429a      	cmp	r2, r3
 800db84:	d3c8      	bcc.n	800db18 <SendQuery+0x1d8>
	    }
	    break;
 800db86:	e04a      	b.n	800dc1e <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800db88:	8c3b      	ldrh	r3, [r7, #32]
 800db8a:	0a1b      	lsrs	r3, r3, #8
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800db94:	8c3b      	ldrh	r3, [r7, #32]
 800db96:	b2da      	uxtb	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800db9c:	8c3b      	ldrh	r3, [r7, #32]
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2207      	movs	r2, #7
 800dbac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	817b      	strh	r3, [r7, #10]
 800dbb4:	e02e      	b.n	800dc14 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800dbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb8:	897b      	ldrh	r3, [r7, #10]
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	0a1b      	lsrs	r3, r3, #8
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbca:	4619      	mov	r1, r3
 800dbcc:	b2d2      	uxtb	r2, r2
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	440b      	add	r3, r1
 800dbd2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbda:	3301      	adds	r3, #1
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800dbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe6:	897b      	ldrh	r3, [r7, #10]
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	4413      	add	r3, r2
 800dbec:	881a      	ldrh	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	440b      	add	r3, r1
 800dbfc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc04:	3301      	adds	r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800dc0e:	897b      	ldrh	r3, [r7, #10]
 800dc10:	3301      	adds	r3, #1
 800dc12:	817b      	strh	r3, [r7, #10]
 800dc14:	8c3b      	ldrh	r3, [r7, #32]
 800dc16:	897a      	ldrh	r2, [r7, #10]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d3cc      	bcc.n	800dbb6 <SendQuery+0x276>
	    }
	    break;
 800dc1c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fbf3 	bl	800e40a <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	2100      	movs	r1, #0
 800dc30:	f7fc fb54 	bl	800a2dc <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	749a      	strb	r2, [r3, #18]
	return 0;
 800dc42:	2300      	movs	r3, #0


}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc4e:	b004      	add	sp, #16
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop

0800dc54 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08c      	sub	sp, #48	; 0x30
 800dc58:	af02      	add	r7, sp, #8
 800dc5a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc66:	f107 010c 	add.w	r1, r7, #12
 800dc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fc fcce 	bl	800a610 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	f107 030c 	add.w	r3, r7, #12
 800dc7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc80:	f7ff fe5e 	bl	800d940 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dc84:	f04f 31ff 	mov.w	r1, #4294967295
 800dc88:	2001      	movs	r0, #1
 800dc8a:	f7fe f83b 	bl	800bd04 <ulTaskNotifyTake>
 800dc8e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	2200      	movs	r2, #0
 800dc94:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d018      	beq.n	800dcce <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	22f8      	movs	r2, #248	; 0xf8
 800dca8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dcba:	69b8      	ldr	r0, [r7, #24]
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2203      	movs	r2, #3
 800dcc8:	f7fe f8be 	bl	800be48 <xTaskGenericNotify>
    	  continue;
 800dccc:	e09a      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcd0:	f000 f98e 	bl	800dff0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dcda:	2b05      	cmp	r3, #5
 800dcdc:	d818      	bhi.n	800dd10 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	22fa      	movs	r2, #250	; 0xfa
 800dcea:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dcfc:	69b8      	ldr	r0, [r7, #24]
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd04:	4619      	mov	r1, r3
 800dd06:	2300      	movs	r3, #0
 800dd08:	2203      	movs	r2, #3
 800dd0a:	f7fe f89d 	bl	800be48 <xTaskGenericNotify>
		  continue;
 800dd0e:	e079      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800dd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd12:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800dd16:	2300      	movs	r3, #0
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2103      	movs	r1, #3
 800dd20:	f7fe fb5c 	bl	800c3dc <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800dd24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd26:	f000 f8f5 	bl	800df14 <validateAnswer>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800dd2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d010      	beq.n	800dd58 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd40:	7ffa      	ldrb	r2, [r7, #31]
 800dd42:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800dd44:	69b8      	ldr	r0, [r7, #24]
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2203      	movs	r2, #3
 800dd52:	f7fe f879 	bl	800be48 <xTaskGenericNotify>
	     continue;
 800dd56:	e055      	b.n	800de04 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5a:	7ffa      	ldrb	r2, [r7, #31]
 800dd5c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dd64:	f04f 31ff 	mov.w	r1, #4294967295
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fc fd31 	bl	800a7d0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	7d1b      	ldrb	r3, [r3, #20]
 800dd72:	3b01      	subs	r3, #1
 800dd74:	2b0f      	cmp	r3, #15
 800dd76:	d82b      	bhi.n	800ddd0 <StartTaskModbusMaster+0x17c>
 800dd78:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <StartTaskModbusMaster+0x12c>)
 800dd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7e:	bf00      	nop
 800dd80:	0800ddc1 	.word	0x0800ddc1
 800dd84:	0800ddc1 	.word	0x0800ddc1
 800dd88:	0800ddc9 	.word	0x0800ddc9
 800dd8c:	0800ddc9 	.word	0x0800ddc9
 800dd90:	0800ddd1 	.word	0x0800ddd1
 800dd94:	0800ddd1 	.word	0x0800ddd1
 800dd98:	0800ddd1 	.word	0x0800ddd1
 800dd9c:	0800ddd1 	.word	0x0800ddd1
 800dda0:	0800ddd1 	.word	0x0800ddd1
 800dda4:	0800ddd1 	.word	0x0800ddd1
 800dda8:	0800ddd1 	.word	0x0800ddd1
 800ddac:	0800ddd1 	.word	0x0800ddd1
 800ddb0:	0800ddd1 	.word	0x0800ddd1
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd1 	.word	0x0800ddd1
 800ddbc:	0800ddd1 	.word	0x0800ddd1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800ddc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc2:	f000 f821 	bl	800de08 <get_FC1>
	      break;
 800ddc6:	e004      	b.n	800ddd2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800ddc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddca:	f000 f874 	bl	800deb6 <get_FC3>
	      break;
 800ddce:	e000      	b.n	800ddd2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800ddd0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10e      	bne.n	800de02 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800ddea:	2300      	movs	r3, #0
 800ddec:	2200      	movs	r2, #0
 800ddee:	2100      	movs	r1, #0
 800ddf0:	f7fc fa74 	bl	800a2dc <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800ddf4:	69b8      	ldr	r0, [r7, #24]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2203      	movs	r2, #3
 800ddfa:	f06f 010a 	mvn.w	r1, #10
 800ddfe:	f7fe f823 	bl	800be48 <xTaskGenericNotify>
	  }


	  continue;
 800de02:	bf00      	nop
  {
 800de04:	e72c      	b.n	800dc60 <StartTaskModbusMaster+0xc>
 800de06:	bf00      	nop

0800de08 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800de10:	2303      	movs	r3, #3
 800de12:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800de14:	2300      	movs	r3, #0
 800de16:	73fb      	strb	r3, [r7, #15]
 800de18:	e043      	b.n	800dea2 <get_FC1+0x9a>

        if(i%2)
 800de1a:	7bfb      	ldrb	r3, [r7, #15]
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d01c      	beq.n	800de60 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800de26:	7bfa      	ldrb	r2, [r7, #15]
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	4413      	add	r3, r2
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	7cd8      	ldrb	r0, [r3, #19]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de38:	7bfb      	ldrb	r3, [r7, #15]
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	4413      	add	r3, r2
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	b2d9      	uxtb	r1, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	085b      	lsrs	r3, r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	18d4      	adds	r4, r2, r3
 800de56:	f000 fa5f 	bl	800e318 <word>
 800de5a:	4603      	mov	r3, r0
 800de5c:	8023      	strh	r3, [r4, #0]
 800de5e:	e01d      	b.n	800de9c <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	085b      	lsrs	r3, r3, #1
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	0a1b      	lsrs	r3, r3, #8
 800de74:	b29b      	uxth	r3, r3
 800de76:	b2d8      	uxtb	r0, r3
 800de78:	7bfa      	ldrb	r2, [r7, #15]
 800de7a:	7bbb      	ldrb	r3, [r7, #14]
 800de7c:	4413      	add	r3, r2
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	7cd9      	ldrb	r1, [r3, #19]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	085b      	lsrs	r3, r3, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	18d4      	adds	r4, r2, r3
 800de94:	f000 fa40 	bl	800e318 <word>
 800de98:	4603      	mov	r3, r0
 800de9a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	3301      	adds	r3, #1
 800dea0:	73fb      	strb	r3, [r7, #15]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	7d5b      	ldrb	r3, [r3, #21]
 800dea6:	7bfa      	ldrb	r2, [r7, #15]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d3b6      	bcc.n	800de1a <get_FC1+0x12>
        }

     }
}
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	3714      	adds	r7, #20
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd90      	pop	{r4, r7, pc}

0800deb6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800deb6:	b590      	push	{r4, r7, lr}
 800deb8:	b085      	sub	sp, #20
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800debe:	2303      	movs	r3, #3
 800dec0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800dec2:	2300      	movs	r3, #0
 800dec4:	73bb      	strb	r3, [r7, #14]
 800dec6:	e018      	b.n	800defa <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	4413      	add	r3, r2
 800dece:	7cd8      	ldrb	r0, [r3, #19]
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
 800ded2:	3301      	adds	r3, #1
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	4413      	add	r3, r2
 800ded8:	7cd9      	ldrb	r1, [r3, #19]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	18d4      	adds	r4, r2, r3
 800dee6:	f000 fa17 	bl	800e318 <word>
 800deea:	4603      	mov	r3, r0
 800deec:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	3302      	adds	r3, #2
 800def2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	3301      	adds	r3, #1
 800def8:	73bb      	strb	r3, [r7, #14]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7d5b      	ldrb	r3, [r3, #21]
 800defe:	085b      	lsrs	r3, r3, #1
 800df00:	b2db      	uxtb	r3, r3
 800df02:	7bba      	ldrb	r2, [r7, #14]
 800df04:	429a      	cmp	r2, r3
 800df06:	d3df      	bcc.n	800dec8 <get_FC3+0x12>
    }
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd90      	pop	{r4, r7, pc}
	...

0800df14 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df22:	3b02      	subs	r3, #2
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	4413      	add	r3, r2
 800df28:	7cdb      	ldrb	r3, [r3, #19]
 800df2a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800df2c:	b21a      	sxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df34:	3b01      	subs	r3, #1
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	440b      	add	r3, r1
 800df3a:	7cdb      	ldrb	r3, [r3, #19]
 800df3c:	b21b      	sxth	r3, r3
 800df3e:	4313      	orrs	r3, r2
 800df40:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800df42:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f103 0213 	add.w	r2, r3, #19
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800df50:	3b02      	subs	r3, #2
 800df52:	b2db      	uxtb	r3, r3
 800df54:	4619      	mov	r1, r3
 800df56:	4610      	mov	r0, r2
 800df58:	f000 f9f1 	bl	800e33e <calcCRC>
 800df5c:	4603      	mov	r3, r0
 800df5e:	461a      	mov	r2, r3
 800df60:	89bb      	ldrh	r3, [r7, #12]
 800df62:	4293      	cmp	r3, r2
 800df64:	d009      	beq.n	800df7a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800df6c:	3301      	adds	r3, #1
 800df6e:	b29a      	uxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800df76:	23fc      	movs	r3, #252	; 0xfc
 800df78:	e034      	b.n	800dfe4 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7d1b      	ldrb	r3, [r3, #20]
 800df7e:	b25b      	sxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	da09      	bge.n	800df98 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800df8a:	3301      	adds	r3, #1
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800df94:	23fb      	movs	r3, #251	; 0xfb
 800df96:	e025      	b.n	800dfe4 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800df9c:	2300      	movs	r3, #0
 800df9e:	73bb      	strb	r3, [r7, #14]
 800dfa0:	e00c      	b.n	800dfbc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	4a11      	ldr	r2, [pc, #68]	; (800dfec <validateAnswer+0xd8>)
 800dfa6:	5cd2      	ldrb	r2, [r2, r3]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7d1b      	ldrb	r3, [r3, #20]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d102      	bne.n	800dfb6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	73fb      	strb	r3, [r7, #15]
            break;
 800dfb4:	e005      	b.n	800dfc2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800dfb6:	7bbb      	ldrb	r3, [r7, #14]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	73bb      	strb	r3, [r7, #14]
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	2b07      	cmp	r3, #7
 800dfc0:	d9ef      	bls.n	800dfa2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	f083 0301 	eor.w	r3, r3, #1
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d009      	beq.n	800dfe2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e000      	b.n	800dfe4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	0800f0e4 	.word	0x0800f0e4

0800dff0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d104      	bne.n	800e00c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	4618      	mov	r0, r3
 800e008:	f7f8 fd40 	bl	8006a8c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e012:	2b00      	cmp	r3, #0
 800e014:	d008      	beq.n	800e028 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	33d0      	adds	r3, #208	; 0xd0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff f9eb 	bl	800d3f6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e020:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e024:	81fb      	strh	r3, [r7, #14]
 800e026:	e019      	b.n	800e05c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3313      	adds	r3, #19
 800e032:	4619      	mov	r1, r3
 800e034:	4610      	mov	r0, r2
 800e036:	f7ff f978 	bl	800d32a <RingGetAllBytes>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e04a:	3301      	adds	r3, #1
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e05a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e062:	2b01      	cmp	r3, #1
 800e064:	d107      	bne.n	800e076 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6858      	ldr	r0, [r3, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	33b8      	adds	r3, #184	; 0xb8
 800e06e:	2201      	movs	r2, #1
 800e070:	4619      	mov	r1, r3
 800e072:	f7f8 fba9 	bl	80067c8 <HAL_UART_Receive_IT>
	}

    return i16result;
 800e076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
	...

0800e084 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e092:	3b02      	subs	r3, #2
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	4413      	add	r3, r2
 800e098:	7cdb      	ldrb	r3, [r3, #19]
 800e09a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e09c:	b21a      	sxth	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	440b      	add	r3, r1
 800e0aa:	7cdb      	ldrb	r3, [r3, #19]
 800e0ac:	b21b      	sxth	r3, r3
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e0b2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f103 0213 	add.w	r2, r3, #19
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0c0:	3b02      	subs	r3, #2
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f000 f939 	bl	800e33e <calcCRC>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	893b      	ldrh	r3, [r7, #8]
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d009      	beq.n	800e0ea <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e0dc:	3301      	adds	r3, #1
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e0e6:	23fc      	movs	r3, #252	; 0xfc
 800e0e8:	e10f      	b.n	800e30a <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	73bb      	strb	r3, [r7, #14]
 800e0f2:	e00c      	b.n	800e10e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	4a87      	ldr	r2, [pc, #540]	; (800e314 <validateRequest+0x290>)
 800e0f8:	5cd2      	ldrb	r2, [r2, r3]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	7d1b      	ldrb	r3, [r3, #20]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d102      	bne.n	800e108 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e102:	2301      	movs	r3, #1
 800e104:	73fb      	strb	r3, [r7, #15]
	            break;
 800e106:	e005      	b.n	800e114 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e108:	7bbb      	ldrb	r3, [r7, #14]
 800e10a:	3301      	adds	r3, #1
 800e10c:	73bb      	strb	r3, [r7, #14]
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	2b07      	cmp	r3, #7
 800e112:	d9ef      	bls.n	800e0f4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	f083 0301 	eor.w	r3, r3, #1
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e126:	3301      	adds	r3, #1
 800e128:	b29a      	uxth	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e130:	2301      	movs	r3, #1
 800e132:	e0ea      	b.n	800e30a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e134:	2300      	movs	r3, #0
 800e136:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7d1b      	ldrb	r3, [r3, #20]
 800e140:	3b01      	subs	r3, #1
 800e142:	2b0f      	cmp	r3, #15
 800e144:	f200 80e0 	bhi.w	800e308 <validateRequest+0x284>
 800e148:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <validateRequest+0xcc>)
 800e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14e:	bf00      	nop
 800e150:	0800e191 	.word	0x0800e191
 800e154:	0800e191 	.word	0x0800e191
 800e158:	0800e2a9 	.word	0x0800e2a9
 800e15c:	0800e2a9 	.word	0x0800e2a9
 800e160:	0800e23d 	.word	0x0800e23d
 800e164:	0800e285 	.word	0x0800e285
 800e168:	0800e309 	.word	0x0800e309
 800e16c:	0800e309 	.word	0x0800e309
 800e170:	0800e309 	.word	0x0800e309
 800e174:	0800e309 	.word	0x0800e309
 800e178:	0800e309 	.word	0x0800e309
 800e17c:	0800e309 	.word	0x0800e309
 800e180:	0800e309 	.word	0x0800e309
 800e184:	0800e309 	.word	0x0800e309
 800e188:	0800e191 	.word	0x0800e191
 800e18c:	0800e2a9 	.word	0x0800e2a9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7d5a      	ldrb	r2, [r3, #21]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7d9b      	ldrb	r3, [r3, #22]
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f000 f8bc 	bl	800e318 <word>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	091b      	lsrs	r3, r3, #4
 800e1a4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	7dda      	ldrb	r2, [r3, #23]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7e1b      	ldrb	r3, [r3, #24]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f000 f8b1 	bl	800e318 <word>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	091b      	lsrs	r3, r3, #4
 800e1ba:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7dda      	ldrb	r2, [r3, #23]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7e1b      	ldrb	r3, [r3, #24]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	f000 f8a6 	bl	800e318 <word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	f003 030f 	and.w	r3, r3, #15
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <validateRequest+0x15a>
 800e1d8:	897b      	ldrh	r3, [r7, #10]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e1de:	89ba      	ldrh	r2, [r7, #12]
 800e1e0:	897b      	ldrh	r3, [r7, #10]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	dd01      	ble.n	800e1f2 <validateRequest+0x16e>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e08b      	b.n	800e30a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7dda      	ldrb	r2, [r3, #23]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	7e1b      	ldrb	r3, [r3, #24]
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f000 f88b 	bl	800e318 <word>
 800e202:	4603      	mov	r3, r0
 800e204:	08db      	lsrs	r3, r3, #3
 800e206:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7dda      	ldrb	r2, [r3, #23]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7e1b      	ldrb	r3, [r3, #24]
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f000 f880 	bl	800e318 <word>
 800e218:	4603      	mov	r3, r0
 800e21a:	f003 0307 	and.w	r3, r3, #7
 800e21e:	b29b      	uxth	r3, r3
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <validateRequest+0x1a6>
 800e224:	897b      	ldrh	r3, [r7, #10]
 800e226:	3301      	adds	r3, #1
 800e228:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e22a:	897b      	ldrh	r3, [r7, #10]
 800e22c:	3305      	adds	r3, #5
 800e22e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e230:	897b      	ldrh	r3, [r7, #10]
 800e232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e236:	d960      	bls.n	800e2fa <validateRequest+0x276>
 800e238:	2303      	movs	r3, #3
 800e23a:	e066      	b.n	800e30a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7d5a      	ldrb	r2, [r3, #21]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	7d9b      	ldrb	r3, [r3, #22]
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f000 f866 	bl	800e318 <word>
 800e24c:	4603      	mov	r3, r0
 800e24e:	091b      	lsrs	r3, r3, #4
 800e250:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	7d5a      	ldrb	r2, [r3, #21]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7d9b      	ldrb	r3, [r3, #22]
 800e25a:	4619      	mov	r1, r3
 800e25c:	4610      	mov	r0, r2
 800e25e:	f000 f85b 	bl	800e318 <word>
 800e262:	4603      	mov	r3, r0
 800e264:	f003 030f 	and.w	r3, r3, #15
 800e268:	b29b      	uxth	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <validateRequest+0x1f0>
 800e26e:	89bb      	ldrh	r3, [r7, #12]
 800e270:	3301      	adds	r3, #1
 800e272:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e27a:	89ba      	ldrh	r2, [r7, #12]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d93e      	bls.n	800e2fe <validateRequest+0x27a>
 800e280:	2302      	movs	r3, #2
 800e282:	e042      	b.n	800e30a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7d5a      	ldrb	r2, [r3, #21]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7d9b      	ldrb	r3, [r3, #22]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	f000 f842 	bl	800e318 <word>
 800e294:	4603      	mov	r3, r0
 800e296:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e29e:	89ba      	ldrh	r2, [r7, #12]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d92e      	bls.n	800e302 <validateRequest+0x27e>
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	e030      	b.n	800e30a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	7d5a      	ldrb	r2, [r3, #21]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	7d9b      	ldrb	r3, [r3, #22]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f000 f830 	bl	800e318 <word>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7dda      	ldrb	r2, [r3, #23]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7e1b      	ldrb	r3, [r3, #24]
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	f000 f826 	bl	800e318 <word>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e2d0:	89ba      	ldrh	r2, [r7, #12]
 800e2d2:	897b      	ldrh	r3, [r7, #10]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	dd01      	ble.n	800e2e4 <validateRequest+0x260>
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	e012      	b.n	800e30a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e2e4:	897b      	ldrh	r3, [r7, #10]
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	3305      	adds	r3, #5
 800e2ec:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e2ee:	897b      	ldrh	r3, [r7, #10]
 800e2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2f4:	d907      	bls.n	800e306 <validateRequest+0x282>
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e007      	b.n	800e30a <validateRequest+0x286>
	        break;
 800e2fa:	bf00      	nop
 800e2fc:	e004      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e2fe:	bf00      	nop
 800e300:	e002      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e302:	bf00      	nop
 800e304:	e000      	b.n	800e308 <validateRequest+0x284>
	        break;
 800e306:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e308:	2300      	movs	r3, #0

}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0800f0e4 	.word	0x0800f0e4

0800e318 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	460a      	mov	r2, r1
 800e322:	71fb      	strb	r3, [r7, #7]
 800e324:	4613      	mov	r3, r2
 800e326:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e328:	79bb      	ldrb	r3, [r7, #6]
 800e32a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e32c:	79fb      	ldrb	r3, [r7, #7]
 800e32e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e330:	89bb      	ldrh	r3, [r7, #12]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e33e:	b480      	push	{r7}
 800e340:	b087      	sub	sp, #28
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e34a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e34e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e350:	2300      	movs	r3, #0
 800e352:	74fb      	strb	r3, [r7, #19]
 800e354:	e023      	b.n	800e39e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e356:	7cfb      	ldrb	r3, [r7, #19]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	4413      	add	r3, r2
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	4053      	eors	r3, r2
 800e364:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e366:	2301      	movs	r3, #1
 800e368:	74bb      	strb	r3, [r7, #18]
 800e36a:	e012      	b.n	800e392 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	085b      	lsrs	r3, r3, #1
 800e378:	617b      	str	r3, [r7, #20]
            if (flag)
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d005      	beq.n	800e38c <calcCRC+0x4e>
                temp ^= 0xA001;
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e386:	f083 0301 	eor.w	r3, r3, #1
 800e38a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e38c:	7cbb      	ldrb	r3, [r7, #18]
 800e38e:	3301      	adds	r3, #1
 800e390:	74bb      	strb	r3, [r7, #18]
 800e392:	7cbb      	ldrb	r3, [r7, #18]
 800e394:	2b08      	cmp	r3, #8
 800e396:	d9e9      	bls.n	800e36c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e398:	7cfb      	ldrb	r3, [r7, #19]
 800e39a:	3301      	adds	r3, #1
 800e39c:	74fb      	strb	r3, [r7, #19]
 800e39e:	7cfa      	ldrb	r2, [r7, #19]
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d3d7      	bcc.n	800e356 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	021b      	lsls	r3, r3, #8
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	b29b      	uxth	r3, r3

}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	371c      	adds	r7, #28
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	6039      	str	r1, [r7, #0]
 800e3d6:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	7d1b      	ldrb	r3, [r3, #20]
 800e3dc:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	7a1a      	ldrb	r2, [r3, #8]
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	3b80      	subs	r3, #128	; 0x80
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	79fa      	ldrb	r2, [r7, #7]
 800e3f4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2203      	movs	r2, #3
 800e3fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e3fe:	bf00      	nop
 800e400:	3714      	adds	r7, #20
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e40a:	b590      	push	{r4, r7, lr}
 800e40c:	b087      	sub	sp, #28
 800e40e:	af02      	add	r7, sp, #8
 800e410:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 0213 	add.w	r2, r3, #19
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e41e:	4619      	mov	r1, r3
 800e420:	4610      	mov	r0, r2
 800e422:	f7ff ff8c 	bl	800e33e <calcCRC>
 800e426:	4603      	mov	r3, r0
 800e428:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	0a1b      	lsrs	r3, r3, #8
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e436:	4619      	mov	r1, r3
 800e438:	b2d2      	uxtb	r2, r2
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	440b      	add	r3, r1
 800e43e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e446:	3301      	adds	r3, #1
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e456:	4619      	mov	r1, r3
 800e458:	89fb      	ldrh	r3, [r7, #14]
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	440b      	add	r3, r1
 800e460:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e468:	3301      	adds	r3, #1
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00c      	beq.n	800e494 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f8 ff14 	bl	80072ac <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68d8      	ldr	r0, [r3, #12]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8a1b      	ldrh	r3, [r3, #16]
 800e48c:	2201      	movs	r2, #1
 800e48e:	4619      	mov	r1, r3
 800e490:	f7f5 fdb4 	bl	8003ffc <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d10c      	bne.n	800e4b8 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6858      	ldr	r0, [r3, #4]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f103 0113 	add.w	r1, r3, #19
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f7f8 f8f5 	bl	80066a0 <HAL_UART_Transmit_IT>
 800e4b6:	e00b      	b.n	800e4d0 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6858      	ldr	r0, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f103 0113 	add.w	r1, r3, #19
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f7f8 f9c8 	bl	8006860 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e4d0:	21fa      	movs	r1, #250	; 0xfa
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	f7fd fc16 	bl	800bd04 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e4d8:	bf00      	nop
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0f7      	beq.n	800e4da <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68d8      	ldr	r0, [r3, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8a1b      	ldrh	r3, [r3, #16]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	f7f5 fd7d 	bl	8003ffc <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4618      	mov	r0, r3
 800e508:	f7f8 ff24 	bl	8007354 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	2b04      	cmp	r3, #4
 800e512:	d10c      	bne.n	800e52e <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e51a:	f7fc ff21 	bl	800b360 <xTaskGetTickCount>
 800e51e:	4602      	mov	r2, r0
 800e520:	2300      	movs	r3, #0
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	2300      	movs	r3, #0
 800e526:	2102      	movs	r1, #2
 800e528:	4620      	mov	r0, r4
 800e52a:	f7fd ff57 	bl	800c3dc <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e53c:	3301      	adds	r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800e546:	bf00      	nop
 800e548:	3714      	adds	r7, #20
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd90      	pop	{r4, r7, pc}

0800e54e <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b088      	sub	sp, #32
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	460b      	mov	r3, r1
 800e558:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7d5a      	ldrb	r2, [r3, #21]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7d9b      	ldrb	r3, [r3, #22]
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7ff fed7 	bl	800e318 <word>
 800e56a:	4603      	mov	r3, r0
 800e56c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7dda      	ldrb	r2, [r3, #23]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7e1b      	ldrb	r3, [r3, #24]
 800e576:	4619      	mov	r1, r3
 800e578:	4610      	mov	r0, r2
 800e57a:	f7ff fecd 	bl	800e318 <word>
 800e57e:	4603      	mov	r3, r0
 800e580:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800e582:	8abb      	ldrh	r3, [r7, #20]
 800e584:	08db      	lsrs	r3, r3, #3
 800e586:	b29b      	uxth	r3, r3
 800e588:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800e58a:	8abb      	ldrh	r3, [r7, #20]
 800e58c:	f003 0307 	and.w	r3, r3, #7
 800e590:	b29b      	uxth	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <process_FC1+0x4e>
 800e596:	7ffb      	ldrb	r3, [r7, #31]
 800e598:	3301      	adds	r3, #1
 800e59a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	7ffa      	ldrb	r2, [r7, #31]
 800e5a0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	7ffb      	ldrb	r3, [r7, #31]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	2200      	movs	r2, #0
 800e5be:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800e5c4:	78fb      	ldrb	r3, [r7, #3]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d103      	bne.n	800e5d2 <process_FC1+0x84>
    	u16regs = modH->u16regsCoils;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5d0:	61bb      	str	r3, [r7, #24]
    }


    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	83bb      	strh	r3, [r7, #28]
 800e5d6:	e056      	b.n	800e686 <process_FC1+0x138>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800e5d8:	8afa      	ldrh	r2, [r7, #22]
 800e5da:	8bbb      	ldrh	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800e5e0:	8a3b      	ldrh	r3, [r7, #16]
 800e5e2:	091b      	lsrs	r3, r3, #4
 800e5e4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e5e6:	8a3b      	ldrh	r3, [r7, #16]
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	f003 030f 	and.w	r3, r3, #15
 800e5ee:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800e5f0:	89fb      	ldrh	r3, [r7, #14]
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	69ba      	ldr	r2, [r7, #24]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	7b7b      	ldrb	r3, [r7, #13]
 800e5fe:	fa42 f303 	asr.w	r3, r2, r3
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d014      	beq.n	800e634 <process_FC1+0xe6>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e610:	461a      	mov	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4413      	add	r3, r2
 800e616:	7cda      	ldrb	r2, [r3, #19]
 800e618:	7fbb      	ldrb	r3, [r7, #30]
 800e61a:	2101      	movs	r1, #1
 800e61c:	fa01 f303 	lsl.w	r3, r1, r3
 800e620:	b2db      	uxtb	r3, r3
 800e622:	6879      	ldr	r1, [r7, #4]
 800e624:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e628:	4313      	orrs	r3, r2
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	440b      	add	r3, r1
 800e630:	74da      	strb	r2, [r3, #19]
 800e632:	e015      	b.n	800e660 <process_FC1+0x112>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e63a:	461a      	mov	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4413      	add	r3, r2
 800e640:	7cda      	ldrb	r2, [r3, #19]
 800e642:	7fbb      	ldrb	r3, [r7, #30]
 800e644:	2101      	movs	r1, #1
 800e646:	fa01 f303 	lsl.w	r3, r1, r3
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	43db      	mvns	r3, r3
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800e656:	4013      	ands	r3, r2
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	440b      	add	r3, r1
 800e65e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800e660:	7fbb      	ldrb	r3, [r7, #30]
 800e662:	3301      	adds	r3, #1
 800e664:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800e666:	7fbb      	ldrb	r3, [r7, #30]
 800e668:	2b07      	cmp	r3, #7
 800e66a:	d909      	bls.n	800e680 <process_FC1+0x132>
        {
            u8bitsno = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e676:	3301      	adds	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e680:	8bbb      	ldrh	r3, [r7, #28]
 800e682:	3301      	adds	r3, #1
 800e684:	83bb      	strh	r3, [r7, #28]
 800e686:	8bba      	ldrh	r2, [r7, #28]
 800e688:	8abb      	ldrh	r3, [r7, #20]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d3a4      	bcc.n	800e5d8 <process_FC1+0x8a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800e68e:	8abb      	ldrh	r3, [r7, #20]
 800e690:	f003 0307 	and.w	r3, r3, #7
 800e694:	b29b      	uxth	r3, r3
 800e696:	2b00      	cmp	r3, #0
 800e698:	d007      	beq.n	800e6aa <process_FC1+0x15c>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	b2da      	uxtb	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e6b0:	3302      	adds	r3, #2
 800e6b2:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff fea8 	bl	800e40a <sendTxBuffer>
    return u8CopyBufferSize;
 800e6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3720      	adds	r7, #32
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b086      	sub	sp, #24
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7d5a      	ldrb	r2, [r3, #21]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7d9b      	ldrb	r3, [r3, #22]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4610      	mov	r0, r2
 800e6de:	f7ff fe1b 	bl	800e318 <word>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	7dda      	ldrb	r2, [r3, #23]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	7e1b      	ldrb	r3, [r3, #24]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	f7ff fe11 	bl	800e318 <word>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800e6fa:	7b7b      	ldrb	r3, [r7, #13]
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2203      	movs	r2, #3
 800e708:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d104      	bne.n	800e71c <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e718:	613b      	str	r3, [r7, #16]
 800e71a:	e006      	b.n	800e72a <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	2b04      	cmp	r3, #4
 800e720:	d103      	bne.n	800e72a <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e728:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	82fb      	strh	r3, [r7, #22]
 800e72e:	e02e      	b.n	800e78e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800e730:	8afb      	ldrh	r3, [r7, #22]
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	4413      	add	r3, r2
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	0a1b      	lsrs	r3, r3, #8
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e744:	4619      	mov	r1, r3
 800e746:	b2d2      	uxtb	r2, r2
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	440b      	add	r3, r1
 800e74c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e754:	3301      	adds	r3, #1
 800e756:	b2da      	uxtb	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800e75e:	8afb      	ldrh	r3, [r7, #22]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	4413      	add	r3, r2
 800e766:	881a      	ldrh	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e76e:	4619      	mov	r1, r3
 800e770:	b2d2      	uxtb	r2, r2
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	440b      	add	r3, r1
 800e776:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e77e:	3301      	adds	r3, #1
 800e780:	b2da      	uxtb	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800e788:	8afb      	ldrh	r3, [r7, #22]
 800e78a:	3301      	adds	r3, #1
 800e78c:	82fb      	strh	r3, [r7, #22]
 800e78e:	8afa      	ldrh	r2, [r7, #22]
 800e790:	89f9      	ldrh	r1, [r7, #14]
 800e792:	7b7b      	ldrb	r3, [r7, #13]
 800e794:	440b      	add	r3, r1
 800e796:	429a      	cmp	r2, r3
 800e798:	dbca      	blt.n	800e730 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff fe30 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e7aa:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	7d5a      	ldrb	r2, [r3, #21]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7d9b      	ldrb	r3, [r3, #22]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff fda5 	bl	800e318 <word>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800e7d2:	89fb      	ldrh	r3, [r7, #14]
 800e7d4:	091b      	lsrs	r3, r3, #4
 800e7d6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800e7d8:	89fb      	ldrh	r3, [r7, #14]
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	7ddb      	ldrb	r3, [r3, #23]
 800e7e6:	2bff      	cmp	r3, #255	; 0xff
 800e7e8:	d115      	bne.n	800e816 <process_FC5+0x60>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e7f0:	89bb      	ldrh	r3, [r7, #12]
 800e7f2:	005b      	lsls	r3, r3, #1
 800e7f4:	4413      	add	r3, r2
 800e7f6:	8819      	ldrh	r1, [r3, #0]
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e800:	b29a      	uxth	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e808:	89bb      	ldrh	r3, [r7, #12]
 800e80a:	005b      	lsls	r3, r3, #1
 800e80c:	4403      	add	r3, r0
 800e80e:	430a      	orrs	r2, r1
 800e810:	b292      	uxth	r2, r2
 800e812:	801a      	strh	r2, [r3, #0]
 800e814:	e016      	b.n	800e844 <process_FC5+0x8e>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e81c:	89bb      	ldrh	r3, [r7, #12]
 800e81e:	005b      	lsls	r3, r3, #1
 800e820:	4413      	add	r3, r2
 800e822:	8819      	ldrh	r1, [r3, #0]
 800e824:	7afb      	ldrb	r3, [r7, #11]
 800e826:	2201      	movs	r2, #1
 800e828:	fa02 f303 	lsl.w	r3, r2, r3
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	43db      	mvns	r3, r3
 800e830:	b29a      	uxth	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e838:	89bb      	ldrh	r3, [r7, #12]
 800e83a:	005b      	lsls	r3, r3, #1
 800e83c:	4403      	add	r3, r0
 800e83e:	400a      	ands	r2, r1
 800e840:	b292      	uxth	r2, r2
 800e842:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2206      	movs	r2, #6
 800e848:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e852:	3302      	adds	r3, #2
 800e854:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fdd7 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e85c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	7d5a      	ldrb	r2, [r3, #21]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7d9b      	ldrb	r3, [r3, #22]
 800e878:	4619      	mov	r1, r3
 800e87a:	4610      	mov	r0, r2
 800e87c:	f7ff fd4c 	bl	800e318 <word>
 800e880:	4603      	mov	r3, r0
 800e882:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7dda      	ldrb	r2, [r3, #23]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	7e1b      	ldrb	r3, [r3, #24]
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7ff fd42 	bl	800e318 <word>
 800e894:	4603      	mov	r3, r0
 800e896:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e89e:	89fb      	ldrh	r3, [r7, #14]
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	4413      	add	r3, r2
 800e8a4:	89ba      	ldrh	r2, [r7, #12]
 800e8a6:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2206      	movs	r2, #6
 800e8ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8b6:	3302      	adds	r3, #2
 800e8b8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fda5 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800e8c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7d5a      	ldrb	r2, [r3, #21]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	7d9b      	ldrb	r3, [r3, #22]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f7ff fd1a 	bl	800e318 <word>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	7dda      	ldrb	r2, [r3, #23]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	7e1b      	ldrb	r3, [r3, #24]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	f7ff fd10 	bl	800e318 <word>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800e900:	2307      	movs	r3, #7
 800e902:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e904:	2300      	movs	r3, #0
 800e906:	82bb      	strh	r3, [r7, #20]
 800e908:	e058      	b.n	800e9bc <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800e90a:	8a7a      	ldrh	r2, [r7, #18]
 800e90c:	8abb      	ldrh	r3, [r7, #20]
 800e90e:	4413      	add	r3, r2
 800e910:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800e912:	89bb      	ldrh	r3, [r7, #12]
 800e914:	091b      	lsrs	r3, r3, #4
 800e916:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800e918:	89bb      	ldrh	r3, [r7, #12]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	f003 030f 	and.w	r3, r3, #15
 800e920:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	4413      	add	r3, r2
 800e928:	7cdb      	ldrb	r3, [r3, #19]
 800e92a:	461a      	mov	r2, r3
 800e92c:	7dbb      	ldrb	r3, [r7, #22]
 800e92e:	fa42 f303 	asr.w	r3, r2, r3
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	bf14      	ite	ne
 800e93a:	2301      	movne	r3, #1
 800e93c:	2300      	moveq	r3, #0
 800e93e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800e940:	7a3b      	ldrb	r3, [r7, #8]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d015      	beq.n	800e972 <process_FC15+0xa6>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e94c:	897b      	ldrh	r3, [r7, #10]
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	8819      	ldrh	r1, [r3, #0]
 800e954:	7a7b      	ldrb	r3, [r7, #9]
 800e956:	2201      	movs	r2, #1
 800e958:	fa02 f303 	lsl.w	r3, r2, r3
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e964:	897b      	ldrh	r3, [r7, #10]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4403      	add	r3, r0
 800e96a:	430a      	orrs	r2, r1
 800e96c:	b292      	uxth	r2, r2
 800e96e:	801a      	strh	r2, [r3, #0]
 800e970:	e016      	b.n	800e9a0 <process_FC15+0xd4>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e978:	897b      	ldrh	r3, [r7, #10]
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	4413      	add	r3, r2
 800e97e:	8819      	ldrh	r1, [r3, #0]
 800e980:	7a7b      	ldrb	r3, [r7, #9]
 800e982:	2201      	movs	r2, #1
 800e984:	fa02 f303 	lsl.w	r3, r2, r3
 800e988:	b29b      	uxth	r3, r3
 800e98a:	43db      	mvns	r3, r3
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e994:	897b      	ldrh	r3, [r7, #10]
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	4403      	add	r3, r0
 800e99a:	400a      	ands	r2, r1
 800e99c:	b292      	uxth	r2, r2
 800e99e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800e9a0:	7dbb      	ldrb	r3, [r7, #22]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800e9a6:	7dbb      	ldrb	r3, [r7, #22]
 800e9a8:	2b07      	cmp	r3, #7
 800e9aa:	d904      	bls.n	800e9b6 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800e9b6:	8abb      	ldrh	r3, [r7, #20]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	82bb      	strh	r3, [r7, #20]
 800e9bc:	8aba      	ldrh	r2, [r7, #20]
 800e9be:	8a3b      	ldrh	r3, [r7, #16]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d3a2      	bcc.n	800e90a <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2206      	movs	r2, #6
 800e9c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e9d2:	3302      	adds	r3, #2
 800e9d4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f7ff fd17 	bl	800e40a <sendTxBuffer>
    return u8CopyBufferSize;
 800e9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7d5b      	ldrb	r3, [r3, #21]
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	b21a      	sxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7d9b      	ldrb	r3, [r3, #22]
 800e9fc:	b21b      	sxth	r3, r3
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	b21b      	sxth	r3, r3
 800ea02:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	7ddb      	ldrb	r3, [r3, #23]
 800ea08:	021b      	lsls	r3, r3, #8
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7e1b      	ldrb	r3, [r3, #24]
 800ea10:	b21b      	sxth	r3, r3
 800ea12:	4313      	orrs	r3, r2
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800ea1e:	8a7b      	ldrh	r3, [r7, #18]
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2206      	movs	r2, #6
 800ea2a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	82fb      	strh	r3, [r7, #22]
 800ea32:	e01d      	b.n	800ea70 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ea34:	8afb      	ldrh	r3, [r7, #22]
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	3307      	adds	r3, #7
        temp = word(
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800ea40:	8afb      	ldrh	r3, [r7, #22]
 800ea42:	3304      	adds	r3, #4
 800ea44:	005b      	lsls	r3, r3, #1
        temp = word(
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	4413      	add	r3, r2
 800ea4a:	7cdb      	ldrb	r3, [r3, #19]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f7ff fc63 	bl	800e318 <word>
 800ea52:	4603      	mov	r3, r0
 800ea54:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ea5c:	8ab9      	ldrh	r1, [r7, #20]
 800ea5e:	8afb      	ldrh	r3, [r7, #22]
 800ea60:	440b      	add	r3, r1
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	89fa      	ldrh	r2, [r7, #14]
 800ea68:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800ea6a:	8afb      	ldrh	r3, [r7, #22]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	82fb      	strh	r3, [r7, #22]
 800ea70:	8afa      	ldrh	r2, [r7, #22]
 800ea72:	8a7b      	ldrh	r3, [r7, #18]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d3dd      	bcc.n	800ea34 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea7e:	3302      	adds	r3, #2
 800ea80:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff fcc1 	bl	800e40a <sendTxBuffer>

    return u8CopyBufferSize;
 800ea88:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e019      	b.n	800eada <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800eaa6:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <HAL_UART_TxCpltCallback+0x70>)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d10e      	bne.n	800ead4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800eab6:	4a13      	ldr	r2, [pc, #76]	; (800eb04 <HAL_UART_TxCpltCallback+0x70>)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eabe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800eac2:	f107 0308 	add.w	r3, r7, #8
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	2300      	movs	r3, #0
 800eaca:	2200      	movs	r2, #0
 800eacc:	2100      	movs	r1, #0
 800eace:	f7fd fa73 	bl	800bfb8 <xTaskGenericNotifyFromISR>
	   		break;
 800ead2:	e008      	b.n	800eae6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3301      	adds	r3, #1
 800ead8:	60fb      	str	r3, [r7, #12]
 800eada:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <HAL_UART_TxCpltCallback+0x74>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4293      	cmp	r3, r2
 800eae4:	dbdf      	blt.n	800eaa6 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <HAL_UART_TxCpltCallback+0x68>
 800eaec:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <HAL_UART_TxCpltCallback+0x78>)
 800eaee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800eafc:	bf00      	nop
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	2000210c 	.word	0x2000210c
 800eb08:	20002114 	.word	0x20002114
 800eb0c:	e000ed04 	.word	0xe000ed04

0800eb10 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e042      	b.n	800eba8 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800eb22:	4a2d      	ldr	r2, [pc, #180]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d137      	bne.n	800eba2 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800eb32:	4a29      	ldr	r2, [pc, #164]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb3a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d139      	bne.n	800ebb6 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800eb42:	4a25      	ldr	r2, [pc, #148]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb4a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800eb4e:	4922      	ldr	r1, [pc, #136]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eb56:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7fe fb9d 	bl	800d29c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800eb62:	4a1d      	ldr	r2, [pc, #116]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb6a:	6858      	ldr	r0, [r3, #4]
 800eb6c:	4a1a      	ldr	r2, [pc, #104]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb74:	33b8      	adds	r3, #184	; 0xb8
 800eb76:	2201      	movs	r2, #1
 800eb78:	4619      	mov	r1, r3
 800eb7a:	f7f7 fe25 	bl	80067c8 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800eb7e:	4a16      	ldr	r2, [pc, #88]	; (800ebd8 <HAL_UART_RxCpltCallback+0xc8>)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb86:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800eb8a:	f7fc fbf9 	bl	800b380 <xTaskGetTickCountFromISR>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	f107 0308 	add.w	r3, r7, #8
 800eb94:	2100      	movs	r1, #0
 800eb96:	9100      	str	r1, [sp, #0]
 800eb98:	2107      	movs	r1, #7
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7fd fc1e 	bl	800c3dc <xTimerGenericCommand>
    		}
    		break;
 800eba0:	e009      	b.n	800ebb6 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3301      	adds	r3, #1
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <HAL_UART_RxCpltCallback+0xcc>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	dbb6      	blt.n	800eb22 <HAL_UART_RxCpltCallback+0x12>
 800ebb4:	e000      	b.n	800ebb8 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800ebb6:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d007      	beq.n	800ebce <HAL_UART_RxCpltCallback+0xbe>
 800ebbe:	4b08      	ldr	r3, [pc, #32]	; (800ebe0 <HAL_UART_RxCpltCallback+0xd0>)
 800ebc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800ebce:	bf00      	nop
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd90      	pop	{r4, r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	2000210c 	.word	0x2000210c
 800ebdc:	20002114 	.word	0x20002114
 800ebe0:	e000ed04 	.word	0xe000ed04

0800ebe4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800ebec:	2300      	movs	r3, #0
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	e041      	b.n	800ec76 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800ebf2:	4a27      	ldr	r2, [pc, #156]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d136      	bne.n	800ec70 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ec02:	4a23      	ldr	r2, [pc, #140]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec0a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d138      	bne.n	800ec84 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec12:	e007      	b.n	800ec24 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ec14:	4a1e      	ldr	r2, [pc, #120]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7f7 fe9e 	bl	8006960 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ec24:	4a1a      	ldr	r2, [pc, #104]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec2c:	6858      	ldr	r0, [r3, #4]
 800ec2e:	4a18      	ldr	r2, [pc, #96]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec36:	33d0      	adds	r3, #208	; 0xd0
 800ec38:	2280      	movs	r2, #128	; 0x80
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	f7fa fb87 	bl	800934e <HAL_UARTEx_ReceiveToIdle_DMA>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1e6      	bne.n	800ec14 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ec46:	4a12      	ldr	r2, [pc, #72]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	490d      	ldr	r1, [pc, #52]	; (800ec90 <HAL_UART_ErrorCallback+0xac>)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 0204 	bic.w	r2, r2, #4
 800ec6c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800ec6e:	e009      	b.n	800ec84 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <HAL_UART_ErrorCallback+0xb0>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	dbb7      	blt.n	800ebf2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800ec82:	e000      	b.n	800ec86 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800ec84:	bf00      	nop
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	2000210c 	.word	0x2000210c
 800ec94:	20002114 	.word	0x20002114

0800ec98 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af02      	add	r7, sp, #8
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	460b      	mov	r3, r1
 800eca2:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60fb      	str	r3, [r7, #12]
 800ecac:	e061      	b.n	800ed72 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800ecae:	4a3c      	ldr	r2, [pc, #240]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d156      	bne.n	800ed6c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800ecbe:	4a38      	ldr	r2, [pc, #224]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ecca:	2b04      	cmp	r3, #4
 800eccc:	d158      	bne.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800ecce:	887b      	ldrh	r3, [r7, #2]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d055      	beq.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800ecd4:	4a32      	ldr	r2, [pc, #200]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	887a      	ldrh	r2, [r7, #2]
 800ecde:	b2d2      	uxtb	r2, r2
 800ece0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800ece4:	4a2e      	ldr	r2, [pc, #184]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ecf2:	e007      	b.n	800ed04 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800ecf4:	4a2a      	ldr	r2, [pc, #168]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7f7 fe2e 	bl	8006960 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800ed04:	4a26      	ldr	r2, [pc, #152]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed0c:	6858      	ldr	r0, [r3, #4]
 800ed0e:	4a24      	ldr	r2, [pc, #144]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed16:	33d0      	adds	r3, #208	; 0xd0
 800ed18:	2280      	movs	r2, #128	; 0x80
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	f7fa fb17 	bl	800934e <HAL_UARTEx_ReceiveToIdle_DMA>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1e6      	bne.n	800ecf4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800ed26:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	4919      	ldr	r1, [pc, #100]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f022 0204 	bic.w	r2, r2, #4
 800ed4c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800ed4e:	4a14      	ldr	r2, [pc, #80]	; (800eda0 <HAL_UARTEx_RxEventCallback+0x108>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed56:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	2300      	movs	r3, #0
 800ed62:	2203      	movs	r2, #3
 800ed64:	2100      	movs	r1, #0
 800ed66:	f7fd f927 	bl	800bfb8 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800ed6a:	e009      	b.n	800ed80 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	60fb      	str	r3, [r7, #12]
 800ed72:	4b0c      	ldr	r3, [pc, #48]	; (800eda4 <HAL_UARTEx_RxEventCallback+0x10c>)
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	db97      	blt.n	800ecae <HAL_UARTEx_RxEventCallback+0x16>
 800ed7e:	e000      	b.n	800ed82 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800ed80:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <HAL_UARTEx_RxEventCallback+0x100>
 800ed88:	4b07      	ldr	r3, [pc, #28]	; (800eda8 <HAL_UARTEx_RxEventCallback+0x110>)
 800ed8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	f3bf 8f6f 	isb	sy
}
 800ed98:	bf00      	nop
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	2000210c 	.word	0x2000210c
 800eda4:	20002114 	.word	0x20002114
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <memset>:
 800edac:	4402      	add	r2, r0
 800edae:	4603      	mov	r3, r0
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d100      	bne.n	800edb6 <memset+0xa>
 800edb4:	4770      	bx	lr
 800edb6:	f803 1b01 	strb.w	r1, [r3], #1
 800edba:	e7f9      	b.n	800edb0 <memset+0x4>

0800edbc <__libc_init_array>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	4d0d      	ldr	r5, [pc, #52]	; (800edf4 <__libc_init_array+0x38>)
 800edc0:	4c0d      	ldr	r4, [pc, #52]	; (800edf8 <__libc_init_array+0x3c>)
 800edc2:	1b64      	subs	r4, r4, r5
 800edc4:	10a4      	asrs	r4, r4, #2
 800edc6:	2600      	movs	r6, #0
 800edc8:	42a6      	cmp	r6, r4
 800edca:	d109      	bne.n	800ede0 <__libc_init_array+0x24>
 800edcc:	4d0b      	ldr	r5, [pc, #44]	; (800edfc <__libc_init_array+0x40>)
 800edce:	4c0c      	ldr	r4, [pc, #48]	; (800ee00 <__libc_init_array+0x44>)
 800edd0:	f000 f826 	bl	800ee20 <_init>
 800edd4:	1b64      	subs	r4, r4, r5
 800edd6:	10a4      	asrs	r4, r4, #2
 800edd8:	2600      	movs	r6, #0
 800edda:	42a6      	cmp	r6, r4
 800eddc:	d105      	bne.n	800edea <__libc_init_array+0x2e>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede4:	4798      	blx	r3
 800ede6:	3601      	adds	r6, #1
 800ede8:	e7ee      	b.n	800edc8 <__libc_init_array+0xc>
 800edea:	f855 3b04 	ldr.w	r3, [r5], #4
 800edee:	4798      	blx	r3
 800edf0:	3601      	adds	r6, #1
 800edf2:	e7f2      	b.n	800edda <__libc_init_array+0x1e>
 800edf4:	0800f0f4 	.word	0x0800f0f4
 800edf8:	0800f0f4 	.word	0x0800f0f4
 800edfc:	0800f0f4 	.word	0x0800f0f4
 800ee00:	0800f0f8 	.word	0x0800f0f8

0800ee04 <memcpy>:
 800ee04:	440a      	add	r2, r1
 800ee06:	4291      	cmp	r1, r2
 800ee08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee0c:	d100      	bne.n	800ee10 <memcpy+0xc>
 800ee0e:	4770      	bx	lr
 800ee10:	b510      	push	{r4, lr}
 800ee12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee1a:	4291      	cmp	r1, r2
 800ee1c:	d1f9      	bne.n	800ee12 <memcpy+0xe>
 800ee1e:	bd10      	pop	{r4, pc}

0800ee20 <_init>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	bf00      	nop
 800ee24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee26:	bc08      	pop	{r3}
 800ee28:	469e      	mov	lr, r3
 800ee2a:	4770      	bx	lr

0800ee2c <_fini>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	bf00      	nop
 800ee30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee32:	bc08      	pop	{r3}
 800ee34:	469e      	mov	lr, r3
 800ee36:	4770      	bx	lr
