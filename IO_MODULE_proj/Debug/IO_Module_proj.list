
IO_Module_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f40c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800f54c  0800f54c  0001f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7bc  0800f7bc  0001f7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7c4  0800f7c4  0001f7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000004c  20000008  0800f7cc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024c0  20000058  0800f818  00020058  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002518  0800f818  00022518  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031b0c  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006165  00000000  00000000  00051bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c48  00000000  00000000  00057d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002240  00000000  00000000  0005a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00028ee0  00000000  00000000  0005cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002fad2  00000000  00000000  00085aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00102023  00000000  00000000  000b5572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bf4c  00000000  00000000  001b7598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001c34e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000058 	.word	0x20000058
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f534 	.word	0x0800f534

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000005c 	.word	0x2000005c
 800017c:	0800f534 	.word	0x0800f534

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <IO_Module_Init>:



//IO Module Configuration function
void IO_Module_Init(modbusHandler_t * modH)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	bitWrite(modH,TWA1_STATUS,TWA_1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2100      	movs	r1, #0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8a1 	bl	8000d6c <bitWrite>
	bitWrite(modH,TWA2_STATUS,TWA_2);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f89c 	bl	8000d6c <bitWrite>
	bitWrite(modH,TWA3_STATUS,TWA_3);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 f897 	bl	8000d6c <bitWrite>
	bitWrite(modH,TWA4_STATUS,TWA_4);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2106      	movs	r1, #6
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f892 	bl	8000d6c <bitWrite>


}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_ADC_ConvCpltCallback>:



// ADC complete conversion callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	//osEventFlagsSet(tempFlagsHandle,0x01);
	osThreadFlagsSet(TempCalcHandle, 0x01);
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 f8f6 	bl	8009e50 <osThreadFlagsSet>

}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000074 	.word	0x20000074

08000c70 <ADC_Temp_Thread_Start>:

// Initializes the thread and event flags in charge of calculating the temperature values form PT1000
void ADC_Temp_Thread_Start(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	TempCalcHandle = osThreadNew(CalculateTemp_Thread, NULL, &TempCalc_attributes);
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <ADC_Temp_Thread_Start+0x24>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <ADC_Temp_Thread_Start+0x28>)
 8000c7a:	f009 f857 	bl	8009d2c <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <ADC_Temp_Thread_Start+0x2c>)
 8000c82:	6013      	str	r3, [r2, #0]
	tempFlagsHandle = osEventFlagsNew(&tempFlags_attributes);
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <ADC_Temp_Thread_Start+0x30>)
 8000c86:	f009 f9cd 	bl	800a024 <osEventFlagsNew>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <ADC_Temp_Thread_Start+0x34>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	0800f624 	.word	0x0800f624
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	20000074 	.word	0x20000074
 8000ca0:	0800f648 	.word	0x0800f648
 8000ca4:	20000078 	.word	0x20000078

08000ca8 <CalculateTemp_Thread>:

*/
	}
}

void CalculateTemp_Thread(void *argument){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cb0:	217f      	movs	r1, #127	; 0x7f
 8000cb2:	4829      	ldr	r0, [pc, #164]	; (8000d58 <CalculateTemp_Thread+0xb0>)
 8000cb4:	f002 fba4 	bl	8003400 <HAL_ADCEx_Calibration_Start>

	for(;;)
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4928      	ldr	r1, [pc, #160]	; (8000d5c <CalculateTemp_Thread+0xb4>)
 8000cbc:	4826      	ldr	r0, [pc, #152]	; (8000d58 <CalculateTemp_Thread+0xb0>)
 8000cbe:	f001 fac9 	bl	8002254 <HAL_ADC_Start_DMA>
		//osEventFlagsWait(tempFlagsHandle, 0x01, osFlagsWaitAll, osWaitForever);
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f009 f90f 	bl	8009eec <osThreadFlagsWait>
		ADCvoltage = ADCrawReading * 0.00073242;
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <CalculateTemp_Thread+0xb4>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fba5 	bl	8000424 <__aeabi_i2d>
 8000cda:	a319      	add	r3, pc, #100	; (adr r3, 8000d40 <CalculateTemp_Thread+0x98>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fc0a 	bl	80004f8 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	491d      	ldr	r1, [pc, #116]	; (8000d60 <CalculateTemp_Thread+0xb8>)
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
		Temperature = ((ADCvoltage - 0.408)*100) / 2.04;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <CalculateTemp_Thread+0xb8>)
 8000cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf4:	a314      	add	r3, pc, #80	; (adr r3, 8000d48 <CalculateTemp_Thread+0xa0>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fa45 	bl	8000188 <__aeabi_dsub>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <CalculateTemp_Thread+0xbc>)
 8000d0c:	f7ff fbf4 	bl	80004f8 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4610      	mov	r0, r2
 8000d16:	4619      	mov	r1, r3
 8000d18:	a30d      	add	r3, pc, #52	; (adr r3, 8000d50 <CalculateTemp_Thread+0xa8>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fd15 	bl	800074c <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4910      	ldr	r1, [pc, #64]	; (8000d68 <CalculateTemp_Thread+0xc0>)
 8000d28:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8000d2c:	480a      	ldr	r0, [pc, #40]	; (8000d58 <CalculateTemp_Thread+0xb0>)
 8000d2e:	f001 fb15 	bl	800235c <HAL_ADC_Stop_DMA>
		osDelay(2);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f009 f95b 	bl	8009fee <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCrawReading,1);
 8000d38:	e7be      	b.n	8000cb8 <CalculateTemp_Thread+0x10>
 8000d3a:	bf00      	nop
 8000d3c:	f3af 8000 	nop.w
 8000d40:	f9353597 	.word	0xf9353597
 8000d44:	3f47fffb 	.word	0x3f47fffb
 8000d48:	083126e9 	.word	0x083126e9
 8000d4c:	3fda1cac 	.word	0x3fda1cac
 8000d50:	851eb852 	.word	0x851eb852
 8000d54:	400051eb 	.word	0x400051eb
 8000d58:	200000a8 	.word	0x200000a8
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	20000080 	.word	0x20000080
 8000d64:	40590000 	.word	0x40590000
 8000d68:	20000088 	.word	0x20000088

08000d6c <bitWrite>:
	}

}
void bitWrite(modbusHandler_t * modH, uint8_t pos, uint8_t val)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	70bb      	strb	r3, [r7, #2]
	uint16_t *temp;
	temp = &modH->u16regsCoilsRO[pos/16];
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
	if (val == 1) {
 8000d8e:	78bb      	ldrb	r3, [r7, #2]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10d      	bne.n	8000db0 <bitWrite+0x44>
		*temp |= (1UL << (pos%16));
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	801a      	strh	r2, [r3, #0]
	}
	else {
		*temp &= ~(1UL << (pos%16));
	}
}
 8000dae:	e00e      	b.n	8000dce <bitWrite+0x62>
		*temp &= ~(1UL << (pos%16));
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	801a      	strh	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dea:	f023 0218 	bic.w	r2, r3, #24
 8000dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fdfe 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f870 	bl	8000f58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e78:	f000 f8e4 	bl	8001044 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 fa4e 	bl	800131c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e80:	f000 fa2a 	bl	80012d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e84:	f000 f9b4 	bl	80011f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e88:	f000 f9fe 	bl	8001288 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000e8c:	f000 f90c 	bl	80010a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e90:	f000 f96e 	bl	8001170 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  ModbusH.uModbusType = MB_SLAVE;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <main+0xc4>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	701a      	strb	r2, [r3, #0]
  ModbusH.port = &huart1;
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <main+0xc4>)
 8000e9c:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <main+0xc8>)
 8000e9e:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <main+0xc4>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <main+0xc4>)
 8000ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eac:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
  ModbusH.EN_Port = DE_EN_GPIO_Port;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <main+0xc4>)
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <main+0xcc>)
 8000eb4:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = DE_EN_Pin;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <main+0xc4>)
 8000eb8:	2208      	movs	r2, #8
 8000eba:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regsHR = Holding_Registers_Database;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <main+0xc4>)
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <main+0xd0>)
 8000ec0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsRO = Input_Register_Database;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <main+0xc4>)
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <main+0xd4>)
 8000ec8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  ModbusH.u16regsCoils = Holding_Coils_Database;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <main+0xc4>)
 8000ece:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <main+0xd8>)
 8000ed0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  ModbusH.u16regsCoilsRO = Input_Coils_Database;
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0xc4>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <main+0xdc>)
 8000ed8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  ModbusH.u16regHR_size = sizeof(Holding_Registers_Database)/sizeof(Holding_Registers_Database[0]);
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <main+0xc4>)
 8000ede:	220a      	movs	r2, #10
 8000ee0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  ModbusH.u16regRO_size = sizeof(Input_Register_Database)/sizeof(Input_Register_Database[0]);
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <main+0xc4>)
 8000ee6:	2214      	movs	r2, #20
 8000ee8:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
  ModbusH.u16regCoils_size = sizeof(Holding_Coils_Database)/sizeof(Holding_Coils_Database[0]);
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <main+0xc4>)
 8000eee:	2205      	movs	r2, #5
 8000ef0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
  //ModbusH.u16regCoilsRO_size = sizeof(Input_Coils_Database)/sizeof(Input_Coils_Database[0]);
  ModbusH.xTypeHW = USART_HW_DMA;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <main+0xc4>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

  IO_Module_Init(&ModbusH);
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <main+0xc4>)
 8000efe:	f7ff fe8b 	bl	8000c18 <IO_Module_Init>

  //Initialize MODBUS library
  ModbusInit(&ModbusH);
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <main+0xc4>)
 8000f04:	f00c fcf2 	bl	800d8ec <ModbusInit>

  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <main+0xc4>)
 8000f0a:	f00c fd91 	bl	800da30 <ModbusStart>

  //Initialize the SSD1306 OLED
  ssd1306_Init();
 8000f0e:	f00e f9ef 	bl	800f2f0 <ssd1306_Init>
  //ssd1306_TestAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f12:	f008 fec1 	bl	8009c98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <main+0xe0>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <main+0xe4>)
 8000f1c:	f008 ff06 	bl	8009d2c <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <main+0xe8>)
 8000f24:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Temp_Thread_Start();
 8000f26:	f7ff fea3 	bl	8000c70 <ADC_Temp_Thread_Start>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f2a:	f008 fed9 	bl	8009ce0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <main+0xc2>
 8000f30:	2000060c 	.word	0x2000060c
 8000f34:	200001c0 	.word	0x200001c0
 8000f38:	48000800 	.word	0x48000800
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	20000090 	.word	0x20000090
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	0800f658 	.word	0x0800f658
 8000f50:	080013fd 	.word	0x080013fd
 8000f54:	20000608 	.word	0x20000608

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09a      	sub	sp, #104	; 0x68
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2248      	movs	r2, #72	; 0x48
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00e faaa 	bl	800f4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f8c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f023 0303 	bic.w	r3, r3, #3
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fa2:	f003 fe15 	bl	8004bd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ff17 	bl	8000dda <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <SystemClock_Config+0xe8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb4:	4a22      	ldr	r2, [pc, #136]	; (8001040 <SystemClock_Config+0xe8>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <SystemClock_Config+0xe8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000fc8:	2327      	movs	r3, #39	; 0x27
 8000fca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f004 f98b 	bl	8005310 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001000:	f000 fa16 	bl	8001430 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001004:	236f      	movs	r3, #111	; 0x6f
 8001006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001008:	2302      	movs	r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2101      	movs	r1, #1
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fce7 	bl	80059f8 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001030:	f000 f9fe 	bl	8001430 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001034:	f005 fad4 	bl	80065e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001038:	bf00      	nop
 800103a:	3768      	adds	r7, #104	; 0x68
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	58000400 	.word	0x58000400

08001044 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2250      	movs	r2, #80	; 0x50
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00e fa35 	bl	800f4c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001056:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800105a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800105c:	2318      	movs	r3, #24
 800105e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800106c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001070:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001072:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001076:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001078:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800107e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001088:	2300      	movs	r3, #0
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4618      	mov	r0, r3
 8001090:	f005 f930 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800109a:	f000 f9c9 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_ADC1_Init+0xc0>)
 80010c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010de:	2204      	movs	r2, #4
 80010e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC1_Init+0xbc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0xbc>)
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_ADC1_Init+0xbc>)
 8001120:	f000 ff4c 	bl	8001fbc <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800112a:	f000 f981 	bl	8001430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0xc4>)
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001132:	2306      	movs	r3, #6
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113a:	237f      	movs	r3, #127	; 0x7f
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113e:	2304      	movs	r3, #4
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC1_Init+0xbc>)
 800114c:	f001 fb3c 	bl	80027c8 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001156:	f000 f96b 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000a8 	.word	0x200000a8
 8001168:	50040000 	.word	0x50040000
 800116c:	14f00020 	.word	0x14f00020

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C1_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C1_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C1_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011ac:	f002 ff62 	bl	8004074 <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 f93b 	bl	8001430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011be:	f003 fb6d 	bl	800489c <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 f932 	bl	8001430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C1_Init+0x74>)
 80011d0:	f003 fbaf 	bl	8004932 <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 f929 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000016c 	.word	0x2000016c
 80011e8:	40005400 	.word	0x40005400
 80011ec:	00300f38 	.word	0x00300f38

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART1_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART1_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800123a:	f005 fd63 	bl	8006d04 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f8f4 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800124c:	f008 fb85 	bl	800995a <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f8eb 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800125e:	f008 fbba 	bl	80099d6 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f8e2 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_UART_Init+0x90>)
 800126e:	f008 fb3b 	bl	80098e8 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f8da 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001c0 	.word	0x200001c0
 8001284:	40013800 	.word	0x40013800

08001288 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800128e:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <MX_USB_PCD_Init+0x4c>)
 8001290:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 8001294:	2208      	movs	r2, #8
 8001296:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 800129a:	2202      	movs	r2, #2
 800129c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_USB_PCD_Init+0x48>)
 80012be:	f003 fb84 	bl	80049ca <HAL_PCD_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80012c8:	f000 f8b2 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000314 	.word	0x20000314
 80012d4:	40006800 	.word	0x40006800

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff fd92 	bl	8000e06 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fd8f 	bl	8000e06 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	200b      	movs	r0, #11
 80012ee:	f002 f9d3 	bl	8003698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f2:	200b      	movs	r0, #11
 80012f4:	f002 f9ea 	bl	80036cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2105      	movs	r1, #5
 80012fc:	200c      	movs	r0, #12
 80012fe:	f002 f9cb 	bl	8003698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001302:	200c      	movs	r0, #12
 8001304:	f002 f9e2 	bl	80036cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2105      	movs	r1, #5
 800130c:	200d      	movs	r0, #13
 800130e:	f002 f9c3 	bl	8003698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001312:	200d      	movs	r0, #13
 8001314:	f002 f9da 	bl	80036cc <HAL_NVIC_EnableIRQ>

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff fd81 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff fd7e 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fd7b 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fd78 	bl	8000e38 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_EN_GPIO_Port, DE_EN_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2108      	movs	r1, #8
 800134c:	4828      	ldr	r0, [pc, #160]	; (80013f0 <MX_GPIO_Init+0xd4>)
 800134e:	f002 fe79 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f002 fe73 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 800135e:	2200      	movs	r2, #0
 8001360:	f24f 0103 	movw	r1, #61443	; 0xf003
 8001364:	4823      	ldr	r0, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xd8>)
 8001366:	f002 fe6d 	bl	8004044 <HAL_GPIO_WritePin>
                          |TWA3_Pin|TWA4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DE_EN_Pin */
  GPIO_InitStruct.Pin = DE_EN_Pin;
 800136a:	2308      	movs	r3, #8
 800136c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DE_EN_GPIO_Port, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	; (80013f0 <MX_GPIO_Init+0xd4>)
 8001380:	f002 fcf0 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001384:	2302      	movs	r3, #2
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f002 fce2 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_GPIO_Init+0xd4>)
 80013b2:	f002 fcd7 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin TWA1_Pin TWA2_Pin
                           TWA3_Pin TWA4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|TWA1_Pin|TWA2_Pin
 80013b6:	f24f 0303 	movw	r3, #61443	; 0xf003
 80013ba:	607b      	str	r3, [r7, #4]
                          |TWA3_Pin|TWA4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <MX_GPIO_Init+0xd8>)
 80013ce:	f002 fcc9 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80013d2:	2303      	movs	r3, #3
 80013d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_GPIO_Init+0xdc>)
 80013e4:	f002 fcbe 	bl	8003d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000c00 	.word	0x48000c00

080013fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


for(;;)
  {
    osDelay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f008 fdf2 	bl	8009fee <osDelay>
 800140a:	e7fb      	b.n	8001404 <StartDefaultTask+0x8>

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f000 fb47 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40014400 	.word	0x40014400

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>

0800143a <LL_AHB2_GRP1_EnableClock>:
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4313      	orrs	r3, r2
 8001450:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001490:	68fb      	ldr	r3, [r7, #12]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	210f      	movs	r1, #15
 80014d8:	f06f 0001 	mvn.w	r0, #1
 80014dc:	f002 f8dc 	bl	8003698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_ADC_MspInit+0xb8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d146      	bne.n	8001594 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001506:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150a:	f7ff ff96 	bl	800143a <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ff93 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001514:	2301      	movs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152a:	f002 fc1b 	bl	8003d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_ADC_MspInit+0xc0>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001536:	2205      	movs	r2, #5
 8001538:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800154e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001552:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800155e:	2220      	movs	r2, #32
 8001560:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800156a:	f002 f8bd 	bl	80036e8 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001574:	f7ff ff5c 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 800157c:	64da      	str	r2, [r3, #76]	; 0x4c
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_ADC_MspInit+0xbc>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2105      	movs	r1, #5
 8001588:	2012      	movs	r0, #18
 800158a:	f002 f885 	bl	8003698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800158e:	2012      	movs	r0, #18
 8001590:	f002 f89c 	bl	80036cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	50040000 	.word	0x50040000
 80015a0:	2000010c 	.word	0x2000010c
 80015a4:	40020030 	.word	0x40020030

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09c      	sub	sp, #112	; 0x70
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2250      	movs	r2, #80	; 0x50
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00d ff79 	bl	800f4c0 <memset>
  if(hi2c->Instance==I2C1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d126      	bne.n	8001626 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d8:	2304      	movs	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fe84 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff ff1d 	bl	8001430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2002      	movs	r0, #2
 80015f8:	f7ff ff1f 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001600:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001616:	4619      	mov	r1, r3
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 800161a:	f002 fba3 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001622:	f7ff ff23 	bl	800146c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3770      	adds	r7, #112	; 0x70
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	48000400 	.word	0x48000400

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	; 0x70
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2250      	movs	r2, #80	; 0x50
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00d ff31 	bl	800f4c0 <memset>
  if(huart->Instance==USART1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a43      	ldr	r2, [pc, #268]	; (8001770 <HAL_UART_MspInit+0x138>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d17f      	bne.n	8001768 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fe3d 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001680:	f7ff fed6 	bl	8001430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001688:	f7ff ff09 	bl	800149e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2002      	movs	r0, #2
 800168e:	f7ff fed4 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a2:	2307      	movs	r3, #7
 80016a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016aa:	4619      	mov	r1, r3
 80016ac:	4831      	ldr	r0, [pc, #196]	; (8001774 <HAL_UART_MspInit+0x13c>)
 80016ae:	f002 fb59 	bl	8003d64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_UART_MspInit+0x144>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016ba:	220e      	movs	r2, #14
 80016bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e8:	4823      	ldr	r0, [pc, #140]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016ea:	f001 fffd 	bl	80036e8 <HAL_DMA_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80016f4:	f7ff fe9c 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_UART_MspInit+0x140>)
 80016fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_UART_MspInit+0x140>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <HAL_UART_MspInit+0x14c>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0x148>)
 800170e:	220f      	movs	r2, #15
 8001710:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001714:	2210      	movs	r2, #16
 8001716:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0x148>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_UART_MspInit+0x148>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x148>)
 800173e:	f001 ffd3 	bl	80036e8 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001748:	f7ff fe72 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001750:	67da      	str	r2, [r3, #124]	; 0x7c
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_UART_MspInit+0x148>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2105      	movs	r1, #5
 800175c:	2024      	movs	r0, #36	; 0x24
 800175e:	f001 ff9b 	bl	8003698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001762:	2024      	movs	r0, #36	; 0x24
 8001764:	f001 ffb2 	bl	80036cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001768:	bf00      	nop
 800176a:	3770      	adds	r7, #112	; 0x70
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40013800 	.word	0x40013800
 8001774:	48000400 	.word	0x48000400
 8001778:	20000254 	.word	0x20000254
 800177c:	40020008 	.word	0x40020008
 8001780:	200002b4 	.word	0x200002b4
 8001784:	4002001c 	.word	0x4002001c

08001788 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_PCD_MspInit+0x5c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d118      	bne.n	80017dc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fe45 	bl	800143a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80017c2:	230a      	movs	r3, #10
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f002 fac8 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80017d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80017d8:	f7ff fe48 	bl	800146c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40006800 	.word	0x40006800

080017e8 <LL_APB2_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2019      	movs	r0, #25
 8001832:	f001 ff31 	bl	8003698 <HAL_NVIC_SetPriority>
  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001836:	2019      	movs	r0, #25
 8001838:	f001 ff48 	bl	80036cc <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800183c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001840:	f7ff ffd2 	bl	80017e8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f004 fabe 	bl	8005dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001854:	f004 faa6 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8001858:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_InitTick+0x8c>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3b01      	subs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_InitTick+0x90>)
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_InitTick+0x94>)
 800186c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_InitTick+0x90>)
 8001870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001876:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_InitTick+0x90>)
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_InitTick+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_InitTick+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <HAL_InitTick+0x90>)
 800188a:	f004 ffc0 	bl	800680e <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_InitTick+0x90>)
 8001896:	f005 f81b 	bl	80068d0 <HAL_TIM_Base_Start_IT>
 800189a:	4603      	mov	r3, r0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	20000764 	.word	0x20000764
 80018b0:	40014400 	.word	0x40014400

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel1_IRQHandler+0x10>)
 80018e6:	f002 f8e0 	bl	8003aaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000254 	.word	0x20000254

080018f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel2_IRQHandler+0x10>)
 80018fa:	f002 f8d6 	bl	8003aaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002b4 	.word	0x200002b4

08001908 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA1_Channel3_IRQHandler+0x10>)
 800190e:	f002 f8cc 	bl	8003aaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000010c 	.word	0x2000010c

0800191c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <ADC1_IRQHandler+0x10>)
 8001922:	f000 fd7c 	bl	800241e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000a8 	.word	0x200000a8

08001930 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001936:	f005 f819 	bl	800696c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000764 	.word	0x20000764

08001944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART1_IRQHandler+0x10>)
 800194a:	f005 fcef 	bl	800732c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001c0 	.word	0x200001c0

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <SystemInit+0x98>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <SystemInit+0x98>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001984:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <SystemInit+0x9c>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a2:	f023 0305 	bic.w	r3, r3, #5
 80019a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <SystemInit+0xa0>)
 80019c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <SystemInit+0xa0>)
 80019cc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	faf6fefb 	.word	0xfaf6fefb
 80019f8:	22041000 	.word	0x22041000

080019fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a00:	3304      	adds	r3, #4

08001a02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a06:	d3f9      	bcc.n	80019fc <CopyDataInit>
  bx lr
 8001a08:	4770      	bx	lr

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a0c:	3004      	adds	r0, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>
  bx lr
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a18:	f7ff ff9e 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopForever+0x6>)
 8001a1e:	490c      	ldr	r1, [pc, #48]	; (8001a50 <LoopForever+0xa>)
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <LoopForever+0xe>)
 8001a22:	2300      	movs	r3, #0
 8001a24:	f7ff ffed 	bl	8001a02 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <LoopForever+0x12>)
 8001a2a:	490c      	ldr	r1, [pc, #48]	; (8001a5c <LoopForever+0x16>)
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <LoopForever+0x1a>)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f7ff ffe7 	bl	8001a02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <LoopForever+0x1e>)
 8001a36:	490c      	ldr	r1, [pc, #48]	; (8001a68 <LoopForever+0x22>)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f7ff ffe8 	bl	8001a0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a3e:	f00d fd47 	bl	800f4d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a42:	f7ff fa13 	bl	8000e6c <main>

08001a46 <LoopForever>:

LoopForever:
  b LoopForever
 8001a46:	e7fe      	b.n	8001a46 <LoopForever>
  ldr   r0, =_estack
 8001a48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000054 	.word	0x20000054
 8001a54:	0800f7cc 	.word	0x0800f7cc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a58:	20030000 	.word	0x20030000
 8001a5c:	20030000 	.word	0x20030000
 8001a60:	0800f818 	.word	0x0800f818
  INIT_BSS _sbss, _ebss
 8001a64:	20000058 	.word	0x20000058
 8001a68:	20002518 	.word	0x20002518

08001a6c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <AES1_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_Init+0x3c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <HAL_Init+0x3c>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f001 fdfb 	bl	8003682 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a8c:	200f      	movs	r0, #15
 8001a8e:	f7ff fec5 	bl	800181c <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	e001      	b.n	8001aa2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a9e:	f7ff fd17 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	58004000 	.word	0x58004000

08001ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000004c 	.word	0x2000004c
 8001ad4:	200007b0 	.word	0x200007b0

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200007b0 	.word	0x200007b0

08001af0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTickPrio+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000048 	.word	0x20000048

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffe2 	bl	8001ad8 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffd2 	bl	8001ad8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000004c 	.word	0x2000004c

08001b50 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <LL_ADC_SetOffset+0x44>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	03fff000 	.word	0x03fff000

08001c00 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3360      	adds	r3, #96	; 0x60
 8001c0e:	461a      	mov	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c7a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3330      	adds	r3, #48	; 0x30
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	4413      	add	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	211f      	movs	r1, #31
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	401a      	ands	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0e9b      	lsrs	r3, r3, #26
 8001cc0:	f003 011f 	and.w	r1, r3, #31
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3314      	adds	r3, #20
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0e5b      	lsrs	r3, r3, #25
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	0d1b      	lsrs	r3, r3, #20
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2107      	movs	r1, #7
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	0d1b      	lsrs	r3, r3, #20
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0318 	and.w	r3, r3, #24
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d9c:	40d9      	lsrs	r1, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	400b      	ands	r3, r1
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	0007ffff 	.word	0x0007ffff

08001dc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6093      	str	r3, [r2, #8]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_IsEnabled+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_IsEnabled+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDisableOngoing+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDisableOngoing+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f34:	f043 0210 	orr.w	r2, r3, #16
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d101      	bne.n	8001f60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e12e      	b.n	8002238 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fa7b 	bl	80014e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff feef 	bl	8001de4 <LL_ADC_IsDeepPowerDownEnabled>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fed5 	bl	8001dc0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff0a 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff feee 	bl	8001e0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002030:	4b83      	ldr	r3, [pc, #524]	; (8002240 <HAL_ADC_Init+0x284>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	099b      	lsrs	r3, r3, #6
 8002036:	4a83      	ldr	r2, [pc, #524]	; (8002244 <HAL_ADC_Init+0x288>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	3301      	adds	r3, #1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002044:	e002      	b.n	800204c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff feec 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff60 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 8002088:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 80c7 	bne.w	8002226 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 80c3 	bne.w	8002226 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020a8:	f043 0202 	orr.w	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fef9 	bl	8001eac <LL_ADC_IsEnabled>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c0:	4861      	ldr	r0, [pc, #388]	; (8002248 <HAL_ADC_Init+0x28c>)
 80020c2:	f7ff fef3 	bl	8001eac <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4619      	mov	r1, r3
 80020d2:	485e      	ldr	r0, [pc, #376]	; (800224c <HAL_ADC_Init+0x290>)
 80020d4:	f7ff fd3c 	bl	8001b50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e5b      	ldrb	r3, [r3, #25]
 80020dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80020f8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	045b      	lsls	r3, r3, #17
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <HAL_ADC_Init+0x294>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	69b9      	ldr	r1, [r7, #24]
 8002144:	430b      	orrs	r3, r1
 8002146:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fefb 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 8002152:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff1c 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 800215e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13d      	bne.n	80021e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d13a      	bne.n	80021e2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002170:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002178:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d118      	bne.n	80021d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c2:	430a      	orrs	r2, r1
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10c      	bne.n	8002204 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	f023 010f 	bic.w	r1, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e007      	b.n	8002214 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020f 	bic.w	r2, r2, #15
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	f023 0303 	bic.w	r3, r3, #3
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002236:	7ffb      	ldrb	r3, [r7, #31]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000044 	.word	0x20000044
 8002244:	053e2d63 	.word	0x053e2d63
 8002248:	50040000 	.word	0x50040000
 800224c:	50040300 	.word	0x50040300
 8002250:	fff0c007 	.word	0xfff0c007

08002254 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fe6f 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d167      	bne.n	8002340 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Start_DMA+0x2a>
 800227a:	2302      	movs	r3, #2
 800227c:	e063      	b.n	8002346 <HAL_ADC_Start_DMA+0xf2>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 ff20 	bl	80030cc <ADC_Enable>
 800228c:	4603      	mov	r3, r0
 800228e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d14f      	bne.n	8002336 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f023 0206 	bic.w	r2, r3, #6
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	659a      	str	r2, [r3, #88]	; 0x58
 80022c2:	e002      	b.n	80022ca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a20      	ldr	r2, [pc, #128]	; (8002350 <HAL_ADC_Start_DMA+0xfc>)
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_ADC_Start_DMA+0x100>)
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <HAL_ADC_Start_DMA+0x104>)
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	221c      	movs	r2, #28
 80022e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0210 	orr.w	r2, r2, #16
 8002300:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3340      	adds	r3, #64	; 0x40
 800231c:	4619      	mov	r1, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f001 fa89 	bl	8003838 <HAL_DMA_Start_IT>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fde2 	bl	8001ef8 <LL_ADC_REG_StartConversion>
 8002334:	e006      	b.n	8002344 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800233e:	e001      	b.n	8002344 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002344:	7dfb      	ldrb	r3, [r7, #23]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	0800327f 	.word	0x0800327f
 8002354:	08003357 	.word	0x08003357
 8002358:	08003373 	.word	0x08003373

0800235c <HAL_ADC_Stop_DMA>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Stop_DMA+0x16>
 800236e:	2302      	movs	r3, #2
 8002370:	e051      	b.n	8002416 <HAL_ADC_Stop_DMA+0xba>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
#if defined(ADC_SUPPORT_2_5_MSPS)
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800237a:	2103      	movs	r1, #3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fde9 	bl	8002f54 <ADC_ConversionStop>
 8002382:	4603      	mov	r3, r0
 8002384:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d13f      	bne.n	800240c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d10f      	bne.n	80023ca <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 fabd 	bl	800392e <HAL_DMA_Abort>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0210 	bic.w	r2, r2, #16
 80023d8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 feed 	bl	80031c0 <ADC_Disable>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fee7 	bl	80031c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_Stop_DMA+0xb0>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b088      	sub	sp, #32
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d017      	beq.n	8002474 <HAL_ADC_IRQHandler+0x56>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f001 f854 	bl	8003514 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <HAL_ADC_IRQHandler+0x6a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	d05d      	beq.n	800254e <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d058      	beq.n	800254e <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fbd2 	bl	8001c62 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d03d      	beq.n	8002540 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d035      	beq.n	8002540 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d12e      	bne.n	8002540 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fd2e 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11a      	bne.n	8002528 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 020c 	bic.w	r2, r2, #12
 8002500:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d112      	bne.n	8002540 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
 8002526:	e00b      	b.n	8002540 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0210 	orr.w	r2, r3, #16
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7fe fb85 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_ADC_IRQHandler+0x144>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	d074      	beq.n	8002656 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d06f      	beq.n	8002656 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fbb2 	bl	8001cfc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002598:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fb5f 	bl	8001c62 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a4:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d049      	beq.n	8002648 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_ADC_IRQHandler+0x1b0>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d041      	beq.n	8002648 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d13c      	bne.n	8002648 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d135      	bne.n	8002648 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d12e      	bne.n	8002648 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fcd1 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11a      	bne.n	8002630 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002608:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d112      	bne.n	8002648 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
 800262e:	e00b      	b.n	8002648 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	f043 0210 	orr.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 ff3b 	bl	80034c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2260      	movs	r2, #96	; 0x60
 8002654:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b00      	cmp	r3, #0
 800265e:	d011      	beq.n	8002684 <HAL_ADC_IRQHandler+0x266>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f891 	bl	800279e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x296>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 ff21 	bl	80034ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x2c6>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 ff13 	bl	8003500 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d02b      	beq.n	8002746 <HAL_ADC_IRQHandler+0x328>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d026      	beq.n	8002746 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8002700:	2301      	movs	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e009      	b.n	800271a <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fae8 	bl	8001ce0 <LL_ADC_REG_GetDMATransfer>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10e      	bne.n	800273e <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f83a 	bl	80027b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <HAL_ADC_IRQHandler+0x364>
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002756:	2b00      	cmp	r3, #0
 8002758:	d013      	beq.n	8002782 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f043 0208 	orr.w	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 feab 	bl	80034d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002782:	bf00      	nop
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b6      	sub	sp, #216	; 0xd8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x22>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e39f      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x762>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fba6 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8384 	bne.w	8002f0c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f7ff fa39 	bl	8001c88 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb94 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 8002820:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fbb4 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 800282e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 81a6 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800283c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 81a1 	bne.w	8002b88 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	461a      	mov	r2, r3
 8002854:	f7ff fa65 	bl	8001d22 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b04      	cmp	r3, #4
 8002878:	d00a      	beq.n	8002890 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6919      	ldr	r1, [r3, #16]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800288a:	f7ff f995 	bl	8001bb8 <LL_ADC_SetOffset>
 800288e:	e17b      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f9b2 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0xf4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f9a7 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	e01e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x132>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f99c 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80028ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x14a>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x17c>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800292a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800292e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800293a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f96b 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f94f 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x1ba>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f944 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1f8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f939 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80029b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x210>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x242>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f908 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2102      	movs	r1, #2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f8ec 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x280>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2102      	movs	r1, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8e1 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	e01e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x2be>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f8d6 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e004      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d105      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x2d6>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	e016      	b.n	8002acc <HAL_ADC_ConfigChannel+0x304>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f8a7 	bl	8001c2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f88b 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x342>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2103      	movs	r1, #3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f880 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	e017      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x372>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2103      	movs	r1, #3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f875 	bl	8001c00 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e003      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x38a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0e9b      	lsrs	r3, r3, #26
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	e011      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x3ae>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d106      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2103      	movs	r1, #3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f852 	bl	8001c2c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f98d 	bl	8001eac <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 81c2 	bne.w	8002f1e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f7ff f8e6 	bl	8001d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a8e      	ldr	r2, [pc, #568]	; (8002dec <HAL_ADC_ConfigChannel+0x624>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 8130 	bne.w	8002e18 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x418>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e019      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x44c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	bf94      	ite	ls
 8002c0e:	2301      	movls	r3, #1
 8002c10:	2300      	movhi	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d079      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x46c>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	069b      	lsls	r3, r3, #26
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c32:	e015      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x498>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x4b8>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2101      	movs	r1, #1
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	e017      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x4e8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x50e>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	e018      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x540>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	e080      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x560>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d26:	e015      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x58c>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x5ac>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	e017      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x5dc>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]
  return result;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	ea42 0103 	orr.w	r1, r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x608>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	051b      	lsls	r3, r3, #20
 8002dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dce:	e01d      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x644>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	613b      	str	r3, [r7, #16]
  return result;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e005      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x630>
 8002dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f003 021f 	and.w	r2, r3, #31
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	3b1e      	subs	r3, #30
 8002e06:	051b      	lsls	r3, r3, #20
 8002e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e0c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fe ff85 	bl	8001d22 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_ADC_ConfigChannel+0x76c>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d07c      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e24:	4844      	ldr	r0, [pc, #272]	; (8002f38 <HAL_ADC_ConfigChannel+0x770>)
 8002e26:	f7fe feb9 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 8002e2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e2e:	4843      	ldr	r0, [pc, #268]	; (8002f3c <HAL_ADC_ConfigChannel+0x774>)
 8002e30:	f7ff f83c 	bl	8001eac <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15e      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a40      	ldr	r2, [pc, #256]	; (8002f40 <HAL_ADC_ConfigChannel+0x778>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d127      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x6cc>
 8002e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d121      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a39      	ldr	r2, [pc, #228]	; (8002f3c <HAL_ADC_ConfigChannel+0x774>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d161      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e62:	4619      	mov	r1, r3
 8002e64:	4834      	ldr	r0, [pc, #208]	; (8002f38 <HAL_ADC_ConfigChannel+0x770>)
 8002e66:	f7fe fe86 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_ADC_ConfigChannel+0x77c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	4a35      	ldr	r2, [pc, #212]	; (8002f48 <HAL_ADC_ConfigChannel+0x780>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e84:	e002      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f9      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e92:	e044      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <HAL_ADC_ConfigChannel+0x784>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d113      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x6fe>
 8002e9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a23      	ldr	r2, [pc, #140]	; (8002f3c <HAL_ADC_ConfigChannel+0x774>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d134      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	481e      	ldr	r0, [pc, #120]	; (8002f38 <HAL_ADC_ConfigChannel+0x770>)
 8002ec0:	f7fe fe59 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec4:	e02b      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <HAL_ADC_ConfigChannel+0x788>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d126      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
 8002ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d120      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <HAL_ADC_ConfigChannel+0x774>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d11b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4811      	ldr	r0, [pc, #68]	; (8002f38 <HAL_ADC_ConfigChannel+0x770>)
 8002ef2:	f7fe fe40 	bl	8001b76 <LL_ADC_SetCommonPathInternalCh>
 8002ef6:	e012      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f0a:	e008      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002f26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	37d8      	adds	r7, #216	; 0xd8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	80080000 	.word	0x80080000
 8002f38:	50040300 	.word	0x50040300
 8002f3c:	50040000 	.word	0x50040000
 8002f40:	c7520000 	.word	0xc7520000
 8002f44:	20000044 	.word	0x20000044
 8002f48:	053e2d63 	.word	0x053e2d63
 8002f4c:	cb840000 	.word	0xcb840000
 8002f50:	80000001 	.word	0x80000001

08002f54 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe ffec 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 8002f70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f80d 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 8002f7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8098 	beq.w	80030bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02a      	beq.n	8002ff0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7e5b      	ldrb	r3, [r3, #25]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d126      	bne.n	8002ff0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e1b      	ldrb	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d122      	bne.n	8002ff0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fae:	e014      	b.n	8002fda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4a45      	ldr	r2, [pc, #276]	; (80030c8 <ADC_ConversionStop+0x174>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d90d      	bls.n	8002fd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0210 	orr.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e074      	b.n	80030be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d1e3      	bne.n	8002fb0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d014      	beq.n	8003020 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ffa4 	bl	8001f48 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe ff61 	bl	8001ed2 <LL_ADC_IsDisableOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe ff80 	bl	8001f20 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d014      	beq.n	8003050 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe ffb3 	bl	8001f96 <LL_ADC_INJ_IsConversionOngoing>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe ff49 	bl	8001ed2 <LL_ADC_IsDisableOngoing>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ff8f 	bl	8001f6e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d005      	beq.n	8003062 <ADC_ConversionStop+0x10e>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d105      	bne.n	8003068 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800305c:	230c      	movs	r3, #12
 800305e:	617b      	str	r3, [r7, #20]
        break;
 8003060:	e005      	b.n	800306e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003062:	2308      	movs	r3, #8
 8003064:	617b      	str	r3, [r7, #20]
        break;
 8003066:	e002      	b.n	800306e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003068:	2304      	movs	r3, #4
 800306a:	617b      	str	r3, [r7, #20]
        break;
 800306c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800306e:	f7fe fd33 	bl	8001ad8 <HAL_GetTick>
 8003072:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003074:	e01b      	b.n	80030ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003076:	f7fe fd2f 	bl	8001ad8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b05      	cmp	r3, #5
 8003082:	d914      	bls.n	80030ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1dc      	bne.n	8003076 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	a33fffff 	.word	0xa33fffff

080030cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fee5 	bl	8001eac <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15e      	bne.n	80031a6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <ADC_Enable+0xe4>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e04a      	b.n	80031a8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fea0 	bl	8001e5c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800311c:	4825      	ldr	r0, [pc, #148]	; (80031b4 <ADC_Enable+0xe8>)
 800311e:	f7fe fd3d 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 8003122:	4603      	mov	r3, r0
 8003124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <ADC_Enable+0xec>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <ADC_Enable+0xf0>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	3301      	adds	r3, #1
 800313c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800313e:	e002      	b.n	8003146 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3b01      	subs	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800314c:	f7fe fcc4 	bl	8001ad8 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003152:	e021      	b.n	8003198 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe fea7 	bl	8001eac <LL_ADC_IsEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fe77 	bl	8001e5c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316e:	f7fe fcb3 	bl	8001ad8 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d90d      	bls.n	8003198 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f043 0210 	orr.w	r2, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e007      	b.n	80031a8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d1d6      	bne.n	8003154 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	8000003f 	.word	0x8000003f
 80031b4:	50040300 	.word	0x50040300
 80031b8:	20000044 	.word	0x20000044
 80031bc:	053e2d63 	.word	0x053e2d63

080031c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe fe80 	bl	8001ed2 <LL_ADC_IsDisableOngoing>
 80031d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fe67 	bl	8001eac <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d047      	beq.n	8003274 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d144      	bne.n	8003274 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030d 	and.w	r3, r3, #13
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d10c      	bne.n	8003212 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fe41 	bl	8001e84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800320a:	f7fe fc65 	bl	8001ad8 <HAL_GetTick>
 800320e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003210:	e029      	b.n	8003266 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e023      	b.n	8003276 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800322e:	f7fe fc53 	bl	8001ad8 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d914      	bls.n	8003266 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1dc      	bne.n	800322e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003294:	2b00      	cmp	r3, #0
 8003296:	d14b      	bne.n	8003330 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d021      	beq.n	80032f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fcd3 	bl	8001c62 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d032      	beq.n	8003328 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d12b      	bne.n	8003328 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11f      	bne.n	8003328 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
 80032f4:	e018      	b.n	8003328 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d111      	bne.n	8003328 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7fd fc91 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800332e:	e00e      	b.n	800334e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fa38 	bl	80027b2 <HAL_ADC_ErrorCallback>
}
 8003342:	e004      	b.n	800334e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fa10 	bl	800278a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7ff fa0a 	bl	80027b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <LL_ADC_StartCalibration>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ec:	d101      	bne.n	80033f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_ADCEx_Calibration_Start+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e04d      	b.n	80034b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fecb 	bl	80031c0 <ADC_Disable>
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d136      	bne.n	80034a2 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800343c:	f023 0302 	bic.w	r3, r3, #2
 8003440:	f043 0202 	orr.w	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);

#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ffa9 	bl	80033a6 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003454:	e014      	b.n	8003480 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3301      	adds	r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d90d      	bls.n	8003480 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f023 0312 	bic.w	r3, r3, #18
 800346c:	f043 0210 	orr.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e01b      	b.n	80034b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ffa7 	bl	80033d8 <LL_ADC_IsCalibrationOnGoing>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e2      	bne.n	8003456 <HAL_ADCEx_Calibration_Start+0x56>
    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f023 0303 	bic.w	r3, r3, #3
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
 80034a0:	e005      	b.n	80034ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	00026aaa 	.word	0x00026aaa

080034c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff4c 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a6:	f7ff ff63 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	6978      	ldr	r0, [r7, #20]
 80036b2:	f7ff ffb3 	bl	800361c <NVIC_EncodePriority>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff82 	bl	80035c8 <__NVIC_SetPriority>
}
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff ff56 	bl	800358c <__NVIC_EnableIRQ>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e08e      	b.n	8003818 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_DMA_Init+0x138>)
 8003702:	429a      	cmp	r2, r3
 8003704:	d80f      	bhi.n	8003726 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <HAL_DMA_Init+0x13c>)
 800370e:	4413      	add	r3, r2
 8003710:	4a45      	ldr	r2, [pc, #276]	; (8003828 <HAL_DMA_Init+0x140>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a42      	ldr	r2, [pc, #264]	; (800382c <HAL_DMA_Init+0x144>)
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
 8003724:	e00e      	b.n	8003744 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b40      	ldr	r3, [pc, #256]	; (8003830 <HAL_DMA_Init+0x148>)
 800372e:	4413      	add	r3, r2
 8003730:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <HAL_DMA_Init+0x140>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	009a      	lsls	r2, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a3c      	ldr	r2, [pc, #240]	; (8003834 <HAL_DMA_Init+0x14c>)
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa80 	bl	8003c9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a4:	d102      	bne.n	80037ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80037b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_DMA_Init+0x106>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d80c      	bhi.n	80037ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa9f 	bl	8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	e008      	b.n	8003800 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40020407 	.word	0x40020407
 8003824:	bffdfff8 	.word	0xbffdfff8
 8003828:	cccccccd 	.word	0xcccccccd
 800382c:	40020000 	.word	0x40020000
 8003830:	bffdfbf8 	.word	0xbffdfbf8
 8003834:	40020400 	.word	0x40020400

08003838 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Start_IT+0x20>
 8003854:	2302      	movs	r3, #2
 8003856:	e066      	b.n	8003926 <HAL_DMA_Start_IT+0xee>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d155      	bne.n	8003918 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f9c5 	bl	8003c20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 020e 	orr.w	r2, r2, #14
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e00f      	b.n	80038d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 020a 	orr.w	r2, r2, #10
 80038ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003904:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e005      	b.n	8003924 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003924:	7dfb      	ldrb	r3, [r7, #23]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04f      	b.n	80039e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d008      	beq.n	800395e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2204      	movs	r2, #4
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e040      	b.n	80039e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 020e 	bic.w	r2, r2, #14
 800396c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 021c 	and.w	r2, r3, #28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e047      	b.n	8003aa0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f003 021c 	and.w	r2, r3, #28
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
    }
  }
  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f003 031c 	and.w	r3, r3, #28
 8003aca:	2204      	movs	r2, #4
 8003acc:	409a      	lsls	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d026      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x7a>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d021      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0204 	bic.w	r2, r2, #4
 8003afc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 021c 	and.w	r2, r3, #28
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d071      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b22:	e06c      	b.n	8003bfe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f003 031c 	and.w	r3, r3, #28
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02e      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xec>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d029      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 020a 	bic.w	r2, r2, #10
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f003 021c 	and.w	r2, r3, #28
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2102      	movs	r1, #2
 8003b76:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d038      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b94:	e033      	b.n	8003bfe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 031c 	and.w	r3, r3, #28
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d02a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x156>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d025      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 020e 	bic.w	r2, r2, #14
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f003 021c 	and.w	r2, r3, #28
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
}
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c36:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c48:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f003 021c 	and.w	r2, r3, #28
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2101      	movs	r1, #1
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d108      	bne.n	8003c80 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7e:	e007      	b.n	8003c90 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d80a      	bhi.n	8003cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6493      	str	r3, [r2, #72]	; 0x48
 8003cc4:	e007      	b.n	8003cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	009a      	lsls	r2, r3, #2
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40020407 	.word	0x40020407
 8003d0c:	4002081c 	.word	0x4002081c
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	40020880 	.word	0x40020880

08003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2201      	movs	r2, #1
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	1000823f 	.word	0x1000823f
 8003d60:	40020940 	.word	0x40020940

08003d64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d72:	e14c      	b.n	800400e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 813e 	beq.w	8004008 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_GPIO_Init+0x40>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d130      	bne.n	8003e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dda:	2201      	movs	r2, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0201 	and.w	r2, r3, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d017      	beq.n	8003e42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d123      	bne.n	8003e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	6939      	ldr	r1, [r7, #16]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8098 	beq.w	8004008 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed8:	4a54      	ldr	r2, [pc, #336]	; (800402c <HAL_GPIO_Init+0x2c8>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f02:	d019      	beq.n	8003f38 <HAL_GPIO_Init+0x1d4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <HAL_GPIO_Init+0x2cc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_GPIO_Init+0x1d0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a49      	ldr	r2, [pc, #292]	; (8004034 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_GPIO_Init+0x1cc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a48      	ldr	r2, [pc, #288]	; (8004038 <HAL_GPIO_Init+0x2d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <HAL_GPIO_Init+0x1c8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a47      	ldr	r2, [pc, #284]	; (800403c <HAL_GPIO_Init+0x2d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_GPIO_Init+0x1c4>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e008      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f28:	2307      	movs	r3, #7
 8003f2a:	e006      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e004      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e002      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	f002 0203 	and.w	r2, r2, #3
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	4093      	lsls	r3, r2
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <HAL_GPIO_Init+0x2c8>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f7c:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f82:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f aeab 	bne.w	8003d74 <HAL_GPIO_Init+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	58000800 	.word	0x58000800

08004044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
 8004050:	4613      	mov	r3, r2
 8004052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004060:	e002      	b.n	8004068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e08d      	b.n	80041a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fa84 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e006      	b.n	80040fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d108      	bne.n	8004116 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	e007      	b.n	8004126 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	4608      	mov	r0, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	460b      	mov	r3, r1
 80041c0:	813b      	strh	r3, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	f040 80f9 	bne.w	80043c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_I2C_Mem_Write+0x34>
 80041da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0ed      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Mem_Write+0x4e>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0e6      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004202:	f7fd fc69 	bl	8001ad8 <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2319      	movs	r3, #25
 800420e:	2201      	movs	r2, #1
 8004210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f955 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d1      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2221      	movs	r2, #33	; 0x21
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800424c:	88f8      	ldrh	r0, [r7, #6]
 800424e:	893a      	ldrh	r2, [r7, #8]
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	4603      	mov	r3, r0
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f8b9 	bl	80043d4 <I2C_RequestMemoryWrite>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0a9      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2bff      	cmp	r3, #255	; 0xff
 800427c:	d90e      	bls.n	800429c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	b2da      	uxtb	r2, r3
 800428a:	8979      	ldrh	r1, [r7, #10]
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 facf 	bl	8004838 <I2C_TransferConfig>
 800429a:	e00f      	b.n	80042bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	8979      	ldrh	r1, [r7, #10]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fabe 	bl	8004838 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f94e 	bl	8004562 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e07b      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d034      	beq.n	8004374 <HAL_I2C_Mem_Write+0x1c8>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d130      	bne.n	8004374 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f8d1 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e04d      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2bff      	cmp	r3, #255	; 0xff
 8004334:	d90e      	bls.n	8004354 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	2300      	movs	r3, #0
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fa73 	bl	8004838 <I2C_TransferConfig>
 8004352:	e00f      	b.n	8004374 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa62 	bl	8004838 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d19e      	bne.n	80042bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f934 	bl	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e01a      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2220      	movs	r2, #32
 8004398:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_I2C_Mem_Write+0x224>)
 80043a6:	400b      	ands	r3, r1
 80043a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	fe00e800 	.word	0xfe00e800

080043d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	4b20      	ldr	r3, [pc, #128]	; (8004478 <I2C_RequestMemoryWrite+0xa4>)
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fa1b 	bl	8004838 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8ab 	bl	8004562 <I2C_WaitOnTXISFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e02c      	b.n	8004470 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800441c:	893b      	ldrh	r3, [r7, #8]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
 8004426:	e015      	b.n	8004454 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f891 	bl	8004562 <I2C_WaitOnTXISFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e012      	b.n	8004470 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2200      	movs	r2, #0
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f830 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	80002000 	.word	0x80002000

0800447c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	d103      	bne.n	800449a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d007      	beq.n	80044b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	619a      	str	r2, [r3, #24]
  }
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d4:	e031      	b.n	800453a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d02d      	beq.n	800453a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fd fafb 	bl	8001ad8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d122      	bne.n	800453a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d113      	bne.n	800453a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e00f      	b.n	800455a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d0be      	beq.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456e:	e033      	b.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f87f 	bl	8004678 <I2C_IsErrorOccurred>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e031      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d025      	beq.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fd faa4 	bl	8001ad8 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11a      	bne.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d013      	beq.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d1c4      	bne.n	8004570 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fc:	e02f      	b.n	800465e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f838 	bl	8004678 <I2C_IsErrorOccurred>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e02d      	b.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fd fa61 	bl	8001ad8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11a      	bne.n	800465e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b20      	cmp	r3, #32
 8004634:	d013      	beq.n	800465e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e007      	b.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b20      	cmp	r3, #32
 800466a:	d1c8      	bne.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d068      	beq.n	8004776 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046ac:	e049      	b.n	8004742 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d045      	beq.n	8004742 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fd fa0f 	bl	8001ad8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_IsErrorOccurred+0x54>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d13a      	bne.n	8004742 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d121      	bne.n	8004734 <I2C_IsErrorOccurred+0xbc>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f6:	d01d      	beq.n	8004734 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d01a      	beq.n	8004734 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800470e:	f7fd f9e3 	bl	8001ad8 <HAL_GetTick>
 8004712:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004714:	e00e      	b.n	8004734 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004716:	f7fd f9df 	bl	8001ad8 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b19      	cmp	r3, #25
 8004722:	d907      	bls.n	8004734 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004732:	e006      	b.n	8004742 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d1e9      	bne.n	8004716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b20      	cmp	r3, #32
 800474e:	d003      	beq.n	8004758 <I2C_IsErrorOccurred+0xe0>
 8004750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0aa      	beq.n	80046ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f043 0308 	orr.w	r3, r3, #8
 80047b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f043 0302 	orr.w	r3, r3, #2
 80047d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01c      	beq.n	8004826 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fe45 	bl	800447c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <I2C_IsErrorOccurred+0x1bc>)
 80047fe:	400b      	ands	r3, r1
 8004800:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800482a:	4618      	mov	r0, r3
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	fe00e800 	.word	0xfe00e800

08004838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	817b      	strh	r3, [r7, #10]
 8004846:	4613      	mov	r3, r2
 8004848:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004850:	7a7b      	ldrb	r3, [r7, #9]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004858:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	4313      	orrs	r3, r2
 8004862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004866:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	0d5b      	lsrs	r3, r3, #21
 8004872:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <I2C_TransferConfig+0x60>)
 8004878:	430b      	orrs	r3, r1
 800487a:	43db      	mvns	r3, r3
 800487c:	ea02 0103 	and.w	r1, r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	03ff63ff 	.word	0x03ff63ff

0800489c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d138      	bne.n	8004924 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048bc:	2302      	movs	r3, #2
 80048be:	e032      	b.n	8004926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b20      	cmp	r3, #32
 8004946:	d139      	bne.n	80049bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004952:	2302      	movs	r3, #2
 8004954:	e033      	b.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2224      	movs	r2, #36	; 0x24
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004984:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049cc:	b08b      	sub	sp, #44	; 0x2c
 80049ce:	af06      	add	r7, sp, #24
 80049d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cb      	b.n	8004b74 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fc fec9 	bl	8001788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 f8c8 	bl	8009b98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e040      	b.n	8004a90 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3301      	adds	r3, #1
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	3303      	adds	r3, #3
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3338      	adds	r3, #56	; 0x38
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	440b      	add	r3, r1
 8004a70:	333c      	adds	r3, #60	; 0x3c
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	440b      	add	r3, r1
 8004a84:	3340      	adds	r3, #64	; 0x40
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d3b9      	bcc.n	8004a0e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	e044      	b.n	8004b2a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	3301      	adds	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3b5      	bcc.n	8004aa0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	687e      	ldr	r6, [r7, #4]
 8004b3c:	466d      	mov	r5, sp
 8004b3e:	f106 0410 	add.w	r4, r6, #16
 8004b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	1d33      	adds	r3, r6, #4
 8004b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b4e:	6838      	ldr	r0, [r7, #0]
 8004b50:	f005 f83d 	bl	8009bce <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d102      	bne.n	8004b72 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f805 	bl	8004b7c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	58000400 	.word	0x58000400

08004bf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	58000400 	.word	0x58000400

08004c0c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1e:	d101      	bne.n	8004c24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_RCC_HSE_Enable>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_RCC_HSE_Disable>:
{
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_RCC_HSE_IsReady>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c7e:	d101      	bne.n	8004c84 <LL_RCC_HSE_IsReady+0x18>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <LL_RCC_HSE_IsReady+0x1a>
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_RCC_HSI_Enable>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <LL_RCC_HSI_Disable>:
{
 8004cae:	b480      	push	{r7}
 8004cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_RCC_HSI_IsReady>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cde:	d101      	bne.n	8004ce4 <LL_RCC_HSI_IsReady+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_RCC_HSI_IsReady+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <LL_RCC_HSI48_Enable>:
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_HSI48_Disable>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_RCC_HSI48_IsReady>:
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d101      	bne.n	8004d76 <LL_RCC_HSI48_IsReady+0x18>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <LL_RCC_HSI48_IsReady+0x1a>
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <LL_RCC_LSE_Enable>:
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_LSE_Disable>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_LSE_EnableBypass>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_LSE_DisableBypass>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d101      	bne.n	8004e22 <LL_RCC_LSE_IsReady+0x18>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_RCC_LSE_IsReady+0x1a>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d101      	bne.n	8004e8a <LL_RCC_LSI1_IsReady+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <LL_RCC_LSI1_IsReady+0x1a>
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d101      	bne.n	8004ef2 <LL_RCC_LSI2_IsReady+0x18>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_RCC_LSI2_IsReady+0x1a>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6013      	str	r3, [r2, #0]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d101      	bne.n	8004f7e <LL_RCC_MSI_IsReady+0x16>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_RCC_MSI_IsReady+0x18>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2bb0      	cmp	r3, #176	; 0xb0
 8004fc8:	d901      	bls.n	8004fce <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004fca:	23b0      	movs	r3, #176	; 0xb0
 8004fcc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004fce:	687b      	ldr	r3, [r7, #4]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	604b      	str	r3, [r1, #4]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800500e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f023 0203 	bic.w	r2, r3, #3
 8005018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800507e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80050aa:	f023 020f 	bic.w	r2, r3, #15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800513c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005140:	4618      	mov	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800514a:	b480      	push	{r7}
 800514c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800514e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005152:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a8:	6013      	str	r3, [r2, #0]
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80051d2:	b480      	push	{r7}
 80051d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80051d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e4:	d101      	bne.n	80051ea <LL_RCC_PLL_IsReady+0x18>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <LL_RCC_PLL_IsReady+0x1a>
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005206:	4618      	mov	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005236:	4618      	mov	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0303 	and.w	r3, r3, #3
}
 800524e:	4618      	mov	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526a:	d101      	bne.n	8005270 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005290:	d101      	bne.n	8005296 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b6:	d101      	bne.n	80052bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80052cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052da:	d101      	bne.n	80052e0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052fe:	d101      	bne.n	8005304 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b08d      	sub	sp, #52	; 0x34
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e363      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 808d 	beq.w	800544a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005330:	f7ff fe7d 	bl	800502e <LL_RCC_GetSysClkSource>
 8005334:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005336:	f7ff ff83 	bl	8005240 <LL_RCC_PLL_GetMainSource>
 800533a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_RCC_OscConfig+0x3e>
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d147      	bne.n	80053d8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2b01      	cmp	r3, #1
 800534c:	d144      	bne.n	80053d8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e347      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800535e:	f7ff fe28 	bl	8004fb2 <LL_RCC_MSI_GetRange>
 8005362:	4603      	mov	r3, r0
 8005364:	429c      	cmp	r4, r3
 8005366:	d914      	bls.n	8005392 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fd61 	bl	8005e34 <RCC_SetFlashLatencyFromMSIRange>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e336      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe02 	bl	8004f8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fe26 	bl	8004fdc <LL_RCC_MSI_SetCalibTrimming>
 8005390:	e013      	b.n	80053ba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fdf7 	bl	8004f8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fe1b 	bl	8004fdc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd42 	bl	8005e34 <RCC_SetFlashLatencyFromMSIRange>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e317      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053ba:	f000 fcc9 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 80053be:	4603      	mov	r3, r0
 80053c0:	4aa4      	ldr	r2, [pc, #656]	; (8005654 <HAL_RCC_OscConfig+0x344>)
 80053c2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053c4:	4ba4      	ldr	r3, [pc, #656]	; (8005658 <HAL_RCC_OscConfig+0x348>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fc fa27 	bl	800181c <HAL_InitTick>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d039      	beq.n	8005448 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e308      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053e0:	f7ff fda4 	bl	8004f2c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e4:	f7fc fb78 	bl	8001ad8 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ec:	f7fc fb74 	bl	8001ad8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e2f5      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80053fe:	f7ff fdb3 	bl	8004f68 <LL_RCC_MSI_IsReady>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f1      	beq.n	80053ec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fdbc 	bl	8004f8a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fde0 	bl	8004fdc <LL_RCC_MSI_SetCalibTrimming>
 800541c:	e015      	b.n	800544a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800541e:	f7ff fd94 	bl	8004f4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005422:	f7fc fb59 	bl	8001ad8 <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800542a:	f7fc fb55 	bl	8001ad8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e2d6      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800543c:	f7ff fd94 	bl	8004f68 <LL_RCC_MSI_IsReady>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f1      	bne.n	800542a <HAL_RCC_OscConfig+0x11a>
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005448:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d047      	beq.n	80054e6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005456:	f7ff fdea 	bl	800502e <LL_RCC_GetSysClkSource>
 800545a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800545c:	f7ff fef0 	bl	8005240 <LL_RCC_PLL_GetMainSource>
 8005460:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d005      	beq.n	8005474 <HAL_RCC_OscConfig+0x164>
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d108      	bne.n	8005480 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d105      	bne.n	8005480 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d134      	bne.n	80054e6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e2b4      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d102      	bne.n	8005490 <HAL_RCC_OscConfig+0x180>
 800548a:	f7ff fbd1 	bl	8004c30 <LL_RCC_HSE_Enable>
 800548e:	e001      	b.n	8005494 <HAL_RCC_OscConfig+0x184>
 8005490:	f7ff fbdd 	bl	8004c4e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fb1c 	bl	8001ad8 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fc fb18 	bl	8001ad8 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e299      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80054b6:	f7ff fbd9 	bl	8004c6c <LL_RCC_HSE_IsReady>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f1      	beq.n	80054a4 <HAL_RCC_OscConfig+0x194>
 80054c0:	e011      	b.n	80054e6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc fb09 	bl	8001ad8 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ca:	f7fc fb05 	bl	8001ad8 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b64      	cmp	r3, #100	; 0x64
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e286      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80054dc:	f7ff fbc6 	bl	8004c6c <LL_RCC_HSE_IsReady>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f1      	bne.n	80054ca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d04c      	beq.n	800558c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f2:	f7ff fd9c 	bl	800502e <LL_RCC_GetSysClkSource>
 80054f6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054f8:	f7ff fea2 	bl	8005240 <LL_RCC_PLL_GetMainSource>
 80054fc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d005      	beq.n	8005510 <HAL_RCC_OscConfig+0x200>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d10e      	bne.n	8005528 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b02      	cmp	r3, #2
 800550e:	d10b      	bne.n	8005528 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e266      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fbe5 	bl	8004cf0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005526:	e031      	b.n	800558c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005530:	f7ff fbae 	bl	8004c90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fc fad0 	bl	8001ad8 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553c:	f7fc facc 	bl	8001ad8 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e24d      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800554e:	f7ff fbbd 	bl	8004ccc <LL_RCC_HSI_IsReady>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f1      	beq.n	800553c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fbc7 	bl	8004cf0 <LL_RCC_HSI_SetCalibTrimming>
 8005562:	e013      	b.n	800558c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005564:	f7ff fba3 	bl	8004cae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fc fab6 	bl	8001ad8 <HAL_GetTick>
 800556c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005570:	f7fc fab2 	bl	8001ad8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e233      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005582:	f7ff fba3 	bl	8004ccc <LL_RCC_HSI_IsReady>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f1      	bne.n	8005570 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80a3 	beq.w	80056ec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d076      	beq.n	800569c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d046      	beq.n	8005648 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80055ba:	f7ff fc5a 	bl	8004e72 <LL_RCC_LSI1_IsReady>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80055c4:	f7ff fc33 	bl	8004e2e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055c8:	f7fc fa86 	bl	8001ad8 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055d0:	f7fc fa82 	bl	8001ad8 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e203      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80055e2:	f7ff fc46 	bl	8004e72 <LL_RCC_LSI1_IsReady>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f1      	beq.n	80055d0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80055ec:	f7ff fc53 	bl	8004e96 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fc fa72 	bl	8001ad8 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055f8:	f7fc fa6e 	bl	8001ad8 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b03      	cmp	r3, #3
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1ef      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800560a:	f7ff fc66 	bl	8004eda <LL_RCC_LSI2_IsReady>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f1      	beq.n	80055f8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fc70 	bl	8004efe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800561e:	f7ff fc17 	bl	8004e50 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7fc fa59 	bl	8001ad8 <HAL_GetTick>
 8005626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800562a:	f7fc fa55 	bl	8001ad8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e1d6      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800563c:	f7ff fc19 	bl	8004e72 <LL_RCC_LSI1_IsReady>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <HAL_RCC_OscConfig+0x31a>
 8005646:	e051      	b.n	80056ec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005648:	f7ff fbf1 	bl	8004e2e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fc fa44 	bl	8001ad8 <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005652:	e00c      	b.n	800566e <HAL_RCC_OscConfig+0x35e>
 8005654:	20000044 	.word	0x20000044
 8005658:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800565c:	f7fc fa3c 	bl	8001ad8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1bd      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800566e:	f7ff fc00 	bl	8004e72 <LL_RCC_LSI1_IsReady>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f1      	beq.n	800565c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005678:	f7ff fc1e 	bl	8004eb8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800567e:	f7fc fa2b 	bl	8001ad8 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b03      	cmp	r3, #3
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e1ac      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005690:	f7ff fc23 	bl	8004eda <LL_RCC_LSI2_IsReady>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f1      	bne.n	800567e <HAL_RCC_OscConfig+0x36e>
 800569a:	e027      	b.n	80056ec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800569c:	f7ff fc0c 	bl	8004eb8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a0:	f7fc fa1a 	bl	8001ad8 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056a8:	f7fc fa16 	bl	8001ad8 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e197      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056ba:	f7ff fc0e 	bl	8004eda <LL_RCC_LSI2_IsReady>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f1      	bne.n	80056a8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80056c4:	f7ff fbc4 	bl	8004e50 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fc fa06 	bl	8001ad8 <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056d0:	f7fc fa02 	bl	8001ad8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e183      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80056e2:	f7ff fbc6 	bl	8004e72 <LL_RCC_LSI1_IsReady>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f1      	bne.n	80056d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05b      	beq.n	80057b0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f8:	4ba7      	ldr	r3, [pc, #668]	; (8005998 <HAL_RCC_OscConfig+0x688>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d114      	bne.n	800572e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005704:	f7ff fa64 	bl	8004bd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005708:	f7fc f9e6 	bl	8001ad8 <HAL_GetTick>
 800570c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fc f9e2 	bl	8001ad8 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e163      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005722:	4b9d      	ldr	r3, [pc, #628]	; (8005998 <HAL_RCC_OscConfig+0x688>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_RCC_OscConfig+0x42c>
 8005736:	f7ff fb24 	bl	8004d82 <LL_RCC_LSE_Enable>
 800573a:	e00c      	b.n	8005756 <HAL_RCC_OscConfig+0x446>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b05      	cmp	r3, #5
 8005742:	d104      	bne.n	800574e <HAL_RCC_OscConfig+0x43e>
 8005744:	f7ff fb3f 	bl	8004dc6 <LL_RCC_LSE_EnableBypass>
 8005748:	f7ff fb1b 	bl	8004d82 <LL_RCC_LSE_Enable>
 800574c:	e003      	b.n	8005756 <HAL_RCC_OscConfig+0x446>
 800574e:	f7ff fb29 	bl	8004da4 <LL_RCC_LSE_Disable>
 8005752:	f7ff fb49 	bl	8004de8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d014      	beq.n	8005788 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575e:	f7fc f9bb 	bl	8001ad8 <HAL_GetTick>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fc f9b7 	bl	8001ad8 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e136      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800577c:	f7ff fb45 	bl	8004e0a <LL_RCC_LSE_IsReady>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ef      	beq.n	8005766 <HAL_RCC_OscConfig+0x456>
 8005786:	e013      	b.n	80057b0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005788:	f7fc f9a6 	bl	8001ad8 <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005790:	f7fc f9a2 	bl	8001ad8 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e121      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80057a6:	f7ff fb30 	bl	8004e0a <LL_RCC_LSE_IsReady>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1ef      	bne.n	8005790 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02c      	beq.n	8005816 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d014      	beq.n	80057ee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c4:	f7ff faa9 	bl	8004d1a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fc f986 	bl	8001ad8 <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057d0:	f7fc f982 	bl	8001ad8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e103      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80057e2:	f7ff fabc 	bl	8004d5e <LL_RCC_HSI48_IsReady>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f1      	beq.n	80057d0 <HAL_RCC_OscConfig+0x4c0>
 80057ec:	e013      	b.n	8005816 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ee:	f7ff faa5 	bl	8004d3c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fc f971 	bl	8001ad8 <HAL_GetTick>
 80057f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057fa:	f7fc f96d 	bl	8001ad8 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e0ee      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800580c:	f7ff faa7 	bl	8004d5e <LL_RCC_HSI48_IsReady>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f1      	bne.n	80057fa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80e4 	beq.w	80059e8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005820:	f7ff fc05 	bl	800502e <LL_RCC_GetSysClkSource>
 8005824:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	2b02      	cmp	r3, #2
 8005834:	f040 80b4 	bne.w	80059a0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0203 	and.w	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	429a      	cmp	r2, r3
 8005844:	d123      	bne.n	800588e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d11c      	bne.n	800588e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d114      	bne.n	800588e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d10d      	bne.n	800588e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d106      	bne.n	800588e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d05d      	beq.n	800594a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d058      	beq.n	8005946 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0a1      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058a6:	f7ff fc85 	bl	80051b4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058aa:	f7fc f915 	bl	8001ad8 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fc f911 	bl	8001ad8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e092      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1ef      	bne.n	80058b2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	4b30      	ldr	r3, [pc, #192]	; (800599c <HAL_RCC_OscConfig+0x68c>)
 80058da:	4013      	ands	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058ea:	0212      	lsls	r2, r2, #8
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058fe:	430a      	orrs	r2, r1
 8005900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005908:	f7ff fc45 	bl	8005196 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800591c:	f7fc f8dc 	bl	8001ad8 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005924:	f7fc f8d8 	bl	8001ad8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e059      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0ef      	beq.n	8005924 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005944:	e050      	b.n	80059e8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e04f      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d147      	bne.n	80059e8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005958:	f7ff fc1d 	bl	8005196 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800596c:	f7fc f8b4 	bl	8001ad8 <HAL_GetTick>
 8005970:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fc f8b0 	bl	8001ad8 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e031      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ef      	beq.n	8005974 <HAL_RCC_OscConfig+0x664>
 8005994:	e028      	b.n	80059e8 <HAL_RCC_OscConfig+0x6d8>
 8005996:	bf00      	nop
 8005998:	58000400 	.word	0x58000400
 800599c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d01e      	beq.n	80059e4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	f7ff fc05 	bl	80051b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fc f895 	bl	8001ad8 <HAL_GetTick>
 80059ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fc f891 	bl	8001ad8 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e012      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ef      	bne.n	80059b2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80059d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <HAL_RCC_OscConfig+0x6e4>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60cb      	str	r3, [r1, #12]
 80059e2:	e001      	b.n	80059e8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3734      	adds	r7, #52	; 0x34
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd90      	pop	{r4, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	eefefffc 	.word	0xeefefffc

080059f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e12d      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b98      	ldr	r3, [pc, #608]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d91b      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b95      	ldr	r3, [pc, #596]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 0207 	bic.w	r2, r3, #7
 8005a22:	4993      	ldr	r1, [pc, #588]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2a:	f7fc f855 	bl	8001ad8 <HAL_GetTick>
 8005a2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a32:	f7fc f851 	bl	8001ad8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e111      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a44:	4b8a      	ldr	r3, [pc, #552]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d1ef      	bne.n	8005a32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff faef 	bl	8005046 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a68:	f7fc f836 	bl	8001ad8 <HAL_GetTick>
 8005a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a70:	f7fc f832 	bl	8001ad8 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e0f2      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a82:	f7ff fbe9 	bl	8005258 <LL_RCC_IsActiveFlag_HPRE>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f1      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d016      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fae6 	bl	800506e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aa2:	f7fc f819 	bl	8001ad8 <HAL_GetTick>
 8005aa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aaa:	f7fc f815 	bl	8001ad8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0d5      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005abc:	f7ff fbde 	bl	800527c <LL_RCC_IsActiveFlag_C2HPRE>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f1      	beq.n	8005aaa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fadf 	bl	800509a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005adc:	f7fb fffc 	bl	8001ad8 <HAL_GetTick>
 8005ae0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ae4:	f7fb fff8 	bl	8001ad8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0b8      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005af6:	f7ff fbd4 	bl	80052a2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f1      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d016      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fad9 	bl	80050c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b16:	f7fb ffdf 	bl	8001ad8 <HAL_GetTick>
 8005b1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b1e:	f7fb ffdb 	bl	8001ad8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e09b      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b30:	f7ff fbca 	bl	80052c8 <LL_RCC_IsActiveFlag_PPRE1>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f1      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff facf 	bl	80050f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b52:	f7fb ffc1 	bl	8001ad8 <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b5a:	f7fb ffbd 	bl	8001ad8 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e07d      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b6c:	f7ff fbbe 	bl	80052ec <LL_RCC_IsActiveFlag_PPRE2>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f1      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d043      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d106      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005b8a:	f7ff f86f 	bl	8004c6c <LL_RCC_HSE_IsReady>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11e      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e067      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ba0:	f7ff fb17 	bl	80051d2 <LL_RCC_PLL_IsReady>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d113      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e05c      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005bb6:	f7ff f9d7 	bl	8004f68 <LL_RCC_MSI_IsReady>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e051      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005bc4:	f7ff f882 	bl	8004ccc <LL_RCC_HSI_IsReady>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e04a      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fa15 	bl	8005006 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bdc:	f7fb ff7c 	bl	8001ad8 <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be4:	f7fb ff78 	bl	8001ad8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e036      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	f7ff fa18 	bl	800502e <LL_RCC_GetSysClkSource>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d1ec      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c0a:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d21b      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 0207 	bic.w	r2, r3, #7
 8005c20:	4913      	ldr	r1, [pc, #76]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c28:	f7fb ff56 	bl	8001ad8 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c30:	f7fb ff52 	bl	8001ad8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e012      	b.n	8005c68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCC_ClockConfig+0x278>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1ef      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c50:	f000 f87e 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <HAL_RCC_ClockConfig+0x27c>)
 8005c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c5a:	f7fb ff49 	bl	8001af0 <HAL_GetTickPrio>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fb fddb 	bl	800181c <HAL_InitTick>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	58004000 	.word	0x58004000
 8005c74:	20000044 	.word	0x20000044

08005c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7e:	f7ff f9d6 	bl	800502e <LL_RCC_GetSysClkSource>
 8005c82:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c8a:	f7ff f992 	bl	8004fb2 <LL_RCC_MSI_GetRange>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	4a2b      	ldr	r2, [pc, #172]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e04b      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d102      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ca6:	4b28      	ldr	r3, [pc, #160]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e045      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005cb2:	f7fe ffab 	bl	8004c0c <LL_RCC_HSE_IsEnabledDiv2>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005cbc:	4b22      	ldr	r3, [pc, #136]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e03a      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e037      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005cc8:	f7ff faba 	bl	8005240 <LL_RCC_PLL_GetMainSource>
 8005ccc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x64>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x6a>
 8005cda:	e00d      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cde:	60bb      	str	r3, [r7, #8]
        break;
 8005ce0:	e015      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ce2:	f7fe ff93 	bl	8004c0c <LL_RCC_HSE_IsEnabledDiv2>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005cf0:	e00d      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005cf4:	60bb      	str	r3, [r7, #8]
        break;
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cf8:	f7ff f95b 	bl	8004fb2 <LL_RCC_MSI_GetRange>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	4a0f      	ldr	r2, [pc, #60]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	60bb      	str	r3, [r7, #8]
        break;
 8005d0c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005d0e:	f7ff fa72 	bl	80051f6 <LL_RCC_PLL_GetN>
 8005d12:	4602      	mov	r2, r0
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	fb03 f402 	mul.w	r4, r3, r2
 8005d1a:	f7ff fa85 	bl	8005228 <LL_RCC_PLL_GetDivider>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	3301      	adds	r3, #1
 8005d24:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d28:	f7ff fa72 	bl	8005210 <LL_RCC_PLL_GetR>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	0f5b      	lsrs	r3, r3, #29
 8005d30:	3301      	adds	r3, #1
 8005d32:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d36:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}
 8005d42:	bf00      	nop
 8005d44:	0800f6dc 	.word	0x0800f6dc
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	01e84800 	.word	0x01e84800

08005d50 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d50:	b598      	push	{r3, r4, r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d54:	f7ff ff90 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	f7ff f9dd 	bl	8005118 <LL_RCC_GetAHBPrescaler>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	091b      	lsrs	r3, r3, #4
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	4a03      	ldr	r2, [pc, #12]	; (8005d74 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd98      	pop	{r3, r4, r7, pc}
 8005d74:	0800f67c 	.word	0x0800f67c

08005d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d78:	b598      	push	{r3, r4, r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d7c:	f7ff ffe8 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 8005d80:	4604      	mov	r4, r0
 8005d82:	f7ff f9f0 	bl	8005166 <LL_RCC_GetAPB1Prescaler>
 8005d86:	4603      	mov	r3, r0
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	bd98      	pop	{r3, r4, r7, pc}
 8005da0:	0800f6bc 	.word	0x0800f6bc

08005da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005da4:	b598      	push	{r3, r4, r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005da8:	f7ff ffd2 	bl	8005d50 <HAL_RCC_GetHCLKFreq>
 8005dac:	4604      	mov	r4, r0
 8005dae:	f7ff f9e6 	bl	800517e <LL_RCC_GetAPB2Prescaler>
 8005db2:	4603      	mov	r3, r0
 8005db4:	0adb      	lsrs	r3, r3, #11
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	4a04      	ldr	r2, [pc, #16]	; (8005dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd98      	pop	{r3, r4, r7, pc}
 8005dcc:	0800f6bc 	.word	0x0800f6bc

08005dd0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	226f      	movs	r2, #111	; 0x6f
 8005dde:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005de0:	f7ff f925 	bl	800502e <LL_RCC_GetSysClkSource>
 8005de4:	4602      	mov	r2, r0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005dea:	f7ff f995 	bl	8005118 <LL_RCC_GetAHBPrescaler>
 8005dee:	4602      	mov	r2, r0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8005df4:	f7ff f9b7 	bl	8005166 <LL_RCC_GetAPB1Prescaler>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005dfe:	f7ff f9be 	bl	800517e <LL_RCC_GetAPB2Prescaler>
 8005e02:	4602      	mov	r2, r0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005e08:	f7ff f992 	bl	8005130 <LL_C2_RCC_GetAHBPrescaler>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8005e12:	f7ff f99a 	bl	800514a <LL_RCC_GetAHB4Prescaler>
 8005e16:	4602      	mov	r2, r0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <HAL_RCC_GetClockConfig+0x60>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0207 	and.w	r2, r3, #7
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	601a      	str	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	58004000 	.word	0x58004000

08005e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2bb0      	cmp	r3, #176	; 0xb0
 8005e40:	d903      	bls.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e007      	b.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e5a:	f7ff f976 	bl	800514a <LL_RCC_GetAHB4Prescaler>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	0c9c      	lsrs	r4, r3, #18
 8005e7e:	f7fe feb7 	bl	8004bf0 <HAL_PWREx_GetVoltageRange>
 8005e82:	4603      	mov	r3, r0
 8005e84:	4619      	mov	r1, r3
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 f80c 	bl	8005ea4 <RCC_SetFlashLatency>
 8005e8c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd90      	pop	{r4, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	0800f6dc 	.word	0x0800f6dc
 8005e9c:	0800f67c 	.word	0x0800f67c
 8005ea0:	431bde83 	.word	0x431bde83

08005ea4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b093      	sub	sp, #76	; 0x4c
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <RCC_SetFlashLatency+0xe8>)
 8005eb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005eba:	4a35      	ldr	r2, [pc, #212]	; (8005f90 <RCC_SetFlashLatency+0xec>)
 8005ebc:	f107 031c 	add.w	r3, r7, #28
 8005ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ec6:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <RCC_SetFlashLatency+0xf0>)
 8005ec8:	f107 040c 	add.w	r4, r7, #12
 8005ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005edc:	d11a      	bne.n	8005f14 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee2:	e013      	b.n	8005f0c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	3348      	adds	r3, #72	; 0x48
 8005eea:	443b      	add	r3, r7
 8005eec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d807      	bhi.n	8005f06 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3348      	adds	r3, #72	; 0x48
 8005efc:	443b      	add	r3, r7
 8005efe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005f04:	e020      	b.n	8005f48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f08:	3301      	adds	r3, #1
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d9e8      	bls.n	8005ee4 <RCC_SetFlashLatency+0x40>
 8005f12:	e019      	b.n	8005f48 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f18:	e013      	b.n	8005f42 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	3348      	adds	r3, #72	; 0x48
 8005f20:	443b      	add	r3, r7
 8005f22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d807      	bhi.n	8005f3c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	3348      	adds	r3, #72	; 0x48
 8005f32:	443b      	add	r3, r7
 8005f34:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005f3a:	e005      	b.n	8005f48 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3e:	3301      	adds	r3, #1
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d9e8      	bls.n	8005f1a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <RCC_SetFlashLatency+0xf4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 0207 	bic.w	r2, r3, #7
 8005f50:	4911      	ldr	r1, [pc, #68]	; (8005f98 <RCC_SetFlashLatency+0xf4>)
 8005f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f54:	4313      	orrs	r3, r2
 8005f56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f58:	f7fb fdbe 	bl	8001ad8 <HAL_GetTick>
 8005f5c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f5e:	e008      	b.n	8005f72 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f60:	f7fb fdba 	bl	8001ad8 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e007      	b.n	8005f82 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <RCC_SetFlashLatency+0xf4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1ef      	bne.n	8005f60 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	374c      	adds	r7, #76	; 0x4c
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0800f580 	.word	0x0800f580
 8005f90:	0800f590 	.word	0x0800f590
 8005f94:	0800f59c 	.word	0x0800f59c
 8005f98:	58004000 	.word	0x58004000

08005f9c <LL_RCC_LSE_IsEnabled>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <LL_RCC_LSE_IsEnabled+0x18>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <LL_RCC_LSE_IsEnabled+0x1a>
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_RCC_LSE_IsReady>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d101      	bne.n	8005fd8 <LL_RCC_LSE_IsReady+0x18>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <LL_RCC_LSE_IsReady+0x1a>
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_RCC_MSI_EnablePLLMode>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6013      	str	r3, [r2, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <LL_RCC_SetRFWKPClockSource>:
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800600a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006012:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <LL_RCC_SetSMPSClockSource>:
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f023 0203 	bic.w	r2, r3, #3
 8006040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4313      	orrs	r3, r2
 8006048:	624b      	str	r3, [r1, #36]	; 0x24
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_RCC_SetSMPSPrescaler>:
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4313      	orrs	r3, r2
 8006070:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <LL_RCC_SetUSARTClockSource>:
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	f023 0203 	bic.w	r2, r3, #3
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_RCC_SetLPUARTClockSource>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_SetI2CClockSource>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80060de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80060ee:	43db      	mvns	r3, r3
 80060f0:	401a      	ands	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80060fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_RCC_SetLPTIMClockSource>:
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	43db      	mvns	r3, r3
 8006128:	401a      	ands	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_SetSAIClockSource>:
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_RCC_SetRNGClockSource>:
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_RCC_SetCLK48ClockSource>:
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_RCC_SetUSBClockSource>:
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ffe3 	bl	800619c <LL_RCC_SetCLK48ClockSource>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <LL_RCC_SetADCClockSource>:
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_RCC_SetRTCClockSource>:
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800621e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_RCC_GetRTCClockSource>:
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_RCC_ForceBackupDomainReset>:
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800628a:	bf00      	nop
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <LL_RCC_PLLSAI1_Enable>:
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_RCC_PLLSAI1_Disable>:
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062c4:	6013      	str	r3, [r2, #0]
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <LL_RCC_PLLSAI1_IsReady>:
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e2:	d101      	bne.n	80062e8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <LL_RCC_PLLSAI1_IsReady+0x1a>
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d034      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006318:	d021      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800631a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800631e:	d81b      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006324:	d01d      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800632a:	d815      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006334:	d110      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006344:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006346:	e00d      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f94d 	bl	80065ec <RCCEx_PLLSAI1_ConfigNP>
 8006352:	4603      	mov	r3, r0
 8006354:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006356:	e005      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
        break;
 800635c:	e002      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fee8 	bl	8006144 <LL_RCC_SetSAIClockSource>
 8006374:	e001      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006382:	2b00      	cmp	r3, #0
 8006384:	d046      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006386:	f7ff ff56 	bl	8006236 <LL_RCC_GetRTCClockSource>
 800638a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d03c      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006396:	f7fe fc1b 	bl	8004bd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d105      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff30 	bl	800620a <LL_RCC_SetRTCClockSource>
 80063aa:	e02e      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063b6:	f7ff ff4b 	bl	8006250 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063ba:	f7ff ff5a 	bl	8006272 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063d6:	f7ff fde1 	bl	8005f9c <LL_RCC_LSE_IsEnabled>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d114      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063e0:	f7fb fb7a 	bl	8001ad8 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063e6:	e00b      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e8:	f7fb fb76 	bl	8001ad8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d902      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	77fb      	strb	r3, [r7, #31]
              break;
 80063fe:	e004      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006400:	f7ff fdde 	bl	8005fc0 <LL_RCC_LSE_IsReady>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d1ee      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800640a:	7ffb      	ldrb	r3, [r7, #31]
 800640c:	77bb      	strb	r3, [r7, #30]
 800640e:	e001      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fe2a 	bl	800607e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fe35 	bl	80060aa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fe5d 	bl	8006110 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fe52 	bl	8006110 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fe2a 	bl	80060d6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fe1f 	bl	80060d6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d022      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fe8d 	bl	80061c8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b6:	d107      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80064b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064c6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064d0:	d10b      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f8e3 	bl	80066a2 <RCCEx_PLLSAI1_ConfigNQ>
 80064dc:	4603      	mov	r3, r0
 80064de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064e0:	7ffb      	ldrb	r3, [r7, #31]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d02b      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d008      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006508:	d003      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fe2a 	bl	8006170 <LL_RCC_SetRNGClockSource>
 800651c:	e00a      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	2000      	movs	r0, #0
 800652a:	f7ff fe21 	bl	8006170 <LL_RCC_SetRNGClockSource>
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7ff fe34 	bl	800619c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800653c:	d107      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800654c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006556:	2b00      	cmp	r3, #0
 8006558:	d022      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fe3d 	bl	80061de <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d107      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006586:	d10b      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f8e3 	bl	8006758 <RCCEx_PLLSAI1_ConfigNR>
 8006592:	4603      	mov	r3, r0
 8006594:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006596:	7ffb      	ldrb	r3, [r7, #31]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fd26 	bl	8006002 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fd45 	bl	8006056 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fd2c 	bl	800602e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80065d6:	7fbb      	ldrb	r3, [r7, #30]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80065e4:	f7ff fcfe 	bl	8005fe4 <LL_RCC_MSI_EnablePLLMode>
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}

080065ec <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065f8:	f7ff fe5b 	bl	80062b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065fc:	f7fb fa6c 	bl	8001ad8 <HAL_GetTick>
 8006600:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006602:	e009      	b.n	8006618 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006604:	f7fb fa68 	bl	8001ad8 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d902      	bls.n	8006618 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	73fb      	strb	r3, [r7, #15]
      break;
 8006616:	e004      	b.n	8006622 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006618:	f7ff fe5a 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d137      	bne.n	8006698 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800663c:	4313      	orrs	r3, r2
 800663e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006652:	4313      	orrs	r3, r2
 8006654:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006656:	f7ff fe1d 	bl	8006294 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665a:	f7fb fa3d 	bl	8001ad8 <HAL_GetTick>
 800665e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006660:	e009      	b.n	8006676 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006662:	f7fb fa39 	bl	8001ad8 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d902      	bls.n	8006676 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	73fb      	strb	r3, [r7, #15]
        break;
 8006674:	e004      	b.n	8006680 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006676:	f7ff fe2b 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d1f0      	bne.n	8006662 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d108      	bne.n	8006698 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006694:	4313      	orrs	r3, r2
 8006696:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066ae:	f7ff fe00 	bl	80062b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066b2:	f7fb fa11 	bl	8001ad8 <HAL_GetTick>
 80066b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066b8:	e009      	b.n	80066ce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ba:	f7fb fa0d 	bl	8001ad8 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d902      	bls.n	80066ce <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e004      	b.n	80066d8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ce:	f7ff fdff 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d137      	bne.n	800674e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f2:	4313      	orrs	r3, r2
 80066f4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006708:	4313      	orrs	r3, r2
 800670a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800670c:	f7ff fdc2 	bl	8006294 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006710:	f7fb f9e2 	bl	8001ad8 <HAL_GetTick>
 8006714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006716:	e009      	b.n	800672c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006718:	f7fb f9de 	bl	8001ad8 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d902      	bls.n	800672c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	73fb      	strb	r3, [r7, #15]
        break;
 800672a:	e004      	b.n	8006736 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800672c:	f7ff fdd0 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d1f0      	bne.n	8006718 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d108      	bne.n	800674e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800673c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006764:	f7ff fda5 	bl	80062b2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006768:	f7fb f9b6 	bl	8001ad8 <HAL_GetTick>
 800676c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800676e:	e009      	b.n	8006784 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006770:	f7fb f9b2 	bl	8001ad8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d902      	bls.n	8006784 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	73fb      	strb	r3, [r7, #15]
      break;
 8006782:	e004      	b.n	800678e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006784:	f7ff fda4 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f0      	bne.n	8006770 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d137      	bne.n	8006804 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a8:	4313      	orrs	r3, r2
 80067aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80067ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067be:	4313      	orrs	r3, r2
 80067c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067c2:	f7ff fd67 	bl	8006294 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c6:	f7fb f987 	bl	8001ad8 <HAL_GetTick>
 80067ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067cc:	e009      	b.n	80067e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ce:	f7fb f983 	bl	8001ad8 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d902      	bls.n	80067e2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	73fb      	strb	r3, [r7, #15]
        break;
 80067e0:	e004      	b.n	80067ec <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e2:	f7ff fd75 	bl	80062d0 <LL_RCC_PLLSAI1_IsReady>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d1f0      	bne.n	80067ce <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006800:	4313      	orrs	r3, r2
 8006802:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e049      	b.n	80068b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f841 	bl	80068bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 f9b7 	bl	8006bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d001      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e036      	b.n	8006956 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a17      	ldr	r2, [pc, #92]	; (8006964 <HAL_TIM_Base_Start_IT+0x94>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x44>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d115      	bne.n	8006940 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <HAL_TIM_Base_Start_IT+0x98>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d015      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0x82>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692c:	d011      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	e008      	b.n	8006952 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e000      	b.n	8006954 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	00010007 	.word	0x00010007

0800696c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d020      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0202 	mvn.w	r2, #2
 80069a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8e4 	bl	8006b84 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8d6 	bl	8006b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8e7 	bl	8006b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0204 	mvn.w	r2, #4
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8be 	bl	8006b84 <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8b0 	bl	8006b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f8c1 	bl	8006b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0208 	mvn.w	r2, #8
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f898 	bl	8006b84 <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f88a 	bl	8006b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f89b 	bl	8006b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d020      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0210 	mvn.w	r2, #16
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f872 	bl	8006b84 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f864 	bl	8006b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f875 	bl	8006b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0201 	mvn.w	r2, #1
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa fc9a 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00c      	beq.n	8006afc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8d0 	bl	8006c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00c      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8c8 	bl	8006cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f834 	bl	8006bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0220 	mvn.w	r2, #32
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f890 	bl	8006c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <TIM_Base_SetConfig+0xbc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x20>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a21      	ldr	r2, [pc, #132]	; (8006c7c <TIM_Base_SetConfig+0xbc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <TIM_Base_SetConfig+0x52>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c00:	d007      	beq.n	8006c12 <TIM_Base_SetConfig+0x52>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <TIM_Base_SetConfig+0xc0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_Base_SetConfig+0x52>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <TIM_Base_SetConfig+0xc4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <TIM_Base_SetConfig+0xbc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d007      	beq.n	8006c60 <TIM_Base_SetConfig+0xa0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <TIM_Base_SetConfig+0xc0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_Base_SetConfig+0xa0>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <TIM_Base_SetConfig+0xc4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d103      	bne.n	8006c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	615a      	str	r2, [r3, #20]
}
 8006c6e:	bf00      	nop
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800

08006c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_RCC_GetUSARTClockSource>:
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4013      	ands	r3, r2
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <LL_RCC_GetLPUARTClockSource>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4013      	ands	r3, r2
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e042      	b.n	8006d9c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fa fc85 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2224      	movs	r2, #36	; 0x24
 8006d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f914 	bl	8007f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fee9 	bl	8007b2c <UART_SetConfig>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e01b      	b.n	8006d9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 f993 	bl	80080c0 <UART_CheckIdleState>
 8006d9a:	4603      	mov	r3, r0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b091      	sub	sp, #68	; 0x44
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d178      	bne.n	8006eae <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_UART_Transmit_IT+0x24>
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e071      	b.n	8006eb0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2221      	movs	r2, #33	; 0x21
 8006df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e00:	d12a      	bne.n	8006e58 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0a:	d107      	bne.n	8006e1c <HAL_UART_Transmit_IT+0x78>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a29      	ldr	r2, [pc, #164]	; (8006ebc <HAL_UART_Transmit_IT+0x118>)
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78
 8006e1a:	e002      	b.n	8006e22 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <HAL_UART_Transmit_IT+0x11c>)
 8006e20:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e42:	637a      	str	r2, [r7, #52]	; 0x34
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <HAL_UART_Transmit_IT+0x7e>
 8006e56:	e028      	b.n	8006eaa <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d107      	bne.n	8006e72 <HAL_UART_Transmit_IT+0xce>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a15      	ldr	r2, [pc, #84]	; (8006ec4 <HAL_UART_Transmit_IT+0x120>)
 8006e6e:	679a      	str	r2, [r3, #120]	; 0x78
 8006e70:	e002      	b.n	8006e78 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <HAL_UART_Transmit_IT+0x124>)
 8006e76:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	613b      	str	r3, [r7, #16]
   return(result);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e000      	b.n	8006eb0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006eae:	2302      	movs	r3, #2
  }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3744      	adds	r7, #68	; 0x44
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	08008d33 	.word	0x08008d33
 8006ec0:	08008c53 	.word	0x08008c53
 8006ec4:	08008b91 	.word	0x08008b91
 8006ec8:	08008ad9 	.word	0x08008ad9

08006ecc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08a      	sub	sp, #40	; 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d137      	bne.n	8006f54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_UART_Receive_IT+0x24>
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e030      	b.n	8006f56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_UART_Receive_IT+0x94>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d01f      	beq.n	8006f44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e6      	bne.n	8006f12 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	461a      	mov	r2, r3
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f001 f9ca 	bl	80082e4 <UART_Start_Receive_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	e000      	b.n	8006f56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
  }
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3728      	adds	r7, #40	; 0x28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40008000 	.word	0x40008000

08006f64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d167      	bne.n	800704c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_UART_Transmit_DMA+0x24>
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e060      	b.n	800704e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2221      	movs	r2, #33	; 0x21
 8006fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d028      	beq.n	800700c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_UART_Transmit_DMA+0xf4>)
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc6:	4a25      	ldr	r2, [pc, #148]	; (800705c <HAL_UART_Transmit_DMA+0xf8>)
 8006fc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fce:	4a24      	ldr	r2, [pc, #144]	; (8007060 <HAL_UART_Transmit_DMA+0xfc>)
 8006fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3328      	adds	r3, #40	; 0x28
 8006fea:	461a      	mov	r2, r3
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	f7fc fc23 	bl	8003838 <HAL_DMA_Start_IT>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e020      	b.n	800704e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2240      	movs	r2, #64	; 0x40
 8007012:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3308      	adds	r3, #8
 800701a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	613b      	str	r3, [r7, #16]
   return(result);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007034:	623a      	str	r2, [r7, #32]
 8007036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	6a3a      	ldr	r2, [r7, #32]
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	61bb      	str	r3, [r7, #24]
   return(result);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e5      	bne.n	8007014 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3728      	adds	r7, #40	; 0x28
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	080087c3 	.word	0x080087c3
 800705c:	0800885d 	.word	0x0800885d
 8007060:	080089e3 	.word	0x080089e3

08007064 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b090      	sub	sp, #64	; 0x40
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d139      	bne.n	80070fe <HAL_UART_DMAStop+0x9a>
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	2b21      	cmp	r3, #33	; 0x21
 800708e:	d136      	bne.n	80070fe <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d015      	beq.n	80070f8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fc fc2c 	bl	800392e <HAL_DMA_Abort>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fc fd91 	bl	8003c08 <HAL_DMA_GetError>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d105      	bne.n	80070f8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2210      	movs	r2, #16
 80070f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e047      	b.n	8007188 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fabb 	bl	8008674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d13c      	bne.n	8007186 <HAL_UART_DMAStop+0x122>
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	2b22      	cmp	r3, #34	; 0x22
 8007110:	d139      	bne.n	8007186 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	60bb      	str	r3, [r7, #8]
   return(result);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	633b      	str	r3, [r7, #48]	; 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007132:	61ba      	str	r2, [r7, #24]
 8007134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6979      	ldr	r1, [r7, #20]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	613b      	str	r3, [r7, #16]
   return(result);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800714c:	2b00      	cmp	r3, #0
 800714e:	d017      	beq.n	8007180 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fbe9 	bl	800392e <HAL_DMA_Abort>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007168:	4618      	mov	r0, r3
 800716a:	f7fc fd4d 	bl	8003c08 <HAL_DMA_GetError>
 800716e:	4603      	mov	r3, r0
 8007170:	2b20      	cmp	r3, #32
 8007172:	d105      	bne.n	8007180 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2210      	movs	r2, #16
 8007178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e003      	b.n	8007188 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fab8 	bl	80086f6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3740      	adds	r7, #64	; 0x40
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b09a      	sub	sp, #104	; 0x68
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b6:	657b      	str	r3, [r7, #84]	; 0x54
 80071b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e0:	f023 0301 	bic.w	r3, r3, #1
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ee:	643a      	str	r2, [r7, #64]	; 0x40
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e3      	bne.n	80071ca <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007206:	2b01      	cmp	r3, #1
 8007208:	d118      	bne.n	800723c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	61fb      	str	r3, [r7, #28]
   return(result);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	f023 0310 	bic.w	r3, r3, #16
 800721e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800722e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e6      	bne.n	800720a <HAL_UART_AbortReceive_IT+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d154      	bne.n	80072f4 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	60bb      	str	r3, [r7, #8]
   return(result);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007260:	65bb      	str	r3, [r7, #88]	; 0x58
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800726a:	61ba      	str	r2, [r7, #24]
 800726c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6979      	ldr	r1, [r7, #20]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	613b      	str	r3, [r7, #16]
   return(result);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e5      	bne.n	800724a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d017      	beq.n	80072b8 <HAL_UART_AbortReceive_IT+0x128>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728e:	4a26      	ldr	r2, [pc, #152]	; (8007328 <HAL_UART_AbortReceive_IT+0x198>)
 8007290:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007298:	4618      	mov	r0, r3
 800729a:	f7fc fba7 	bl	80039ec <HAL_DMA_Abort_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d03c      	beq.n	800731e <HAL_UART_AbortReceive_IT+0x18e>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80072b2:	4610      	mov	r0, r2
 80072b4:	4798      	blx	r3
 80072b6:	e032      	b.n	800731e <HAL_UART_AbortReceive_IT+0x18e>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	220f      	movs	r2, #15
 80072cc:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699a      	ldr	r2, [r3, #24]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0208 	orr.w	r2, r2, #8
 80072dc:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb55 	bl	800799c <HAL_UART_AbortReceiveCpltCallback>
 80072f2:	e014      	b.n	800731e <HAL_UART_AbortReceive_IT+0x18e>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	220f      	movs	r2, #15
 8007308:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb3f 	bl	800799c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3768      	adds	r7, #104	; 0x68
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	08008a8f 	.word	0x08008a8f

0800732c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b0ba      	sub	sp, #232	; 0xe8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007356:	f640 030f 	movw	r3, #2063	; 0x80f
 800735a:	4013      	ands	r3, r2
 800735c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11b      	bne.n	80073a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b00      	cmp	r3, #0
 8007372:	d015      	beq.n	80073a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 82e3 	beq.w	800795c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      }
      return;
 800739e:	e2dd      	b.n	800795c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8123 	beq.w	80075f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073ae:	4b8d      	ldr	r3, [pc, #564]	; (80075e4 <HAL_UART_IRQHandler+0x2b8>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073ba:	4b8b      	ldr	r3, [pc, #556]	; (80075e8 <HAL_UART_IRQHandler+0x2bc>)
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8116 	beq.w	80075f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d011      	beq.n	80073f4 <HAL_UART_IRQHandler+0xc8>
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d011      	beq.n	8007424 <HAL_UART_IRQHandler+0xf8>
 8007400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2202      	movs	r2, #2
 8007412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_UART_IRQHandler+0x128>
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d017      	beq.n	8007490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800746c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007470:	4b5c      	ldr	r3, [pc, #368]	; (80075e4 <HAL_UART_IRQHandler+0x2b8>)
 8007472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <HAL_UART_IRQHandler+0x196>
 800749c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8249 	beq.w	8007960 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d013      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007522:	2b00      	cmp	r3, #0
 8007524:	d054      	beq.n	80075d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f8e5 	bl	80086f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d146      	bne.n	80075c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800756a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800757e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d9      	bne.n	800753a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800758c:	2b00      	cmp	r3, #0
 800758e:	d017      	beq.n	80075c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <HAL_UART_IRQHandler+0x2c0>)
 8007598:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fc fa23 	bl	80039ec <HAL_DMA_Abort_IT>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d019      	beq.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80075ba:	4610      	mov	r0, r2
 80075bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075be:	e00f      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f007 fd77 	bl	800f0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c6:	e00b      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f007 fd73 	bl	800f0b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ce:	e007      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f007 fd6f 	bl	800f0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80075de:	e1bf      	b.n	8007960 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	bf00      	nop
    return;
 80075e2:	e1bd      	b.n	8007960 <HAL_UART_IRQHandler+0x634>
 80075e4:	10000001 	.word	0x10000001
 80075e8:	04000120 	.word	0x04000120
 80075ec:	08008a63 	.word	0x08008a63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f040 8153 	bne.w	80078a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 814c 	beq.w	80078a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8145 	beq.w	80078a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2210      	movs	r2, #16
 800761c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	f040 80bb 	bne.w	80077a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 818f 	beq.w	8007964 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800764c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007650:	429a      	cmp	r2, r3
 8007652:	f080 8187 	bcs.w	8007964 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800765c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 8087 	bne.w	8007782 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800768c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800769e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1da      	bne.n	8007674 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e1      	bne.n	80076be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800770a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800770c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800771e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800772c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e3      	bne.n	80076fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800774e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007750:	f023 0310 	bic.w	r3, r3, #16
 8007754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007762:	65bb      	str	r3, [r7, #88]	; 0x58
 8007764:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e4      	bne.n	8007740 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800777c:	4618      	mov	r0, r3
 800777e:	f7fc f8d6 	bl	800392e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007794:	b29b      	uxth	r3, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	b29b      	uxth	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f007 fce3 	bl	800f168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077a2:	e0df      	b.n	8007964 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80d1 	beq.w	8007968 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80077c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80cc 	beq.w	8007968 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077f2:	647b      	str	r3, [r7, #68]	; 0x44
 80077f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e4      	bne.n	80077d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	623b      	str	r3, [r7, #32]
   return(result);
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800782e:	633a      	str	r2, [r7, #48]	; 0x30
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e1      	bne.n	8007806 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	60fb      	str	r3, [r7, #12]
   return(result);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0310 	bic.w	r3, r3, #16
 800786a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	69b9      	ldr	r1, [r7, #24]
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	617b      	str	r3, [r7, #20]
   return(result);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e4      	bne.n	8007856 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f007 fc65 	bl	800f168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800789e:	e063      	b.n	8007968 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <HAL_UART_IRQHandler+0x59e>
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fff2 	bl	80098ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078c8:	e051      	b.n	800796e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d014      	beq.n	8007900 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d03a      	beq.n	800796c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
    }
    return;
 80078fe:	e035      	b.n	800796c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <HAL_UART_IRQHandler+0x5f4>
 800790c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f001 fa7f 	bl	8008e1c <UART_EndTransmit_IT>
    return;
 800791e:	e026      	b.n	800796e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <HAL_UART_IRQHandler+0x614>
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 ffcb 	bl	80098d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800793e:	e016      	b.n	800796e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d010      	beq.n	800796e <HAL_UART_IRQHandler+0x642>
 800794c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007950:	2b00      	cmp	r3, #0
 8007952:	da0c      	bge.n	800796e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 ffb3 	bl	80098c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800795a:	e008      	b.n	800796e <HAL_UART_IRQHandler+0x642>
      return;
 800795c:	bf00      	nop
 800795e:	e006      	b.n	800796e <HAL_UART_IRQHandler+0x642>
    return;
 8007960:	bf00      	nop
 8007962:	e004      	b.n	800796e <HAL_UART_IRQHandler+0x642>
      return;
 8007964:	bf00      	nop
 8007966:	e002      	b.n	800796e <HAL_UART_IRQHandler+0x642>
      return;
 8007968:	bf00      	nop
 800796a:	e000      	b.n	800796e <HAL_UART_IRQHandler+0x642>
    return;
 800796c:	bf00      	nop
  }
}
 800796e:	37e8      	adds	r7, #232	; 0xe8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b08f      	sub	sp, #60	; 0x3c
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e042      	b.n	8007a4c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2224      	movs	r2, #36	; 0x24
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f023 030c 	bic.w	r3, r3, #12
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	61bb      	str	r3, [r7, #24]
 8007a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6979      	ldr	r1, [r7, #20]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	613b      	str	r3, [r7, #16]
   return(result);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e6      	bne.n	8007a08 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	373c      	adds	r7, #60	; 0x3c
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b08f      	sub	sp, #60	; 0x3c
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_HalfDuplex_EnableReceiver+0x16>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e042      	b.n	8007af4 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2224      	movs	r2, #36	; 0x24
 8007a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f023 030c 	bic.w	r3, r3, #12
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f043 0304 	orr.w	r3, r3, #4
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6979      	ldr	r1, [r7, #20]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	613b      	str	r3, [r7, #16]
   return(result);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e6      	bne.n	8007ab0 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	373c      	adds	r7, #60	; 0x3c
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b16:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4313      	orrs	r3, r2
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b30:	b08c      	sub	sp, #48	; 0x30
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4baf      	ldr	r3, [pc, #700]	; (8007e18 <UART_SetConfig+0x2ec>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4aa4      	ldr	r2, [pc, #656]	; (8007e1c <UART_SetConfig+0x2f0>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b94:	4313      	orrs	r3, r2
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bac:	430b      	orrs	r3, r1
 8007bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	f023 010f 	bic.w	r1, r3, #15
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a95      	ldr	r2, [pc, #596]	; (8007e20 <UART_SetConfig+0x2f4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d125      	bne.n	8007c1c <UART_SetConfig+0xf0>
 8007bd0:	2003      	movs	r0, #3
 8007bd2:	f7ff f877 	bl	8006cc4 <LL_RCC_GetUSARTClockSource>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d81b      	bhi.n	8007c14 <UART_SetConfig+0xe8>
 8007bdc:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0xb8>)
 8007bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be2:	bf00      	nop
 8007be4:	08007bf5 	.word	0x08007bf5
 8007be8:	08007c05 	.word	0x08007c05
 8007bec:	08007bfd 	.word	0x08007bfd
 8007bf0:	08007c0d 	.word	0x08007c0d
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfa:	e042      	b.n	8007c82 <UART_SetConfig+0x156>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e03e      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0a:	e03a      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e036      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e032      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a7e      	ldr	r2, [pc, #504]	; (8007e1c <UART_SetConfig+0x2f0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d12a      	bne.n	8007c7c <UART_SetConfig+0x150>
 8007c26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c2a:	f7ff f85b 	bl	8006ce4 <LL_RCC_GetLPUARTClockSource>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c34:	d01a      	beq.n	8007c6c <UART_SetConfig+0x140>
 8007c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c3a:	d81b      	bhi.n	8007c74 <UART_SetConfig+0x148>
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	d00c      	beq.n	8007c5c <UART_SetConfig+0x130>
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c46:	d815      	bhi.n	8007c74 <UART_SetConfig+0x148>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <UART_SetConfig+0x128>
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c50:	d008      	beq.n	8007c64 <UART_SetConfig+0x138>
 8007c52:	e00f      	b.n	8007c74 <UART_SetConfig+0x148>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e012      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e00e      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6a:	e00a      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c72:	e006      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e002      	b.n	8007c82 <UART_SetConfig+0x156>
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a65      	ldr	r2, [pc, #404]	; (8007e1c <UART_SetConfig+0x2f0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	f040 8097 	bne.w	8007dbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d823      	bhi.n	8007cde <UART_SetConfig+0x1b2>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x170>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cc1 	.word	0x08007cc1
 8007ca0:	08007cdf 	.word	0x08007cdf
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007cdf 	.word	0x08007cdf
 8007cac:	08007ccf 	.word	0x08007ccf
 8007cb0:	08007cdf 	.word	0x08007cdf
 8007cb4:	08007cdf 	.word	0x08007cdf
 8007cb8:	08007cdf 	.word	0x08007cdf
 8007cbc:	08007cd7 	.word	0x08007cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc0:	f7fe f85a 	bl	8005d78 <HAL_RCC_GetPCLK1Freq>
 8007cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cc6:	e010      	b.n	8007cea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc8:	4b56      	ldr	r3, [pc, #344]	; (8007e24 <UART_SetConfig+0x2f8>)
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ccc:	e00d      	b.n	8007cea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cce:	f7fd ffd3 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8007cd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cd4:	e009      	b.n	8007cea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cdc:	e005      	b.n	8007cea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ce8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 812b 	beq.w	8007f48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	4a4c      	ldr	r2, [pc, #304]	; (8007e28 <UART_SetConfig+0x2fc>)
 8007cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	4413      	add	r3, r2
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d305      	bcc.n	8007d22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d903      	bls.n	8007d2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d28:	e10e      	b.n	8007f48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	60fa      	str	r2, [r7, #12]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	4a3c      	ldr	r2, [pc, #240]	; (8007e28 <UART_SetConfig+0x2fc>)
 8007d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2200      	movs	r2, #0
 8007d40:	603b      	str	r3, [r7, #0]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d4c:	f7f8 fde6 	bl	800091c <__aeabi_uldivmod>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4610      	mov	r0, r2
 8007d56:	4619      	mov	r1, r3
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	f04f 0300 	mov.w	r3, #0
 8007d60:	020b      	lsls	r3, r1, #8
 8007d62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d66:	0202      	lsls	r2, r0, #8
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	6849      	ldr	r1, [r1, #4]
 8007d6c:	0849      	lsrs	r1, r1, #1
 8007d6e:	2000      	movs	r0, #0
 8007d70:	460c      	mov	r4, r1
 8007d72:	4605      	mov	r5, r0
 8007d74:	eb12 0804 	adds.w	r8, r2, r4
 8007d78:	eb43 0905 	adc.w	r9, r3, r5
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	469a      	mov	sl, r3
 8007d84:	4693      	mov	fp, r2
 8007d86:	4652      	mov	r2, sl
 8007d88:	465b      	mov	r3, fp
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 fdc5 	bl	800091c <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4613      	mov	r3, r2
 8007d98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da0:	d308      	bcc.n	8007db4 <UART_SetConfig+0x288>
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da8:	d204      	bcs.n	8007db4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6a3a      	ldr	r2, [r7, #32]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	e0c9      	b.n	8007f48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dba:	e0c5      	b.n	8007f48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc4:	d16d      	bne.n	8007ea2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	2b07      	cmp	r3, #7
 8007dce:	d82d      	bhi.n	8007e2c <UART_SetConfig+0x300>
 8007dd0:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x2ac>)
 8007dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd6:	bf00      	nop
 8007dd8:	08007df9 	.word	0x08007df9
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007e2d 	.word	0x08007e2d
 8007de4:	08007e07 	.word	0x08007e07
 8007de8:	08007e2d 	.word	0x08007e2d
 8007dec:	08007e2d 	.word	0x08007e2d
 8007df0:	08007e2d 	.word	0x08007e2d
 8007df4:	08007e0f 	.word	0x08007e0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007df8:	f7fd ffd4 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8007dfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dfe:	e01b      	b.n	8007e38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <UART_SetConfig+0x2f8>)
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e04:	e018      	b.n	8007e38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e06:	f7fd ff37 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8007e0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e0c:	e014      	b.n	8007e38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e14:	e010      	b.n	8007e38 <UART_SetConfig+0x30c>
 8007e16:	bf00      	nop
 8007e18:	cfff69f3 	.word	0xcfff69f3
 8007e1c:	40008000 	.word	0x40008000
 8007e20:	40013800 	.word	0x40013800
 8007e24:	00f42400 	.word	0x00f42400
 8007e28:	0800f71c 	.word	0x0800f71c
      default:
        pclk = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8084 	beq.w	8007f48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	4a4b      	ldr	r2, [pc, #300]	; (8007f74 <UART_SetConfig+0x448>)
 8007e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e52:	005a      	lsls	r2, r3, #1
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	085b      	lsrs	r3, r3, #1
 8007e5a:	441a      	add	r2, r3
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2b0f      	cmp	r3, #15
 8007e6a:	d916      	bls.n	8007e9a <UART_SetConfig+0x36e>
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e72:	d212      	bcs.n	8007e9a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f023 030f 	bic.w	r3, r3, #15
 8007e7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	8bfb      	ldrh	r3, [r7, #30]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	8bfa      	ldrh	r2, [r7, #30]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e056      	b.n	8007f48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ea0:	e052      	b.n	8007f48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d822      	bhi.n	8007ef2 <UART_SetConfig+0x3c6>
 8007eac:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <UART_SetConfig+0x388>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007ed5 	.word	0x08007ed5
 8007eb8:	08007edd 	.word	0x08007edd
 8007ebc:	08007ef3 	.word	0x08007ef3
 8007ec0:	08007ee3 	.word	0x08007ee3
 8007ec4:	08007ef3 	.word	0x08007ef3
 8007ec8:	08007ef3 	.word	0x08007ef3
 8007ecc:	08007ef3 	.word	0x08007ef3
 8007ed0:	08007eeb 	.word	0x08007eeb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed4:	f7fd ff66 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eda:	e010      	b.n	8007efe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007edc:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <UART_SetConfig+0x44c>)
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ee0:	e00d      	b.n	8007efe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee2:	f7fd fec9 	bl	8005c78 <HAL_RCC_GetSysClockFreq>
 8007ee6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ee8:	e009      	b.n	8007efe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ef0:	e005      	b.n	8007efe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007efc:	bf00      	nop
    }

    if (pclk != 0U)
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d021      	beq.n	8007f48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <UART_SetConfig+0x448>)
 8007f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b0f      	cmp	r3, #15
 8007f2c:	d909      	bls.n	8007f42 <UART_SetConfig+0x416>
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f34:	d205      	bcs.n	8007f42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e002      	b.n	8007f48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2200      	movs	r2, #0
 8007f62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3730      	adds	r7, #48	; 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f72:	bf00      	nop
 8007f74:	0800f71c 	.word	0x0800f71c
 8007f78:	00f42400 	.word	0x00f42400

08007f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00a      	beq.n	800802e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01a      	beq.n	8008092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d10a      	bne.n	8008092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00a      	beq.n	80080b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	605a      	str	r2, [r3, #4]
  }
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b098      	sub	sp, #96	; 0x60
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080d0:	f7f9 fd02 	bl	8001ad8 <HAL_GetTick>
 80080d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d12f      	bne.n	8008144 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ec:	2200      	movs	r2, #0
 80080ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f88e 	bl	8008214 <UART_WaitOnFlagUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d022      	beq.n	8008144 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008112:	653b      	str	r3, [r7, #80]	; 0x50
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800811c:	647b      	str	r3, [r7, #68]	; 0x44
 800811e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800812a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e6      	bne.n	80080fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e063      	b.n	800820c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b04      	cmp	r3, #4
 8008150:	d149      	bne.n	80081e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008152:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800815a:	2200      	movs	r2, #0
 800815c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f857 	bl	8008214 <UART_WaitOnFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d03c      	beq.n	80081e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	623b      	str	r3, [r7, #32]
   return(result);
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
 800818c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e6      	bne.n	800816c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081be:	61fa      	str	r2, [r7, #28]
 80081c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	69b9      	ldr	r1, [r7, #24]
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	617b      	str	r3, [r7, #20]
   return(result);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e012      	b.n	800820c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3758      	adds	r7, #88	; 0x58
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008224:	e049      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d045      	beq.n	80082ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800822e:	f7f9 fc53 	bl	8001ad8 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d302      	bcc.n	8008244 <UART_WaitOnFlagUntilTimeout+0x30>
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e048      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d031      	beq.n	80082ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b08      	cmp	r3, #8
 8008262:	d110      	bne.n	8008286 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2208      	movs	r2, #8
 800826a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fa42 	bl	80086f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2208      	movs	r2, #8
 8008276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e029      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008294:	d111      	bne.n	80082ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800829e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fa28 	bl	80086f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e00f      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69da      	ldr	r2, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4013      	ands	r3, r2
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	bf0c      	ite	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	2300      	movne	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d0a6      	beq.n	8008226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b0a3      	sub	sp, #140	; 0x8c
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008316:	d10e      	bne.n	8008336 <UART_Start_Receive_IT+0x52>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <UART_Start_Receive_IT+0x48>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008326:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800832a:	e02d      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	22ff      	movs	r2, #255	; 0xff
 8008330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008334:	e028      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10d      	bne.n	800835a <UART_Start_Receive_IT+0x76>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d104      	bne.n	8008350 <UART_Start_Receive_IT+0x6c>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	22ff      	movs	r2, #255	; 0xff
 800834a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800834e:	e01b      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	227f      	movs	r2, #127	; 0x7f
 8008354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008358:	e016      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008362:	d10d      	bne.n	8008380 <UART_Start_Receive_IT+0x9c>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <UART_Start_Receive_IT+0x92>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	227f      	movs	r2, #127	; 0x7f
 8008370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008374:	e008      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	223f      	movs	r2, #63	; 0x3f
 800837a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800837e:	e003      	b.n	8008388 <UART_Start_Receive_IT+0xa4>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2222      	movs	r2, #34	; 0x22
 8008394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083aa:	f043 0301 	orr.w	r3, r3, #1
 80083ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083bc:	673a      	str	r2, [r7, #112]	; 0x70
 80083be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80083c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80083ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e3      	bne.n	8008398 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d8:	d14f      	bne.n	800847a <UART_Start_Receive_IT+0x196>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083e0:	88fa      	ldrh	r2, [r7, #6]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d349      	bcc.n	800847a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ee:	d107      	bne.n	8008400 <UART_Start_Receive_IT+0x11c>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4a47      	ldr	r2, [pc, #284]	; (8008518 <UART_Start_Receive_IT+0x234>)
 80083fc:	675a      	str	r2, [r3, #116]	; 0x74
 80083fe:	e002      	b.n	8008406 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4a46      	ldr	r2, [pc, #280]	; (800851c <UART_Start_Receive_IT+0x238>)
 8008404:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01a      	beq.n	8008444 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008430:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008432:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008436:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800843e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e4      	bne.n	800840e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	e853 3f00 	ldrex	r3, [r3]
 8008452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3308      	adds	r3, #8
 8008462:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008464:	64ba      	str	r2, [r7, #72]	; 0x48
 8008466:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800846a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e5      	bne.n	8008444 <UART_Start_Receive_IT+0x160>
 8008478:	e046      	b.n	8008508 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008482:	d107      	bne.n	8008494 <UART_Start_Receive_IT+0x1b0>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4a24      	ldr	r2, [pc, #144]	; (8008520 <UART_Start_Receive_IT+0x23c>)
 8008490:	675a      	str	r2, [r3, #116]	; 0x74
 8008492:	e002      	b.n	800849a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4a23      	ldr	r2, [pc, #140]	; (8008524 <UART_Start_Receive_IT+0x240>)
 8008498:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d019      	beq.n	80084d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084b6:	677b      	str	r3, [r7, #116]	; 0x74
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
 80084c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e6      	bne.n	80084a2 <UART_Start_Receive_IT+0x1be>
 80084d4:	e018      	b.n	8008508 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	613b      	str	r3, [r7, #16]
   return(result);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f043 0320 	orr.w	r3, r3, #32
 80084ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	69f9      	ldr	r1, [r7, #28]
 80084fa:	6a3a      	ldr	r2, [r7, #32]
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	61bb      	str	r3, [r7, #24]
   return(result);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	378c      	adds	r7, #140	; 0x8c
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	08009545 	.word	0x08009545
 800851c:	080091e5 	.word	0x080091e5
 8008520:	0800902d 	.word	0x0800902d
 8008524:	08008e75 	.word	0x08008e75

08008528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b096      	sub	sp, #88	; 0x58
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2222      	movs	r2, #34	; 0x22
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800855a:	2b00      	cmp	r3, #0
 800855c:	d02d      	beq.n	80085ba <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008564:	4a40      	ldr	r2, [pc, #256]	; (8008668 <UART_Start_Receive_DMA+0x140>)
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856e:	4a3f      	ldr	r2, [pc, #252]	; (800866c <UART_Start_Receive_DMA+0x144>)
 8008570:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008578:	4a3d      	ldr	r2, [pc, #244]	; (8008670 <UART_Start_Receive_DMA+0x148>)
 800857a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008582:	2200      	movs	r2, #0
 8008584:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3324      	adds	r3, #36	; 0x24
 8008592:	4619      	mov	r1, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008598:	461a      	mov	r2, r3
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	f7fb f94c 	bl	8003838 <HAL_DMA_Start_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2210      	movs	r2, #16
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e051      	b.n	800865e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d018      	beq.n	80085f4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d6:	657b      	str	r3, [r7, #84]	; 0x54
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3308      	adds	r3, #8
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	653b      	str	r3, [r7, #80]	; 0x50
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3308      	adds	r3, #8
 8008612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008614:	637a      	str	r2, [r7, #52]	; 0x34
 8008616:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800861a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e5      	bne.n	80085f4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	613b      	str	r3, [r7, #16]
   return(result);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008648:	623a      	str	r2, [r7, #32]
 800864a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	69f9      	ldr	r1, [r7, #28]
 800864e:	6a3a      	ldr	r2, [r7, #32]
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	61bb      	str	r3, [r7, #24]
   return(result);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e5      	bne.n	8008628 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3758      	adds	r7, #88	; 0x58
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	08008879 	.word	0x08008879
 800866c:	080089a5 	.word	0x080089a5
 8008670:	080089e3 	.word	0x080089e3

08008674 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b08f      	sub	sp, #60	; 0x3c
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	61fb      	str	r3, [r7, #28]
   return(result);
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086c4:	633b      	str	r3, [r7, #48]	; 0x30
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	61ba      	str	r2, [r7, #24]
 80086d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6979      	ldr	r1, [r7, #20]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	613b      	str	r3, [r7, #16]
   return(result);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80086ea:	bf00      	nop
 80086ec:	373c      	adds	r7, #60	; 0x3c
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b095      	sub	sp, #84	; 0x54
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
 800871e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008746:	f023 0301 	bic.w	r3, r3, #1
 800874a:	64bb      	str	r3, [r7, #72]	; 0x48
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e3      	bne.n	8008730 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d118      	bne.n	80087a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	60bb      	str	r3, [r7, #8]
   return(result);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f023 0310 	bic.w	r3, r3, #16
 8008784:	647b      	str	r3, [r7, #68]	; 0x44
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878e:	61bb      	str	r3, [r7, #24]
 8008790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6979      	ldr	r1, [r7, #20]
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	613b      	str	r3, [r7, #16]
   return(result);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e6      	bne.n	8008770 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087b6:	bf00      	nop
 80087b8:	3754      	adds	r7, #84	; 0x54
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b090      	sub	sp, #64	; 0x40
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0320 	and.w	r3, r3, #32
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d137      	bne.n	800884e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80087de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	623b      	str	r3, [r7, #32]
   return(result);
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80087fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3308      	adds	r3, #8
 8008804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008806:	633a      	str	r2, [r7, #48]	; 0x30
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800880c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e5      	bne.n	80087e6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60fb      	str	r3, [r7, #12]
   return(result);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	69b9      	ldr	r1, [r7, #24]
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	617b      	str	r3, [r7, #20]
   return(result);
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e6      	bne.n	800881a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800884c:	e002      	b.n	8008854 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800884e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008850:	f006 fb88 	bl	800ef64 <HAL_UART_TxCpltCallback>
}
 8008854:	bf00      	nop
 8008856:	3740      	adds	r7, #64	; 0x40
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff f882 	bl	8007974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b09c      	sub	sp, #112	; 0x70
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d171      	bne.n	8008978 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008896:	2200      	movs	r2, #0
 8008898:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80088bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e6      	bne.n	800889c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	f023 0301 	bic.w	r3, r3, #1
 80088e4:	667b      	str	r3, [r7, #100]	; 0x64
 80088e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3308      	adds	r3, #8
 80088ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088ee:	647a      	str	r2, [r7, #68]	; 0x44
 80088f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e5      	bne.n	80088ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	623b      	str	r3, [r7, #32]
   return(result);
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	663b      	str	r3, [r7, #96]	; 0x60
 800891a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008922:	633a      	str	r2, [r7, #48]	; 0x30
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e5      	bne.n	8008902 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d118      	bne.n	8008978 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	60fb      	str	r3, [r7, #12]
   return(result);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0310 	bic.w	r3, r3, #16
 800895a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800895c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	69b9      	ldr	r1, [r7, #24]
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	617b      	str	r3, [r7, #20]
   return(result);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e6      	bne.n	8008946 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897a:	2200      	movs	r2, #0
 800897c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d107      	bne.n	8008996 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800898c:	4619      	mov	r1, r3
 800898e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008990:	f006 fbea 	bl	800f168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008994:	e002      	b.n	800899c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008996:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008998:	f006 fb22 	bl	800efe0 <HAL_UART_RxCpltCallback>
}
 800899c:	bf00      	nop
 800899e:	3770      	adds	r7, #112	; 0x70
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d109      	bne.n	80089d4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	4619      	mov	r1, r3
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f006 fbcb 	bl	800f168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089d2:	e002      	b.n	80089da <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7fe ffd7 	bl	8007988 <HAL_UART_RxHalfCpltCallback>
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b80      	cmp	r3, #128	; 0x80
 8008a0c:	d109      	bne.n	8008a22 <UART_DMAError+0x40>
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b21      	cmp	r3, #33	; 0x21
 8008a12:	d106      	bne.n	8008a22 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f7ff fe29 	bl	8008674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b40      	cmp	r3, #64	; 0x40
 8008a2e:	d109      	bne.n	8008a44 <UART_DMAError+0x62>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b22      	cmp	r3, #34	; 0x22
 8008a34:	d106      	bne.n	8008a44 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008a3e:	6978      	ldr	r0, [r7, #20]
 8008a40:	f7ff fe59 	bl	80086f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a4a:	f043 0210 	orr.w	r2, r3, #16
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a54:	6978      	ldr	r0, [r7, #20]
 8008a56:	f006 fb2d 	bl	800f0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a5a:	bf00      	nop
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f006 fb17 	bl	800f0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	220f      	movs	r2, #15
 8008aaa:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0208 	orr.w	r2, r2, #8
 8008aba:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7fe ff66 	bl	800799c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad0:	bf00      	nop
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b08f      	sub	sp, #60	; 0x3c
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae6:	2b21      	cmp	r3, #33	; 0x21
 8008ae8:	d14c      	bne.n	8008b84 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d132      	bne.n	8008b5c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b16:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	61bb      	str	r3, [r7, #24]
 8008b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6979      	ldr	r1, [r7, #20]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	613b      	str	r3, [r7, #16]
   return(result);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e6      	bne.n	8008b28 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008b5a:	e013      	b.n	8008b84 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b60:	781a      	ldrb	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008b84:	bf00      	nop
 8008b86:	373c      	adds	r7, #60	; 0x3c
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b091      	sub	sp, #68	; 0x44
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9e:	2b21      	cmp	r3, #33	; 0x21
 8008ba0:	d151      	bne.n	8008c46 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d132      	bne.n	8008c14 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	623b      	str	r3, [r7, #32]
   return(result);
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8008bce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c02:	69b9      	ldr	r1, [r7, #24]
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e6      	bne.n	8008be0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008c12:	e018      	b.n	8008c46 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c28:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2e:	1c9a      	adds	r2, r3, #2
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008c46:	bf00      	nop
 8008c48:	3744      	adds	r7, #68	; 0x44
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b091      	sub	sp, #68	; 0x44
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c60:	2b21      	cmp	r3, #33	; 0x21
 8008c62:	d160      	bne.n	8008d26 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c6c:	e057      	b.n	8008d1e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d133      	bne.n	8008ce2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	69b9      	ldr	r1, [r7, #24]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e6      	bne.n	8008cae <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008ce0:	e021      	b.n	8008d26 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d013      	beq.n	8008d18 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf4:	781a      	ldrb	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1a4      	bne.n	8008c6e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008d24:	e7ff      	b.n	8008d26 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008d26:	bf00      	nop
 8008d28:	3744      	adds	r7, #68	; 0x44
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b091      	sub	sp, #68	; 0x44
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d40:	2b21      	cmp	r3, #33	; 0x21
 8008d42:	d165      	bne.n	8008e10 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d4c:	e05c      	b.n	8008e08 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d133      	bne.n	8008dc2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e5      	bne.n	8008d5a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da2:	633b      	str	r3, [r7, #48]	; 0x30
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6979      	ldr	r1, [r7, #20]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008dc0:	e026      	b.n	8008e10 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d018      	beq.n	8008e02 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008de4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dea:	1c9a      	adds	r2, r3, #2
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e04:	3b01      	subs	r3, #1
 8008e06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008e08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d19f      	bne.n	8008d4e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008e0e:	e7ff      	b.n	8008e10 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008e10:	bf00      	nop
 8008e12:	3744      	adds	r7, #68	; 0x44
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6979      	ldr	r1, [r7, #20]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f006 f87d 	bl	800ef64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6a:	bf00      	nop
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b09c      	sub	sp, #112	; 0x70
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e8c:	2b22      	cmp	r3, #34	; 0x22
 8008e8e:	f040 80be 	bne.w	800900e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ea0:	b2d9      	uxtb	r1, r3
 8008ea2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eac:	400a      	ands	r2, r1
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	1c5a      	adds	r2, r3, #1
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 80a1 	bne.w	800901e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008efc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e6      	bne.n	8008edc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	667b      	str	r3, [r7, #100]	; 0x64
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f2e:	647a      	str	r2, [r7, #68]	; 0x44
 8008f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e5      	bne.n	8008f0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a33      	ldr	r2, [pc, #204]	; (8009028 <UART_RxISR_8BIT+0x1b4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d01f      	beq.n	8008fa0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f82:	663b      	str	r3, [r7, #96]	; 0x60
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d12e      	bne.n	8009006 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0310 	bic.w	r3, r3, #16
 8008fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fcc:	61fb      	str	r3, [r7, #28]
 8008fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd0:	69b9      	ldr	r1, [r7, #24]
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	e841 2300 	strex	r3, r2, [r1]
 8008fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e6      	bne.n	8008fae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d103      	bne.n	8008ff6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2210      	movs	r2, #16
 8008ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f006 f8b2 	bl	800f168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009004:	e00b      	b.n	800901e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f005 ffea 	bl	800efe0 <HAL_UART_RxCpltCallback>
}
 800900c:	e007      	b.n	800901e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0208 	orr.w	r2, r2, #8
 800901c:	619a      	str	r2, [r3, #24]
}
 800901e:	bf00      	nop
 8009020:	3770      	adds	r7, #112	; 0x70
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40008000 	.word	0x40008000

0800902c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b09c      	sub	sp, #112	; 0x70
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800903a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009044:	2b22      	cmp	r3, #34	; 0x22
 8009046:	f040 80be 	bne.w	80091c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800905a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800905e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009062:	4013      	ands	r3, r2
 8009064:	b29a      	uxth	r2, r3
 8009066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009068:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906e:	1c9a      	adds	r2, r3, #2
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800907a:	b29b      	uxth	r3, r3
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80a1 	bne.w	80091d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090a8:	667b      	str	r3, [r7, #100]	; 0x64
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090b2:	657b      	str	r3, [r7, #84]	; 0x54
 80090b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e6      	bne.n	8009094 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	f023 0301 	bic.w	r3, r3, #1
 80090dc:	663b      	str	r3, [r7, #96]	; 0x60
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090e6:	643a      	str	r2, [r7, #64]	; 0x40
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e5      	bne.n	80090c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a33      	ldr	r2, [pc, #204]	; (80091e0 <UART_RxISR_16BIT+0x1b4>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d01f      	beq.n	8009158 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	61fb      	str	r3, [r7, #28]
   return(result);
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800913a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	461a      	mov	r2, r3
 8009142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009146:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e6      	bne.n	8009126 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d12e      	bne.n	80091be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	60bb      	str	r3, [r7, #8]
   return(result);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f023 0310 	bic.w	r3, r3, #16
 800917a:	65bb      	str	r3, [r7, #88]	; 0x58
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	461a      	mov	r2, r3
 8009182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	613b      	str	r3, [r7, #16]
   return(result);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e6      	bne.n	8009166 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f003 0310 	and.w	r3, r3, #16
 80091a2:	2b10      	cmp	r3, #16
 80091a4:	d103      	bne.n	80091ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2210      	movs	r2, #16
 80091ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f005 ffd6 	bl	800f168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091bc:	e00b      	b.n	80091d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f005 ff0e 	bl	800efe0 <HAL_UART_RxCpltCallback>
}
 80091c4:	e007      	b.n	80091d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f042 0208 	orr.w	r2, r2, #8
 80091d4:	619a      	str	r2, [r3, #24]
}
 80091d6:	bf00      	nop
 80091d8:	3770      	adds	r7, #112	; 0x70
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	40008000 	.word	0x40008000

080091e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b0ac      	sub	sp, #176	; 0xb0
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921a:	2b22      	cmp	r3, #34	; 0x22
 800921c:	f040 8182 	bne.w	8009524 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009226:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800922a:	e125      	b.n	8009478 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009236:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800923a:	b2d9      	uxtb	r1, r3
 800923c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009240:	b2da      	uxtb	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	400a      	ands	r2, r1
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d053      	beq.n	8009326 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800927e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d011      	beq.n	80092ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800928a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800928e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2201      	movs	r2, #1
 800929c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a4:	f043 0201 	orr.w	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d011      	beq.n	80092de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80092ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00b      	beq.n	80092de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2202      	movs	r2, #2
 80092cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d4:	f043 0204 	orr.w	r2, r3, #4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d011      	beq.n	800930e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80092ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00b      	beq.n	800930e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2204      	movs	r2, #4
 80092fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009304:	f043 0202 	orr.w	r2, r3, #2
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009314:	2b00      	cmp	r3, #0
 8009316:	d006      	beq.n	8009326 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f005 fecb 	bl	800f0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800932c:	b29b      	uxth	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	f040 80a2 	bne.w	8009478 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009358:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800935c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e4      	bne.n	8009334 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800937a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800937c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3308      	adds	r3, #8
 800938e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009392:	66ba      	str	r2, [r7, #104]	; 0x68
 8009394:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80093a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e1      	bne.n	800936a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a5f      	ldr	r2, [pc, #380]	; (800953c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d021      	beq.n	8009408 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01a      	beq.n	8009408 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80093e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093f4:	657b      	str	r3, [r7, #84]	; 0x54
 80093f6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e4      	bne.n	80093d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d130      	bne.n	8009472 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	f023 0310 	bic.w	r3, r3, #16
 800942a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009438:	643b      	str	r3, [r7, #64]	; 0x40
 800943a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800943e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b10      	cmp	r3, #16
 8009458:	d103      	bne.n	8009462 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2210      	movs	r2, #16
 8009460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f005 fe7c 	bl	800f168 <HAL_UARTEx_RxEventCallback>
 8009470:	e002      	b.n	8009478 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f005 fdb4 	bl	800efe0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009478:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800947c:	2b00      	cmp	r3, #0
 800947e:	d006      	beq.n	800948e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	f47f aecf 	bne.w	800922c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009494:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800949c:	2b00      	cmp	r3, #0
 800949e:	d049      	beq.n	8009534 <UART_RxISR_8BIT_FIFOEN+0x350>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d242      	bcs.n	8009534 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80094d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e3      	bne.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a15      	ldr	r2, [pc, #84]	; (8009540 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80094ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f043 0320 	orr.w	r3, r3, #32
 8009500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	6979      	ldr	r1, [r7, #20]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	e841 2300 	strex	r3, r2, [r1]
 800951a:	613b      	str	r3, [r7, #16]
   return(result);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1e4      	bne.n	80094ec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009522:	e007      	b.n	8009534 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699a      	ldr	r2, [r3, #24]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0208 	orr.w	r2, r2, #8
 8009532:	619a      	str	r2, [r3, #24]
}
 8009534:	bf00      	nop
 8009536:	37b0      	adds	r7, #176	; 0xb0
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	40008000 	.word	0x40008000
 8009540:	08008e75 	.word	0x08008e75

08009544 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b0ae      	sub	sp, #184	; 0xb8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009552:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957a:	2b22      	cmp	r3, #34	; 0x22
 800957c:	f040 8186 	bne.w	800988c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009586:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800958a:	e129      	b.n	80097e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800959e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80095a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80095a6:	4013      	ands	r3, r2
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b4:	1c9a      	adds	r2, r3, #2
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d053      	beq.n	800968a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0xce>
 80095ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2201      	movs	r2, #1
 8009600:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009608:	f043 0201 	orr.w	r2, r3, #1
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d011      	beq.n	8009642 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800961e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2202      	movs	r2, #2
 8009630:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009638:	f043 0204 	orr.w	r2, r3, #4
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	2b00      	cmp	r3, #0
 800964c:	d011      	beq.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800964e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2204      	movs	r2, #4
 8009660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009668:	f043 0202 	orr.w	r2, r3, #2
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f005 fd19 	bl	800f0b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 80a4 	bne.w	80097e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e2      	bne.n	8009698 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e1      	bne.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a5f      	ldr	r2, [pc, #380]	; (80098a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d021      	beq.n	8009770 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01a      	beq.n	8009770 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800974e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800975c:	65bb      	str	r3, [r7, #88]	; 0x58
 800975e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800976a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e4      	bne.n	800973a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009774:	2b01      	cmp	r3, #1
 8009776:	d130      	bne.n	80097da <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	f023 0310 	bic.w	r3, r3, #16
 8009792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097a0:	647b      	str	r3, [r7, #68]	; 0x44
 80097a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e4      	bne.n	800977e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b10      	cmp	r3, #16
 80097c0:	d103      	bne.n	80097ca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2210      	movs	r2, #16
 80097c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f005 fcc8 	bl	800f168 <HAL_UARTEx_RxEventCallback>
 80097d8:	e002      	b.n	80097e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f005 fc00 	bl	800efe0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d006      	beq.n	80097f6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80097e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f47f aecb 	bne.w	800958c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009800:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009804:	2b00      	cmp	r3, #0
 8009806:	d049      	beq.n	800989c <UART_RxISR_16BIT_FIFOEN+0x358>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800980e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009812:	429a      	cmp	r2, r3
 8009814:	d242      	bcs.n	800989c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3308      	adds	r3, #8
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800982c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800983a:	633a      	str	r2, [r7, #48]	; 0x30
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e3      	bne.n	8009816 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a15      	ldr	r2, [pc, #84]	; (80098a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009852:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	e853 3f00 	ldrex	r3, [r3]
 8009860:	60fb      	str	r3, [r7, #12]
   return(result);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f043 0320 	orr.w	r3, r3, #32
 8009868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	69b9      	ldr	r1, [r7, #24]
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	617b      	str	r3, [r7, #20]
   return(result);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e4      	bne.n	8009854 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800988a:	e007      	b.n	800989c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	619a      	str	r2, [r3, #24]
}
 800989c:	bf00      	nop
 800989e:	37b8      	adds	r7, #184	; 0xb8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	40008000 	.word	0x40008000
 80098a8:	0800902d 	.word	0x0800902d

080098ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <HAL_UARTEx_DisableFifoMode+0x16>
 80098fa:	2302      	movs	r3, #2
 80098fc:	e027      	b.n	800994e <HAL_UARTEx_DisableFifoMode+0x66>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2224      	movs	r2, #36	; 0x24
 800990a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f022 0201 	bic.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800992c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800996e:	2302      	movs	r3, #2
 8009970:	e02d      	b.n	80099ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2224      	movs	r2, #36	; 0x24
 800997e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8a4 	bl	8009afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e02d      	b.n	8009a4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2224      	movs	r2, #36	; 0x24
 80099fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f866 	bl	8009afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b08c      	sub	sp, #48	; 0x30
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d142      	bne.n	8009af0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e03b      	b.n	8009af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009a86:	88fb      	ldrh	r3, [r7, #6]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7fe fd4b 	bl	8008528 <UART_Start_Receive_DMA>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d124      	bne.n	8009aea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d11d      	bne.n	8009ae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2210      	movs	r2, #16
 8009aae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	e853 3f00 	ldrex	r3, [r3]
 8009abc:	617b      	str	r3, [r7, #20]
   return(result);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f043 0310 	orr.w	r3, r3, #16
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
 8009ad0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad2:	6a39      	ldr	r1, [r7, #32]
 8009ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e6      	bne.n	8009ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009ae2:	e002      	b.n	8009aea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aee:	e000      	b.n	8009af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009af0:	2302      	movs	r3, #2
  }
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3730      	adds	r7, #48	; 0x30
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d108      	bne.n	8009b1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b1c:	e031      	b.n	8009b82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b1e:	2308      	movs	r3, #8
 8009b20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b22:	2308      	movs	r3, #8
 8009b24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	0e5b      	lsrs	r3, r3, #25
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 0307 	and.w	r3, r3, #7
 8009b34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	0f5b      	lsrs	r3, r3, #29
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b46:	7bbb      	ldrb	r3, [r7, #14]
 8009b48:	7b3a      	ldrb	r2, [r7, #12]
 8009b4a:	4911      	ldr	r1, [pc, #68]	; (8009b90 <UARTEx_SetNbDataToProcess+0x94>)
 8009b4c:	5c8a      	ldrb	r2, [r1, r2]
 8009b4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b52:	7b3a      	ldrb	r2, [r7, #12]
 8009b54:	490f      	ldr	r1, [pc, #60]	; (8009b94 <UARTEx_SetNbDataToProcess+0x98>)
 8009b56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	7b7a      	ldrb	r2, [r7, #13]
 8009b68:	4909      	ldr	r1, [pc, #36]	; (8009b90 <UARTEx_SetNbDataToProcess+0x94>)
 8009b6a:	5c8a      	ldrb	r2, [r1, r2]
 8009b6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b70:	7b7a      	ldrb	r2, [r7, #13]
 8009b72:	4908      	ldr	r1, [pc, #32]	; (8009b94 <UARTEx_SetNbDataToProcess+0x98>)
 8009b74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b76:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	0800f734 	.word	0x0800f734
 8009b94:	0800f73c 	.word	0x0800f73c

08009b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009ba0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	43db      	mvns	r3, r3
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009bce:	b084      	sub	sp, #16
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	f107 0014 	add.w	r0, r7, #20
 8009bdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	b004      	add	sp, #16
 8009c0e:	4770      	bx	lr

08009c10 <__NVIC_SetPriority>:
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	db0a      	blt.n	8009c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	490c      	ldr	r1, [pc, #48]	; (8009c5c <__NVIC_SetPriority+0x4c>)
 8009c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2e:	0112      	lsls	r2, r2, #4
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	440b      	add	r3, r1
 8009c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c38:	e00a      	b.n	8009c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	4908      	ldr	r1, [pc, #32]	; (8009c60 <__NVIC_SetPriority+0x50>)
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	3b04      	subs	r3, #4
 8009c48:	0112      	lsls	r2, r2, #4
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	761a      	strb	r2, [r3, #24]
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	e000e100 	.word	0xe000e100
 8009c60:	e000ed00 	.word	0xe000ed00

08009c64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <SysTick_Handler+0x1c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009c6c:	f002 f982 	bl	800bf74 <xTaskGetSchedulerState>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d001      	beq.n	8009c7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009c76:	f003 faf7 	bl	800d268 <xPortSysTickHandler>
  }
}
 8009c7a:	bf00      	nop
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	e000e010 	.word	0xe000e010

08009c84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	f06f 0004 	mvn.w	r0, #4
 8009c8e:	f7ff ffbf 	bl	8009c10 <__NVIC_SetPriority>
#endif
}
 8009c92:	bf00      	nop
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c9e:	f3ef 8305 	mrs	r3, IPSR
 8009ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ca4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009caa:	f06f 0305 	mvn.w	r3, #5
 8009cae:	607b      	str	r3, [r7, #4]
 8009cb0:	e00c      	b.n	8009ccc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <osKernelInitialize+0x44>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d105      	bne.n	8009cc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cba:	4b08      	ldr	r3, [pc, #32]	; (8009cdc <osKernelInitialize+0x44>)
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	607b      	str	r3, [r7, #4]
 8009cc4:	e002      	b.n	8009ccc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ccc:	687b      	ldr	r3, [r7, #4]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	200007b4 	.word	0x200007b4

08009ce0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce6:	f3ef 8305 	mrs	r3, IPSR
 8009cea:	603b      	str	r3, [r7, #0]
  return(result);
 8009cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009cf2:	f06f 0305 	mvn.w	r3, #5
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	e010      	b.n	8009d1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <osKernelStart+0x48>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d109      	bne.n	8009d16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d02:	f7ff ffbf 	bl	8009c84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <osKernelStart+0x48>)
 8009d08:	2202      	movs	r2, #2
 8009d0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d0c:	f001 fcd8 	bl	800b6c0 <vTaskStartScheduler>
      stat = osOK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	607b      	str	r3, [r7, #4]
 8009d14:	e002      	b.n	8009d1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d1c:	687b      	ldr	r3, [r7, #4]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200007b4 	.word	0x200007b4

08009d2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	; 0x38
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d3c:	f3ef 8305 	mrs	r3, IPSR
 8009d40:	617b      	str	r3, [r7, #20]
  return(result);
 8009d42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d17e      	bne.n	8009e46 <osThreadNew+0x11a>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d07b      	beq.n	8009e46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d4e:	2380      	movs	r3, #128	; 0x80
 8009d50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d52:	2318      	movs	r3, #24
 8009d54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d045      	beq.n	8009df2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <osThreadNew+0x48>
        name = attr->name;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d002      	beq.n	8009d82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d008      	beq.n	8009d9a <osThreadNew+0x6e>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b38      	cmp	r3, #56	; 0x38
 8009d8c:	d805      	bhi.n	8009d9a <osThreadNew+0x6e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <osThreadNew+0x72>
        return (NULL);
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e054      	b.n	8009e48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	089b      	lsrs	r3, r3, #2
 8009dac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <osThreadNew+0xa8>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	2b5b      	cmp	r3, #91	; 0x5b
 8009dbc:	d90a      	bls.n	8009dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d006      	beq.n	8009dd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <osThreadNew+0xa8>
        mem = 1;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	61bb      	str	r3, [r7, #24]
 8009dd2:	e010      	b.n	8009df6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10c      	bne.n	8009df6 <osThreadNew+0xca>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d108      	bne.n	8009df6 <osThreadNew+0xca>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d104      	bne.n	8009df6 <osThreadNew+0xca>
          mem = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	61bb      	str	r3, [r7, #24]
 8009df0:	e001      	b.n	8009df6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d110      	bne.n	8009e1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e04:	9202      	str	r2, [sp, #8]
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	6a3a      	ldr	r2, [r7, #32]
 8009e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f001 fa7e 	bl	800b314 <xTaskCreateStatic>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	613b      	str	r3, [r7, #16]
 8009e1c:	e013      	b.n	8009e46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d110      	bne.n	8009e46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	f107 0310 	add.w	r3, r7, #16
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f001 fac9 	bl	800b3ce <xTaskCreate>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <osThreadNew+0x11a>
            hTask = NULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e46:	693b      	ldr	r3, [r7, #16]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3728      	adds	r7, #40	; 0x28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <osThreadFlagsSet+0x1a>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da03      	bge.n	8009e72 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009e6a:	f06f 0303 	mvn.w	r3, #3
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e035      	b.n	8009ede <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009e72:	f04f 33ff 	mov.w	r3, #4294967295
 8009e76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e78:	f3ef 8305 	mrs	r3, IPSR
 8009e7c:	613b      	str	r3, [r7, #16]
  return(result);
 8009e7e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01f      	beq.n	8009ec4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009e88:	f107 0308 	add.w	r3, r7, #8
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2201      	movs	r2, #1
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6978      	ldr	r0, [r7, #20]
 8009e96:	f002 fb51 	bl	800c53c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009e9a:	f107 030c 	add.w	r3, r7, #12
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	9200      	str	r2, [sp, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	6978      	ldr	r0, [r7, #20]
 8009ea8:	f002 fb48 	bl	800c53c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d015      	beq.n	8009ede <osThreadFlagsSet+0x8e>
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <osThreadFlagsSet+0x98>)
 8009eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	e00c      	b.n	8009ede <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6978      	ldr	r0, [r7, #20]
 8009ecc:	f002 fa7e 	bl	800c3cc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	6978      	ldr	r0, [r7, #20]
 8009eda:	f002 fa77 	bl	800c3cc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8009ede:	68fb      	ldr	r3, [r7, #12]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	e000ed04 	.word	0xe000ed04

08009eec <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08c      	sub	sp, #48	; 0x30
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef8:	f3ef 8305 	mrs	r3, IPSR
 8009efc:	617b      	str	r3, [r7, #20]
  return(result);
 8009efe:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8009f04:	f06f 0305 	mvn.w	r3, #5
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f0a:	e06b      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	da03      	bge.n	8009f1a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8009f12:	f06f 0303 	mvn.w	r3, #3
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f18:	e064      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <osThreadFlagsWait+0x3e>
      clear = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f28:	e001      	b.n	8009f2e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8009f36:	f001 fcd5 	bl	800b8e4 <xTaskGetTickCount>
 8009f3a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009f3c:	f107 0210 	add.w	r2, r7, #16
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f44:	2000      	movs	r0, #0
 8009f46:	f002 f9e7 	bl	800c318 <xTaskNotifyWait>
 8009f4a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d137      	bne.n	8009fc2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8009f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4013      	ands	r3, r2
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00c      	beq.n	8009f86 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	4013      	ands	r3, r2
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d032      	beq.n	8009fde <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10f      	bne.n	8009f9e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009f7e:	f06f 0302 	mvn.w	r3, #2
 8009f82:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009f84:	e02e      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d128      	bne.n	8009fe2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8009f96:	f06f 0302 	mvn.w	r3, #2
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8009f9c:	e022      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8009f9e:	f001 fca1 	bl	800b8e4 <xTaskGetTickCount>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d902      	bls.n	8009fb8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb6:	e00e      	b.n	8009fd6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc0:	e009      	b.n	8009fd6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8009fc8:	f06f 0302 	mvn.w	r3, #2
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fce:	e002      	b.n	8009fd6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8009fd0:	f06f 0301 	mvn.w	r3, #1
 8009fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1af      	bne.n	8009f3c <osThreadFlagsWait+0x50>
 8009fdc:	e002      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
            break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <osThreadFlagsWait+0xf8>
            break;
 8009fe2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3730      	adds	r7, #48	; 0x30
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff6:	f3ef 8305 	mrs	r3, IPSR
 8009ffa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <osDelay+0x1c>
    stat = osErrorISR;
 800a002:	f06f 0305 	mvn.w	r3, #5
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	e007      	b.n	800a01a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fb1f 	bl	800b658 <vTaskDelay>
    }
  }

  return (stat);
 800a01a:	68fb      	ldr	r3, [r7, #12]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a030:	f3ef 8305 	mrs	r3, IPSR
 800a034:	60fb      	str	r3, [r7, #12]
  return(result);
 800a036:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d12d      	bne.n	800a098 <osEventFlagsNew+0x74>
    mem = -1;
 800a03c:	f04f 33ff 	mov.w	r3, #4294967295
 800a040:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d015      	beq.n	800a074 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <osEventFlagsNew+0x3a>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b1f      	cmp	r3, #31
 800a056:	d902      	bls.n	800a05e <osEventFlagsNew+0x3a>
        mem = 1;
 800a058:	2301      	movs	r3, #1
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	e00c      	b.n	800a078 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d108      	bne.n	800a078 <osEventFlagsNew+0x54>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d104      	bne.n	800a078 <osEventFlagsNew+0x54>
          mem = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	e001      	b.n	800a078 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d106      	bne.n	800a08c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 f93e 	bl	800a304 <xEventGroupCreateStatic>
 800a088:	6178      	str	r0, [r7, #20]
 800a08a:	e005      	b.n	800a098 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a092:	f000 f96e 	bl	800a372 <xEventGroupCreate>
 800a096:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a098:	697b      	ldr	r3, [r7, #20]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b08a      	sub	sp, #40	; 0x28
 800a0a6:	af02      	add	r7, sp, #8
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b2:	f3ef 8305 	mrs	r3, IPSR
 800a0b6:	613b      	str	r3, [r7, #16]
  return(result);
 800a0b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d175      	bne.n	800a1aa <osSemaphoreNew+0x108>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d072      	beq.n	800a1aa <osSemaphoreNew+0x108>
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d86e      	bhi.n	800a1aa <osSemaphoreNew+0x108>
    mem = -1;
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d015      	beq.n	800a104 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d006      	beq.n	800a0ee <osSemaphoreNew+0x4c>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	2b4f      	cmp	r3, #79	; 0x4f
 800a0e6:	d902      	bls.n	800a0ee <osSemaphoreNew+0x4c>
        mem = 1;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	61bb      	str	r3, [r7, #24]
 800a0ec:	e00c      	b.n	800a108 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d108      	bne.n	800a108 <osSemaphoreNew+0x66>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d104      	bne.n	800a108 <osSemaphoreNew+0x66>
          mem = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	61bb      	str	r3, [r7, #24]
 800a102:	e001      	b.n	800a108 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10e:	d04c      	beq.n	800a1aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d128      	bne.n	800a168 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d10a      	bne.n	800a132 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	2203      	movs	r2, #3
 800a122:	9200      	str	r2, [sp, #0]
 800a124:	2200      	movs	r2, #0
 800a126:	2100      	movs	r1, #0
 800a128:	2001      	movs	r0, #1
 800a12a:	f000 fa59 	bl	800a5e0 <xQueueGenericCreateStatic>
 800a12e:	61f8      	str	r0, [r7, #28]
 800a130:	e005      	b.n	800a13e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a132:	2203      	movs	r2, #3
 800a134:	2100      	movs	r1, #0
 800a136:	2001      	movs	r0, #1
 800a138:	f000 faca 	bl	800a6d0 <xQueueGenericCreate>
 800a13c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d022      	beq.n	800a18a <osSemaphoreNew+0xe8>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01f      	beq.n	800a18a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a14a:	2300      	movs	r3, #0
 800a14c:	2200      	movs	r2, #0
 800a14e:	2100      	movs	r1, #0
 800a150:	69f8      	ldr	r0, [r7, #28]
 800a152:	f000 fb85 	bl	800a860 <xQueueGenericSend>
 800a156:	4603      	mov	r3, r0
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d016      	beq.n	800a18a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a15c:	69f8      	ldr	r0, [r7, #28]
 800a15e:	f000 ff05 	bl	800af6c <vQueueDelete>
            hSemaphore = NULL;
 800a162:	2300      	movs	r3, #0
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	e010      	b.n	800a18a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d108      	bne.n	800a180 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	461a      	mov	r2, r3
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 fb07 	bl	800a78a <xQueueCreateCountingSemaphoreStatic>
 800a17c:	61f8      	str	r0, [r7, #28]
 800a17e:	e004      	b.n	800a18a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fb38 	bl	800a7f8 <xQueueCreateCountingSemaphore>
 800a188:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00c      	beq.n	800a1aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <osSemaphoreNew+0xfc>
          name = attr->name;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e001      	b.n	800a1a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a1a2:	6979      	ldr	r1, [r7, #20]
 800a1a4:	69f8      	ldr	r0, [r7, #28]
 800a1a6:	f001 f82d 	bl	800b204 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08a      	sub	sp, #40	; 0x28
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c4:	f3ef 8305 	mrs	r3, IPSR
 800a1c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a1ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d15f      	bne.n	800a290 <osMessageQueueNew+0xdc>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d05c      	beq.n	800a290 <osMessageQueueNew+0xdc>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d059      	beq.n	800a290 <osMessageQueueNew+0xdc>
    mem = -1;
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d029      	beq.n	800a23c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d012      	beq.n	800a216 <osMessageQueueNew+0x62>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	2b4f      	cmp	r3, #79	; 0x4f
 800a1f6:	d90e      	bls.n	800a216 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	695a      	ldr	r2, [r3, #20]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	fb01 f303 	mul.w	r3, r1, r3
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d302      	bcc.n	800a216 <osMessageQueueNew+0x62>
        mem = 1;
 800a210:	2301      	movs	r3, #1
 800a212:	61bb      	str	r3, [r7, #24]
 800a214:	e014      	b.n	800a240 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d110      	bne.n	800a240 <osMessageQueueNew+0x8c>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10c      	bne.n	800a240 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d108      	bne.n	800a240 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d104      	bne.n	800a240 <osMessageQueueNew+0x8c>
          mem = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	e001      	b.n	800a240 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d10b      	bne.n	800a25e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2100      	movs	r1, #0
 800a250:	9100      	str	r1, [sp, #0]
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 f9c3 	bl	800a5e0 <xQueueGenericCreateStatic>
 800a25a:	61f8      	str	r0, [r7, #28]
 800a25c:	e008      	b.n	800a270 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d105      	bne.n	800a270 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a264:	2200      	movs	r2, #0
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fa31 	bl	800a6d0 <xQueueGenericCreate>
 800a26e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00c      	beq.n	800a290 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e001      	b.n	800a288 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a288:	6979      	ldr	r1, [r7, #20]
 800a28a:	69f8      	ldr	r0, [r7, #28]
 800a28c:	f000 ffba 	bl	800b204 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a290:	69fb      	ldr	r3, [r7, #28]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a07      	ldr	r2, [pc, #28]	; (800a2c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	4a06      	ldr	r2, [pc, #24]	; (800a2cc <vApplicationGetIdleTaskMemory+0x30>)
 800a2b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2280      	movs	r2, #128	; 0x80
 800a2b8:	601a      	str	r2, [r3, #0]
}
 800a2ba:	bf00      	nop
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	200007b8 	.word	0x200007b8
 800a2cc:	20000814 	.word	0x20000814

0800a2d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4a07      	ldr	r2, [pc, #28]	; (800a2fc <vApplicationGetTimerTaskMemory+0x2c>)
 800a2e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	4a06      	ldr	r2, [pc, #24]	; (800a300 <vApplicationGetTimerTaskMemory+0x30>)
 800a2e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2ee:	601a      	str	r2, [r3, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	20000a14 	.word	0x20000a14
 800a300:	20000a70 	.word	0x20000a70

0800a304 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a328:	2320      	movs	r3, #32
 800a32a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d00a      	beq.n	800a348 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	3304      	adds	r3, #4
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f822 	bl	800a3a6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2201      	movs	r2, #1
 800a366:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a368:	697b      	ldr	r3, [r7, #20]
	}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a378:	2020      	movs	r0, #32
 800a37a:	f003 f805 	bl	800d388 <pvPortMalloc>
 800a37e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f808 	bl	800a3a6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a39c:	687b      	ldr	r3, [r7, #4]
	}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f103 0208 	add.w	r2, r3, #8
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a3be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f103 0208 	add.w	r2, r3, #8
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f103 0208 	add.w	r2, r3, #8
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689a      	ldr	r2, [r3, #8]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	601a      	str	r2, [r3, #0]
}
 800a43c:	bf00      	nop
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d103      	bne.n	800a468 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e00c      	b.n	800a482 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3308      	adds	r3, #8
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	e002      	b.n	800a476 <vListInsert+0x2e>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d2f6      	bcs.n	800a470 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	6892      	ldr	r2, [r2, #8]
 800a4d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6852      	ldr	r2, [r2, #4]
 800a4da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d103      	bne.n	800a4ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	1e5a      	subs	r2, r3, #1
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
	...

0800a510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericReset+0x2a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	60bb      	str	r3, [r7, #8]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a53a:	f002 fe03 	bl	800d144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a54a:	fb01 f303 	mul.w	r3, r1, r3
 800a54e:	441a      	add	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56a:	3b01      	subs	r3, #1
 800a56c:	68f9      	ldr	r1, [r7, #12]
 800a56e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a570:	fb01 f303 	mul.w	r3, r1, r3
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	22ff      	movs	r2, #255	; 0xff
 800a57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	22ff      	movs	r2, #255	; 0xff
 800a586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d114      	bne.n	800a5ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01a      	beq.n	800a5ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3310      	adds	r3, #16
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 fb2b 	bl	800bbf8 <xTaskRemoveFromEventList>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d012      	beq.n	800a5ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <xQueueGenericReset+0xcc>)
 800a5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	e009      	b.n	800a5ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3310      	adds	r3, #16
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff fef1 	bl	800a3a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3324      	adds	r3, #36	; 0x24
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff feec 	bl	800a3a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5ce:	f002 fde9 	bl	800d1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5d2:	2301      	movs	r3, #1
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <xQueueGenericCreateStatic+0x52>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <xQueueGenericCreateStatic+0x56>
 800a632:	2301      	movs	r3, #1
 800a634:	e000      	b.n	800a638 <xQueueGenericCreateStatic+0x58>
 800a636:	2300      	movs	r3, #0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	623b      	str	r3, [r7, #32]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <xQueueGenericCreateStatic+0x7e>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <xQueueGenericCreateStatic+0x82>
 800a65e:	2301      	movs	r3, #1
 800a660:	e000      	b.n	800a664 <xQueueGenericCreateStatic+0x84>
 800a662:	2300      	movs	r3, #0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10a      	bne.n	800a67e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	61fb      	str	r3, [r7, #28]
}
 800a67a:	bf00      	nop
 800a67c:	e7fe      	b.n	800a67c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a67e:	2350      	movs	r3, #80	; 0x50
 800a680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2b50      	cmp	r3, #80	; 0x50
 800a686:	d00a      	beq.n	800a69e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61bb      	str	r3, [r7, #24]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a69e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00d      	beq.n	800a6c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f83f 	bl	800a744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3730      	adds	r7, #48	; 0x30
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	; 0x28
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10a      	bne.n	800a6fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	613b      	str	r3, [r7, #16]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
 800a702:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	3350      	adds	r3, #80	; 0x50
 800a708:	4618      	mov	r0, r3
 800a70a:	f002 fe3d 	bl	800d388 <pvPortMalloc>
 800a70e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d011      	beq.n	800a73a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	3350      	adds	r3, #80	; 0x50
 800a71e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a728:	79fa      	ldrb	r2, [r7, #7]
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4613      	mov	r3, r2
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f000 f805 	bl	800a744 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a73a:	69bb      	ldr	r3, [r7, #24]
	}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d103      	bne.n	800a760 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e002      	b.n	800a766 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a772:	2101      	movs	r1, #1
 800a774:	69b8      	ldr	r0, [r7, #24]
 800a776:	f7ff fecb 	bl	800a510 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	78fa      	ldrb	r2, [r7, #3]
 800a77e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b08a      	sub	sp, #40	; 0x28
 800a78e:	af02      	add	r7, sp, #8
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	61bb      	str	r3, [r7, #24]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d90a      	bls.n	800a7d0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	617b      	str	r3, [r7, #20]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2100      	movs	r1, #0
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff ff00 	bl	800a5e0 <xQueueGenericCreateStatic>
 800a7e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
	}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10a      	bne.n	800a81e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	613b      	str	r3, [r7, #16]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90a      	bls.n	800a83c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	e7fe      	b.n	800a83a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a83c:	2202      	movs	r2, #2
 800a83e:	2100      	movs	r1, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff ff45 	bl	800a6d0 <xQueueGenericCreate>
 800a846:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a854:	697b      	ldr	r3, [r7, #20]
	}
 800a856:	4618      	mov	r0, r3
 800a858:	3718      	adds	r7, #24
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08e      	sub	sp, #56	; 0x38
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a86e:	2300      	movs	r3, #0
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <xQueueGenericSend+0x32>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d103      	bne.n	800a8a0 <xQueueGenericSend+0x40>
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d101      	bne.n	800a8a4 <xQueueGenericSend+0x44>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e000      	b.n	800a8a6 <xQueueGenericSend+0x46>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <xQueueGenericSend+0x60>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d103      	bne.n	800a8ce <xQueueGenericSend+0x6e>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d101      	bne.n	800a8d2 <xQueueGenericSend+0x72>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <xQueueGenericSend+0x74>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <xQueueGenericSend+0x8e>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	623b      	str	r3, [r7, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	e7fe      	b.n	800a8ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ee:	f001 fb41 	bl	800bf74 <xTaskGetSchedulerState>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <xQueueGenericSend+0x9e>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <xQueueGenericSend+0xa2>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueGenericSend+0xa4>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xQueueGenericSend+0xbe>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	61fb      	str	r3, [r7, #28]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a91e:	f002 fc11 	bl	800d144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d302      	bcc.n	800a934 <xQueueGenericSend+0xd4>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b02      	cmp	r3, #2
 800a932:	d129      	bne.n	800a988 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	68b9      	ldr	r1, [r7, #8]
 800a938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a93a:	f000 fb52 	bl	800afe2 <prvCopyDataToQueue>
 800a93e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	3324      	adds	r3, #36	; 0x24
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 f953 	bl	800bbf8 <xTaskRemoveFromEventList>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d013      	beq.n	800a980 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a958:	4b3f      	ldr	r3, [pc, #252]	; (800aa58 <xQueueGenericSend+0x1f8>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	e00a      	b.n	800a980 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a970:	4b39      	ldr	r3, [pc, #228]	; (800aa58 <xQueueGenericSend+0x1f8>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a980:	f002 fc10 	bl	800d1a4 <vPortExitCritical>
				return pdPASS;
 800a984:	2301      	movs	r3, #1
 800a986:	e063      	b.n	800aa50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a98e:	f002 fc09 	bl	800d1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a992:	2300      	movs	r3, #0
 800a994:	e05c      	b.n	800aa50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a99c:	f107 0314 	add.w	r3, r7, #20
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 f98d 	bl	800bcc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9aa:	f002 fbfb 	bl	800d1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9ae:	f000 feed 	bl	800b78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b2:	f002 fbc7 	bl	800d144 <vPortEnterCritical>
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9bc:	b25b      	sxtb	r3, r3
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d103      	bne.n	800a9cc <xQueueGenericSend+0x16c>
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d2:	b25b      	sxtb	r3, r3
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d103      	bne.n	800a9e2 <xQueueGenericSend+0x182>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e2:	f002 fbdf 	bl	800d1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e6:	1d3a      	adds	r2, r7, #4
 800a9e8:	f107 0314 	add.w	r3, r7, #20
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 f97c 	bl	800bcec <xTaskCheckForTimeOut>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d124      	bne.n	800aa44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9fc:	f000 fbe9 	bl	800b1d2 <prvIsQueueFull>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	3310      	adds	r3, #16
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 f8a2 	bl	800bb58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa16:	f000 fb74 	bl	800b102 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa1a:	f000 fec5 	bl	800b7a8 <xTaskResumeAll>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f47f af7c 	bne.w	800a91e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <xQueueGenericSend+0x1f8>)
 800aa28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	e772      	b.n	800a91e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa3a:	f000 fb62 	bl	800b102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa3e:	f000 feb3 	bl	800b7a8 <xTaskResumeAll>
 800aa42:	e76c      	b.n	800a91e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa46:	f000 fb5c 	bl	800b102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa4a:	f000 fead 	bl	800b7a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3738      	adds	r7, #56	; 0x38
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b090      	sub	sp, #64	; 0x40
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d103      	bne.n	800aa98 <xQueueGenericSendFromISR+0x3c>
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <xQueueGenericSendFromISR+0x40>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e000      	b.n	800aa9e <xQueueGenericSendFromISR+0x42>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10a      	bne.n	800aab8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d103      	bne.n	800aac6 <xQueueGenericSendFromISR+0x6a>
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <xQueueGenericSendFromISR+0x6e>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <xQueueGenericSendFromISR+0x70>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	623b      	str	r3, [r7, #32]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aae6:	f002 fc0f 	bl	800d308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaea:	f3ef 8211 	mrs	r2, BASEPRI
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	61fa      	str	r2, [r7, #28]
 800ab00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d302      	bcc.n	800ab18 <xQueueGenericSendFromISR+0xbc>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d12f      	bne.n	800ab78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab2e:	f000 fa58 	bl	800afe2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d112      	bne.n	800ab62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d016      	beq.n	800ab72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 f855 	bl	800bbf8 <xTaskRemoveFromEventList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	e007      	b.n	800ab72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab66:	3301      	adds	r3, #1
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	b25a      	sxtb	r2, r3
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab72:	2301      	movs	r3, #1
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab76:	e001      	b.n	800ab7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3740      	adds	r7, #64	; 0x40
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08c      	sub	sp, #48	; 0x30
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <xQueueReceive+0x30>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	623b      	str	r3, [r7, #32]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <xQueueReceive+0x3e>
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <xQueueReceive+0x42>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xQueueReceive+0x44>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xQueueReceive+0x5e>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	61fb      	str	r3, [r7, #28]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abf2:	f001 f9bf 	bl	800bf74 <xTaskGetSchedulerState>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <xQueueReceive+0x6e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <xQueueReceive+0x72>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueReceive+0x74>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <xQueueReceive+0x8e>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	61bb      	str	r3, [r7, #24]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac22:	f002 fa8f 	bl	800d144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d01f      	beq.n	800ac72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac36:	f000 fa3e 	bl	800b0b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00f      	beq.n	800ac6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	3310      	adds	r3, #16
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 ffd2 	bl	800bbf8 <xTaskRemoveFromEventList>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac5a:	4b3d      	ldr	r3, [pc, #244]	; (800ad50 <xQueueReceive+0x1bc>)
 800ac5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac6a:	f002 fa9b 	bl	800d1a4 <vPortExitCritical>
				return pdPASS;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e069      	b.n	800ad46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d103      	bne.n	800ac80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac78:	f002 fa94 	bl	800d1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e062      	b.n	800ad46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac86:	f107 0310 	add.w	r3, r7, #16
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 f818 	bl	800bcc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac90:	2301      	movs	r3, #1
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac94:	f002 fa86 	bl	800d1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac98:	f000 fd78 	bl	800b78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac9c:	f002 fa52 	bl	800d144 <vPortEnterCritical>
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d103      	bne.n	800acb6 <xQueueReceive+0x122>
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc2:	d103      	bne.n	800accc <xQueueReceive+0x138>
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800accc:	f002 fa6a 	bl	800d1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acd0:	1d3a      	adds	r2, r7, #4
 800acd2:	f107 0310 	add.w	r3, r7, #16
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f001 f807 	bl	800bcec <xTaskCheckForTimeOut>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d123      	bne.n	800ad2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ace4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace6:	f000 fa5e 	bl	800b1a6 <prvIsQueueEmpty>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d017      	beq.n	800ad20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	3324      	adds	r3, #36	; 0x24
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 ff2d 	bl	800bb58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad00:	f000 f9ff 	bl	800b102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad04:	f000 fd50 	bl	800b7a8 <xTaskResumeAll>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d189      	bne.n	800ac22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xQueueReceive+0x1bc>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	e780      	b.n	800ac22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad22:	f000 f9ee 	bl	800b102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad26:	f000 fd3f 	bl	800b7a8 <xTaskResumeAll>
 800ad2a:	e77a      	b.n	800ac22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2e:	f000 f9e8 	bl	800b102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad32:	f000 fd39 	bl	800b7a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad38:	f000 fa35 	bl	800b1a6 <prvIsQueueEmpty>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f43f af6f 	beq.w	800ac22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3730      	adds	r7, #48	; 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	623b      	str	r3, [r7, #32]
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	61fb      	str	r3, [r7, #28]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ada4:	f001 f8e6 	bl	800bf74 <xTaskGetSchedulerState>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <xQueueSemaphoreTake+0x60>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <xQueueSemaphoreTake+0x64>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <xQueueSemaphoreTake+0x66>
 800adb8:	2300      	movs	r3, #0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	61bb      	str	r3, [r7, #24]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800add4:	f002 f9b6 	bl	800d144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800addc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d024      	beq.n	800ae2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	1e5a      	subs	r2, r3, #1
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800adf4:	f001 fa34 	bl	800c260 <pvTaskIncrementMutexHeldCount>
 800adf8:	4602      	mov	r2, r0
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00f      	beq.n	800ae26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	3310      	adds	r3, #16
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fef4 	bl	800bbf8 <xTaskRemoveFromEventList>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d007      	beq.n	800ae26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae16:	4b54      	ldr	r3, [pc, #336]	; (800af68 <xQueueSemaphoreTake+0x214>)
 800ae18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae26:	f002 f9bd 	bl	800d1a4 <vPortExitCritical>
				return pdPASS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e097      	b.n	800af5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d111      	bne.n	800ae58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	617b      	str	r3, [r7, #20]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae50:	f002 f9a8 	bl	800d1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e082      	b.n	800af5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 ff2c 	bl	800bcc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae6c:	f002 f99a 	bl	800d1a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae70:	f000 fc8c 	bl	800b78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae74:	f002 f966 	bl	800d144 <vPortEnterCritical>
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae7e:	b25b      	sxtb	r3, r3
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d103      	bne.n	800ae8e <xQueueSemaphoreTake+0x13a>
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9a:	d103      	bne.n	800aea4 <xQueueSemaphoreTake+0x150>
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea4:	f002 f97e 	bl	800d1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aea8:	463a      	mov	r2, r7
 800aeaa:	f107 030c 	add.w	r3, r7, #12
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 ff1b 	bl	800bcec <xTaskCheckForTimeOut>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d132      	bne.n	800af22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aebe:	f000 f972 	bl	800b1a6 <prvIsQueueEmpty>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d026      	beq.n	800af16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d109      	bne.n	800aee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aed0:	f002 f938 	bl	800d144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f869 	bl	800bfb0 <xTaskPriorityInherit>
 800aede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aee0:	f002 f960 	bl	800d1a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	3324      	adds	r3, #36	; 0x24
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fe33 	bl	800bb58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef4:	f000 f905 	bl	800b102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aef8:	f000 fc56 	bl	800b7a8 <xTaskResumeAll>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f47f af68 	bne.w	800add4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af04:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xQueueSemaphoreTake+0x214>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	e75e      	b.n	800add4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af18:	f000 f8f3 	bl	800b102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af1c:	f000 fc44 	bl	800b7a8 <xTaskResumeAll>
 800af20:	e758      	b.n	800add4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af24:	f000 f8ed 	bl	800b102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af28:	f000 fc3e 	bl	800b7a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af2e:	f000 f93a 	bl	800b1a6 <prvIsQueueEmpty>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f43f af4d 	beq.w	800add4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00d      	beq.n	800af5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af40:	f002 f900 	bl	800d144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af46:	f000 f834 	bl	800afb2 <prvGetDisinheritPriorityAfterTimeout>
 800af4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af52:	4618      	mov	r0, r3
 800af54:	f001 f902 	bl	800c15c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af58:	f002 f924 	bl	800d1a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3738      	adds	r7, #56	; 0x38
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <vQueueDelete+0x28>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	60bb      	str	r3, [r7, #8]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 f95f 	bl	800b258 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d102      	bne.n	800afaa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f002 fabb 	bl	800d520 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afb2:	b480      	push	{r7}
 800afb4:	b085      	sub	sp, #20
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d006      	beq.n	800afd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e001      	b.n	800afd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afd4:	68fb      	ldr	r3, [r7, #12]
	}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10d      	bne.n	800b01c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d14d      	bne.n	800b0a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f837 	bl	800c080 <xTaskPriorityDisinherit>
 800b012:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	609a      	str	r2, [r3, #8]
 800b01a:	e043      	b.n	800b0a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d119      	bne.n	800b056 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6858      	ldr	r0, [r3, #4]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	461a      	mov	r2, r3
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	f004 fa73 	bl	800f518 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	441a      	add	r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d32b      	bcc.n	800b0a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	605a      	str	r2, [r3, #4]
 800b054:	e026      	b.n	800b0a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68d8      	ldr	r0, [r3, #12]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05e:	461a      	mov	r2, r3
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	f004 fa59 	bl	800f518 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	425b      	negs	r3, r3
 800b070:	441a      	add	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d207      	bcs.n	800b092 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	689a      	ldr	r2, [r3, #8]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	425b      	negs	r3, r3
 800b08c:	441a      	add	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b02      	cmp	r3, #2
 800b096:	d105      	bne.n	800b0a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0ac:	697b      	ldr	r3, [r7, #20]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d018      	beq.n	800b0fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	441a      	add	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d303      	bcc.n	800b0ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68d9      	ldr	r1, [r3, #12]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	f004 fa0f 	bl	800f518 <memcpy>
	}
}
 800b0fa:	bf00      	nop
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b10a:	f002 f81b 	bl	800d144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b114:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b116:	e011      	b.n	800b13c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d012      	beq.n	800b146 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3324      	adds	r3, #36	; 0x24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fd67 	bl	800bbf8 <xTaskRemoveFromEventList>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b130:	f000 fe3e 	bl	800bdb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	3b01      	subs	r3, #1
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b140:	2b00      	cmp	r3, #0
 800b142:	dce9      	bgt.n	800b118 <prvUnlockQueue+0x16>
 800b144:	e000      	b.n	800b148 <prvUnlockQueue+0x46>
					break;
 800b146:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	22ff      	movs	r2, #255	; 0xff
 800b14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b150:	f002 f828 	bl	800d1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b154:	f001 fff6 	bl	800d144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b15e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b160:	e011      	b.n	800b186 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d012      	beq.n	800b190 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3310      	adds	r3, #16
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 fd42 	bl	800bbf8 <xTaskRemoveFromEventList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b17a:	f000 fe19 	bl	800bdb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	3b01      	subs	r3, #1
 800b182:	b2db      	uxtb	r3, r3
 800b184:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dce9      	bgt.n	800b162 <prvUnlockQueue+0x60>
 800b18e:	e000      	b.n	800b192 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b190:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	22ff      	movs	r2, #255	; 0xff
 800b196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b19a:	f002 f803 	bl	800d1a4 <vPortExitCritical>
}
 800b19e:	bf00      	nop
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ae:	f001 ffc9 	bl	800d144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d102      	bne.n	800b1c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e001      	b.n	800b1c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1c4:	f001 ffee 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1da:	f001 ffb3 	bl	800d144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d102      	bne.n	800b1f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	e001      	b.n	800b1f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1f4:	f001 ffd6 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
 800b212:	e014      	b.n	800b23e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b214:	4a0f      	ldr	r2, [pc, #60]	; (800b254 <vQueueAddToRegistry+0x50>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10b      	bne.n	800b238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b220:	490c      	ldr	r1, [pc, #48]	; (800b254 <vQueueAddToRegistry+0x50>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b22a:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <vQueueAddToRegistry+0x50>)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b236:	e006      	b.n	800b246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b07      	cmp	r3, #7
 800b242:	d9e7      	bls.n	800b214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	20000e70 	.word	0x20000e70

0800b258 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	e016      	b.n	800b294 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b266:	4a10      	ldr	r2, [pc, #64]	; (800b2a8 <vQueueUnregisterQueue+0x50>)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4413      	add	r3, r2
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	d10b      	bne.n	800b28e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b276:	4a0c      	ldr	r2, [pc, #48]	; (800b2a8 <vQueueUnregisterQueue+0x50>)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2100      	movs	r1, #0
 800b27c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b280:	4a09      	ldr	r2, [pc, #36]	; (800b2a8 <vQueueUnregisterQueue+0x50>)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	4413      	add	r3, r2
 800b288:	2200      	movs	r2, #0
 800b28a:	605a      	str	r2, [r3, #4]
				break;
 800b28c:	e006      	b.n	800b29c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3301      	adds	r3, #1
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b07      	cmp	r3, #7
 800b298:	d9e5      	bls.n	800b266 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	20000e70 	.word	0x20000e70

0800b2ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2bc:	f001 ff42 	bl	800d144 <vPortEnterCritical>
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2c6:	b25b      	sxtb	r3, r3
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2cc:	d103      	bne.n	800b2d6 <vQueueWaitForMessageRestricted+0x2a>
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2dc:	b25b      	sxtb	r3, r3
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e2:	d103      	bne.n	800b2ec <vQueueWaitForMessageRestricted+0x40>
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2ec:	f001 ff5a 	bl	800d1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d106      	bne.n	800b306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	3324      	adds	r3, #36	; 0x24
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	4618      	mov	r0, r3
 800b302:	f000 fc4d 	bl	800bba0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b306:	6978      	ldr	r0, [r7, #20]
 800b308:	f7ff fefb 	bl	800b102 <prvUnlockQueue>
	}
 800b30c:	bf00      	nop
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08e      	sub	sp, #56	; 0x38
 800b318:	af04      	add	r7, sp, #16
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	623b      	str	r3, [r7, #32]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <xTaskCreateStatic+0x46>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	61fb      	str	r3, [r7, #28]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b35a:	235c      	movs	r3, #92	; 0x5c
 800b35c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	2b5c      	cmp	r3, #92	; 0x5c
 800b362:	d00a      	beq.n	800b37a <xTaskCreateStatic+0x66>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	61bb      	str	r3, [r7, #24]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b37a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d01e      	beq.n	800b3c0 <xTaskCreateStatic+0xac>
 800b382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01b      	beq.n	800b3c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b390:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	2202      	movs	r2, #2
 800b396:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b39a:	2300      	movs	r3, #0
 800b39c:	9303      	str	r3, [sp, #12]
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	9302      	str	r3, [sp, #8]
 800b3a2:	f107 0314 	add.w	r3, r7, #20
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 f850 	bl	800b458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ba:	f000 f8dd 	bl	800b578 <prvAddNewTaskToReadyList>
 800b3be:	e001      	b.n	800b3c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3c4:	697b      	ldr	r3, [r7, #20]
	}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3728      	adds	r7, #40	; 0x28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b08c      	sub	sp, #48	; 0x30
 800b3d2:	af04      	add	r7, sp, #16
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f001 ffd0 	bl	800d388 <pvPortMalloc>
 800b3e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00e      	beq.n	800b40e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3f0:	205c      	movs	r0, #92	; 0x5c
 800b3f2:	f001 ffc9 	bl	800d388 <pvPortMalloc>
 800b3f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	631a      	str	r2, [r3, #48]	; 0x30
 800b404:	e005      	b.n	800b412 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b406:	6978      	ldr	r0, [r7, #20]
 800b408:	f002 f88a 	bl	800d520 <vPortFree>
 800b40c:	e001      	b.n	800b412 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d017      	beq.n	800b448 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b420:	88fa      	ldrh	r2, [r7, #6]
 800b422:	2300      	movs	r3, #0
 800b424:	9303      	str	r3, [sp, #12]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	9302      	str	r3, [sp, #8]
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f80e 	bl	800b458 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b43c:	69f8      	ldr	r0, [r7, #28]
 800b43e:	f000 f89b 	bl	800b578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b442:	2301      	movs	r3, #1
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	e002      	b.n	800b44e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b448:	f04f 33ff 	mov.w	r3, #4294967295
 800b44c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b44e:	69bb      	ldr	r3, [r7, #24]
	}
 800b450:	4618      	mov	r0, r3
 800b452:	3720      	adds	r7, #32
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	461a      	mov	r2, r3
 800b470:	21a5      	movs	r1, #165	; 0xa5
 800b472:	f004 f825 	bl	800f4c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b480:	3b01      	subs	r3, #1
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	617b      	str	r3, [r7, #20]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d01f      	beq.n	800b4f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61fb      	str	r3, [r7, #28]
 800b4ba:	e012      	b.n	800b4e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	7819      	ldrb	r1, [r3, #0]
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	3334      	adds	r3, #52	; 0x34
 800b4cc:	460a      	mov	r2, r1
 800b4ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d006      	beq.n	800b4ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	61fb      	str	r3, [r7, #28]
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	2b0f      	cmp	r3, #15
 800b4e6:	d9e9      	bls.n	800b4bc <prvInitialiseNewTask+0x64>
 800b4e8:	e000      	b.n	800b4ec <prvInitialiseNewTask+0x94>
			{
				break;
 800b4ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4f4:	e003      	b.n	800b4fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	2b37      	cmp	r3, #55	; 0x37
 800b502:	d901      	bls.n	800b508 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b504:	2337      	movs	r3, #55	; 0x37
 800b506:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b50c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b512:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	2200      	movs	r2, #0
 800b518:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	3304      	adds	r3, #4
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe ff61 	bl	800a3e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	3318      	adds	r3, #24
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe ff5c 	bl	800a3e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b542:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	2200      	movs	r2, #0
 800b548:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	69b8      	ldr	r0, [r7, #24]
 800b558:	f001 fcca 	bl	800cef0 <pxPortInitialiseStack>
 800b55c:	4602      	mov	r2, r0
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b56e:	bf00      	nop
 800b570:	3720      	adds	r7, #32
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b580:	f001 fde0 	bl	800d144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b584:	4b2d      	ldr	r3, [pc, #180]	; (800b63c <prvAddNewTaskToReadyList+0xc4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3301      	adds	r3, #1
 800b58a:	4a2c      	ldr	r2, [pc, #176]	; (800b63c <prvAddNewTaskToReadyList+0xc4>)
 800b58c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b58e:	4b2c      	ldr	r3, [pc, #176]	; (800b640 <prvAddNewTaskToReadyList+0xc8>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b596:	4a2a      	ldr	r2, [pc, #168]	; (800b640 <prvAddNewTaskToReadyList+0xc8>)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b59c:	4b27      	ldr	r3, [pc, #156]	; (800b63c <prvAddNewTaskToReadyList+0xc4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d110      	bne.n	800b5c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5a4:	f000 fc28 	bl	800bdf8 <prvInitialiseTaskLists>
 800b5a8:	e00d      	b.n	800b5c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5aa:	4b26      	ldr	r3, [pc, #152]	; (800b644 <prvAddNewTaskToReadyList+0xcc>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5b2:	4b23      	ldr	r3, [pc, #140]	; (800b640 <prvAddNewTaskToReadyList+0xc8>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d802      	bhi.n	800b5c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5c0:	4a1f      	ldr	r2, [pc, #124]	; (800b640 <prvAddNewTaskToReadyList+0xc8>)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5c6:	4b20      	ldr	r3, [pc, #128]	; (800b648 <prvAddNewTaskToReadyList+0xd0>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	4a1e      	ldr	r2, [pc, #120]	; (800b648 <prvAddNewTaskToReadyList+0xd0>)
 800b5ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <prvAddNewTaskToReadyList+0xd0>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <prvAddNewTaskToReadyList+0xd4>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d903      	bls.n	800b5ec <prvAddNewTaskToReadyList+0x74>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4a18      	ldr	r2, [pc, #96]	; (800b64c <prvAddNewTaskToReadyList+0xd4>)
 800b5ea:	6013      	str	r3, [r2, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a15      	ldr	r2, [pc, #84]	; (800b650 <prvAddNewTaskToReadyList+0xd8>)
 800b5fa:	441a      	add	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4619      	mov	r1, r3
 800b602:	4610      	mov	r0, r2
 800b604:	f7fe fefc 	bl	800a400 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b608:	f001 fdcc 	bl	800d1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <prvAddNewTaskToReadyList+0xcc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00e      	beq.n	800b632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b614:	4b0a      	ldr	r3, [pc, #40]	; (800b640 <prvAddNewTaskToReadyList+0xc8>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61e:	429a      	cmp	r2, r3
 800b620:	d207      	bcs.n	800b632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <prvAddNewTaskToReadyList+0xdc>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20001384 	.word	0x20001384
 800b640:	20000eb0 	.word	0x20000eb0
 800b644:	20001390 	.word	0x20001390
 800b648:	200013a0 	.word	0x200013a0
 800b64c:	2000138c 	.word	0x2000138c
 800b650:	20000eb4 	.word	0x20000eb4
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b660:	2300      	movs	r3, #0
 800b662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d017      	beq.n	800b69a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b66a:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <vTaskDelay+0x60>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00a      	beq.n	800b688 <vTaskDelay+0x30>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	60bb      	str	r3, [r7, #8]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b688:	f000 f880 	bl	800b78c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 f830 	bl	800c6f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b694:	f000 f888 	bl	800b7a8 <xTaskResumeAll>
 800b698:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d107      	bne.n	800b6b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6a0:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <vTaskDelay+0x64>)
 800b6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6b0:	bf00      	nop
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	200013ac 	.word	0x200013ac
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08a      	sub	sp, #40	; 0x28
 800b6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	1d39      	adds	r1, r7, #4
 800b6d2:	f107 0308 	add.w	r3, r7, #8
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe fde0 	bl	800a29c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	9202      	str	r2, [sp, #8]
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	460a      	mov	r2, r1
 800b6ee:	4921      	ldr	r1, [pc, #132]	; (800b774 <vTaskStartScheduler+0xb4>)
 800b6f0:	4821      	ldr	r0, [pc, #132]	; (800b778 <vTaskStartScheduler+0xb8>)
 800b6f2:	f7ff fe0f 	bl	800b314 <xTaskCreateStatic>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4a20      	ldr	r2, [pc, #128]	; (800b77c <vTaskStartScheduler+0xbc>)
 800b6fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6fc:	4b1f      	ldr	r3, [pc, #124]	; (800b77c <vTaskStartScheduler+0xbc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b704:	2301      	movs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e001      	b.n	800b70e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d102      	bne.n	800b71a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b714:	f001 f842 	bl	800c79c <xTimerCreateTimerTask>
 800b718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d116      	bne.n	800b74e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	613b      	str	r3, [r7, #16]
}
 800b732:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b734:	4b12      	ldr	r3, [pc, #72]	; (800b780 <vTaskStartScheduler+0xc0>)
 800b736:	f04f 32ff 	mov.w	r2, #4294967295
 800b73a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b73c:	4b11      	ldr	r3, [pc, #68]	; (800b784 <vTaskStartScheduler+0xc4>)
 800b73e:	2201      	movs	r2, #1
 800b740:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b742:	4b11      	ldr	r3, [pc, #68]	; (800b788 <vTaskStartScheduler+0xc8>)
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b748:	f001 fc5a 	bl	800d000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b74c:	e00e      	b.n	800b76c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d10a      	bne.n	800b76c <vTaskStartScheduler+0xac>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	60fb      	str	r3, [r7, #12]
}
 800b768:	bf00      	nop
 800b76a:	e7fe      	b.n	800b76a <vTaskStartScheduler+0xaa>
}
 800b76c:	bf00      	nop
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	0800f5ac 	.word	0x0800f5ac
 800b778:	0800bdc9 	.word	0x0800bdc9
 800b77c:	200013a8 	.word	0x200013a8
 800b780:	200013a4 	.word	0x200013a4
 800b784:	20001390 	.word	0x20001390
 800b788:	20001388 	.word	0x20001388

0800b78c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <vTaskSuspendAll+0x18>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	4a03      	ldr	r2, [pc, #12]	; (800b7a4 <vTaskSuspendAll+0x18>)
 800b798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b79a:	bf00      	nop
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200013ac 	.word	0x200013ac

0800b7a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7b6:	4b42      	ldr	r3, [pc, #264]	; (800b8c0 <xTaskResumeAll+0x118>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	603b      	str	r3, [r7, #0]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b7d4:	f001 fcb6 	bl	800d144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b7d8:	4b39      	ldr	r3, [pc, #228]	; (800b8c0 <xTaskResumeAll+0x118>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	4a38      	ldr	r2, [pc, #224]	; (800b8c0 <xTaskResumeAll+0x118>)
 800b7e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7e2:	4b37      	ldr	r3, [pc, #220]	; (800b8c0 <xTaskResumeAll+0x118>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d162      	bne.n	800b8b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b7ea:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <xTaskResumeAll+0x11c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d05e      	beq.n	800b8b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7f2:	e02f      	b.n	800b854 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f4:	4b34      	ldr	r3, [pc, #208]	; (800b8c8 <xTaskResumeAll+0x120>)
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	3318      	adds	r3, #24
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe fe5a 	bl	800a4ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fe55 	bl	800a4ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	4b2d      	ldr	r3, [pc, #180]	; (800b8cc <xTaskResumeAll+0x124>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d903      	bls.n	800b824 <xTaskResumeAll+0x7c>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	4a2a      	ldr	r2, [pc, #168]	; (800b8cc <xTaskResumeAll+0x124>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4a27      	ldr	r2, [pc, #156]	; (800b8d0 <xTaskResumeAll+0x128>)
 800b832:	441a      	add	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3304      	adds	r3, #4
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f7fe fde0 	bl	800a400 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b844:	4b23      	ldr	r3, [pc, #140]	; (800b8d4 <xTaskResumeAll+0x12c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d302      	bcc.n	800b854 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b84e:	4b22      	ldr	r3, [pc, #136]	; (800b8d8 <xTaskResumeAll+0x130>)
 800b850:	2201      	movs	r2, #1
 800b852:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <xTaskResumeAll+0x120>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1cb      	bne.n	800b7f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b862:	f000 fb67 	bl	800bf34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b866:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <xTaskResumeAll+0x134>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d010      	beq.n	800b894 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b872:	f000 f859 	bl	800b928 <xTaskIncrementTick>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b87c:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <xTaskResumeAll+0x130>)
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3b01      	subs	r3, #1
 800b886:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1f1      	bne.n	800b872 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b88e:	4b13      	ldr	r3, [pc, #76]	; (800b8dc <xTaskResumeAll+0x134>)
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <xTaskResumeAll+0x130>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d009      	beq.n	800b8b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b89c:	2301      	movs	r3, #1
 800b89e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <xTaskResumeAll+0x138>)
 800b8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8b0:	f001 fc78 	bl	800d1a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	200013ac 	.word	0x200013ac
 800b8c4:	20001384 	.word	0x20001384
 800b8c8:	20001344 	.word	0x20001344
 800b8cc:	2000138c 	.word	0x2000138c
 800b8d0:	20000eb4 	.word	0x20000eb4
 800b8d4:	20000eb0 	.word	0x20000eb0
 800b8d8:	20001398 	.word	0x20001398
 800b8dc:	20001394 	.word	0x20001394
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <xTaskGetTickCount+0x1c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b8f0:	687b      	ldr	r3, [r7, #4]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20001388 	.word	0x20001388

0800b904 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90a:	f001 fcfd 	bl	800d308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b90e:	2300      	movs	r3, #0
 800b910:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b912:	4b04      	ldr	r3, [pc, #16]	; (800b924 <xTaskGetTickCountFromISR+0x20>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b918:	683b      	ldr	r3, [r7, #0]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20001388 	.word	0x20001388

0800b928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b932:	4b4f      	ldr	r3, [pc, #316]	; (800ba70 <xTaskIncrementTick+0x148>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f040 808f 	bne.w	800ba5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b93c:	4b4d      	ldr	r3, [pc, #308]	; (800ba74 <xTaskIncrementTick+0x14c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3301      	adds	r3, #1
 800b942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b944:	4a4b      	ldr	r2, [pc, #300]	; (800ba74 <xTaskIncrementTick+0x14c>)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d120      	bne.n	800b992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b950:	4b49      	ldr	r3, [pc, #292]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00a      	beq.n	800b970 <xTaskIncrementTick+0x48>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	603b      	str	r3, [r7, #0]
}
 800b96c:	bf00      	nop
 800b96e:	e7fe      	b.n	800b96e <xTaskIncrementTick+0x46>
 800b970:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	4b41      	ldr	r3, [pc, #260]	; (800ba7c <xTaskIncrementTick+0x154>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a3f      	ldr	r2, [pc, #252]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	4a3f      	ldr	r2, [pc, #252]	; (800ba7c <xTaskIncrementTick+0x154>)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	4b3e      	ldr	r3, [pc, #248]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3301      	adds	r3, #1
 800b98a:	4a3d      	ldr	r2, [pc, #244]	; (800ba80 <xTaskIncrementTick+0x158>)
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	f000 fad1 	bl	800bf34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b992:	4b3c      	ldr	r3, [pc, #240]	; (800ba84 <xTaskIncrementTick+0x15c>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d349      	bcc.n	800ba30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b99c:	4b36      	ldr	r3, [pc, #216]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d104      	bne.n	800b9b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a6:	4b37      	ldr	r3, [pc, #220]	; (800ba84 <xTaskIncrementTick+0x15c>)
 800b9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ac:	601a      	str	r2, [r3, #0]
					break;
 800b9ae:	e03f      	b.n	800ba30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9b0:	4b31      	ldr	r3, [pc, #196]	; (800ba78 <xTaskIncrementTick+0x150>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d203      	bcs.n	800b9d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9c8:	4a2e      	ldr	r2, [pc, #184]	; (800ba84 <xTaskIncrementTick+0x15c>)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9ce:	e02f      	b.n	800ba30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fd70 	bl	800a4ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	3318      	adds	r3, #24
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fd67 	bl	800a4ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	4b25      	ldr	r3, [pc, #148]	; (800ba88 <xTaskIncrementTick+0x160>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d903      	bls.n	800ba00 <xTaskIncrementTick+0xd8>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fc:	4a22      	ldr	r2, [pc, #136]	; (800ba88 <xTaskIncrementTick+0x160>)
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4a1f      	ldr	r2, [pc, #124]	; (800ba8c <xTaskIncrementTick+0x164>)
 800ba0e:	441a      	add	r2, r3
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7fe fcf2 	bl	800a400 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba20:	4b1b      	ldr	r3, [pc, #108]	; (800ba90 <xTaskIncrementTick+0x168>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d3b8      	bcc.n	800b99c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba2e:	e7b5      	b.n	800b99c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba30:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <xTaskIncrementTick+0x168>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	4915      	ldr	r1, [pc, #84]	; (800ba8c <xTaskIncrementTick+0x164>)
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d901      	bls.n	800ba4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba4c:	4b11      	ldr	r3, [pc, #68]	; (800ba94 <xTaskIncrementTick+0x16c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d007      	beq.n	800ba64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba54:	2301      	movs	r3, #1
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	e004      	b.n	800ba64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba5a:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <xTaskIncrementTick+0x170>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	4a0d      	ldr	r2, [pc, #52]	; (800ba98 <xTaskIncrementTick+0x170>)
 800ba62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba64:	697b      	ldr	r3, [r7, #20]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	200013ac 	.word	0x200013ac
 800ba74:	20001388 	.word	0x20001388
 800ba78:	2000133c 	.word	0x2000133c
 800ba7c:	20001340 	.word	0x20001340
 800ba80:	2000139c 	.word	0x2000139c
 800ba84:	200013a4 	.word	0x200013a4
 800ba88:	2000138c 	.word	0x2000138c
 800ba8c:	20000eb4 	.word	0x20000eb4
 800ba90:	20000eb0 	.word	0x20000eb0
 800ba94:	20001398 	.word	0x20001398
 800ba98:	20001394 	.word	0x20001394

0800ba9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800baa2:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <vTaskSwitchContext+0xa8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800baaa:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <vTaskSwitchContext+0xac>)
 800baac:	2201      	movs	r2, #1
 800baae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bab0:	e041      	b.n	800bb36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bab2:	4b25      	ldr	r3, [pc, #148]	; (800bb48 <vTaskSwitchContext+0xac>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab8:	4b24      	ldr	r3, [pc, #144]	; (800bb4c <vTaskSwitchContext+0xb0>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60fb      	str	r3, [r7, #12]
 800babe:	e010      	b.n	800bae2 <vTaskSwitchContext+0x46>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10a      	bne.n	800badc <vTaskSwitchContext+0x40>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	607b      	str	r3, [r7, #4]
}
 800bad8:	bf00      	nop
 800bada:	e7fe      	b.n	800bada <vTaskSwitchContext+0x3e>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3b01      	subs	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	491b      	ldr	r1, [pc, #108]	; (800bb50 <vTaskSwitchContext+0xb4>)
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	440b      	add	r3, r1
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0e4      	beq.n	800bac0 <vTaskSwitchContext+0x24>
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <vTaskSwitchContext+0xb4>)
 800bb02:	4413      	add	r3, r2
 800bb04:	60bb      	str	r3, [r7, #8]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	3308      	adds	r3, #8
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d104      	bne.n	800bb26 <vTaskSwitchContext+0x8a>
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	4a09      	ldr	r2, [pc, #36]	; (800bb54 <vTaskSwitchContext+0xb8>)
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	4a06      	ldr	r2, [pc, #24]	; (800bb4c <vTaskSwitchContext+0xb0>)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6013      	str	r3, [r2, #0]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	200013ac 	.word	0x200013ac
 800bb48:	20001398 	.word	0x20001398
 800bb4c:	2000138c 	.word	0x2000138c
 800bb50:	20000eb4 	.word	0x20000eb4
 800bb54:	20000eb0 	.word	0x20000eb0

0800bb58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10a      	bne.n	800bb7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	60fb      	str	r3, [r7, #12]
}
 800bb7a:	bf00      	nop
 800bb7c:	e7fe      	b.n	800bb7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb7e:	4b07      	ldr	r3, [pc, #28]	; (800bb9c <vTaskPlaceOnEventList+0x44>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7fe fc5e 	bl	800a448 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	6838      	ldr	r0, [r7, #0]
 800bb90:	f000 fdb0 	bl	800c6f4 <prvAddCurrentTaskToDelayedList>
}
 800bb94:	bf00      	nop
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000eb0 	.word	0x20000eb0

0800bba0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	60b9      	str	r1, [r7, #8]
 800bbaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10a      	bne.n	800bbc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	617b      	str	r3, [r7, #20]
}
 800bbc4:	bf00      	nop
 800bbc6:	e7fe      	b.n	800bbc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbc8:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3318      	adds	r3, #24
 800bbce:	4619      	mov	r1, r3
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f7fe fc15 	bl	800a400 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bbe2:	6879      	ldr	r1, [r7, #4]
 800bbe4:	68b8      	ldr	r0, [r7, #8]
 800bbe6:	f000 fd85 	bl	800c6f4 <prvAddCurrentTaskToDelayedList>
	}
 800bbea:	bf00      	nop
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000eb0 	.word	0x20000eb0

0800bbf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10a      	bne.n	800bc24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	60fb      	str	r3, [r7, #12]
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	3318      	adds	r3, #24
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe fc46 	bl	800a4ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc2e:	4b1e      	ldr	r3, [pc, #120]	; (800bca8 <xTaskRemoveFromEventList+0xb0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d11d      	bne.n	800bc72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	3304      	adds	r3, #4
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fc3d 	bl	800a4ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc44:	4b19      	ldr	r3, [pc, #100]	; (800bcac <xTaskRemoveFromEventList+0xb4>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d903      	bls.n	800bc54 <xTaskRemoveFromEventList+0x5c>
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4a16      	ldr	r2, [pc, #88]	; (800bcac <xTaskRemoveFromEventList+0xb4>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc58:	4613      	mov	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4a13      	ldr	r2, [pc, #76]	; (800bcb0 <xTaskRemoveFromEventList+0xb8>)
 800bc62:	441a      	add	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7fe fbc8 	bl	800a400 <vListInsertEnd>
 800bc70:	e005      	b.n	800bc7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	3318      	adds	r3, #24
 800bc76:	4619      	mov	r1, r3
 800bc78:	480e      	ldr	r0, [pc, #56]	; (800bcb4 <xTaskRemoveFromEventList+0xbc>)
 800bc7a:	f7fe fbc1 	bl	800a400 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc82:	4b0d      	ldr	r3, [pc, #52]	; (800bcb8 <xTaskRemoveFromEventList+0xc0>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d905      	bls.n	800bc98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc90:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <xTaskRemoveFromEventList+0xc4>)
 800bc92:	2201      	movs	r2, #1
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e001      	b.n	800bc9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc9c:	697b      	ldr	r3, [r7, #20]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200013ac 	.word	0x200013ac
 800bcac:	2000138c 	.word	0x2000138c
 800bcb0:	20000eb4 	.word	0x20000eb4
 800bcb4:	20001344 	.word	0x20001344
 800bcb8:	20000eb0 	.word	0x20000eb0
 800bcbc:	20001398 	.word	0x20001398

0800bcc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <vTaskInternalSetTimeOutState+0x24>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bcd0:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <vTaskInternalSetTimeOutState+0x28>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	605a      	str	r2, [r3, #4]
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr
 800bce4:	2000139c 	.word	0x2000139c
 800bce8:	20001388 	.word	0x20001388

0800bcec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b088      	sub	sp, #32
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10a      	bne.n	800bd12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	613b      	str	r3, [r7, #16]
}
 800bd0e:	bf00      	nop
 800bd10:	e7fe      	b.n	800bd10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	60fb      	str	r3, [r7, #12]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd2e:	f001 fa09 	bl	800d144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd32:	4b1d      	ldr	r3, [pc, #116]	; (800bda8 <xTaskCheckForTimeOut+0xbc>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4a:	d102      	bne.n	800bd52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	61fb      	str	r3, [r7, #28]
 800bd50:	e023      	b.n	800bd9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	4b15      	ldr	r3, [pc, #84]	; (800bdac <xTaskCheckForTimeOut+0xc0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d007      	beq.n	800bd6e <xTaskCheckForTimeOut+0x82>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	69ba      	ldr	r2, [r7, #24]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d302      	bcc.n	800bd6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	e015      	b.n	800bd9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d20b      	bcs.n	800bd90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff ff9b 	bl	800bcc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	61fb      	str	r3, [r7, #28]
 800bd8e:	e004      	b.n	800bd9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd96:	2301      	movs	r3, #1
 800bd98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd9a:	f001 fa03 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800bd9e:	69fb      	ldr	r3, [r7, #28]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20001388 	.word	0x20001388
 800bdac:	2000139c 	.word	0x2000139c

0800bdb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdb4:	4b03      	ldr	r3, [pc, #12]	; (800bdc4 <vTaskMissedYield+0x14>)
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	601a      	str	r2, [r3, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	20001398 	.word	0x20001398

0800bdc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdd0:	f000 f852 	bl	800be78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <prvIdleTask+0x28>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d9f9      	bls.n	800bdd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bddc:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <prvIdleTask+0x2c>)
 800bdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bdec:	e7f0      	b.n	800bdd0 <prvIdleTask+0x8>
 800bdee:	bf00      	nop
 800bdf0:	20000eb4 	.word	0x20000eb4
 800bdf4:	e000ed04 	.word	0xe000ed04

0800bdf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdfe:	2300      	movs	r3, #0
 800be00:	607b      	str	r3, [r7, #4]
 800be02:	e00c      	b.n	800be1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4a12      	ldr	r2, [pc, #72]	; (800be58 <prvInitialiseTaskLists+0x60>)
 800be10:	4413      	add	r3, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7fe fac7 	bl	800a3a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3301      	adds	r3, #1
 800be1c:	607b      	str	r3, [r7, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b37      	cmp	r3, #55	; 0x37
 800be22:	d9ef      	bls.n	800be04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be24:	480d      	ldr	r0, [pc, #52]	; (800be5c <prvInitialiseTaskLists+0x64>)
 800be26:	f7fe fabe 	bl	800a3a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be2a:	480d      	ldr	r0, [pc, #52]	; (800be60 <prvInitialiseTaskLists+0x68>)
 800be2c:	f7fe fabb 	bl	800a3a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be30:	480c      	ldr	r0, [pc, #48]	; (800be64 <prvInitialiseTaskLists+0x6c>)
 800be32:	f7fe fab8 	bl	800a3a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be36:	480c      	ldr	r0, [pc, #48]	; (800be68 <prvInitialiseTaskLists+0x70>)
 800be38:	f7fe fab5 	bl	800a3a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be3c:	480b      	ldr	r0, [pc, #44]	; (800be6c <prvInitialiseTaskLists+0x74>)
 800be3e:	f7fe fab2 	bl	800a3a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be42:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <prvInitialiseTaskLists+0x78>)
 800be44:	4a05      	ldr	r2, [pc, #20]	; (800be5c <prvInitialiseTaskLists+0x64>)
 800be46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <prvInitialiseTaskLists+0x7c>)
 800be4a:	4a05      	ldr	r2, [pc, #20]	; (800be60 <prvInitialiseTaskLists+0x68>)
 800be4c:	601a      	str	r2, [r3, #0]
}
 800be4e:	bf00      	nop
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20000eb4 	.word	0x20000eb4
 800be5c:	20001314 	.word	0x20001314
 800be60:	20001328 	.word	0x20001328
 800be64:	20001344 	.word	0x20001344
 800be68:	20001358 	.word	0x20001358
 800be6c:	20001370 	.word	0x20001370
 800be70:	2000133c 	.word	0x2000133c
 800be74:	20001340 	.word	0x20001340

0800be78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be7e:	e019      	b.n	800beb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be80:	f001 f960 	bl	800d144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be84:	4b10      	ldr	r3, [pc, #64]	; (800bec8 <prvCheckTasksWaitingTermination+0x50>)
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	3304      	adds	r3, #4
 800be90:	4618      	mov	r0, r3
 800be92:	f7fe fb12 	bl	800a4ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be96:	4b0d      	ldr	r3, [pc, #52]	; (800becc <prvCheckTasksWaitingTermination+0x54>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	4a0b      	ldr	r2, [pc, #44]	; (800becc <prvCheckTasksWaitingTermination+0x54>)
 800be9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <prvCheckTasksWaitingTermination+0x58>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	4a0a      	ldr	r2, [pc, #40]	; (800bed0 <prvCheckTasksWaitingTermination+0x58>)
 800bea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800beaa:	f001 f97b 	bl	800d1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f810 	bl	800bed4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beb4:	4b06      	ldr	r3, [pc, #24]	; (800bed0 <prvCheckTasksWaitingTermination+0x58>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1e1      	bne.n	800be80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bebc:	bf00      	nop
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20001358 	.word	0x20001358
 800becc:	20001384 	.word	0x20001384
 800bed0:	2000136c 	.word	0x2000136c

0800bed4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d108      	bne.n	800bef8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beea:	4618      	mov	r0, r3
 800beec:	f001 fb18 	bl	800d520 <vPortFree>
				vPortFree( pxTCB );
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 fb15 	bl	800d520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bef6:	e018      	b.n	800bf2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d103      	bne.n	800bf0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 fb0c 	bl	800d520 <vPortFree>
	}
 800bf08:	e00f      	b.n	800bf2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d00a      	beq.n	800bf2a <prvDeleteTCB+0x56>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	60fb      	str	r3, [r7, #12]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <prvDeleteTCB+0x54>
	}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <prvResetNextTaskUnblockTime+0x38>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf44:	4b0a      	ldr	r3, [pc, #40]	; (800bf70 <prvResetNextTaskUnblockTime+0x3c>)
 800bf46:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf4c:	e008      	b.n	800bf60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4e:	4b07      	ldr	r3, [pc, #28]	; (800bf6c <prvResetNextTaskUnblockTime+0x38>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	4a04      	ldr	r2, [pc, #16]	; (800bf70 <prvResetNextTaskUnblockTime+0x3c>)
 800bf5e:	6013      	str	r3, [r2, #0]
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	2000133c 	.word	0x2000133c
 800bf70:	200013a4 	.word	0x200013a4

0800bf74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf7a:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <xTaskGetSchedulerState+0x34>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d102      	bne.n	800bf88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf82:	2301      	movs	r3, #1
 800bf84:	607b      	str	r3, [r7, #4]
 800bf86:	e008      	b.n	800bf9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf88:	4b08      	ldr	r3, [pc, #32]	; (800bfac <xTaskGetSchedulerState+0x38>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf90:	2302      	movs	r3, #2
 800bf92:	607b      	str	r3, [r7, #4]
 800bf94:	e001      	b.n	800bf9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf96:	2300      	movs	r3, #0
 800bf98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf9a:	687b      	ldr	r3, [r7, #4]
	}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	20001390 	.word	0x20001390
 800bfac:	200013ac 	.word	0x200013ac

0800bfb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d051      	beq.n	800c06a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfca:	4b2a      	ldr	r3, [pc, #168]	; (800c074 <xTaskPriorityInherit+0xc4>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d241      	bcs.n	800c058 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	db06      	blt.n	800bfea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfdc:	4b25      	ldr	r3, [pc, #148]	; (800c074 <xTaskPriorityInherit+0xc4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6959      	ldr	r1, [r3, #20]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4a1f      	ldr	r2, [pc, #124]	; (800c078 <xTaskPriorityInherit+0xc8>)
 800bffc:	4413      	add	r3, r2
 800bffe:	4299      	cmp	r1, r3
 800c000:	d122      	bne.n	800c048 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3304      	adds	r3, #4
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fa57 	bl	800a4ba <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c00c:	4b19      	ldr	r3, [pc, #100]	; (800c074 <xTaskPriorityInherit+0xc4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01a:	4b18      	ldr	r3, [pc, #96]	; (800c07c <xTaskPriorityInherit+0xcc>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d903      	bls.n	800c02a <xTaskPriorityInherit+0x7a>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c026:	4a15      	ldr	r2, [pc, #84]	; (800c07c <xTaskPriorityInherit+0xcc>)
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4a10      	ldr	r2, [pc, #64]	; (800c078 <xTaskPriorityInherit+0xc8>)
 800c038:	441a      	add	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fe f9dd 	bl	800a400 <vListInsertEnd>
 800c046:	e004      	b.n	800c052 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c048:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <xTaskPriorityInherit+0xc4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c052:	2301      	movs	r3, #1
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e008      	b.n	800c06a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c05c:	4b05      	ldr	r3, [pc, #20]	; (800c074 <xTaskPriorityInherit+0xc4>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	429a      	cmp	r2, r3
 800c064:	d201      	bcs.n	800c06a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c066:	2301      	movs	r3, #1
 800c068:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c06a:	68fb      	ldr	r3, [r7, #12]
	}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20000eb0 	.word	0x20000eb0
 800c078:	20000eb4 	.word	0x20000eb4
 800c07c:	2000138c 	.word	0x2000138c

0800c080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d056      	beq.n	800c144 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <xTaskPriorityDisinherit+0xd0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d00a      	beq.n	800c0b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	60fb      	str	r3, [r7, #12]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60bb      	str	r3, [r7, #8]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d8:	1e5a      	subs	r2, r3, #1
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d02c      	beq.n	800c144 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d128      	bne.n	800c144 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe f9df 	bl	800a4ba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c114:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <xTaskPriorityDisinherit+0xd4>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d903      	bls.n	800c124 <xTaskPriorityDisinherit+0xa4>
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <xTaskPriorityDisinherit+0xd4>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4a09      	ldr	r2, [pc, #36]	; (800c158 <xTaskPriorityDisinherit+0xd8>)
 800c132:	441a      	add	r2, r3
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3304      	adds	r3, #4
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f7fe f960 	bl	800a400 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c140:	2301      	movs	r3, #1
 800c142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c144:	697b      	ldr	r3, [r7, #20]
	}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	20000eb0 	.word	0x20000eb0
 800c154:	2000138c 	.word	0x2000138c
 800c158:	20000eb4 	.word	0x20000eb4

0800c15c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c16a:	2301      	movs	r3, #1
 800c16c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d06a      	beq.n	800c24a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	60fb      	str	r3, [r7, #12]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d902      	bls.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	e002      	b.n	800c1a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ac:	69fa      	ldr	r2, [r7, #28]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d04b      	beq.n	800c24a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d146      	bne.n	800c24a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1bc:	4b25      	ldr	r3, [pc, #148]	; (800c254 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d10a      	bne.n	800c1dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	60bb      	str	r3, [r7, #8]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	69fa      	ldr	r2, [r7, #28]
 800c1e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	db04      	blt.n	800c1fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	6959      	ldr	r1, [r3, #20]
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	4613      	mov	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4a13      	ldr	r2, [pc, #76]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c20a:	4413      	add	r3, r2
 800c20c:	4299      	cmp	r1, r3
 800c20e:	d11c      	bne.n	800c24a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe f950 	bl	800a4ba <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	429a      	cmp	r2, r3
 800c224:	d903      	bls.n	800c22e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22a:	4a0c      	ldr	r2, [pc, #48]	; (800c25c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4a07      	ldr	r2, [pc, #28]	; (800c258 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c23c:	441a      	add	r2, r3
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	3304      	adds	r3, #4
 800c242:	4619      	mov	r1, r3
 800c244:	4610      	mov	r0, r2
 800c246:	f7fe f8db 	bl	800a400 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c24a:	bf00      	nop
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20000eb0 	.word	0x20000eb0
 800c258:	20000eb4 	.word	0x20000eb4
 800c25c:	2000138c 	.word	0x2000138c

0800c260 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c260:	b480      	push	{r7}
 800c262:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c264:	4b07      	ldr	r3, [pc, #28]	; (800c284 <pvTaskIncrementMutexHeldCount+0x24>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d004      	beq.n	800c276 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c26c:	4b05      	ldr	r3, [pc, #20]	; (800c284 <pvTaskIncrementMutexHeldCount+0x24>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c272:	3201      	adds	r2, #1
 800c274:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c276:	4b03      	ldr	r3, [pc, #12]	; (800c284 <pvTaskIncrementMutexHeldCount+0x24>)
 800c278:	681b      	ldr	r3, [r3, #0]
	}
 800c27a:	4618      	mov	r0, r3
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20000eb0 	.word	0x20000eb0

0800c288 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c292:	f000 ff57 	bl	800d144 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c296:	4b1e      	ldr	r3, [pc, #120]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d113      	bne.n	800c2c8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c2a0:	4b1b      	ldr	r3, [pc, #108]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00b      	beq.n	800c2c8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	6838      	ldr	r0, [r7, #0]
 800c2b4:	f000 fa1e 	bl	800c6f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c2b8:	4b16      	ldr	r3, [pc, #88]	; (800c314 <ulTaskNotifyTake+0x8c>)
 800c2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c2c8:	f000 ff6c 	bl	800d1a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c2cc:	f000 ff3a 	bl	800d144 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c2d0:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c2e4:	4b0a      	ldr	r3, [pc, #40]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	655a      	str	r2, [r3, #84]	; 0x54
 800c2ec:	e004      	b.n	800c2f8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c2ee:	4b08      	ldr	r3, [pc, #32]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	3a01      	subs	r2, #1
 800c2f6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <ulTaskNotifyTake+0x88>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c302:	f000 ff4f 	bl	800d1a4 <vPortExitCritical>

		return ulReturn;
 800c306:	68fb      	ldr	r3, [r7, #12]
	}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20000eb0 	.word	0x20000eb0
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c326:	f000 ff0d 	bl	800d144 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c32a:	4b26      	ldr	r3, [pc, #152]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b02      	cmp	r3, #2
 800c336:	d01a      	beq.n	800c36e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c338:	4b22      	ldr	r3, [pc, #136]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	43d2      	mvns	r2, r2
 800c342:	400a      	ands	r2, r1
 800c344:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c346:	4b1f      	ldr	r3, [pc, #124]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00b      	beq.n	800c36e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c356:	2101      	movs	r1, #1
 800c358:	6838      	ldr	r0, [r7, #0]
 800c35a:	f000 f9cb 	bl	800c6f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c35e:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <xTaskNotifyWait+0xb0>)
 800c360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c364:	601a      	str	r2, [r3, #0]
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c36e:	f000 ff19 	bl	800d1a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c372:	f000 fee7 	bl	800d144 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c37c:	4b11      	ldr	r3, [pc, #68]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d002      	beq.n	800c39a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c394:	2300      	movs	r3, #0
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	e008      	b.n	800c3ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c39a:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	43d2      	mvns	r2, r2
 800c3a4:	400a      	ands	r2, r1
 800c3a6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <xTaskNotifyWait+0xac>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c3b6:	f000 fef5 	bl	800d1a4 <vPortExitCritical>

		return xReturn;
 800c3ba:	697b      	ldr	r3, [r7, #20]
	}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20000eb0 	.word	0x20000eb0
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <xTaskGenericNotify+0x30>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	61bb      	str	r3, [r7, #24]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c400:	f000 fea0 	bl	800d144 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c40a:	6a3b      	ldr	r3, [r7, #32]
 800c40c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c418:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	2202      	movs	r2, #2
 800c41e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	2b04      	cmp	r3, #4
 800c426:	d828      	bhi.n	800c47a <xTaskGenericNotify+0xae>
 800c428:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <xTaskGenericNotify+0x64>)
 800c42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42e:	bf00      	nop
 800c430:	0800c49b 	.word	0x0800c49b
 800c434:	0800c445 	.word	0x0800c445
 800c438:	0800c453 	.word	0x0800c453
 800c43c:	0800c45f 	.word	0x0800c45f
 800c440:	0800c467 	.word	0x0800c467
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	431a      	orrs	r2, r3
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c450:	e026      	b.n	800c4a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c456:	1c5a      	adds	r2, r3, #1
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c45c:	e020      	b.n	800c4a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c464:	e01c      	b.n	800c4a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c466:	7ffb      	ldrb	r3, [r7, #31]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d003      	beq.n	800c474 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c472:	e015      	b.n	800c4a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c474:	2300      	movs	r3, #0
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c478:	e012      	b.n	800c4a0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d00c      	beq.n	800c49e <xTaskGenericNotify+0xd2>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	617b      	str	r3, [r7, #20]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xTaskGenericNotify+0xcc>
					break;
 800c49a:	bf00      	nop
 800c49c:	e000      	b.n	800c4a0 <xTaskGenericNotify+0xd4>

					break;
 800c49e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c4a0:	7ffb      	ldrb	r3, [r7, #31]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d13a      	bne.n	800c51c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a6:	6a3b      	ldr	r3, [r7, #32]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe f805 	bl	800a4ba <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b4:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <xTaskGenericNotify+0x160>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d903      	bls.n	800c4c4 <xTaskGenericNotify+0xf8>
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	4a1a      	ldr	r2, [pc, #104]	; (800c52c <xTaskGenericNotify+0x160>)
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4a17      	ldr	r2, [pc, #92]	; (800c530 <xTaskGenericNotify+0x164>)
 800c4d2:	441a      	add	r2, r3
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4610      	mov	r0, r2
 800c4dc:	f7fd ff90 	bl	800a400 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <xTaskGenericNotify+0x132>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	613b      	str	r3, [r7, #16]
}
 800c4fa:	bf00      	nop
 800c4fc:	e7fe      	b.n	800c4fc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <xTaskGenericNotify+0x168>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	429a      	cmp	r2, r3
 800c50a:	d907      	bls.n	800c51c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c50c:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <xTaskGenericNotify+0x16c>)
 800c50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c51c:	f000 fe42 	bl	800d1a4 <vPortExitCritical>

		return xReturn;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c522:	4618      	mov	r0, r3
 800c524:	3728      	adds	r7, #40	; 0x28
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	2000138c 	.word	0x2000138c
 800c530:	20000eb4 	.word	0x20000eb4
 800c534:	20000eb0 	.word	0x20000eb0
 800c538:	e000ed04 	.word	0xe000ed04

0800c53c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08e      	sub	sp, #56	; 0x38
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	4613      	mov	r3, r2
 800c54a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c54c:	2301      	movs	r3, #1
 800c54e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c56c:	f000 fecc 	bl	800d308 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c574:	f3ef 8211 	mrs	r2, BASEPRI
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	623a      	str	r2, [r7, #32]
 800c58a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c58c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c58e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d003      	beq.n	800c59e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c5a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d828      	bhi.n	800c608 <xTaskGenericNotifyFromISR+0xcc>
 800c5b6:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <xTaskGenericNotifyFromISR+0x80>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c629 	.word	0x0800c629
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c5df 	.word	0x0800c5df
 800c5c8:	0800c5eb 	.word	0x0800c5eb
 800c5cc:	0800c5f3 	.word	0x0800c5f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c5dc:	e027      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c5e8:	e021      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c5f0:	e01d      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c5f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d003      	beq.n	800c602 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c600:	e015      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c602:	2300      	movs	r3, #0
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c606:	e012      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c610:	d00c      	beq.n	800c62c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	61bb      	str	r3, [r7, #24]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xTaskGenericNotifyFromISR+0xea>
					break;
 800c628:	bf00      	nop
 800c62a:	e000      	b.n	800c62e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c62c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c62e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c632:	2b01      	cmp	r3, #1
 800c634:	d146      	bne.n	800c6c4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	617b      	str	r3, [r7, #20]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c654:	4b21      	ldr	r3, [pc, #132]	; (800c6dc <xTaskGenericNotifyFromISR+0x1a0>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d11d      	bne.n	800c698 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	3304      	adds	r3, #4
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd ff2a 	bl	800a4ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66a:	4b1d      	ldr	r3, [pc, #116]	; (800c6e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d903      	bls.n	800c67a <xTaskGenericNotifyFromISR+0x13e>
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	4a1a      	ldr	r2, [pc, #104]	; (800c6e0 <xTaskGenericNotifyFromISR+0x1a4>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a17      	ldr	r2, [pc, #92]	; (800c6e4 <xTaskGenericNotifyFromISR+0x1a8>)
 800c688:	441a      	add	r2, r3
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	3304      	adds	r3, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7fd feb5 	bl	800a400 <vListInsertEnd>
 800c696:	e005      	b.n	800c6a4 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	3318      	adds	r3, #24
 800c69c:	4619      	mov	r1, r3
 800c69e:	4812      	ldr	r0, [pc, #72]	; (800c6e8 <xTaskGenericNotifyFromISR+0x1ac>)
 800c6a0:	f7fd feae 	bl	800a400 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a8:	4b10      	ldr	r3, [pc, #64]	; (800c6ec <xTaskGenericNotifyFromISR+0x1b0>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d908      	bls.n	800c6c4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c6be:	4b0c      	ldr	r3, [pc, #48]	; (800c6f0 <xTaskGenericNotifyFromISR+0x1b4>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	f383 8811 	msr	BASEPRI, r3
}
 800c6ce:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3738      	adds	r7, #56	; 0x38
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	200013ac 	.word	0x200013ac
 800c6e0:	2000138c 	.word	0x2000138c
 800c6e4:	20000eb4 	.word	0x20000eb4
 800c6e8:	20001344 	.word	0x20001344
 800c6ec:	20000eb0 	.word	0x20000eb0
 800c6f0:	20001398 	.word	0x20001398

0800c6f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6fe:	4b21      	ldr	r3, [pc, #132]	; (800c784 <prvAddCurrentTaskToDelayedList+0x90>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c704:	4b20      	ldr	r3, [pc, #128]	; (800c788 <prvAddCurrentTaskToDelayedList+0x94>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	3304      	adds	r3, #4
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fd fed5 	bl	800a4ba <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c716:	d10a      	bne.n	800c72e <prvAddCurrentTaskToDelayedList+0x3a>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d007      	beq.n	800c72e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c71e:	4b1a      	ldr	r3, [pc, #104]	; (800c788 <prvAddCurrentTaskToDelayedList+0x94>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3304      	adds	r3, #4
 800c724:	4619      	mov	r1, r3
 800c726:	4819      	ldr	r0, [pc, #100]	; (800c78c <prvAddCurrentTaskToDelayedList+0x98>)
 800c728:	f7fd fe6a 	bl	800a400 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c72c:	e026      	b.n	800c77c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <prvAddCurrentTaskToDelayedList+0x94>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	429a      	cmp	r2, r3
 800c744:	d209      	bcs.n	800c75a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c746:	4b12      	ldr	r3, [pc, #72]	; (800c790 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <prvAddCurrentTaskToDelayedList+0x94>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3304      	adds	r3, #4
 800c750:	4619      	mov	r1, r3
 800c752:	4610      	mov	r0, r2
 800c754:	f7fd fe78 	bl	800a448 <vListInsert>
}
 800c758:	e010      	b.n	800c77c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c75a:	4b0e      	ldr	r3, [pc, #56]	; (800c794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <prvAddCurrentTaskToDelayedList+0x94>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3304      	adds	r3, #4
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7fd fe6e 	bl	800a448 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	d202      	bcs.n	800c77c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c776:	4a08      	ldr	r2, [pc, #32]	; (800c798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	6013      	str	r3, [r2, #0]
}
 800c77c:	bf00      	nop
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20001388 	.word	0x20001388
 800c788:	20000eb0 	.word	0x20000eb0
 800c78c:	20001370 	.word	0x20001370
 800c790:	20001340 	.word	0x20001340
 800c794:	2000133c 	.word	0x2000133c
 800c798:	200013a4 	.word	0x200013a4

0800c79c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7a6:	f000 fb63 	bl	800ce70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7aa:	4b1c      	ldr	r3, [pc, #112]	; (800c81c <xTimerCreateTimerTask+0x80>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d021      	beq.n	800c7f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7ba:	1d3a      	adds	r2, r7, #4
 800c7bc:	f107 0108 	add.w	r1, r7, #8
 800c7c0:	f107 030c 	add.w	r3, r7, #12
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fd83 	bl	800a2d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	9202      	str	r2, [sp, #8]
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	460a      	mov	r2, r1
 800c7dc:	4910      	ldr	r1, [pc, #64]	; (800c820 <xTimerCreateTimerTask+0x84>)
 800c7de:	4811      	ldr	r0, [pc, #68]	; (800c824 <xTimerCreateTimerTask+0x88>)
 800c7e0:	f7fe fd98 	bl	800b314 <xTaskCreateStatic>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	4a10      	ldr	r2, [pc, #64]	; (800c828 <xTimerCreateTimerTask+0x8c>)
 800c7e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <xTimerCreateTimerTask+0x8c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	613b      	str	r3, [r7, #16]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c812:	697b      	ldr	r3, [r7, #20]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3718      	adds	r7, #24
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	200013e0 	.word	0x200013e0
 800c820:	0800f5b4 	.word	0x0800f5b4
 800c824:	0800ca19 	.word	0x0800ca19
 800c828:	200013e4 	.word	0x200013e4

0800c82c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b088      	sub	sp, #32
 800c830:	af02      	add	r7, sp, #8
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c83a:	202c      	movs	r0, #44	; 0x2c
 800c83c:	f000 fda4 	bl	800d388 <pvPortMalloc>
 800c840:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00d      	beq.n	800c864 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	68b9      	ldr	r1, [r7, #8]
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f000 f805 	bl	800c86e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c864:	697b      	ldr	r3, [r7, #20]
	}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
 800c87a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	617b      	str	r3, [r7, #20]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01e      	beq.n	800c8dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c89e:	f000 fae7 	bl	800ce70 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	6a3a      	ldr	r2, [r7, #32]
 800c8b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fd fd91 	bl	800a3e6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d008      	beq.n	800c8dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d0:	f043 0304 	orr.w	r3, r3, #4
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c8dc:	bf00      	nop
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08a      	sub	sp, #40	; 0x28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	623b      	str	r3, [r7, #32]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c912:	4b1a      	ldr	r3, [pc, #104]	; (800c97c <xTimerGenericCommand+0x98>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d02a      	beq.n	800c970 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b05      	cmp	r3, #5
 800c92a:	dc18      	bgt.n	800c95e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c92c:	f7ff fb22 	bl	800bf74 <xTaskGetSchedulerState>
 800c930:	4603      	mov	r3, r0
 800c932:	2b02      	cmp	r3, #2
 800c934:	d109      	bne.n	800c94a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c936:	4b11      	ldr	r3, [pc, #68]	; (800c97c <xTimerGenericCommand+0x98>)
 800c938:	6818      	ldr	r0, [r3, #0]
 800c93a:	f107 0110 	add.w	r1, r7, #16
 800c93e:	2300      	movs	r3, #0
 800c940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c942:	f7fd ff8d 	bl	800a860 <xQueueGenericSend>
 800c946:	6278      	str	r0, [r7, #36]	; 0x24
 800c948:	e012      	b.n	800c970 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c94a:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <xTimerGenericCommand+0x98>)
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	f107 0110 	add.w	r1, r7, #16
 800c952:	2300      	movs	r3, #0
 800c954:	2200      	movs	r2, #0
 800c956:	f7fd ff83 	bl	800a860 <xQueueGenericSend>
 800c95a:	6278      	str	r0, [r7, #36]	; 0x24
 800c95c:	e008      	b.n	800c970 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c95e:	4b07      	ldr	r3, [pc, #28]	; (800c97c <xTimerGenericCommand+0x98>)
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	f107 0110 	add.w	r1, r7, #16
 800c966:	2300      	movs	r3, #0
 800c968:	683a      	ldr	r2, [r7, #0]
 800c96a:	f7fe f877 	bl	800aa5c <xQueueGenericSendFromISR>
 800c96e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c972:	4618      	mov	r0, r3
 800c974:	3728      	adds	r7, #40	; 0x28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200013e0 	.word	0x200013e0

0800c980 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af02      	add	r7, sp, #8
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c98a:	4b22      	ldr	r3, [pc, #136]	; (800ca14 <prvProcessExpiredTimer+0x94>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	3304      	adds	r3, #4
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fd fd8e 	bl	800a4ba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9a4:	f003 0304 	and.w	r3, r3, #4
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d022      	beq.n	800c9f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	699a      	ldr	r2, [r3, #24]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	18d1      	adds	r1, r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	6978      	ldr	r0, [r7, #20]
 800c9ba:	f000 f8d1 	bl	800cb60 <prvInsertTimerInActiveList>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d01f      	beq.n	800ca04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	6978      	ldr	r0, [r7, #20]
 800c9d0:	f7ff ff88 	bl	800c8e4 <xTimerGenericCommand>
 800c9d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d113      	bne.n	800ca04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	60fb      	str	r3, [r7, #12]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9f8:	f023 0301 	bic.w	r3, r3, #1
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	6978      	ldr	r0, [r7, #20]
 800ca0a:	4798      	blx	r3
}
 800ca0c:	bf00      	nop
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	200013d8 	.word	0x200013d8

0800ca18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca20:	f107 0308 	add.w	r3, r7, #8
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 f857 	bl	800cad8 <prvGetNextExpireTime>
 800ca2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 f803 	bl	800ca3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca36:	f000 f8d5 	bl	800cbe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca3a:	e7f1      	b.n	800ca20 <prvTimerTask+0x8>

0800ca3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca46:	f7fe fea1 	bl	800b78c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca4a:	f107 0308 	add.w	r3, r7, #8
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f866 	bl	800cb20 <prvSampleTimeNow>
 800ca54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d130      	bne.n	800cabe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <prvProcessTimerOrBlockTask+0x3c>
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d806      	bhi.n	800ca78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca6a:	f7fe fe9d 	bl	800b7a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ff85 	bl	800c980 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca76:	e024      	b.n	800cac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d008      	beq.n	800ca90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <prvProcessTimerOrBlockTask+0x90>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <prvProcessTimerOrBlockTask+0x50>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <prvProcessTimerOrBlockTask+0x52>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca90:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <prvProcessTimerOrBlockTask+0x94>)
 800ca92:	6818      	ldr	r0, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	f7fe fc05 	bl	800b2ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800caa2:	f7fe fe81 	bl	800b7a8 <xTaskResumeAll>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <prvProcessTimerOrBlockTask+0x98>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
}
 800cabc:	e001      	b.n	800cac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cabe:	f7fe fe73 	bl	800b7a8 <xTaskResumeAll>
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	200013dc 	.word	0x200013dc
 800cad0:	200013e0 	.word	0x200013e0
 800cad4:	e000ed04 	.word	0xe000ed04

0800cad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cae0:	4b0e      	ldr	r3, [pc, #56]	; (800cb1c <prvGetNextExpireTime+0x44>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <prvGetNextExpireTime+0x16>
 800caea:	2201      	movs	r2, #1
 800caec:	e000      	b.n	800caf0 <prvGetNextExpireTime+0x18>
 800caee:	2200      	movs	r2, #0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d105      	bne.n	800cb08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <prvGetNextExpireTime+0x44>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	e001      	b.n	800cb0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	200013d8 	.word	0x200013d8

0800cb20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb28:	f7fe fedc 	bl	800b8e4 <xTaskGetTickCount>
 800cb2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb2e:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <prvSampleTimeNow+0x3c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d205      	bcs.n	800cb44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb38:	f000 f936 	bl	800cda8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	e002      	b.n	800cb4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb4a:	4a04      	ldr	r2, [pc, #16]	; (800cb5c <prvSampleTimeNow+0x3c>)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb50:	68fb      	ldr	r3, [r7, #12]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200013e8 	.word	0x200013e8

0800cb60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
 800cb6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d812      	bhi.n	800cbac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	1ad2      	subs	r2, r2, r3
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d302      	bcc.n	800cb9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb94:	2301      	movs	r3, #1
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	e01b      	b.n	800cbd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb9a:	4b10      	ldr	r3, [pc, #64]	; (800cbdc <prvInsertTimerInActiveList+0x7c>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4619      	mov	r1, r3
 800cba4:	4610      	mov	r0, r2
 800cba6:	f7fd fc4f 	bl	800a448 <vListInsert>
 800cbaa:	e012      	b.n	800cbd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d206      	bcs.n	800cbc2 <prvInsertTimerInActiveList+0x62>
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d302      	bcc.n	800cbc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	e007      	b.n	800cbd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbc2:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <prvInsertTimerInActiveList+0x80>)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3304      	adds	r3, #4
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4610      	mov	r0, r2
 800cbce:	f7fd fc3b 	bl	800a448 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cbd2:	697b      	ldr	r3, [r7, #20]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	200013dc 	.word	0x200013dc
 800cbe0:	200013d8 	.word	0x200013d8

0800cbe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08e      	sub	sp, #56	; 0x38
 800cbe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbea:	e0ca      	b.n	800cd82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	da18      	bge.n	800cc24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbf2:	1d3b      	adds	r3, r7, #4
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	61fb      	str	r3, [r7, #28]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc1a:	6850      	ldr	r0, [r2, #4]
 800cc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc1e:	6892      	ldr	r2, [r2, #8]
 800cc20:	4611      	mov	r1, r2
 800cc22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f2c0 80ab 	blt.w	800cd82 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d004      	beq.n	800cc42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fd fc3c 	bl	800a4ba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc42:	463b      	mov	r3, r7
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff ff6b 	bl	800cb20 <prvSampleTimeNow>
 800cc4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b09      	cmp	r3, #9
 800cc50:	f200 8096 	bhi.w	800cd80 <prvProcessReceivedCommands+0x19c>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <prvProcessReceivedCommands+0x78>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cc85 	.word	0x0800cc85
 800cc60:	0800cc85 	.word	0x0800cc85
 800cc64:	0800cc85 	.word	0x0800cc85
 800cc68:	0800ccf9 	.word	0x0800ccf9
 800cc6c:	0800cd0d 	.word	0x0800cd0d
 800cc70:	0800cd57 	.word	0x0800cd57
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc85 	.word	0x0800cc85
 800cc7c:	0800ccf9 	.word	0x0800ccf9
 800cc80:	0800cd0d 	.word	0x0800cd0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc8a:	f043 0301 	orr.w	r3, r3, #1
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	18d1      	adds	r1, r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cca4:	f7ff ff5c 	bl	800cb60 <prvInsertTimerInActiveList>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d069      	beq.n	800cd82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d05e      	beq.n	800cd82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	441a      	add	r2, r3
 800cccc:	2300      	movs	r3, #0
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccd6:	f7ff fe05 	bl	800c8e4 <xTimerGenericCommand>
 800ccda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccdc:	6a3b      	ldr	r3, [r7, #32]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d14f      	bne.n	800cd82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	61bb      	str	r3, [r7, #24]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccfe:	f023 0301 	bic.w	r3, r3, #1
 800cd02:	b2da      	uxtb	r2, r3
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd0a:	e03a      	b.n	800cd82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd12:	f043 0301 	orr.w	r3, r3, #1
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	699b      	ldr	r3, [r3, #24]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	617b      	str	r3, [r7, #20]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd44:	699a      	ldr	r2, [r3, #24]
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	18d1      	adds	r1, r2, r3
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd50:	f7ff ff06 	bl	800cb60 <prvInsertTimerInActiveList>
					break;
 800cd54:	e015      	b.n	800cd82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd5c:	f003 0302 	and.w	r3, r3, #2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd66:	f000 fbdb 	bl	800d520 <vPortFree>
 800cd6a:	e00a      	b.n	800cd82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd72:	f023 0301 	bic.w	r3, r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd7e:	e000      	b.n	800cd82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cd80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd82:	4b08      	ldr	r3, [pc, #32]	; (800cda4 <prvProcessReceivedCommands+0x1c0>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	1d39      	adds	r1, r7, #4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fd ff02 	bl	800ab94 <xQueueReceive>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f47f af2a 	bne.w	800cbec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd98:	bf00      	nop
 800cd9a:	bf00      	nop
 800cd9c:	3730      	adds	r7, #48	; 0x30
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	200013e0 	.word	0x200013e0

0800cda8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b088      	sub	sp, #32
 800cdac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdae:	e048      	b.n	800ce42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdb0:	4b2d      	ldr	r3, [pc, #180]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdba:	4b2b      	ldr	r3, [pc, #172]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fd fb76 	bl	800a4ba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cddc:	f003 0304 	and.w	r3, r3, #4
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d02e      	beq.n	800ce42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	4413      	add	r3, r2
 800cdec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d90e      	bls.n	800ce14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce02:	4b19      	ldr	r3, [pc, #100]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7fd fb1b 	bl	800a448 <vListInsert>
 800ce12:	e016      	b.n	800ce42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce14:	2300      	movs	r3, #0
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fd60 	bl	800c8e4 <xTimerGenericCommand>
 800ce24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10a      	bne.n	800ce42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	603b      	str	r3, [r7, #0]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1b1      	bne.n	800cdb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce4c:	4b06      	ldr	r3, [pc, #24]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce52:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a04      	ldr	r2, [pc, #16]	; (800ce68 <prvSwitchTimerLists+0xc0>)
 800ce58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce5a:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <prvSwitchTimerLists+0xc4>)
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	6013      	str	r3, [r2, #0]
}
 800ce60:	bf00      	nop
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	200013d8 	.word	0x200013d8
 800ce6c:	200013dc 	.word	0x200013dc

0800ce70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce76:	f000 f965 	bl	800d144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce7a:	4b15      	ldr	r3, [pc, #84]	; (800ced0 <prvCheckForValidListAndQueue+0x60>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d120      	bne.n	800cec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce82:	4814      	ldr	r0, [pc, #80]	; (800ced4 <prvCheckForValidListAndQueue+0x64>)
 800ce84:	f7fd fa8f 	bl	800a3a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce88:	4813      	ldr	r0, [pc, #76]	; (800ced8 <prvCheckForValidListAndQueue+0x68>)
 800ce8a:	f7fd fa8c 	bl	800a3a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce8e:	4b13      	ldr	r3, [pc, #76]	; (800cedc <prvCheckForValidListAndQueue+0x6c>)
 800ce90:	4a10      	ldr	r2, [pc, #64]	; (800ced4 <prvCheckForValidListAndQueue+0x64>)
 800ce92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce94:	4b12      	ldr	r3, [pc, #72]	; (800cee0 <prvCheckForValidListAndQueue+0x70>)
 800ce96:	4a10      	ldr	r2, [pc, #64]	; (800ced8 <prvCheckForValidListAndQueue+0x68>)
 800ce98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <prvCheckForValidListAndQueue+0x74>)
 800cea0:	4a11      	ldr	r2, [pc, #68]	; (800cee8 <prvCheckForValidListAndQueue+0x78>)
 800cea2:	2110      	movs	r1, #16
 800cea4:	200a      	movs	r0, #10
 800cea6:	f7fd fb9b 	bl	800a5e0 <xQueueGenericCreateStatic>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <prvCheckForValidListAndQueue+0x60>)
 800ceae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ceb0:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <prvCheckForValidListAndQueue+0x60>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ceb8:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <prvCheckForValidListAndQueue+0x60>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	490b      	ldr	r1, [pc, #44]	; (800ceec <prvCheckForValidListAndQueue+0x7c>)
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fe f9a0 	bl	800b204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec4:	f000 f96e 	bl	800d1a4 <vPortExitCritical>
}
 800cec8:	bf00      	nop
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	200013e0 	.word	0x200013e0
 800ced4:	200013b0 	.word	0x200013b0
 800ced8:	200013c4 	.word	0x200013c4
 800cedc:	200013d8 	.word	0x200013d8
 800cee0:	200013dc 	.word	0x200013dc
 800cee4:	2000148c 	.word	0x2000148c
 800cee8:	200013ec 	.word	0x200013ec
 800ceec:	0800f5bc 	.word	0x0800f5bc

0800cef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3b04      	subs	r3, #4
 800cf00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	3b04      	subs	r3, #4
 800cf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	f023 0201 	bic.w	r2, r3, #1
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3b04      	subs	r3, #4
 800cf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf20:	4a0c      	ldr	r2, [pc, #48]	; (800cf54 <pxPortInitialiseStack+0x64>)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	3b14      	subs	r3, #20
 800cf2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3b04      	subs	r3, #4
 800cf36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f06f 0202 	mvn.w	r2, #2
 800cf3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3b20      	subs	r3, #32
 800cf44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf46:	68fb      	ldr	r3, [r7, #12]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	0800cf59 	.word	0x0800cf59

0800cf58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf62:	4b12      	ldr	r3, [pc, #72]	; (800cfac <prvTaskExitError+0x54>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6a:	d00a      	beq.n	800cf82 <prvTaskExitError+0x2a>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	60fb      	str	r3, [r7, #12]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <prvTaskExitError+0x28>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	60bb      	str	r3, [r7, #8]
}
 800cf94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf96:	bf00      	nop
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d0fc      	beq.n	800cf98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	20000050 	.word	0x20000050

0800cfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <pxCurrentTCBConst2>)
 800cfb2:	6819      	ldr	r1, [r3, #0]
 800cfb4:	6808      	ldr	r0, [r1, #0]
 800cfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	f380 8809 	msr	PSP, r0
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f04f 0000 	mov.w	r0, #0
 800cfc6:	f380 8811 	msr	BASEPRI, r0
 800cfca:	4770      	bx	lr
 800cfcc:	f3af 8000 	nop.w

0800cfd0 <pxCurrentTCBConst2>:
 800cfd0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop

0800cfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfd8:	4808      	ldr	r0, [pc, #32]	; (800cffc <prvPortStartFirstTask+0x24>)
 800cfda:	6800      	ldr	r0, [r0, #0]
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f380 8808 	msr	MSP, r0
 800cfe2:	f04f 0000 	mov.w	r0, #0
 800cfe6:	f380 8814 	msr	CONTROL, r0
 800cfea:	b662      	cpsie	i
 800cfec:	b661      	cpsie	f
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	df00      	svc	0
 800cff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cffa:	bf00      	nop
 800cffc:	e000ed08 	.word	0xe000ed08

0800d000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d006:	4b46      	ldr	r3, [pc, #280]	; (800d120 <xPortStartScheduler+0x120>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a46      	ldr	r2, [pc, #280]	; (800d124 <xPortStartScheduler+0x124>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d10a      	bne.n	800d026 <xPortStartScheduler+0x26>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	613b      	str	r3, [r7, #16]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d026:	4b3e      	ldr	r3, [pc, #248]	; (800d120 <xPortStartScheduler+0x120>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a3f      	ldr	r2, [pc, #252]	; (800d128 <xPortStartScheduler+0x128>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d10a      	bne.n	800d046 <xPortStartScheduler+0x46>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	60fb      	str	r3, [r7, #12]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d046:	4b39      	ldr	r3, [pc, #228]	; (800d12c <xPortStartScheduler+0x12c>)
 800d048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	22ff      	movs	r2, #255	; 0xff
 800d056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	4b31      	ldr	r3, [pc, #196]	; (800d130 <xPortStartScheduler+0x130>)
 800d06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d06e:	4b31      	ldr	r3, [pc, #196]	; (800d134 <xPortStartScheduler+0x134>)
 800d070:	2207      	movs	r2, #7
 800d072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d074:	e009      	b.n	800d08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d076:	4b2f      	ldr	r3, [pc, #188]	; (800d134 <xPortStartScheduler+0x134>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	4a2d      	ldr	r2, [pc, #180]	; (800d134 <xPortStartScheduler+0x134>)
 800d07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d08a:	78fb      	ldrb	r3, [r7, #3]
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d092:	2b80      	cmp	r3, #128	; 0x80
 800d094:	d0ef      	beq.n	800d076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d096:	4b27      	ldr	r3, [pc, #156]	; (800d134 <xPortStartScheduler+0x134>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1c3 0307 	rsb	r3, r3, #7
 800d09e:	2b04      	cmp	r3, #4
 800d0a0:	d00a      	beq.n	800d0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	60bb      	str	r3, [r7, #8]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <xPortStartScheduler+0x134>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <xPortStartScheduler+0x134>)
 800d0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <xPortStartScheduler+0x134>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0ca:	4a1a      	ldr	r2, [pc, #104]	; (800d134 <xPortStartScheduler+0x134>)
 800d0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0d6:	4b18      	ldr	r3, [pc, #96]	; (800d138 <xPortStartScheduler+0x138>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a17      	ldr	r2, [pc, #92]	; (800d138 <xPortStartScheduler+0x138>)
 800d0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0e2:	4b15      	ldr	r3, [pc, #84]	; (800d138 <xPortStartScheduler+0x138>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a14      	ldr	r2, [pc, #80]	; (800d138 <xPortStartScheduler+0x138>)
 800d0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0ee:	f000 f8dd 	bl	800d2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <xPortStartScheduler+0x13c>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0f8:	f000 f8fc 	bl	800d2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0fc:	4b10      	ldr	r3, [pc, #64]	; (800d140 <xPortStartScheduler+0x140>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a0f      	ldr	r2, [pc, #60]	; (800d140 <xPortStartScheduler+0x140>)
 800d102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d108:	f7ff ff66 	bl	800cfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d10c:	f7fe fcc6 	bl	800ba9c <vTaskSwitchContext>
	prvTaskExitError();
 800d110:	f7ff ff22 	bl	800cf58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	e000ed00 	.word	0xe000ed00
 800d124:	410fc271 	.word	0x410fc271
 800d128:	410fc270 	.word	0x410fc270
 800d12c:	e000e400 	.word	0xe000e400
 800d130:	200014dc 	.word	0x200014dc
 800d134:	200014e0 	.word	0x200014e0
 800d138:	e000ed20 	.word	0xe000ed20
 800d13c:	20000050 	.word	0x20000050
 800d140:	e000ef34 	.word	0xe000ef34

0800d144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	607b      	str	r3, [r7, #4]
}
 800d15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d15e:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <vPortEnterCritical+0x58>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a0d      	ldr	r2, [pc, #52]	; (800d19c <vPortEnterCritical+0x58>)
 800d166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d168:	4b0c      	ldr	r3, [pc, #48]	; (800d19c <vPortEnterCritical+0x58>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10f      	bne.n	800d190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d170:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <vPortEnterCritical+0x5c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <vPortEnterCritical+0x4c>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	603b      	str	r3, [r7, #0]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <vPortEnterCritical+0x4a>
	}
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	20000050 	.word	0x20000050
 800d1a0:	e000ed04 	.word	0xe000ed04

0800d1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1aa:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <vPortExitCritical+0x24>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	607b      	str	r3, [r7, #4]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	4a09      	ldr	r2, [pc, #36]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1d2:	4b08      	ldr	r3, [pc, #32]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d105      	bne.n	800d1e6 <vPortExitCritical+0x42>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	f383 8811 	msr	BASEPRI, r3
}
 800d1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20000050 	.word	0x20000050
	...

0800d200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d200:	f3ef 8009 	mrs	r0, PSP
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	4b15      	ldr	r3, [pc, #84]	; (800d260 <pxCurrentTCBConst>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	f01e 0f10 	tst.w	lr, #16
 800d210:	bf08      	it	eq
 800d212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	6010      	str	r0, [r2, #0]
 800d21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d224:	f380 8811 	msr	BASEPRI, r0
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f7fe fc34 	bl	800ba9c <vTaskSwitchContext>
 800d234:	f04f 0000 	mov.w	r0, #0
 800d238:	f380 8811 	msr	BASEPRI, r0
 800d23c:	bc09      	pop	{r0, r3}
 800d23e:	6819      	ldr	r1, [r3, #0]
 800d240:	6808      	ldr	r0, [r1, #0]
 800d242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d246:	f01e 0f10 	tst.w	lr, #16
 800d24a:	bf08      	it	eq
 800d24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d250:	f380 8809 	msr	PSP, r0
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w

0800d260 <pxCurrentTCBConst>:
 800d260:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop

0800d268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d282:	f7fe fb51 	bl	800b928 <xTaskIncrementTick>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <xPortSysTickHandler+0x40>)
 800d28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	2300      	movs	r3, #0
 800d296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f383 8811 	msr	BASEPRI, r3
}
 800d29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	e000ed04 	.word	0xe000ed04

0800d2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2b6:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <vPortSetupTimerInterrupt+0x38>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <vPortSetupTimerInterrupt+0x3c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a0a      	ldr	r2, [pc, #40]	; (800d2ec <vPortSetupTimerInterrupt+0x40>)
 800d2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c6:	099b      	lsrs	r3, r3, #6
 800d2c8:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <vPortSetupTimerInterrupt+0x44>)
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2ce:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	e000e010 	.word	0xe000e010
 800d2e4:	e000e018 	.word	0xe000e018
 800d2e8:	20000044 	.word	0x20000044
 800d2ec:	10624dd3 	.word	0x10624dd3
 800d2f0:	e000e014 	.word	0xe000e014

0800d2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d304 <vPortEnableVFP+0x10>
 800d2f8:	6801      	ldr	r1, [r0, #0]
 800d2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2fe:	6001      	str	r1, [r0, #0]
 800d300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d302:	bf00      	nop
 800d304:	e000ed88 	.word	0xe000ed88

0800d308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d30e:	f3ef 8305 	mrs	r3, IPSR
 800d312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b0f      	cmp	r3, #15
 800d318:	d914      	bls.n	800d344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d31a:	4a17      	ldr	r2, [pc, #92]	; (800d378 <vPortValidateInterruptPriority+0x70>)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4413      	add	r3, r2
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d324:	4b15      	ldr	r3, [pc, #84]	; (800d37c <vPortValidateInterruptPriority+0x74>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	7afa      	ldrb	r2, [r7, #11]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d20a      	bcs.n	800d344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
 800d342:	e7fe      	b.n	800d342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d344:	4b0e      	ldr	r3, [pc, #56]	; (800d380 <vPortValidateInterruptPriority+0x78>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d34c:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <vPortValidateInterruptPriority+0x7c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d90a      	bls.n	800d36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	603b      	str	r3, [r7, #0]
}
 800d366:	bf00      	nop
 800d368:	e7fe      	b.n	800d368 <vPortValidateInterruptPriority+0x60>
	}
 800d36a:	bf00      	nop
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	e000e3f0 	.word	0xe000e3f0
 800d37c:	200014dc 	.word	0x200014dc
 800d380:	e000ed0c 	.word	0xe000ed0c
 800d384:	200014e0 	.word	0x200014e0

0800d388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08a      	sub	sp, #40	; 0x28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d390:	2300      	movs	r3, #0
 800d392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d394:	f7fe f9fa 	bl	800b78c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d398:	4b5b      	ldr	r3, [pc, #364]	; (800d508 <pvPortMalloc+0x180>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3a0:	f000 f920 	bl	800d5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3a4:	4b59      	ldr	r3, [pc, #356]	; (800d50c <pvPortMalloc+0x184>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 8093 	bne.w	800d4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01d      	beq.n	800d3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3b8:	2208      	movs	r2, #8
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d014      	beq.n	800d3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f023 0307 	bic.w	r3, r3, #7
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00a      	beq.n	800d3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	617b      	str	r3, [r7, #20]
}
 800d3f0:	bf00      	nop
 800d3f2:	e7fe      	b.n	800d3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d06e      	beq.n	800d4d8 <pvPortMalloc+0x150>
 800d3fa:	4b45      	ldr	r3, [pc, #276]	; (800d510 <pvPortMalloc+0x188>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d869      	bhi.n	800d4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d404:	4b43      	ldr	r3, [pc, #268]	; (800d514 <pvPortMalloc+0x18c>)
 800d406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d408:	4b42      	ldr	r3, [pc, #264]	; (800d514 <pvPortMalloc+0x18c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d40e:	e004      	b.n	800d41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	429a      	cmp	r2, r3
 800d422:	d903      	bls.n	800d42c <pvPortMalloc+0xa4>
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f1      	bne.n	800d410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d42c:	4b36      	ldr	r3, [pc, #216]	; (800d508 <pvPortMalloc+0x180>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d432:	429a      	cmp	r2, r3
 800d434:	d050      	beq.n	800d4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2208      	movs	r2, #8
 800d43c:	4413      	add	r3, r2
 800d43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	2308      	movs	r3, #8
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	429a      	cmp	r2, r3
 800d456:	d91f      	bls.n	800d498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4413      	add	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00a      	beq.n	800d480 <pvPortMalloc+0xf8>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	613b      	str	r3, [r7, #16]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d492:	69b8      	ldr	r0, [r7, #24]
 800d494:	f000 f908 	bl	800d6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d498:	4b1d      	ldr	r3, [pc, #116]	; (800d510 <pvPortMalloc+0x188>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	4a1b      	ldr	r2, [pc, #108]	; (800d510 <pvPortMalloc+0x188>)
 800d4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4a6:	4b1a      	ldr	r3, [pc, #104]	; (800d510 <pvPortMalloc+0x188>)
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b1b      	ldr	r3, [pc, #108]	; (800d518 <pvPortMalloc+0x190>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d203      	bcs.n	800d4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4b2:	4b17      	ldr	r3, [pc, #92]	; (800d510 <pvPortMalloc+0x188>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a18      	ldr	r2, [pc, #96]	; (800d518 <pvPortMalloc+0x190>)
 800d4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <pvPortMalloc+0x184>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <pvPortMalloc+0x194>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	4a11      	ldr	r2, [pc, #68]	; (800d51c <pvPortMalloc+0x194>)
 800d4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4d8:	f7fe f966 	bl	800b7a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00a      	beq.n	800d4fc <pvPortMalloc+0x174>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	60fb      	str	r3, [r7, #12]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <pvPortMalloc+0x172>
	return pvReturn;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3728      	adds	r7, #40	; 0x28
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	200020ec 	.word	0x200020ec
 800d50c:	20002100 	.word	0x20002100
 800d510:	200020f0 	.word	0x200020f0
 800d514:	200020e4 	.word	0x200020e4
 800d518:	200020f4 	.word	0x200020f4
 800d51c:	200020f8 	.word	0x200020f8

0800d520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d04d      	beq.n	800d5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d532:	2308      	movs	r3, #8
 800d534:	425b      	negs	r3, r3
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	4413      	add	r3, r2
 800d53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	4b24      	ldr	r3, [pc, #144]	; (800d5d8 <vPortFree+0xb8>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4013      	ands	r3, r2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10a      	bne.n	800d564 <vPortFree+0x44>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	60fb      	str	r3, [r7, #12]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <vPortFree+0x62>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	60bb      	str	r3, [r7, #8]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	4b14      	ldr	r3, [pc, #80]	; (800d5d8 <vPortFree+0xb8>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4013      	ands	r3, r2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d01e      	beq.n	800d5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d11a      	bne.n	800d5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	4b0e      	ldr	r3, [pc, #56]	; (800d5d8 <vPortFree+0xb8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	43db      	mvns	r3, r3
 800d5a2:	401a      	ands	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5a8:	f7fe f8f0 	bl	800b78c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <vPortFree+0xbc>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4a09      	ldr	r2, [pc, #36]	; (800d5dc <vPortFree+0xbc>)
 800d5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f000 f874 	bl	800d6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <vPortFree+0xc0>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	4a06      	ldr	r2, [pc, #24]	; (800d5e0 <vPortFree+0xc0>)
 800d5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5ca:	f7fe f8ed 	bl	800b7a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5ce:	bf00      	nop
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20002100 	.word	0x20002100
 800d5dc:	200020f0 	.word	0x200020f0
 800d5e0:	200020fc 	.word	0x200020fc

0800d5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5f0:	4b27      	ldr	r3, [pc, #156]	; (800d690 <prvHeapInit+0xac>)
 800d5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00c      	beq.n	800d618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3307      	adds	r3, #7
 800d602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f023 0307 	bic.w	r3, r3, #7
 800d60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	4a1f      	ldr	r2, [pc, #124]	; (800d690 <prvHeapInit+0xac>)
 800d614:	4413      	add	r3, r2
 800d616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d61c:	4a1d      	ldr	r2, [pc, #116]	; (800d694 <prvHeapInit+0xb0>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d622:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <prvHeapInit+0xb0>)
 800d624:	2200      	movs	r2, #0
 800d626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d630:	2208      	movs	r2, #8
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	1a9b      	subs	r3, r3, r2
 800d636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f023 0307 	bic.w	r3, r3, #7
 800d63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4a15      	ldr	r2, [pc, #84]	; (800d698 <prvHeapInit+0xb4>)
 800d644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d646:	4b14      	ldr	r3, [pc, #80]	; (800d698 <prvHeapInit+0xb4>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2200      	movs	r2, #0
 800d64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d64e:	4b12      	ldr	r3, [pc, #72]	; (800d698 <prvHeapInit+0xb4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d664:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <prvHeapInit+0xb4>)
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	4a0a      	ldr	r2, [pc, #40]	; (800d69c <prvHeapInit+0xb8>)
 800d672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <prvHeapInit+0xbc>)
 800d67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d67c:	4b09      	ldr	r3, [pc, #36]	; (800d6a4 <prvHeapInit+0xc0>)
 800d67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d682:	601a      	str	r2, [r3, #0]
}
 800d684:	bf00      	nop
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	200014e4 	.word	0x200014e4
 800d694:	200020e4 	.word	0x200020e4
 800d698:	200020ec 	.word	0x200020ec
 800d69c:	200020f4 	.word	0x200020f4
 800d6a0:	200020f0 	.word	0x200020f0
 800d6a4:	20002100 	.word	0x20002100

0800d6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <prvInsertBlockIntoFreeList+0xac>)
 800d6b2:	60fb      	str	r3, [r7, #12]
 800d6b4:	e002      	b.n	800d6bc <prvInsertBlockIntoFreeList+0x14>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d8f7      	bhi.n	800d6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d108      	bne.n	800d6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	441a      	add	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	441a      	add	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d118      	bne.n	800d730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <prvInsertBlockIntoFreeList+0xb0>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	429a      	cmp	r2, r3
 800d708:	d00d      	beq.n	800d726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	441a      	add	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	e008      	b.n	800d738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d726:	4b0c      	ldr	r3, [pc, #48]	; (800d758 <prvInsertBlockIntoFreeList+0xb0>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e003      	b.n	800d738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d002      	beq.n	800d746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d746:	bf00      	nop
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	200020e4 	.word	0x200020e4
 800d758:	200020ec 	.word	0x200020ec

0800d75c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d76e:	4619      	mov	r1, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	78fa      	ldrb	r2, [r7, #3]
 800d774:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d77c:	3301      	adds	r3, #1
 800d77e:	425a      	negs	r2, r3
 800d780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d788:	bf58      	it	pl
 800d78a:	4253      	negpl	r3, r2
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d79a:	2b80      	cmp	r3, #128	; 0x80
 800d79c:	d113      	bne.n	800d7c6 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	425a      	negs	r2, r3
 800d7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7b8:	bf58      	it	pl
 800d7ba:	4253      	negpl	r3, r2
 800d7bc:	b2da      	uxtb	r2, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800d7c4:	e00b      	b.n	800d7de <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800d7de:	bf00      	nop
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b082      	sub	sp, #8
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
 800d7f2:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f805 	bl	800d80e <RingGetNBytes>
 800d804:	4603      	mov	r3, r0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b086      	sub	sp, #24
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	4613      	mov	r3, r2
 800d81a:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <RingGetNBytes+0x1e>
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <RingGetNBytes+0x22>
 800d82c:	2300      	movs	r3, #0
 800d82e:	e03e      	b.n	800d8ae <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	2b80      	cmp	r3, #128	; 0x80
 800d834:	d901      	bls.n	800d83a <RingGetNBytes+0x2c>
 800d836:	2300      	movs	r3, #0
 800d838:	e039      	b.n	800d8ae <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d83a:	2300      	movs	r3, #0
 800d83c:	75fb      	strb	r3, [r7, #23]
 800d83e:	e01b      	b.n	800d878 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d846:	4619      	mov	r1, r3
 800d848:	7dfb      	ldrb	r3, [r7, #23]
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	4413      	add	r3, r2
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	5c52      	ldrb	r2, [r2, r1]
 800d852:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d85a:	3301      	adds	r3, #1
 800d85c:	425a      	negs	r2, r3
 800d85e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d862:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d866:	bf58      	it	pl
 800d868:	4253      	negpl	r3, r2
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800d872:	7dfb      	ldrb	r3, [r7, #23]
 800d874:	3301      	adds	r3, #1
 800d876:	75fb      	strb	r3, [r7, #23]
 800d878:	7dfa      	ldrb	r2, [r7, #23]
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d205      	bcs.n	800d88c <RingGetNBytes+0x7e>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d886:	7dfa      	ldrb	r2, [r7, #23]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d3d9      	bcc.n	800d840 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800d892:	7dfb      	ldrb	r3, [r7, #23]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	b2da      	uxtb	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 f805 	bl	800d8b6 <RingClear>

	return uCounter;
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800d8b6:	b480      	push	{r7}
 800d8b8:	b083      	sub	sp, #12
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
	...

0800d8ec <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800d8f4:	4b42      	ldr	r3, [pc, #264]	; (800da00 <ModbusInit+0x114>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d87d      	bhi.n	800d9f8 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	33d0      	adds	r3, #208	; 0xd0
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff ffd8 	bl	800d8b6 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d109      	bne.n	800d922 <ModbusInit+0x36>
	  {
		  //Create Modbus task slave
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 800d90e:	4a3d      	ldr	r2, [pc, #244]	; (800da04 <ModbusInit+0x118>)
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	483d      	ldr	r0, [pc, #244]	; (800da08 <ModbusInit+0x11c>)
 800d914:	f7fc fa0a 	bl	8009d2c <osThreadNew>
 800d918:	4602      	mov	r2, r0
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800d920:	e033      	b.n	800d98a <ModbusInit+0x9e>
	  }
	  else if (modH->uModbusType == MB_MASTER)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b04      	cmp	r3, #4
 800d928:	d12e      	bne.n	800d988 <ModbusInit+0x9c>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800d92a:	4a38      	ldr	r2, [pc, #224]	; (800da0c <ModbusInit+0x120>)
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	4838      	ldr	r0, [pc, #224]	; (800da10 <ModbusInit+0x124>)
 800d930:	f7fc f9fc 	bl	8009d2c <osThreadNew>
 800d934:	4602      	mov	r2, r0
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d942:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800d94a:	4a32      	ldr	r2, [pc, #200]	; (800da14 <ModbusInit+0x128>)
 800d94c:	9200      	str	r2, [sp, #0]
 800d94e:	2200      	movs	r2, #0
 800d950:	4831      	ldr	r0, [pc, #196]	; (800da18 <ModbusInit+0x12c>)
 800d952:	f7fe ff6b 	bl	800c82c <xTimerCreate>
 800d956:	4602      	mov	r2, r0
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d964:	2b00      	cmp	r3, #0
 800d966:	d100      	bne.n	800d96a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 800d968:	e7fe      	b.n	800d968 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800d96a:	4a2c      	ldr	r2, [pc, #176]	; (800da1c <ModbusInit+0x130>)
 800d96c:	2110      	movs	r1, #16
 800d96e:	2002      	movs	r0, #2
 800d970:	f7fc fc20 	bl	800a1b4 <osMessageQueueNew>
 800d974:	4602      	mov	r2, r0
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

		  if(modH->QueueTelegramHandle == NULL)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800d986:	e7fe      	b.n	800d986 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800d988:	e7fe      	b.n	800d988 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d100      	bne.n	800d996 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800d994:	e7fe      	b.n	800d994 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800d99c:	4a20      	ldr	r2, [pc, #128]	; (800da20 <ModbusInit+0x134>)
 800d99e:	9200      	str	r2, [sp, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2105      	movs	r1, #5
 800d9a4:	481f      	ldr	r0, [pc, #124]	; (800da24 <ModbusInit+0x138>)
 800d9a6:	f7fe ff41 	bl	800c82c <xTimerCreate>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d100      	bne.n	800d9be <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 800d9bc:	e7fe      	b.n	800d9bc <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800d9be:	4a1a      	ldr	r2, [pc, #104]	; (800da28 <ModbusInit+0x13c>)
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	f7fc fb6d 	bl	800a0a2 <osSemaphoreNew>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	  if(modH->ModBusSphrHandle == NULL)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d100      	bne.n	800d9dc <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 800d9da:	e7fe      	b.n	800d9da <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 800d9dc:	4b08      	ldr	r3, [pc, #32]	; (800da00 <ModbusInit+0x114>)
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4a12      	ldr	r2, [pc, #72]	; (800da2c <ModbusInit+0x140>)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <ModbusInit+0x114>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	4b03      	ldr	r3, [pc, #12]	; (800da00 <ModbusInit+0x114>)
 800d9f4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800d9f6:	e000      	b.n	800d9fa <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 800d9f8:	e7fe      	b.n	800d9f8 <ModbusInit+0x10c>
}
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	2000210c 	.word	0x2000210c
 800da04:	0800f75c 	.word	0x0800f75c
 800da08:	0800dc39 	.word	0x0800dc39
 800da0c:	0800f780 	.word	0x0800f780
 800da10:	0800e115 	.word	0x0800e115
 800da14:	0800dbdd 	.word	0x0800dbdd
 800da18:	0800f608 	.word	0x0800f608
 800da1c:	0800f744 	.word	0x0800f744
 800da20:	0800db59 	.word	0x0800db59
 800da24:	0800f618 	.word	0x0800f618
 800da28:	0800f7a4 	.word	0x0800f7a4
 800da2c:	20002104 	.word	0x20002104

0800da30 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != USART_HW_DMA )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d005      	beq.n	800da4e <ModbusStart+0x1e>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d000      	beq.n	800da4e <ModbusStart+0x1e>
	{

		while(1); //ERROR select the type of hardware
 800da4c:	e7fe      	b.n	800da4c <ModbusStart+0x1c>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800da54:	2b01      	cmp	r3, #1
 800da56:	d004      	beq.n	800da62 <ModbusStart+0x32>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d15c      	bne.n	800db1c <ModbusStart+0xec>
	{

	      if (modH->EN_Port != NULL )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d007      	beq.n	800da7a <ModbusStart+0x4a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	68d8      	ldr	r0, [r3, #12]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8a1b      	ldrh	r3, [r3, #16]
 800da72:	2200      	movs	r2, #0
 800da74:	4619      	mov	r1, r3
 800da76:	f7f6 fae5 	bl	8004044 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regsHR == NULL )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d105      	bne.n	800da8e <ModbusStart+0x5e>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d100      	bne.n	800da8e <ModbusStart+0x5e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 800da8c:	e7fe      	b.n	800da8c <ModbusStart+0x5c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800da8e:	bf00      	nop
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	4618      	mov	r0, r3
 800da96:	f7fa f833 	bl	8007b00 <HAL_UART_GetState>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d1f7      	bne.n	800da90 <ModbusStart+0x60>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800daa6:	2b04      	cmp	r3, #4
 800daa8:	d11a      	bne.n	800dae0 <ModbusStart+0xb0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6858      	ldr	r0, [r3, #4]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	33d0      	adds	r3, #208	; 0xd0
 800dab2:	2280      	movs	r2, #128	; 0x80
 800dab4:	4619      	mov	r1, r3
 800dab6:	f7fb ffcc 	bl	8009a52 <HAL_UARTEx_ReceiveToIdle_DMA>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d000      	beq.n	800dac2 <ModbusStart+0x92>
        	   {
        	         while(1)
 800dac0:	e7fe      	b.n	800dac0 <ModbusStart+0x90>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f022 0204 	bic.w	r2, r2, #4
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	e00b      	b.n	800daf8 <ModbusStart+0xc8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6858      	ldr	r0, [r3, #4]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	33b8      	adds	r3, #184	; 0xb8
 800dae8:	2201      	movs	r2, #1
 800daea:	4619      	mov	r1, r3
 800daec:	f7f9 f9ee 	bl	8006ecc <HAL_UART_Receive_IT>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d000      	beq.n	800daf8 <ModbusStart+0xc8>
        	  {
        	           while(1)
 800daf6:	e7fe      	b.n	800daf6 <ModbusStart+0xc6>
          			  //error in your initialization code
          		  }
          	  }
#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7a1b      	ldrb	r3, [r3, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d004      	beq.n	800db0a <ModbusStart+0xda>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b04      	cmp	r3, #4
 800db06:	d100      	bne.n	800db0a <ModbusStart+0xda>
          {
        	  while(1)
 800db08:	e7fe      	b.n	800db08 <ModbusStart+0xd8>
        	  {
        	     	  //error Master ID must be zero
        	  }
          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	7a1b      	ldrb	r3, [r3, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d104      	bne.n	800db1c <ModbusStart+0xec>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	2b03      	cmp	r3, #3
 800db18:	d100      	bne.n	800db1c <ModbusStart+0xec>
          {
             	  while(1)
 800db1a:	e7fe      	b.n	800db1a <ModbusStart+0xea>
                  	     	  //error Master ID must be zero
               	  }
           }
	}

    modH->u8lastRec = modH->u8BufferSize = 0;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8b3 20aa 	ldrh.w	r2, [r3, #170]	; 0xaa
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <vTimerCallbackT35>:

void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af02      	add	r7, sp, #8
 800db5e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800db60:	2300      	movs	r3, #0
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e02a      	b.n	800dbbc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800db66:	4a1b      	ldr	r2, [pc, #108]	; (800dbd4 <vTimerCallbackT35+0x7c>)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d11e      	bne.n	800dbb6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800db78:	4a16      	ldr	r2, [pc, #88]	; (800dbd4 <vTimerCallbackT35+0x7c>)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b04      	cmp	r3, #4
 800db84:	d10c      	bne.n	800dba0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800db86:	4a13      	ldr	r2, [pc, #76]	; (800dbd4 <vTimerCallbackT35+0x7c>)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db8e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800db92:	2300      	movs	r3, #0
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	2300      	movs	r3, #0
 800db98:	2200      	movs	r2, #0
 800db9a:	2103      	movs	r1, #3
 800db9c:	f7fe fea2 	bl	800c8e4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800dba0:	4a0c      	ldr	r2, [pc, #48]	; (800dbd4 <vTimerCallbackT35+0x7c>)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800dbac:	2300      	movs	r3, #0
 800dbae:	2203      	movs	r2, #3
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	f7fe fc0b 	bl	800c3cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	4b06      	ldr	r3, [pc, #24]	; (800dbd8 <vTimerCallbackT35+0x80>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	dbce      	blt.n	800db66 <vTimerCallbackT35+0xe>
		}

	}
}
 800dbc8:	bf00      	nop
 800dbca:	bf00      	nop
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20002104 	.word	0x20002104
 800dbd8:	2000210c 	.word	0x2000210c

0800dbdc <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	e017      	b.n	800dc1a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800dbea:	4a11      	ldr	r2, [pc, #68]	; (800dc30 <vTimerCallbackTimeout+0x54>)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d10b      	bne.n	800dc14 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 800dbfc:	4a0c      	ldr	r2, [pc, #48]	; (800dc30 <vTimerCallbackTimeout+0x54>)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc04:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2203      	movs	r2, #3
 800dc0c:	f06f 0107 	mvn.w	r1, #7
 800dc10:	f7fe fbdc 	bl	800c3cc <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3301      	adds	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	4b06      	ldr	r3, [pc, #24]	; (800dc34 <vTimerCallbackTimeout+0x58>)
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	4293      	cmp	r3, r2
 800dc24:	dbe1      	blt.n	800dbea <vTimerCallbackTimeout+0xe>
		}

	}

}
 800dc26:	bf00      	nop
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20002104 	.word	0x20002104
 800dc34:	2000210c 	.word	0x2000210c

0800dc38 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;
  for(;;)
  {

	modH->i8lastError = 0;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	749a      	strb	r2, [r3, #18]


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d004      	beq.n	800dc5e <StartTaskModbusSlave+0x26>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800dc5a:	2b04      	cmp	r3, #4
 800dc5c:	d117      	bne.n	800dc8e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800dc5e:	f04f 31ff 	mov.w	r1, #4294967295
 800dc62:	2001      	movs	r0, #1
 800dc64:	f7fe fb10 	bl	800c288 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f000 fc21 	bl	800e4b0 <getRxBuffer>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f113 0f03 	cmn.w	r3, #3
 800dc74:	d10b      	bne.n	800dc8e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	22fd      	movs	r2, #253	; 0xfd
 800dc7a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dc82:	3301      	adds	r3, #1
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  continue;
 800dc8c:	e0b7      	b.n	800ddfe <StartTaskModbusSlave+0x1c6>
	  }
   }

   if (modH->u8BufferSize < 7)
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dc94:	2b06      	cmp	r3, #6
 800dc96:	d80b      	bhi.n	800dcb0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	22fa      	movs	r2, #250	; 0xfa
 800dc9c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800dca4:	3301      	adds	r3, #1
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	  continue;
 800dcae:	e0a6      	b.n	800ddfe <StartTaskModbusSlave+0x1c6>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	7cda      	ldrb	r2, [r3, #19]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	7a1b      	ldrb	r3, [r3, #8]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	f040 809f 	bne.w	800ddfc <StartTaskModbusSlave+0x1c4>
	{
    	continue;
	}

	// validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fc40 	bl	800e544 <validateRequest>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00c      	beq.n	800dce8 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 800dcce:	7afb      	ldrb	r3, [r7, #11]
 800dcd0:	68f9      	ldr	r1, [r7, #12]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 fdda 	bl	800e88c <buildException>
			sendTxBuffer(modH);
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f000 fdf6 	bl	800e8ca <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800dcde:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800dce6:	e08a      	b.n	800ddfe <StartTaskModbusSlave+0x1c6>
	 }

	 modH->i8lastError = 0;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dcf4:	f04f 31ff 	mov.w	r1, #4294967295
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fd f82b 	bl	800ad54 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	7d1b      	ldrb	r3, [r3, #20]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	2b0f      	cmp	r3, #15
 800dd06:	d86f      	bhi.n	800dde8 <StartTaskModbusSlave+0x1b0>
 800dd08:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <StartTaskModbusSlave+0xd8>)
 800dd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0e:	bf00      	nop
 800dd10:	0800dd51 	.word	0x0800dd51
 800dd14:	0800dd65 	.word	0x0800dd65
 800dd18:	0800dd79 	.word	0x0800dd79
 800dd1c:	0800dd8d 	.word	0x0800dd8d
 800dd20:	0800dda1 	.word	0x0800dda1
 800dd24:	0800ddb3 	.word	0x0800ddb3
 800dd28:	0800dde9 	.word	0x0800dde9
 800dd2c:	0800dde9 	.word	0x0800dde9
 800dd30:	0800dde9 	.word	0x0800dde9
 800dd34:	0800dde9 	.word	0x0800dde9
 800dd38:	0800dde9 	.word	0x0800dde9
 800dd3c:	0800dde9 	.word	0x0800dde9
 800dd40:	0800dde9 	.word	0x0800dde9
 800dd44:	0800dde9 	.word	0x0800dde9
 800dd48:	0800ddc5 	.word	0x0800ddc5
 800dd4c:	0800ddd7 	.word	0x0800ddd7
	 {
			case MB_FC_READ_COILS:
				modH->i8state = process_FC1(modH,DB_COILS);
 800dd50:	2101      	movs	r1, #1
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 fe5b 	bl	800ea0e <process_FC1>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd62:	e042      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH,DB_INPUT_COILS);
 800dd64:	2102      	movs	r1, #2
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f000 fe51 	bl	800ea0e <process_FC1>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd76:	e038      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_REGISTERS:
				modH->i8state = process_FC3(modH,DB_HOLDING_REGISTER);
 800dd78:	2103      	movs	r1, #3
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 ff0b 	bl	800eb96 <process_FC3>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd8a:	e02e      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_READ_INPUT_REGISTER:
				modH->i8state = process_FC3(modH,DB_INPUT_REGISTERS);
 800dd8c:	2104      	movs	r1, #4
 800dd8e:	68f8      	ldr	r0, [r7, #12]
 800dd90:	f000 ff01 	bl	800eb96 <process_FC3>
 800dd94:	4603      	mov	r3, r0
 800dd96:	461a      	mov	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dd9e:	e024      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f000 ff70 	bl	800ec86 <process_FC5>
 800dda6:	4603      	mov	r3, r0
 800dda8:	461a      	mov	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800ddb0:	e01b      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	f000 ffc0 	bl	800ed38 <process_FC6>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	461a      	mov	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800ddc2:	e012      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f000 ffe9 	bl	800ed9c <process_FC15>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800ddd4:	e009      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f001 f86e 	bl	800eeb8 <process_FC16>
 800dddc:	4603      	mov	r3, r0
 800ddde:	461a      	mov	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
				break;
 800dde6:	e000      	b.n	800ddea <StartTaskModbusSlave+0x1b2>
			default:
				break;
 800dde8:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	f7fc fd33 	bl	800a860 <xQueueGenericSend>

	 continue;
 800ddfa:	e000      	b.n	800ddfe <StartTaskModbusSlave+0x1c6>
    	continue;
 800ddfc:	bf00      	nop
  {
 800ddfe:	e721      	b.n	800dc44 <StartTaskModbusSlave+0xc>

0800de00 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800de00:	b084      	sub	sp, #16
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	f107 001c 	add.w	r0, r7, #28
 800de0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800de1c:	f04f 31ff 	mov.w	r1, #4294967295
 800de20:	4618      	mov	r0, r3
 800de22:	f7fc ff97 	bl	800ad54 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7a1b      	ldrb	r3, [r3, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <SendQuery+0x32>
 800de2e:	23ff      	movs	r3, #255	; 0xff
 800de30:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f993 30b9 	ldrsb.w	r3, [r3, #185]	; 0xb9
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <SendQuery+0x40>
 800de3c:	23fe      	movs	r3, #254	; 0xfe
 800de3e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800de40:	7f3b      	ldrb	r3, [r7, #28]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <SendQuery+0x4c>
 800de46:	7f3b      	ldrb	r3, [r7, #28]
 800de48:	2bf7      	cmp	r3, #247	; 0xf7
 800de4a:	d901      	bls.n	800de50 <SendQuery+0x50>
 800de4c:	23f7      	movs	r3, #247	; 0xf7
 800de4e:	73bb      	strb	r3, [r7, #14]


	if(error)
 800de50:	7bbb      	ldrb	r3, [r7, #14]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00e      	beq.n	800de74 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800de56:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800de64:	2300      	movs	r3, #0
 800de66:	2200      	movs	r2, #0
 800de68:	2100      	movs	r1, #0
 800de6a:	f7fc fcf9 	bl	800a860 <xQueueGenericSend>
		 return error;
 800de6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de72:	e147      	b.n	800e104 <SendQuery+0x304>
	}


	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800de74:	7f7b      	ldrb	r3, [r7, #29]
 800de76:	2b01      	cmp	r3, #1
 800de78:	d008      	beq.n	800de8c <SendQuery+0x8c>
 800de7a:	7f7b      	ldrb	r3, [r7, #29]
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d005      	beq.n	800de8c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800de80:	7f7b      	ldrb	r3, [r7, #29]
	if (telegram.u8fct == MB_FC_READ_COILS || telegram.u8fct == MB_FC_READ_DISCRETE_INPUT ||
 800de82:	2b05      	cmp	r3, #5
 800de84:	d002      	beq.n	800de8c <SendQuery+0x8c>
		telegram.u8fct == MB_FC_WRITE_COIL || telegram.u8fct == MB_FC_WRITE_MULTIPLE_COILS)
 800de86:	7f7b      	ldrb	r3, [r7, #29]
 800de88:	2b0f      	cmp	r3, #15
 800de8a:	d104      	bne.n	800de96 <SendQuery+0x96>
	{
		modH->u16regsCoils = telegram.u16reg;
 800de8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800de94:	e00f      	b.n	800deb6 <SendQuery+0xb6>
	}
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800de96:	7f7b      	ldrb	r3, [r7, #29]
 800de98:	2b03      	cmp	r3, #3
 800de9a:	d008      	beq.n	800deae <SendQuery+0xae>
 800de9c:	7f7b      	ldrb	r3, [r7, #29]
 800de9e:	2b04      	cmp	r3, #4
 800dea0:	d005      	beq.n	800deae <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dea2:	7f7b      	ldrb	r3, [r7, #29]
	else if (telegram.u8fct == MB_FC_READ_REGISTERS || telegram.u8fct == MB_FC_READ_INPUT_REGISTER ||
 800dea4:	2b06      	cmp	r3, #6
 800dea6:	d002      	beq.n	800deae <SendQuery+0xae>
			telegram.u8fct == MB_FC_WRITE_REGISTER || telegram.u8fct == MB_FC_WRITE_MULTIPLE_REGISTERS)
 800dea8:	7f7b      	ldrb	r3, [r7, #29]
 800deaa:	2b10      	cmp	r3, #16
 800deac:	d103      	bne.n	800deb6 <SendQuery+0xb6>
	{
		modH->u16regsHR = telegram.u16reg;
 800deae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 800deb6:	7f3a      	ldrb	r2, [r7, #28]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800debc:	7f7a      	ldrb	r2, [r7, #29]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800dec2:	8bfb      	ldrh	r3, [r7, #30]
 800dec4:	0a1b      	lsrs	r3, r3, #8
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 800dece:	8bfb      	ldrh	r3, [r7, #30]
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 800ded6:	7f7b      	ldrb	r3, [r7, #29]
 800ded8:	3b01      	subs	r3, #1
 800deda:	2b0f      	cmp	r3, #15
 800dedc:	f200 80ff 	bhi.w	800e0de <SendQuery+0x2de>
 800dee0:	a201      	add	r2, pc, #4	; (adr r2, 800dee8 <SendQuery+0xe8>)
 800dee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee6:	bf00      	nop
 800dee8:	0800df29 	.word	0x0800df29
 800deec:	0800df29 	.word	0x0800df29
 800def0:	0800df29 	.word	0x0800df29
 800def4:	0800df29 	.word	0x0800df29
 800def8:	0800df47 	.word	0x0800df47
 800defc:	0800df69 	.word	0x0800df69
 800df00:	0800e0df 	.word	0x0800e0df
 800df04:	0800e0df 	.word	0x0800e0df
 800df08:	0800e0df 	.word	0x0800e0df
 800df0c:	0800e0df 	.word	0x0800e0df
 800df10:	0800e0df 	.word	0x0800e0df
 800df14:	0800e0df 	.word	0x0800e0df
 800df18:	0800e0df 	.word	0x0800e0df
 800df1c:	0800e0df 	.word	0x0800e0df
 800df20:	0800df8b 	.word	0x0800df8b
 800df24:	0800e049 	.word	0x0800e049
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800df28:	8c3b      	ldrh	r3, [r7, #32]
 800df2a:	0a1b      	lsrs	r3, r3, #8
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800df34:	8c3b      	ldrh	r3, [r7, #32]
 800df36:	b2da      	uxtb	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2206      	movs	r2, #6
 800df40:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800df44:	e0cb      	b.n	800e0de <SendQuery+0x2de>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 800df46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <SendQuery+0x152>
 800df4e:	22ff      	movs	r2, #255	; 0xff
 800df50:	e000      	b.n	800df54 <SendQuery+0x154>
 800df52:	2200      	movs	r2, #0
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2206      	movs	r2, #6
 800df62:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800df66:	e0ba      	b.n	800e0de <SendQuery+0x2de>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	0a1b      	lsrs	r3, r3, #8
 800df6e:	b29b      	uxth	r3, r3
 800df70:	b2da      	uxtb	r2, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2206      	movs	r2, #6
 800df84:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800df88:	e0a9      	b.n	800e0de <SendQuery+0x2de>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800df8a:	8c3b      	ldrh	r3, [r7, #32]
 800df8c:	091b      	lsrs	r3, r3, #4
 800df8e:	b29b      	uxth	r3, r3
 800df90:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800df92:	7a7b      	ldrb	r3, [r7, #9]
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800df98:	8c3b      	ldrh	r3, [r7, #32]
 800df9a:	f003 030f 	and.w	r3, r3, #15
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d005      	beq.n	800dfb0 <SendQuery+0x1b0>
	    {
	        u8bytesno++;
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800dfaa:	7a7b      	ldrb	r3, [r7, #9]
 800dfac:	3301      	adds	r3, #1
 800dfae:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800dfb0:	8c3b      	ldrh	r3, [r7, #32]
 800dfb2:	0a1b      	lsrs	r3, r3, #8
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800dfbc:	8c3b      	ldrh	r3, [r7, #32]
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7bfa      	ldrb	r2, [r7, #15]
 800dfc8:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2207      	movs	r2, #7
 800dfce:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	81bb      	strh	r3, [r7, #12]
 800dfd6:	e031      	b.n	800e03c <SendQuery+0x23c>
	    {
	        if(i%2)
 800dfd8:	89bb      	ldrh	r3, [r7, #12]
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00f      	beq.n	800e004 <SendQuery+0x204>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800dfe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe6:	89bb      	ldrh	r3, [r7, #12]
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	4413      	add	r3, r2
 800dff0:	881a      	ldrh	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800dff8:	4619      	mov	r1, r3
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	440b      	add	r3, r1
 800e000:	74da      	strb	r2, [r3, #19]
 800e002:	e010      	b.n	800e026 <SendQuery+0x226>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 800e004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e006:	89bb      	ldrh	r3, [r7, #12]
 800e008:	085b      	lsrs	r3, r3, #1
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	005b      	lsls	r3, r3, #1
 800e00e:	4413      	add	r3, r2
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	0a1b      	lsrs	r3, r3, #8
 800e014:	b29a      	uxth	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e01c:	4619      	mov	r1, r3
 800e01e:	b2d2      	uxtb	r2, r2
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	440b      	add	r3, r1
 800e024:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e02c:	3301      	adds	r3, #1
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800e036:	89bb      	ldrh	r3, [r7, #12]
 800e038:	3301      	adds	r3, #1
 800e03a:	81bb      	strh	r3, [r7, #12]
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	89ba      	ldrh	r2, [r7, #12]
 800e042:	429a      	cmp	r2, r3
 800e044:	d3c8      	bcc.n	800dfd8 <SendQuery+0x1d8>
	    }
	    break;
 800e046:	e04a      	b.n	800e0de <SendQuery+0x2de>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800e048:	8c3b      	ldrh	r3, [r7, #32]
 800e04a:	0a1b      	lsrs	r3, r3, #8
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800e054:	8c3b      	ldrh	r3, [r7, #32]
 800e056:	b2da      	uxtb	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800e05c:	8c3b      	ldrh	r3, [r7, #32]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	b2da      	uxtb	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2207      	movs	r2, #7
 800e06c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e070:	2300      	movs	r3, #0
 800e072:	817b      	strh	r3, [r7, #10]
 800e074:	e02e      	b.n	800e0d4 <SendQuery+0x2d4>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800e076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e078:	897b      	ldrh	r3, [r7, #10]
 800e07a:	005b      	lsls	r3, r3, #1
 800e07c:	4413      	add	r3, r2
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	0a1b      	lsrs	r3, r3, #8
 800e082:	b29a      	uxth	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e08a:	4619      	mov	r1, r3
 800e08c:	b2d2      	uxtb	r2, r2
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	440b      	add	r3, r1
 800e092:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e09a:	3301      	adds	r3, #1
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800e0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0a6:	897b      	ldrh	r3, [r7, #10]
 800e0a8:	005b      	lsls	r3, r3, #1
 800e0aa:	4413      	add	r3, r2
 800e0ac:	881a      	ldrh	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	440b      	add	r3, r1
 800e0bc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800e0ce:	897b      	ldrh	r3, [r7, #10]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	817b      	strh	r3, [r7, #10]
 800e0d4:	8c3b      	ldrh	r3, [r7, #32]
 800e0d6:	897a      	ldrh	r2, [r7, #10]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d3cc      	bcc.n	800e076 <SendQuery+0x276>
	    }
	    break;
 800e0dc:	bf00      	nop
	}


	sendTxBuffer(modH);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fbf3 	bl	800e8ca <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	f7fc fbb6 	bl	800a860 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	modH->i8lastError = 0;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	749a      	strb	r2, [r3, #18]
	return 0;
 800e102:	2300      	movs	r3, #0


}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e10e:	b004      	add	sp, #16
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop

0800e114 <StartTaskModbusMaster>:


void StartTaskModbusMaster(void *argument)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	af02      	add	r7, sp, #8
 800e11a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e126:	f107 010c 	add.w	r1, r7, #12
 800e12a:	f04f 32ff 	mov.w	r2, #4294967295
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fc fd30 	bl	800ab94 <xQueueReceive>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	f107 030c 	add.w	r3, r7, #12
 800e13c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e13e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e140:	f7ff fe5e 	bl	800de00 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800e144:	f04f 31ff 	mov.w	r1, #4294967295
 800e148:	2001      	movs	r0, #1
 800e14a:	f7fe f89d 	bl	800c288 <ulTaskNotifyTake>
 800e14e:	6238      	str	r0, [r7, #32]

	  // notify the task the request timeout
      modH->i8lastError = 0;
 800e150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e152:	2200      	movs	r2, #0
 800e154:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d018      	beq.n	800e18e <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    	  modH->i8lastError = ERR_TIME_OUT;
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	22f8      	movs	r2, #248	; 0xf8
 800e168:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e170:	3301      	adds	r3, #1
 800e172:	b29a      	uxth	r2, r3
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e17a:	69b8      	ldr	r0, [r7, #24]
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e182:	4619      	mov	r1, r3
 800e184:	2300      	movs	r3, #0
 800e186:	2203      	movs	r2, #3
 800e188:	f7fe f920 	bl	800c3cc <xTaskGenericNotify>
    	  continue;
 800e18c:	e09a      	b.n	800e2c4 <StartTaskModbusMaster+0x1b0>
      }

      getRxBuffer(modH);
 800e18e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e190:	f000 f98e 	bl	800e4b0 <getRxBuffer>

	  if ( modH->u8BufferSize < 6){
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e19a:	2b05      	cmp	r3, #5
 800e19c:	d818      	bhi.n	800e1d0 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		  modH->i8lastError = ERR_BAD_SIZE;
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	22fa      	movs	r2, #250	; 0xfa
 800e1aa:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e1bc:	69b8      	ldr	r0, [r7, #24]
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	f7fe f8ff 	bl	800c3cc <xTaskGenericNotify>
		  continue;
 800e1ce:	e079      	b.n	800e2c4 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 800e1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2103      	movs	r1, #3
 800e1e0:	f7fe fb80 	bl	800c8e4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 800e1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e6:	f000 f8f5 	bl	800e3d4 <validateAnswer>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800e1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d010      	beq.n	800e218 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
         modH->i8lastError = u8exception;
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	7ffa      	ldrb	r2, [r7, #31]
 800e202:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800e204:	69b8      	ldr	r0, [r7, #24]
 800e206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e208:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e20c:	4619      	mov	r1, r3
 800e20e:	2300      	movs	r3, #0
 800e210:	2203      	movs	r2, #3
 800e212:	f7fe f8db 	bl	800c3cc <xTaskGenericNotify>
	     continue;
 800e216:	e055      	b.n	800e2c4 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	7ffa      	ldrb	r2, [r7, #31]
 800e21c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e224:	f04f 31ff 	mov.w	r1, #4294967295
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fc fd93 	bl	800ad54 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	7d1b      	ldrb	r3, [r3, #20]
 800e232:	3b01      	subs	r3, #1
 800e234:	2b0f      	cmp	r3, #15
 800e236:	d82b      	bhi.n	800e290 <StartTaskModbusMaster+0x17c>
 800e238:	a201      	add	r2, pc, #4	; (adr r2, 800e240 <StartTaskModbusMaster+0x12c>)
 800e23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23e:	bf00      	nop
 800e240:	0800e281 	.word	0x0800e281
 800e244:	0800e281 	.word	0x0800e281
 800e248:	0800e289 	.word	0x0800e289
 800e24c:	0800e289 	.word	0x0800e289
 800e250:	0800e291 	.word	0x0800e291
 800e254:	0800e291 	.word	0x0800e291
 800e258:	0800e291 	.word	0x0800e291
 800e25c:	0800e291 	.word	0x0800e291
 800e260:	0800e291 	.word	0x0800e291
 800e264:	0800e291 	.word	0x0800e291
 800e268:	0800e291 	.word	0x0800e291
 800e26c:	0800e291 	.word	0x0800e291
 800e270:	0800e291 	.word	0x0800e291
 800e274:	0800e291 	.word	0x0800e291
 800e278:	0800e291 	.word	0x0800e291
 800e27c:	0800e291 	.word	0x0800e291
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 800e280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e282:	f000 f821 	bl	800e2c8 <get_FC1>
	      break;
 800e286:	e004      	b.n	800e292 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 800e288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e28a:	f000 f874 	bl	800e376 <get_FC3>
	      break;
 800e28e:	e000      	b.n	800e292 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 800e290:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	2200      	movs	r2, #0
 800e296:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10e      	bne.n	800e2c2 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	f7fc fad6 	bl	800a860 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 800e2b4:	69b8      	ldr	r0, [r7, #24]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	2203      	movs	r2, #3
 800e2ba:	f06f 010a 	mvn.w	r1, #10
 800e2be:	f7fe f885 	bl	800c3cc <xTaskGenericNotify>
	  }


	  continue;
 800e2c2:	bf00      	nop
  {
 800e2c4:	e72c      	b.n	800e120 <StartTaskModbusMaster+0xc>
 800e2c6:	bf00      	nop

0800e2c8 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	73fb      	strb	r3, [r7, #15]
 800e2d8:	e043      	b.n	800e362 <get_FC1+0x9a>

        if(i%2)
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d01c      	beq.n	800e320 <get_FC1+0x58>
        {
        	modH->u16regsCoils[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regsCoils[i/2]));
 800e2e6:	7bfa      	ldrb	r2, [r7, #15]
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ea:	4413      	add	r3, r2
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	7cd8      	ldrb	r0, [r3, #19]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	085b      	lsrs	r3, r3, #1
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	4413      	add	r3, r2
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	b2d9      	uxtb	r1, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	085b      	lsrs	r3, r3, #1
 800e310:	b2db      	uxtb	r3, r3
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	18d4      	adds	r4, r2, r3
 800e316:	f000 fa5f 	bl	800e7d8 <word>
 800e31a:	4603      	mov	r3, r0
 800e31c:	8023      	strh	r3, [r4, #0]
 800e31e:	e01d      	b.n	800e35c <get_FC1+0x94>
        }
        else
        {

        	modH->u16regsCoils[i/2]= word(highByte(modH->u16regsCoils[i/2]), modH->u8Buffer[i+u8byte]);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	085b      	lsrs	r3, r3, #1
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	4413      	add	r3, r2
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	0a1b      	lsrs	r3, r3, #8
 800e334:	b29b      	uxth	r3, r3
 800e336:	b2d8      	uxtb	r0, r3
 800e338:	7bfa      	ldrb	r2, [r7, #15]
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	4413      	add	r3, r2
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	4413      	add	r3, r2
 800e342:	7cd9      	ldrb	r1, [r3, #19]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e34a:	7bfb      	ldrb	r3, [r7, #15]
 800e34c:	085b      	lsrs	r3, r3, #1
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	005b      	lsls	r3, r3, #1
 800e352:	18d4      	adds	r4, r2, r3
 800e354:	f000 fa40 	bl	800e7d8 <word>
 800e358:	4603      	mov	r3, r0
 800e35a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
 800e35e:	3301      	adds	r3, #1
 800e360:	73fb      	strb	r3, [r7, #15]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	7d5b      	ldrb	r3, [r3, #21]
 800e366:	7bfa      	ldrb	r2, [r7, #15]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d3b6      	bcc.n	800e2da <get_FC1+0x12>
        }

     }
}
 800e36c:	bf00      	nop
 800e36e:	bf00      	nop
 800e370:	3714      	adds	r7, #20
 800e372:	46bd      	mov	sp, r7
 800e374:	bd90      	pop	{r4, r7, pc}

0800e376 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800e376:	b590      	push	{r4, r7, lr}
 800e378:	b085      	sub	sp, #20
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800e37e:	2303      	movs	r3, #3
 800e380:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e382:	2300      	movs	r3, #0
 800e384:	73bb      	strb	r3, [r7, #14]
 800e386:	e018      	b.n	800e3ba <get_FC3+0x44>
    {
    	modH->u16regsHR[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800e388:	7bfb      	ldrb	r3, [r7, #15]
 800e38a:	687a      	ldr	r2, [r7, #4]
 800e38c:	4413      	add	r3, r2
 800e38e:	7cd8      	ldrb	r0, [r3, #19]
 800e390:	7bfb      	ldrb	r3, [r7, #15]
 800e392:	3301      	adds	r3, #1
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	4413      	add	r3, r2
 800e398:	7cd9      	ldrb	r1, [r3, #19]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e3a0:	7bbb      	ldrb	r3, [r7, #14]
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	18d4      	adds	r4, r2, r3
 800e3a6:	f000 fa17 	bl	800e7d8 <word>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	3302      	adds	r3, #2
 800e3b2:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800e3b4:	7bbb      	ldrb	r3, [r7, #14]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	73bb      	strb	r3, [r7, #14]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7d5b      	ldrb	r3, [r3, #21]
 800e3be:	085b      	lsrs	r3, r3, #1
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	7bba      	ldrb	r2, [r7, #14]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d3df      	bcc.n	800e388 <get_FC3+0x12>
    }
}
 800e3c8:	bf00      	nop
 800e3ca:	bf00      	nop
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd90      	pop	{r4, r7, pc}
	...

0800e3d4 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc

	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3e2:	3b02      	subs	r3, #2
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	7cdb      	ldrb	r3, [r3, #19]
 800e3ea:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e3ec:	b21a      	sxth	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e3f4:	3b01      	subs	r3, #1
 800e3f6:	6879      	ldr	r1, [r7, #4]
 800e3f8:	440b      	add	r3, r1
 800e3fa:	7cdb      	ldrb	r3, [r3, #19]
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	4313      	orrs	r3, r2
 800e400:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800e402:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f103 0213 	add.w	r2, r3, #19
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e410:	3b02      	subs	r3, #2
 800e412:	b2db      	uxtb	r3, r3
 800e414:	4619      	mov	r1, r3
 800e416:	4610      	mov	r0, r2
 800e418:	f000 f9f1 	bl	800e7fe <calcCRC>
 800e41c:	4603      	mov	r3, r0
 800e41e:	461a      	mov	r2, r3
 800e420:	89bb      	ldrh	r3, [r7, #12]
 800e422:	4293      	cmp	r3, r2
 800e424:	d009      	beq.n	800e43a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e42c:	3301      	adds	r3, #1
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_BAD_CRC;
 800e436:	23fc      	movs	r3, #252	; 0xfc
 800e438:	e034      	b.n	800e4a4 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7d1b      	ldrb	r3, [r3, #20]
 800e43e:	b25b      	sxtb	r3, r3
 800e440:	2b00      	cmp	r3, #0
 800e442:	da09      	bge.n	800e458 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e44a:	3301      	adds	r3, #1
 800e44c:	b29a      	uxth	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return ERR_EXCEPTION;
 800e454:	23fb      	movs	r3, #251	; 0xfb
 800e456:	e025      	b.n	800e4a4 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 800e458:	2300      	movs	r3, #0
 800e45a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e45c:	2300      	movs	r3, #0
 800e45e:	73bb      	strb	r3, [r7, #14]
 800e460:	e00c      	b.n	800e47c <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e462:	7bbb      	ldrb	r3, [r7, #14]
 800e464:	4a11      	ldr	r2, [pc, #68]	; (800e4ac <validateAnswer+0xd8>)
 800e466:	5cd2      	ldrb	r2, [r2, r3]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7d1b      	ldrb	r3, [r3, #20]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d102      	bne.n	800e476 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800e470:	2301      	movs	r3, #1
 800e472:	73fb      	strb	r3, [r7, #15]
            break;
 800e474:	e005      	b.n	800e482 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e476:	7bbb      	ldrb	r3, [r7, #14]
 800e478:	3301      	adds	r3, #1
 800e47a:	73bb      	strb	r3, [r7, #14]
 800e47c:	7bbb      	ldrb	r3, [r7, #14]
 800e47e:	2b07      	cmp	r3, #7
 800e480:	d9ef      	bls.n	800e462 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800e482:	7bfb      	ldrb	r3, [r7, #15]
 800e484:	f083 0301 	eor.w	r3, r3, #1
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d009      	beq.n	800e4a2 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e494:	3301      	adds	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
        return EXC_FUNC_CODE;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e000      	b.n	800e4a4 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0800f7b4 	.word	0x0800f7b4

0800e4b0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d104      	bne.n	800e4cc <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f8 fe62 	bl	8007190 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3153 	ldrb.w	r3, [r3, #339]	; 0x153
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d008      	beq.n	800e4e8 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	33d0      	adds	r3, #208	; 0xd0
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7ff f9eb 	bl	800d8b6 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 800e4e0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800e4e4:	81fb      	strh	r3, [r7, #14]
 800e4e6:	e019      	b.n	800e51c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	3313      	adds	r3, #19
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f7ff f978 	bl	800d7ea <RingGetAllBytes>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800e50a:	3301      	adds	r3, #1
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		i16result = modH->u8BufferSize;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e51a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e522:	2b01      	cmp	r3, #1
 800e524:	d107      	bne.n	800e536 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6858      	ldr	r0, [r3, #4]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	33b8      	adds	r3, #184	; 0xb8
 800e52e:	2201      	movs	r2, #1
 800e530:	4619      	mov	r1, r3
 800e532:	f7f8 fccb 	bl	8006ecc <HAL_UART_Receive_IT>
	}

    return i16result;
 800e536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
	...

0800e544 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e552:	3b02      	subs	r3, #2
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	4413      	add	r3, r2
 800e558:	7cdb      	ldrb	r3, [r3, #19]
 800e55a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 800e55c:	b21a      	sxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e564:	3b01      	subs	r3, #1
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	440b      	add	r3, r1
 800e56a:	7cdb      	ldrb	r3, [r3, #19]
 800e56c:	b21b      	sxth	r3, r3
 800e56e:	4313      	orrs	r3, r2
 800e570:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800e572:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f103 0213 	add.w	r2, r3, #19
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e580:	3b02      	subs	r3, #2
 800e582:	b2db      	uxtb	r3, r3
 800e584:	4619      	mov	r1, r3
 800e586:	4610      	mov	r0, r2
 800e588:	f000 f939 	bl	800e7fe <calcCRC>
 800e58c:	4603      	mov	r3, r0
 800e58e:	461a      	mov	r2, r3
 800e590:	893b      	ldrh	r3, [r7, #8]
 800e592:	4293      	cmp	r3, r2
 800e594:	d009      	beq.n	800e5aa <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e59c:	3301      	adds	r3, #1
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	       		return ERR_BAD_CRC;
 800e5a6:	23fc      	movs	r3, #252	; 0xfc
 800e5a8:	e10f      	b.n	800e7ca <validateRequest+0x286>
	    }



	    // check fct code
	    bool isSupported = false;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	73bb      	strb	r3, [r7, #14]
 800e5b2:	e00c      	b.n	800e5ce <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
 800e5b6:	4a87      	ldr	r2, [pc, #540]	; (800e7d4 <validateRequest+0x290>)
 800e5b8:	5cd2      	ldrb	r2, [r2, r3]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	7d1b      	ldrb	r3, [r3, #20]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d102      	bne.n	800e5c8 <validateRequest+0x84>
	        {
	            isSupported = 1;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	73fb      	strb	r3, [r7, #15]
	            break;
 800e5c6:	e005      	b.n	800e5d4 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800e5c8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	73bb      	strb	r3, [r7, #14]
 800e5ce:	7bbb      	ldrb	r3, [r7, #14]
 800e5d0:	2b07      	cmp	r3, #7
 800e5d2:	d9ef      	bls.n	800e5b4 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 800e5d4:	7bfb      	ldrb	r3, [r7, #15]
 800e5d6:	f083 0301 	eor.w	r3, r3, #1
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d009      	beq.n	800e5f4 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	        return EXC_FUNC_CODE;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e0ea      	b.n	800e7ca <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	7d1b      	ldrb	r3, [r3, #20]
 800e600:	3b01      	subs	r3, #1
 800e602:	2b0f      	cmp	r3, #15
 800e604:	f200 80e0 	bhi.w	800e7c8 <validateRequest+0x284>
 800e608:	a201      	add	r2, pc, #4	; (adr r2, 800e610 <validateRequest+0xcc>)
 800e60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60e:	bf00      	nop
 800e610:	0800e651 	.word	0x0800e651
 800e614:	0800e651 	.word	0x0800e651
 800e618:	0800e769 	.word	0x0800e769
 800e61c:	0800e769 	.word	0x0800e769
 800e620:	0800e6fd 	.word	0x0800e6fd
 800e624:	0800e745 	.word	0x0800e745
 800e628:	0800e7c9 	.word	0x0800e7c9
 800e62c:	0800e7c9 	.word	0x0800e7c9
 800e630:	0800e7c9 	.word	0x0800e7c9
 800e634:	0800e7c9 	.word	0x0800e7c9
 800e638:	0800e7c9 	.word	0x0800e7c9
 800e63c:	0800e7c9 	.word	0x0800e7c9
 800e640:	0800e7c9 	.word	0x0800e7c9
 800e644:	0800e7c9 	.word	0x0800e7c9
 800e648:	0800e651 	.word	0x0800e651
 800e64c:	0800e769 	.word	0x0800e769
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7d5a      	ldrb	r2, [r3, #21]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	7d9b      	ldrb	r3, [r3, #22]
 800e658:	4619      	mov	r1, r3
 800e65a:	4610      	mov	r0, r2
 800e65c:	f000 f8bc 	bl	800e7d8 <word>
 800e660:	4603      	mov	r3, r0
 800e662:	091b      	lsrs	r3, r3, #4
 800e664:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	7dda      	ldrb	r2, [r3, #23]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	7e1b      	ldrb	r3, [r3, #24]
 800e66e:	4619      	mov	r1, r3
 800e670:	4610      	mov	r0, r2
 800e672:	f000 f8b1 	bl	800e7d8 <word>
 800e676:	4603      	mov	r3, r0
 800e678:	091b      	lsrs	r3, r3, #4
 800e67a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	7dda      	ldrb	r2, [r3, #23]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7e1b      	ldrb	r3, [r3, #24]
 800e684:	4619      	mov	r1, r3
 800e686:	4610      	mov	r0, r2
 800e688:	f000 f8a6 	bl	800e7d8 <word>
 800e68c:	4603      	mov	r3, r0
 800e68e:	f003 030f 	and.w	r3, r3, #15
 800e692:	b29b      	uxth	r3, r3
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <validateRequest+0x15a>
 800e698:	897b      	ldrh	r3, [r7, #10]
 800e69a:	3301      	adds	r3, #1
 800e69c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e69e:	89ba      	ldrh	r2, [r7, #12]
 800e6a0:	897b      	ldrh	r3, [r7, #10]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	dd01      	ble.n	800e6b2 <validateRequest+0x16e>
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e08b      	b.n	800e7ca <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7dda      	ldrb	r2, [r3, #23]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	7e1b      	ldrb	r3, [r3, #24]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4610      	mov	r0, r2
 800e6be:	f000 f88b 	bl	800e7d8 <word>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	08db      	lsrs	r3, r3, #3
 800e6c6:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	7dda      	ldrb	r2, [r3, #23]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7e1b      	ldrb	r3, [r3, #24]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	f000 f880 	bl	800e7d8 <word>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f003 0307 	and.w	r3, r3, #7
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <validateRequest+0x1a6>
 800e6e4:	897b      	ldrh	r3, [r7, #10]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 800e6ea:	897b      	ldrh	r3, [r7, #10]
 800e6ec:	3305      	adds	r3, #5
 800e6ee:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800e6f0:	897b      	ldrh	r3, [r7, #10]
 800e6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6f6:	d960      	bls.n	800e7ba <validateRequest+0x276>
 800e6f8:	2303      	movs	r3, #3
 800e6fa:	e066      	b.n	800e7ca <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7d5a      	ldrb	r2, [r3, #21]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	7d9b      	ldrb	r3, [r3, #22]
 800e704:	4619      	mov	r1, r3
 800e706:	4610      	mov	r0, r2
 800e708:	f000 f866 	bl	800e7d8 <word>
 800e70c:	4603      	mov	r3, r0
 800e70e:	091b      	lsrs	r3, r3, #4
 800e710:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7d5a      	ldrb	r2, [r3, #21]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	7d9b      	ldrb	r3, [r3, #22]
 800e71a:	4619      	mov	r1, r3
 800e71c:	4610      	mov	r0, r2
 800e71e:	f000 f85b 	bl	800e7d8 <word>
 800e722:	4603      	mov	r3, r0
 800e724:	f003 030f 	and.w	r3, r3, #15
 800e728:	b29b      	uxth	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d002      	beq.n	800e734 <validateRequest+0x1f0>
 800e72e:	89bb      	ldrh	r3, [r7, #12]
 800e730:	3301      	adds	r3, #1
 800e732:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regCoils_size) return EXC_ADDR_RANGE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800e73a:	89ba      	ldrh	r2, [r7, #12]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d93e      	bls.n	800e7be <validateRequest+0x27a>
 800e740:	2302      	movs	r3, #2
 800e742:	e042      	b.n	800e7ca <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	7d5a      	ldrb	r2, [r3, #21]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	7d9b      	ldrb	r3, [r3, #22]
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f000 f842 	bl	800e7d8 <word>
 800e754:	4603      	mov	r3, r0
 800e756:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regHR_size) return EXC_ADDR_RANGE;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e75e:	89ba      	ldrh	r2, [r7, #12]
 800e760:	429a      	cmp	r2, r3
 800e762:	d92e      	bls.n	800e7c2 <validateRequest+0x27e>
 800e764:	2302      	movs	r3, #2
 800e766:	e030      	b.n	800e7ca <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	7d5a      	ldrb	r2, [r3, #21]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7d9b      	ldrb	r3, [r3, #22]
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f000 f830 	bl	800e7d8 <word>
 800e778:	4603      	mov	r3, r0
 800e77a:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	7dda      	ldrb	r2, [r3, #23]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	7e1b      	ldrb	r3, [r3, #24]
 800e784:	4619      	mov	r1, r3
 800e786:	4610      	mov	r0, r2
 800e788:	f000 f826 	bl	800e7d8 <word>
 800e78c:	4603      	mov	r3, r0
 800e78e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regHR_size) return EXC_ADDR_RANGE;
 800e790:	89ba      	ldrh	r2, [r7, #12]
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	4413      	add	r3, r2
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 800e79c:	4293      	cmp	r3, r2
 800e79e:	dd01      	ble.n	800e7a4 <validateRequest+0x260>
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	e012      	b.n	800e7ca <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 800e7a4:	897b      	ldrh	r3, [r7, #10]
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	3305      	adds	r3, #5
 800e7ac:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800e7ae:	897b      	ldrh	r3, [r7, #10]
 800e7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7b4:	d907      	bls.n	800e7c6 <validateRequest+0x282>
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e007      	b.n	800e7ca <validateRequest+0x286>
	        break;
 800e7ba:	bf00      	nop
 800e7bc:	e004      	b.n	800e7c8 <validateRequest+0x284>
	        break;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <validateRequest+0x284>
	        break;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <validateRequest+0x284>
	        break;
 800e7c6:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800e7c8:	2300      	movs	r3, #0

}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	0800f7b4 	.word	0x0800f7b4

0800e7d8 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	460a      	mov	r2, r1
 800e7e2:	71fb      	strb	r3, [r7, #7]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 800e7e8:	79bb      	ldrb	r3, [r7, #6]
 800e7ea:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800e7f0:	89bb      	ldrh	r3, [r7, #12]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3714      	adds	r7, #20
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr

0800e7fe <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800e7fe:	b480      	push	{r7}
 800e800:	b087      	sub	sp, #28
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
 800e806:	460b      	mov	r3, r1
 800e808:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800e80a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e80e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800e810:	2300      	movs	r3, #0
 800e812:	74fb      	strb	r3, [r7, #19]
 800e814:	e023      	b.n	800e85e <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800e816:	7cfb      	ldrb	r3, [r7, #19]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	4413      	add	r3, r2
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	4053      	eors	r3, r2
 800e824:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e826:	2301      	movs	r3, #1
 800e828:	74bb      	strb	r3, [r7, #18]
 800e82a:	e012      	b.n	800e852 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	085b      	lsrs	r3, r3, #1
 800e838:	617b      	str	r3, [r7, #20]
            if (flag)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d005      	beq.n	800e84c <calcCRC+0x4e>
                temp ^= 0xA001;
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800e846:	f083 0301 	eor.w	r3, r3, #1
 800e84a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800e84c:	7cbb      	ldrb	r3, [r7, #18]
 800e84e:	3301      	adds	r3, #1
 800e850:	74bb      	strb	r3, [r7, #18]
 800e852:	7cbb      	ldrb	r3, [r7, #18]
 800e854:	2b08      	cmp	r3, #8
 800e856:	d9e9      	bls.n	800e82c <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800e858:	7cfb      	ldrb	r3, [r7, #19]
 800e85a:	3301      	adds	r3, #1
 800e85c:	74fb      	strb	r3, [r7, #19]
 800e85e:	7cfa      	ldrb	r2, [r7, #19]
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	429a      	cmp	r2, r3
 800e864:	d3d7      	bcc.n	800e816 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	0a1b      	lsrs	r3, r3, #8
 800e86a:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	021b      	lsls	r3, r3, #8
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4313      	orrs	r3, r2
 800e874:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	b29b      	uxth	r3, r3

}
 800e880:	4618      	mov	r0, r3
 800e882:	371c      	adds	r7, #28
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	4603      	mov	r3, r0
 800e894:	6039      	str	r1, [r7, #0]
 800e896:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	7d1b      	ldrb	r3, [r3, #20]
 800e89c:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	7a1a      	ldrb	r2, [r3, #8]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	3b80      	subs	r3, #128	; 0x80
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	79fa      	ldrb	r2, [r7, #7]
 800e8b4:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2203      	movs	r2, #3
 800e8ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 800e8be:	bf00      	nop
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800e8ca:	b590      	push	{r4, r7, lr}
 800e8cc:	b087      	sub	sp, #28
 800e8ce:	af02      	add	r7, sp, #8
 800e8d0:	6078      	str	r0, [r7, #4]
    // append CRC to message
	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f103 0213 	add.w	r2, r3, #19
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8de:	4619      	mov	r1, r3
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	f7ff ff8c 	bl	800e7fe <calcCRC>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800e8ea:	89fb      	ldrh	r3, [r7, #14]
 800e8ec:	0a1b      	lsrs	r3, r3, #8
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	b2d2      	uxtb	r2, r2
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	440b      	add	r3, r1
 800e8fe:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e906:	3301      	adds	r3, #1
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e916:	4619      	mov	r1, r3
 800e918:	89fb      	ldrh	r3, [r7, #14]
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	440b      	add	r3, r1
 800e920:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e928:	3301      	adds	r3, #1
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93


    	if (modH->EN_Port != NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00c      	beq.n	800e954 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f9 f836 	bl	80079b0 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	68d8      	ldr	r0, [r3, #12]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8a1b      	ldrh	r3, [r3, #16]
 800e94c:	2201      	movs	r2, #1
 800e94e:	4619      	mov	r1, r3
 800e950:	f7f5 fb78 	bl	8004044 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d10c      	bne.n	800e978 <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6858      	ldr	r0, [r3, #4]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f103 0113 	add.w	r1, r3, #19
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e96e:	b29b      	uxth	r3, r3
 800e970:	461a      	mov	r2, r3
 800e972:	f7f8 fa17 	bl	8006da4 <HAL_UART_Transmit_IT>
 800e976:	e00b      	b.n	800e990 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6858      	ldr	r0, [r3, #4]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f103 0113 	add.w	r1, r3, #19
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800e988:	b29b      	uxth	r3, r3
 800e98a:	461a      	mov	r2, r3
 800e98c:	f7f8 faea 	bl	8006f64 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800e990:	21fa      	movs	r1, #250	; 0xfa
 800e992:	2001      	movs	r0, #1
 800e994:	f7fd fc78 	bl	800c288 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 800e998:	bf00      	nop
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	69db      	ldr	r3, [r3, #28]
 800e9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d0f7      	beq.n	800e99a <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00c      	beq.n	800e9cc <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68d8      	ldr	r0, [r3, #12]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	8a1b      	ldrh	r3, [r3, #16]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	4619      	mov	r1, r3
 800e9be:	f7f5 fb41 	bl	8004044 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7f9 f846 	bl	8007a58 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	d10c      	bne.n	800e9ee <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 800e9da:	f7fc ff83 	bl	800b8e4 <xTaskGetTickCount>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	2102      	movs	r1, #2
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f7fd ff7b 	bl	800c8e4 <xTimerGenericCommand>
         }

     modH->u8BufferSize = 0;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa


}
 800ea06:	bf00      	nop
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd90      	pop	{r4, r7, pc}

0800ea0e <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH, uint8_t Database)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b088      	sub	sp, #32
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
 800ea16:	460b      	mov	r3, r1
 800ea18:	70fb      	strb	r3, [r7, #3]
    uint16_t u16currentCoil, u16coil;

    uint16_t *u16regs;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	7d5a      	ldrb	r2, [r3, #21]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	7d9b      	ldrb	r3, [r3, #22]
 800ea22:	4619      	mov	r1, r3
 800ea24:	4610      	mov	r0, r2
 800ea26:	f7ff fed7 	bl	800e7d8 <word>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	82fb      	strh	r3, [r7, #22]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	7dda      	ldrb	r2, [r3, #23]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7e1b      	ldrb	r3, [r3, #24]
 800ea36:	4619      	mov	r1, r3
 800ea38:	4610      	mov	r0, r2
 800ea3a:	f7ff fecd 	bl	800e7d8 <word>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	82bb      	strh	r3, [r7, #20]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800ea42:	8abb      	ldrh	r3, [r7, #20]
 800ea44:	08db      	lsrs	r3, r3, #3
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	77fb      	strb	r3, [r7, #31]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800ea4a:	8abb      	ldrh	r3, [r7, #20]
 800ea4c:	f003 0307 	and.w	r3, r3, #7
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <process_FC1+0x4e>
 800ea56:	7ffb      	ldrb	r3, [r7, #31]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	77fb      	strb	r3, [r7, #31]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	7ffa      	ldrb	r2, [r7, #31]
 800ea60:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2203      	movs	r2, #3
 800ea66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ea70:	461a      	mov	r2, r3
 800ea72:	7ffb      	ldrb	r3, [r7, #31]
 800ea74:	4413      	add	r3, r2
 800ea76:	3b01      	subs	r3, #1
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	77bb      	strb	r3, [r7, #30]

    if (Database == 1){
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d104      	bne.n	800ea94 <process_FC1+0x86>
    	u16regs = modH->u16regsCoils;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ea90:	61bb      	str	r3, [r7, #24]
 800ea92:	e006      	b.n	800eaa2 <process_FC1+0x94>
    }
    else if (Database == 2){
 800ea94:	78fb      	ldrb	r3, [r7, #3]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d103      	bne.n	800eaa2 <process_FC1+0x94>
    	u16regs = modH->u16regsCoilsRO;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eaa0:	61bb      	str	r3, [r7, #24]
    }

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	83bb      	strh	r3, [r7, #28]
 800eaa6:	e056      	b.n	800eb56 <process_FC1+0x148>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800eaa8:	8afa      	ldrh	r2, [r7, #22]
 800eaaa:	8bbb      	ldrh	r3, [r7, #28]
 800eaac:	4413      	add	r3, r2
 800eaae:	823b      	strh	r3, [r7, #16]
        u16currentRegister =  (u16coil / 16);
 800eab0:	8a3b      	ldrh	r3, [r7, #16]
 800eab2:	091b      	lsrs	r3, r3, #4
 800eab4:	81fb      	strh	r3, [r7, #14]
        u8currentBit = (uint8_t) (u16coil % 16);
 800eab6:	8a3b      	ldrh	r3, [r7, #16]
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	f003 030f 	and.w	r3, r3, #15
 800eabe:	737b      	strb	r3, [r7, #13]

        bitWrite(
 800eac0:	89fb      	ldrh	r3, [r7, #14]
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	4413      	add	r3, r2
 800eac8:	881b      	ldrh	r3, [r3, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	7b7b      	ldrb	r3, [r7, #13]
 800eace:	fa42 f303 	asr.w	r3, r2, r3
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d014      	beq.n	800eb04 <process_FC1+0xf6>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eae0:	461a      	mov	r2, r3
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4413      	add	r3, r2
 800eae6:	7cda      	ldrb	r2, [r3, #19]
 800eae8:	7fbb      	ldrb	r3, [r7, #30]
 800eaea:	2101      	movs	r1, #1
 800eaec:	fa01 f303 	lsl.w	r3, r1, r3
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	6879      	ldr	r1, [r7, #4]
 800eaf4:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	440b      	add	r3, r1
 800eb00:	74da      	strb	r2, [r3, #19]
 800eb02:	e015      	b.n	800eb30 <process_FC1+0x122>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4413      	add	r3, r2
 800eb10:	7cda      	ldrb	r2, [r3, #19]
 800eb12:	7fbb      	ldrb	r3, [r7, #30]
 800eb14:	2101      	movs	r1, #1
 800eb16:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	43db      	mvns	r3, r3
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	6879      	ldr	r1, [r7, #4]
 800eb22:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800eb26:	4013      	ands	r3, r2
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	440b      	add	r3, r1
 800eb2e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800eb30:	7fbb      	ldrb	r3, [r7, #30]
 800eb32:	3301      	adds	r3, #1
 800eb34:	77bb      	strb	r3, [r7, #30]

        if (u8bitsno > 7)
 800eb36:	7fbb      	ldrb	r3, [r7, #30]
 800eb38:	2b07      	cmp	r3, #7
 800eb3a:	d909      	bls.n	800eb50 <process_FC1+0x142>
        {
            u8bitsno = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	77bb      	strb	r3, [r7, #30]
            modH->u8BufferSize++;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb46:	3301      	adds	r3, #1
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800eb50:	8bbb      	ldrh	r3, [r7, #28]
 800eb52:	3301      	adds	r3, #1
 800eb54:	83bb      	strh	r3, [r7, #28]
 800eb56:	8bba      	ldrh	r2, [r7, #28]
 800eb58:	8abb      	ldrh	r3, [r7, #20]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d3a4      	bcc.n	800eaa8 <process_FC1+0x9a>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800eb5e:	8abb      	ldrh	r3, [r7, #20]
 800eb60:	f003 0307 	and.w	r3, r3, #7
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d007      	beq.n	800eb7a <process_FC1+0x16c>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb70:	3301      	adds	r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eb80:	3302      	adds	r3, #2
 800eb82:	74fb      	strb	r3, [r7, #19]
    sendTxBuffer(modH);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff fea0 	bl	800e8ca <sendTxBuffer>
    return u8CopyBufferSize;
 800eb8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3720      	adds	r7, #32
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH, uint8_t Database)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b086      	sub	sp, #24
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70fb      	strb	r3, [r7, #3]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	7d5a      	ldrb	r2, [r3, #21]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7d9b      	ldrb	r3, [r3, #22]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f7ff fe13 	bl	800e7d8 <word>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	81fb      	strh	r3, [r7, #14]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	7dda      	ldrb	r2, [r3, #23]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	7e1b      	ldrb	r3, [r3, #24]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	f7ff fe09 	bl	800e7d8 <word>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    uint16_t *u16regs;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800ebca:	7b7b      	ldrb	r3, [r7, #13]
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    if (Database == DB_HOLDING_REGISTER)
 800ebdc:	78fb      	ldrb	r3, [r7, #3]
 800ebde:	2b03      	cmp	r3, #3
 800ebe0:	d104      	bne.n	800ebec <process_FC3+0x56>
    {
    	u16regs = modH->u16regsHR;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	e006      	b.n	800ebfa <process_FC3+0x64>
    }
    else if (Database == DB_INPUT_REGISTERS)
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	2b04      	cmp	r3, #4
 800ebf0:	d103      	bne.n	800ebfa <process_FC3+0x64>
    {
    	u16regs = modH->u16regsRO;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ebf8:	613b      	str	r3, [r7, #16]
    }

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ebfa:	89fb      	ldrh	r3, [r7, #14]
 800ebfc:	82fb      	strh	r3, [r7, #22]
 800ebfe:	e02e      	b.n	800ec5e <process_FC3+0xc8>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(u16regs[i]);
 800ec00:	8afb      	ldrh	r3, [r7, #22]
 800ec02:	005b      	lsls	r3, r3, #1
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	4413      	add	r3, r2
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	0a1b      	lsrs	r3, r3, #8
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec14:	4619      	mov	r1, r3
 800ec16:	b2d2      	uxtb	r2, r2
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	440b      	add	r3, r1
 800ec1c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec24:	3301      	adds	r3, #1
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(u16regs[i]);
 800ec2e:	8afb      	ldrh	r3, [r7, #22]
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	4413      	add	r3, r2
 800ec36:	881a      	ldrh	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec3e:	4619      	mov	r1, r3
 800ec40:	b2d2      	uxtb	r2, r2
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	440b      	add	r3, r1
 800ec46:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec4e:	3301      	adds	r3, #1
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800ec58:	8afb      	ldrh	r3, [r7, #22]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	82fb      	strh	r3, [r7, #22]
 800ec5e:	8afa      	ldrh	r2, [r7, #22]
 800ec60:	89f9      	ldrh	r1, [r7, #14]
 800ec62:	7b7b      	ldrb	r3, [r7, #13]
 800ec64:	440b      	add	r3, r1
 800ec66:	429a      	cmp	r2, r3
 800ec68:	dbca      	blt.n	800ec00 <process_FC3+0x6a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ec70:	3302      	adds	r3, #2
 800ec72:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff fe28 	bl	800e8ca <sendTxBuffer>

    return u8CopyBufferSize;
 800ec7a:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b084      	sub	sp, #16
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	7d5a      	ldrb	r2, [r3, #21]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	7d9b      	ldrb	r3, [r3, #22]
 800ec96:	4619      	mov	r1, r3
 800ec98:	4610      	mov	r0, r2
 800ec9a:	f7ff fd9d 	bl	800e7d8 <word>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800eca2:	89fb      	ldrh	r3, [r7, #14]
 800eca4:	091b      	lsrs	r3, r3, #4
 800eca6:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800eca8:	89fb      	ldrh	r3, [r7, #14]
 800ecaa:	b2db      	uxtb	r3, r3
 800ecac:	f003 030f 	and.w	r3, r3, #15
 800ecb0:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	7ddb      	ldrb	r3, [r3, #23]
 800ecb6:	2bff      	cmp	r3, #255	; 0xff
 800ecb8:	d115      	bne.n	800ece6 <process_FC5+0x60>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ecc0:	89bb      	ldrh	r3, [r7, #12]
 800ecc2:	005b      	lsls	r3, r3, #1
 800ecc4:	4413      	add	r3, r2
 800ecc6:	8819      	ldrh	r1, [r3, #0]
 800ecc8:	7afb      	ldrb	r3, [r7, #11]
 800ecca:	2201      	movs	r2, #1
 800eccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ecd8:	89bb      	ldrh	r3, [r7, #12]
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	4403      	add	r3, r0
 800ecde:	430a      	orrs	r2, r1
 800ece0:	b292      	uxth	r2, r2
 800ece2:	801a      	strh	r2, [r3, #0]
 800ece4:	e016      	b.n	800ed14 <process_FC5+0x8e>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ecec:	89bb      	ldrh	r3, [r7, #12]
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	4413      	add	r3, r2
 800ecf2:	8819      	ldrh	r1, [r3, #0]
 800ecf4:	7afb      	ldrb	r3, [r7, #11]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	43db      	mvns	r3, r3
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ed08:	89bb      	ldrh	r3, [r7, #12]
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	4403      	add	r3, r0
 800ed0e:	400a      	ands	r2, r1
 800ed10:	b292      	uxth	r2, r2
 800ed12:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2206      	movs	r2, #6
 800ed18:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ed22:	3302      	adds	r3, #2
 800ed24:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff fdcf 	bl	800e8ca <sendTxBuffer>

    return u8CopyBufferSize;
 800ed2c:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	7d5a      	ldrb	r2, [r3, #21]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7d9b      	ldrb	r3, [r3, #22]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7ff fd44 	bl	800e7d8 <word>
 800ed50:	4603      	mov	r3, r0
 800ed52:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	7dda      	ldrb	r2, [r3, #23]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	7e1b      	ldrb	r3, [r3, #24]
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7ff fd3a 	bl	800e7d8 <word>
 800ed64:	4603      	mov	r3, r0
 800ed66:	81bb      	strh	r3, [r7, #12]

    modH->u16regsHR[ u16add ] = u16val;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ed6e:	89fb      	ldrh	r3, [r7, #14]
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	89ba      	ldrh	r2, [r7, #12]
 800ed76:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2206      	movs	r2, #6
 800ed7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ed86:	3302      	adds	r3, #2
 800ed88:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff fd9d 	bl	800e8ca <sendTxBuffer>

    return u8CopyBufferSize;
 800ed90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	7d5a      	ldrb	r2, [r3, #21]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7d9b      	ldrb	r3, [r3, #22]
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7ff fd12 	bl	800e7d8 <word>
 800edb4:	4603      	mov	r3, r0
 800edb6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	7dda      	ldrb	r2, [r3, #23]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	7e1b      	ldrb	r3, [r3, #24]
 800edc0:	4619      	mov	r1, r3
 800edc2:	4610      	mov	r0, r2
 800edc4:	f7ff fd08 	bl	800e7d8 <word>
 800edc8:	4603      	mov	r3, r0
 800edca:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800edd0:	2307      	movs	r3, #7
 800edd2:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800edd4:	2300      	movs	r3, #0
 800edd6:	82bb      	strh	r3, [r7, #20]
 800edd8:	e058      	b.n	800ee8c <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 800edda:	8a7a      	ldrh	r2, [r7, #18]
 800eddc:	8abb      	ldrh	r3, [r7, #20]
 800edde:	4413      	add	r3, r2
 800ede0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 800ede2:	89bb      	ldrh	r3, [r7, #12]
 800ede4:	091b      	lsrs	r3, r3, #4
 800ede6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800ede8:	89bb      	ldrh	r3, [r7, #12]
 800edea:	b2db      	uxtb	r3, r3
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	4413      	add	r3, r2
 800edf8:	7cdb      	ldrb	r3, [r3, #19]
 800edfa:	461a      	mov	r2, r3
 800edfc:	7dbb      	ldrb	r3, [r7, #22]
 800edfe:	fa42 f303 	asr.w	r3, r2, r3
 800ee02:	f003 0301 	and.w	r3, r3, #1
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	bf14      	ite	ne
 800ee0a:	2301      	movne	r3, #1
 800ee0c:	2300      	moveq	r3, #0
 800ee0e:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 800ee10:	7a3b      	ldrb	r3, [r7, #8]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d015      	beq.n	800ee42 <process_FC15+0xa6>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ee1c:	897b      	ldrh	r3, [r7, #10]
 800ee1e:	005b      	lsls	r3, r3, #1
 800ee20:	4413      	add	r3, r2
 800ee22:	8819      	ldrh	r1, [r3, #0]
 800ee24:	7a7b      	ldrb	r3, [r7, #9]
 800ee26:	2201      	movs	r2, #1
 800ee28:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ee34:	897b      	ldrh	r3, [r7, #10]
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	4403      	add	r3, r0
 800ee3a:	430a      	orrs	r2, r1
 800ee3c:	b292      	uxth	r2, r2
 800ee3e:	801a      	strh	r2, [r3, #0]
 800ee40:	e016      	b.n	800ee70 <process_FC15+0xd4>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ee48:	897b      	ldrh	r3, [r7, #10]
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	4413      	add	r3, r2
 800ee4e:	8819      	ldrh	r1, [r3, #0]
 800ee50:	7a7b      	ldrb	r3, [r7, #9]
 800ee52:	2201      	movs	r2, #1
 800ee54:	fa02 f303 	lsl.w	r3, r2, r3
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	43db      	mvns	r3, r3
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800ee64:	897b      	ldrh	r3, [r7, #10]
 800ee66:	005b      	lsls	r3, r3, #1
 800ee68:	4403      	add	r3, r0
 800ee6a:	400a      	ands	r2, r1
 800ee6c:	b292      	uxth	r2, r2
 800ee6e:	801a      	strh	r2, [r3, #0]
            modH->u16regsCoils[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800ee70:	7dbb      	ldrb	r3, [r7, #22]
 800ee72:	3301      	adds	r3, #1
 800ee74:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800ee76:	7dbb      	ldrb	r3, [r7, #22]
 800ee78:	2b07      	cmp	r3, #7
 800ee7a:	d904      	bls.n	800ee86 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800ee80:	7dfb      	ldrb	r3, [r7, #23]
 800ee82:	3301      	adds	r3, #1
 800ee84:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800ee86:	8abb      	ldrh	r3, [r7, #20]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	82bb      	strh	r3, [r7, #20]
 800ee8c:	8aba      	ldrh	r2, [r7, #20]
 800ee8e:	8a3b      	ldrh	r3, [r7, #16]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d3a2      	bcc.n	800edda <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2206      	movs	r2, #6
 800ee98:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800eea2:	3302      	adds	r3, #2
 800eea4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f7ff fd0f 	bl	800e8ca <sendTxBuffer>
    return u8CopyBufferSize;
 800eeac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	7d5b      	ldrb	r3, [r3, #21]
 800eec4:	021b      	lsls	r3, r3, #8
 800eec6:	b21a      	sxth	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	7d9b      	ldrb	r3, [r3, #22]
 800eecc:	b21b      	sxth	r3, r3
 800eece:	4313      	orrs	r3, r2
 800eed0:	b21b      	sxth	r3, r3
 800eed2:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	7ddb      	ldrb	r3, [r3, #23]
 800eed8:	021b      	lsls	r3, r3, #8
 800eeda:	b21a      	sxth	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7e1b      	ldrb	r3, [r3, #24]
 800eee0:	b21b      	sxth	r3, r3
 800eee2:	4313      	orrs	r3, r2
 800eee4:	b21b      	sxth	r3, r3
 800eee6:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800eeee:	8a7b      	ldrh	r3, [r7, #18]
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2206      	movs	r2, #6
 800eefa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800eefe:	2300      	movs	r3, #0
 800ef00:	82fb      	strh	r3, [r7, #22]
 800ef02:	e01d      	b.n	800ef40 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800ef04:	8afb      	ldrh	r3, [r7, #22]
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	3307      	adds	r3, #7
        temp = word(
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800ef10:	8afb      	ldrh	r3, [r7, #22]
 800ef12:	3304      	adds	r3, #4
 800ef14:	005b      	lsls	r3, r3, #1
        temp = word(
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	4413      	add	r3, r2
 800ef1a:	7cdb      	ldrb	r3, [r3, #19]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	f7ff fc5b 	bl	800e7d8 <word>
 800ef22:	4603      	mov	r3, r0
 800ef24:	81fb      	strh	r3, [r7, #14]

        modH->u16regsHR[ u16StartAdd + i ] = temp;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ef2c:	8ab9      	ldrh	r1, [r7, #20]
 800ef2e:	8afb      	ldrh	r3, [r7, #22]
 800ef30:	440b      	add	r3, r1
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	4413      	add	r3, r2
 800ef36:	89fa      	ldrh	r2, [r7, #14]
 800ef38:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 800ef3a:	8afb      	ldrh	r3, [r7, #22]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	82fb      	strh	r3, [r7, #22]
 800ef40:	8afa      	ldrh	r2, [r7, #22]
 800ef42:	8a7b      	ldrh	r3, [r7, #18]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d3dd      	bcc.n	800ef04 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800ef4e:	3302      	adds	r3, #2
 800ef50:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7ff fcb9 	bl	800e8ca <sendTxBuffer>

    return u8CopyBufferSize;
 800ef58:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3718      	adds	r7, #24
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b086      	sub	sp, #24
 800ef68:	af02      	add	r7, sp, #8
 800ef6a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800ef70:	2300      	movs	r3, #0
 800ef72:	60fb      	str	r3, [r7, #12]
 800ef74:	e019      	b.n	800efaa <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 800ef76:	4a17      	ldr	r2, [pc, #92]	; (800efd4 <HAL_UART_TxCpltCallback+0x70>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d10e      	bne.n	800efa4 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800ef86:	4a13      	ldr	r2, [pc, #76]	; (800efd4 <HAL_UART_TxCpltCallback+0x70>)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ef92:	f107 0308 	add.w	r3, r7, #8
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	2300      	movs	r3, #0
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	f7fd facd 	bl	800c53c <xTaskGenericNotifyFromISR>
	   		break;
 800efa2:	e008      	b.n	800efb6 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3301      	adds	r3, #1
 800efa8:	60fb      	str	r3, [r7, #12]
 800efaa:	4b0b      	ldr	r3, [pc, #44]	; (800efd8 <HAL_UART_TxCpltCallback+0x74>)
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4293      	cmp	r3, r2
 800efb4:	dbdf      	blt.n	800ef76 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d007      	beq.n	800efcc <HAL_UART_TxCpltCallback+0x68>
 800efbc:	4b07      	ldr	r3, [pc, #28]	; (800efdc <HAL_UART_TxCpltCallback+0x78>)
 800efbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800efcc:	bf00      	nop
 800efce:	3710      	adds	r7, #16
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20002104 	.word	0x20002104
 800efd8:	2000210c 	.word	0x2000210c
 800efdc:	e000ed04 	.word	0xe000ed04

0800efe0 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800efe0:	b590      	push	{r4, r7, lr}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af02      	add	r7, sp, #8
 800efe6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800efe8:	2300      	movs	r3, #0
 800efea:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800efec:	2300      	movs	r3, #0
 800efee:	60fb      	str	r3, [r7, #12]
 800eff0:	e042      	b.n	800f078 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800eff2:	4a2d      	ldr	r2, [pc, #180]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	429a      	cmp	r2, r3
 800f000:	d137      	bne.n	800f072 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800f002:	4a29      	ldr	r2, [pc, #164]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f00a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d139      	bne.n	800f086 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800f012:	4a25      	ldr	r2, [pc, #148]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800f01e:	4922      	ldr	r1, [pc, #136]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f026:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f7fe fb95 	bl	800d75c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800f032:	4a1d      	ldr	r2, [pc, #116]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03a:	6858      	ldr	r0, [r3, #4]
 800f03c:	4a1a      	ldr	r2, [pc, #104]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f044:	33b8      	adds	r3, #184	; 0xb8
 800f046:	2201      	movs	r2, #1
 800f048:	4619      	mov	r1, r3
 800f04a:	f7f7 ff3f 	bl	8006ecc <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800f04e:	4a16      	ldr	r2, [pc, #88]	; (800f0a8 <HAL_UART_RxCpltCallback+0xc8>)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f056:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 800f05a:	f7fc fc53 	bl	800b904 <xTaskGetTickCountFromISR>
 800f05e:	4602      	mov	r2, r0
 800f060:	f107 0308 	add.w	r3, r7, #8
 800f064:	2100      	movs	r1, #0
 800f066:	9100      	str	r1, [sp, #0]
 800f068:	2107      	movs	r1, #7
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7fd fc3a 	bl	800c8e4 <xTimerGenericCommand>
    		}
    		break;
 800f070:	e009      	b.n	800f086 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3301      	adds	r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
 800f078:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <HAL_UART_RxCpltCallback+0xcc>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	461a      	mov	r2, r3
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	4293      	cmp	r3, r2
 800f082:	dbb6      	blt.n	800eff2 <HAL_UART_RxCpltCallback+0x12>
 800f084:	e000      	b.n	800f088 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 800f086:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d007      	beq.n	800f09e <HAL_UART_RxCpltCallback+0xbe>
 800f08e:	4b08      	ldr	r3, [pc, #32]	; (800f0b0 <HAL_UART_RxCpltCallback+0xd0>)
 800f090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	f3bf 8f4f 	dsb	sy
 800f09a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800f09e:	bf00      	nop
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd90      	pop	{r4, r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20002104 	.word	0x20002104
 800f0ac:	2000210c 	.word	0x2000210c
 800f0b0:	e000ed04 	.word	0xe000ed04

0800f0b4 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 800f0bc:	2300      	movs	r3, #0
 800f0be:	60fb      	str	r3, [r7, #12]
 800f0c0:	e041      	b.n	800f146 <HAL_UART_ErrorCallback+0x92>
 {
    	if (mHandlers[i]->port == huart  )
 800f0c2:	4a27      	ldr	r2, [pc, #156]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d136      	bne.n	800f140 <HAL_UART_ErrorCallback+0x8c>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f0d2:	4a23      	ldr	r2, [pc, #140]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0da:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	d138      	bne.n	800f154 <HAL_UART_ErrorCallback+0xa0>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f0e2:	e007      	b.n	800f0f4 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f0e4:	4a1e      	ldr	r2, [pc, #120]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7f7 ffb8 	bl	8007064 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f0f4:	4a1a      	ldr	r2, [pc, #104]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0fc:	6858      	ldr	r0, [r3, #4]
 800f0fe:	4a18      	ldr	r2, [pc, #96]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f106:	33d0      	adds	r3, #208	; 0xd0
 800f108:	2280      	movs	r2, #128	; 0x80
 800f10a:	4619      	mov	r1, r3
 800f10c:	f7fa fca1 	bl	8009a52 <HAL_UARTEx_ReceiveToIdle_DMA>
 800f110:	4603      	mov	r3, r0
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1e6      	bne.n	800f0e4 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f116:	4a12      	ldr	r2, [pc, #72]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	490d      	ldr	r1, [pc, #52]	; (800f160 <HAL_UART_ErrorCallback+0xac>)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f022 0204 	bic.w	r2, r2, #4
 800f13c:	601a      	str	r2, [r3, #0]

    		}

    		break;
 800f13e:	e009      	b.n	800f154 <HAL_UART_ErrorCallback+0xa0>
 for (i = 0; i < numberHandlers; i++ )
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3301      	adds	r3, #1
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	4b07      	ldr	r3, [pc, #28]	; (800f164 <HAL_UART_ErrorCallback+0xb0>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	461a      	mov	r2, r3
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	4293      	cmp	r3, r2
 800f150:	dbb7      	blt.n	800f0c2 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 800f152:	e000      	b.n	800f156 <HAL_UART_ErrorCallback+0xa2>
    		break;
 800f154:	bf00      	nop
}
 800f156:	bf00      	nop
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20002104 	.word	0x20002104
 800f164:	2000210c 	.word	0x2000210c

0800f168 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af02      	add	r7, sp, #8
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800f174:	2300      	movs	r3, #0
 800f176:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 800f178:	2300      	movs	r3, #0
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	e061      	b.n	800f242 <HAL_UARTEx_RxEventCallback+0xda>
	    {
	    	if (mHandlers[i]->port == huart  )
 800f17e:	4a3c      	ldr	r2, [pc, #240]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d156      	bne.n	800f23c <HAL_UARTEx_RxEventCallback+0xd4>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 800f18e:	4a38      	ldr	r2, [pc, #224]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f196:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d158      	bne.n	800f250 <HAL_UARTEx_RxEventCallback+0xe8>
	    		{
	    			if(Size) //check if we have received any byte
 800f19e:	887b      	ldrh	r3, [r7, #2]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d055      	beq.n	800f250 <HAL_UARTEx_RxEventCallback+0xe8>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 800f1a4:	4a32      	ldr	r2, [pc, #200]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1ac:	887a      	ldrh	r2, [r7, #2]
 800f1ae:	b2d2      	uxtb	r2, r2
 800f1b0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		    				mHandlers[i]->xBufferRX.overflow = false;
 800f1b4:	4a2e      	ldr	r2, [pc, #184]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f1c2:	e007      	b.n	800f1d4 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 800f1c4:	4a2a      	ldr	r2, [pc, #168]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7f7 ff48 	bl	8007064 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 800f1d4:	4a26      	ldr	r2, [pc, #152]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1dc:	6858      	ldr	r0, [r3, #4]
 800f1de:	4a24      	ldr	r2, [pc, #144]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1e6:	33d0      	adds	r3, #208	; 0xd0
 800f1e8:	2280      	movs	r2, #128	; 0x80
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	f7fa fc31 	bl	8009a52 <HAL_UARTEx_ReceiveToIdle_DMA>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e6      	bne.n	800f1c4 <HAL_UARTEx_RxEventCallback+0x5c>
		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 800f1f6:	4a1e      	ldr	r2, [pc, #120]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	4919      	ldr	r1, [pc, #100]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f022 0204 	bic.w	r2, r2, #4
 800f21c:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800f21e:	4a14      	ldr	r2, [pc, #80]	; (800f270 <HAL_UARTEx_RxEventCallback+0x108>)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f226:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f22a:	f107 0308 	add.w	r3, r7, #8
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	2300      	movs	r3, #0
 800f232:	2203      	movs	r2, #3
 800f234:	2100      	movs	r1, #0
 800f236:	f7fd f981 	bl	800c53c <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 800f23a:	e009      	b.n	800f250 <HAL_UARTEx_RxEventCallback+0xe8>
	    for (i = 0; i < numberHandlers; i++ )
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3301      	adds	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	4b0c      	ldr	r3, [pc, #48]	; (800f274 <HAL_UARTEx_RxEventCallback+0x10c>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	4293      	cmp	r3, r2
 800f24c:	db97      	blt.n	800f17e <HAL_UARTEx_RxEventCallback+0x16>
 800f24e:	e000      	b.n	800f252 <HAL_UARTEx_RxEventCallback+0xea>
	    		break;
 800f250:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <HAL_UARTEx_RxEventCallback+0x100>
 800f258:	4b07      	ldr	r3, [pc, #28]	; (800f278 <HAL_UARTEx_RxEventCallback+0x110>)
 800f25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	f3bf 8f6f 	isb	sy
}
 800f268:	bf00      	nop
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	20002104 	.word	0x20002104
 800f274:	2000210c 	.word	0x2000210c
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800f27c:	b480      	push	{r7}
 800f27e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800f280:	bf00      	nop
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
	...

0800f28c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af04      	add	r7, sp, #16
 800f292:	4603      	mov	r3, r0
 800f294:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800f296:	f04f 33ff 	mov.w	r3, #4294967295
 800f29a:	9302      	str	r3, [sp, #8]
 800f29c:	2301      	movs	r3, #1
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	1dfb      	adds	r3, r7, #7
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2178      	movs	r1, #120	; 0x78
 800f2aa:	4803      	ldr	r0, [pc, #12]	; (800f2b8 <ssd1306_WriteCommand+0x2c>)
 800f2ac:	f7f4 ff7e 	bl	80041ac <HAL_I2C_Mem_Write>
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	2000016c 	.word	0x2000016c

0800f2bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b086      	sub	sp, #24
 800f2c0:	af04      	add	r7, sp, #16
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ce:	9202      	str	r2, [sp, #8]
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	2240      	movs	r2, #64	; 0x40
 800f2da:	2178      	movs	r1, #120	; 0x78
 800f2dc:	4803      	ldr	r0, [pc, #12]	; (800f2ec <ssd1306_WriteData+0x30>)
 800f2de:	f7f4 ff65 	bl	80041ac <HAL_I2C_Mem_Write>
}
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	2000016c 	.word	0x2000016c

0800f2f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800f2f4:	f7ff ffc2 	bl	800f27c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800f2f8:	2064      	movs	r0, #100	; 0x64
 800f2fa:	f7f2 fc05 	bl	8001b08 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800f2fe:	2000      	movs	r0, #0
 800f300:	f000 f8c0 	bl	800f484 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800f304:	2020      	movs	r0, #32
 800f306:	f7ff ffc1 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7ff ffbe 	bl	800f28c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800f310:	20b0      	movs	r0, #176	; 0xb0
 800f312:	f7ff ffbb 	bl	800f28c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800f316:	20c8      	movs	r0, #200	; 0xc8
 800f318:	f7ff ffb8 	bl	800f28c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800f31c:	2000      	movs	r0, #0
 800f31e:	f7ff ffb5 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800f322:	2010      	movs	r0, #16
 800f324:	f7ff ffb2 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800f328:	2040      	movs	r0, #64	; 0x40
 800f32a:	f7ff ffaf 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800f32e:	20ff      	movs	r0, #255	; 0xff
 800f330:	f000 f894 	bl	800f45c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800f334:	20a1      	movs	r0, #161	; 0xa1
 800f336:	f7ff ffa9 	bl	800f28c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800f33a:	20a6      	movs	r0, #166	; 0xa6
 800f33c:	f7ff ffa6 	bl	800f28c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800f340:	20a8      	movs	r0, #168	; 0xa8
 800f342:	f7ff ffa3 	bl	800f28c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800f346:	203f      	movs	r0, #63	; 0x3f
 800f348:	f7ff ffa0 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800f34c:	20a4      	movs	r0, #164	; 0xa4
 800f34e:	f7ff ff9d 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800f352:	20d3      	movs	r0, #211	; 0xd3
 800f354:	f7ff ff9a 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800f358:	2000      	movs	r0, #0
 800f35a:	f7ff ff97 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800f35e:	20d5      	movs	r0, #213	; 0xd5
 800f360:	f7ff ff94 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800f364:	20f0      	movs	r0, #240	; 0xf0
 800f366:	f7ff ff91 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800f36a:	20d9      	movs	r0, #217	; 0xd9
 800f36c:	f7ff ff8e 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800f370:	2022      	movs	r0, #34	; 0x22
 800f372:	f7ff ff8b 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800f376:	20da      	movs	r0, #218	; 0xda
 800f378:	f7ff ff88 	bl	800f28c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800f37c:	2012      	movs	r0, #18
 800f37e:	f7ff ff85 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800f382:	20db      	movs	r0, #219	; 0xdb
 800f384:	f7ff ff82 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800f388:	2020      	movs	r0, #32
 800f38a:	f7ff ff7f 	bl	800f28c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800f38e:	208d      	movs	r0, #141	; 0x8d
 800f390:	f7ff ff7c 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800f394:	2014      	movs	r0, #20
 800f396:	f7ff ff79 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800f39a:	2001      	movs	r0, #1
 800f39c:	f000 f872 	bl	800f484 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	f000 f80f 	bl	800f3c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800f3a6:	f000 f831 	bl	800f40c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800f3aa:	4b05      	ldr	r3, [pc, #20]	; (800f3c0 <ssd1306_Init+0xd0>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800f3b0:	4b03      	ldr	r3, [pc, #12]	; (800f3c0 <ssd1306_Init+0xd0>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800f3b6:	4b02      	ldr	r3, [pc, #8]	; (800f3c0 <ssd1306_Init+0xd0>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	711a      	strb	r2, [r3, #4]
}
 800f3bc:	bf00      	nop
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	20002510 	.word	0x20002510

0800f3c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	60fb      	str	r3, [r7, #12]
 800f3d2:	e00d      	b.n	800f3f0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800f3d4:	79fb      	ldrb	r3, [r7, #7]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d101      	bne.n	800f3de <ssd1306_Fill+0x1a>
 800f3da:	2100      	movs	r1, #0
 800f3dc:	e000      	b.n	800f3e0 <ssd1306_Fill+0x1c>
 800f3de:	21ff      	movs	r1, #255	; 0xff
 800f3e0:	4a09      	ldr	r2, [pc, #36]	; (800f408 <ssd1306_Fill+0x44>)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	460a      	mov	r2, r1
 800f3e8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3f6:	d3ed      	bcc.n	800f3d4 <ssd1306_Fill+0x10>
    }
}
 800f3f8:	bf00      	nop
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20002110 	.word	0x20002110

0800f40c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f412:	2300      	movs	r3, #0
 800f414:	71fb      	strb	r3, [r7, #7]
 800f416:	e016      	b.n	800f446 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800f418:	79fb      	ldrb	r3, [r7, #7]
 800f41a:	3b50      	subs	r3, #80	; 0x50
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff ff34 	bl	800f28c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800f424:	2000      	movs	r0, #0
 800f426:	f7ff ff31 	bl	800f28c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800f42a:	2010      	movs	r0, #16
 800f42c:	f7ff ff2e 	bl	800f28c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	01db      	lsls	r3, r3, #7
 800f434:	4a08      	ldr	r2, [pc, #32]	; (800f458 <ssd1306_UpdateScreen+0x4c>)
 800f436:	4413      	add	r3, r2
 800f438:	2180      	movs	r1, #128	; 0x80
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7ff ff3e 	bl	800f2bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	3301      	adds	r3, #1
 800f444:	71fb      	strb	r3, [r7, #7]
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	2b07      	cmp	r3, #7
 800f44a:	d9e5      	bls.n	800f418 <ssd1306_UpdateScreen+0xc>
    }
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20002110 	.word	0x20002110

0800f45c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	4603      	mov	r3, r0
 800f464:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800f466:	2381      	movs	r3, #129	; 0x81
 800f468:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7ff ff0d 	bl	800f28c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ff09 	bl	800f28c <ssd1306_WriteCommand>
}
 800f47a:	bf00      	nop
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
	...

0800f484 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d005      	beq.n	800f4a0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800f494:	23af      	movs	r3, #175	; 0xaf
 800f496:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800f498:	4b08      	ldr	r3, [pc, #32]	; (800f4bc <ssd1306_SetDisplayOn+0x38>)
 800f49a:	2201      	movs	r2, #1
 800f49c:	715a      	strb	r2, [r3, #5]
 800f49e:	e004      	b.n	800f4aa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800f4a0:	23ae      	movs	r3, #174	; 0xae
 800f4a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800f4a4:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <ssd1306_SetDisplayOn+0x38>)
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff feed 	bl	800f28c <ssd1306_WriteCommand>
}
 800f4b2:	bf00      	nop
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	20002510 	.word	0x20002510

0800f4c0 <memset>:
 800f4c0:	4402      	add	r2, r0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d100      	bne.n	800f4ca <memset+0xa>
 800f4c8:	4770      	bx	lr
 800f4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ce:	e7f9      	b.n	800f4c4 <memset+0x4>

0800f4d0 <__libc_init_array>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	4d0d      	ldr	r5, [pc, #52]	; (800f508 <__libc_init_array+0x38>)
 800f4d4:	4c0d      	ldr	r4, [pc, #52]	; (800f50c <__libc_init_array+0x3c>)
 800f4d6:	1b64      	subs	r4, r4, r5
 800f4d8:	10a4      	asrs	r4, r4, #2
 800f4da:	2600      	movs	r6, #0
 800f4dc:	42a6      	cmp	r6, r4
 800f4de:	d109      	bne.n	800f4f4 <__libc_init_array+0x24>
 800f4e0:	4d0b      	ldr	r5, [pc, #44]	; (800f510 <__libc_init_array+0x40>)
 800f4e2:	4c0c      	ldr	r4, [pc, #48]	; (800f514 <__libc_init_array+0x44>)
 800f4e4:	f000 f826 	bl	800f534 <_init>
 800f4e8:	1b64      	subs	r4, r4, r5
 800f4ea:	10a4      	asrs	r4, r4, #2
 800f4ec:	2600      	movs	r6, #0
 800f4ee:	42a6      	cmp	r6, r4
 800f4f0:	d105      	bne.n	800f4fe <__libc_init_array+0x2e>
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4f8:	4798      	blx	r3
 800f4fa:	3601      	adds	r6, #1
 800f4fc:	e7ee      	b.n	800f4dc <__libc_init_array+0xc>
 800f4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f502:	4798      	blx	r3
 800f504:	3601      	adds	r6, #1
 800f506:	e7f2      	b.n	800f4ee <__libc_init_array+0x1e>
 800f508:	0800f7c4 	.word	0x0800f7c4
 800f50c:	0800f7c4 	.word	0x0800f7c4
 800f510:	0800f7c4 	.word	0x0800f7c4
 800f514:	0800f7c8 	.word	0x0800f7c8

0800f518 <memcpy>:
 800f518:	440a      	add	r2, r1
 800f51a:	4291      	cmp	r1, r2
 800f51c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f520:	d100      	bne.n	800f524 <memcpy+0xc>
 800f522:	4770      	bx	lr
 800f524:	b510      	push	{r4, lr}
 800f526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f52a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f52e:	4291      	cmp	r1, r2
 800f530:	d1f9      	bne.n	800f526 <memcpy+0xe>
 800f532:	bd10      	pop	{r4, pc}

0800f534 <_init>:
 800f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f536:	bf00      	nop
 800f538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f53a:	bc08      	pop	{r3}
 800f53c:	469e      	mov	lr, r3
 800f53e:	4770      	bx	lr

0800f540 <_fini>:
 800f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f542:	bf00      	nop
 800f544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f546:	bc08      	pop	{r3}
 800f548:	469e      	mov	lr, r3
 800f54a:	4770      	bx	lr
